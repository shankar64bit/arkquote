// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'test_report_local_datasource.dart';

// **************************************************************************
// MoorGenerator
// **************************************************************************

// ignore_for_file: type=lint
class TestReportLocalData extends DataClass
    implements Insertable<TestReportLocalData> {
  final DateTime lastUpdated;
  final int databaseID;
  final int id;
  final String client;
  final String customer;
  final String project;
  final int trNo;
  final DateTime testDate;
  TestReportLocalData(
      {@required this.lastUpdated,
      @required this.databaseID,
      @required this.id,
      @required this.client,
      this.customer,
      @required this.project,
      @required this.trNo,
      @required this.testDate});
  factory TestReportLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return TestReportLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      client: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}client']),
      customer: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}customer']),
      project: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}project']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      testDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}test_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || client != null) {
      map['client'] = Variable<String>(client);
    }
    if (!nullToAbsent || customer != null) {
      map['customer'] = Variable<String>(customer);
    }
    if (!nullToAbsent || project != null) {
      map['project'] = Variable<String>(project);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || testDate != null) {
      map['test_date'] = Variable<DateTime>(testDate);
    }
    return map;
  }

  TestReportLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return TestReportLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      client:
          client == null && nullToAbsent ? const Value.absent() : Value(client),
      customer: customer == null && nullToAbsent
          ? const Value.absent()
          : Value(customer),
      project: project == null && nullToAbsent
          ? const Value.absent()
          : Value(project),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      testDate: testDate == null && nullToAbsent
          ? const Value.absent()
          : Value(testDate),
    );
  }

  factory TestReportLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TestReportLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      client: serializer.fromJson<String>(json['client']),
      customer: serializer.fromJson<String>(json['customer']),
      project: serializer.fromJson<String>(json['project']),
      trNo: serializer.fromJson<int>(json['trNo']),
      testDate: serializer.fromJson<DateTime>(json['testDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'client': serializer.toJson<String>(client),
      'customer': serializer.toJson<String>(customer),
      'project': serializer.toJson<String>(project),
      'trNo': serializer.toJson<int>(trNo),
      'testDate': serializer.toJson<DateTime>(testDate),
    };
  }

  TestReportLocalData copyWith(
          {DateTime lastUpdated,
          int databaseID,
          int id,
          String client,
          String customer,
          String project,
          int trNo,
          DateTime testDate}) =>
      TestReportLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        client: client ?? this.client,
        customer: customer ?? this.customer,
        project: project ?? this.project,
        trNo: trNo ?? this.trNo,
        testDate: testDate ?? this.testDate,
      );
  @override
  String toString() {
    return (StringBuffer('TestReportLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('client: $client, ')
          ..write('customer: $customer, ')
          ..write('project: $project, ')
          ..write('trNo: $trNo, ')
          ..write('testDate: $testDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated, databaseID, id, client, customer, project, trNo, testDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TestReportLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.client == this.client &&
          other.customer == this.customer &&
          other.project == this.project &&
          other.trNo == this.trNo &&
          other.testDate == this.testDate);
}

class TestReportLocalDatasourceImplCompanion
    extends UpdateCompanion<TestReportLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> client;
  final Value<String> customer;
  final Value<String> project;
  final Value<int> trNo;
  final Value<DateTime> testDate;
  const TestReportLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.client = const Value.absent(),
    this.customer = const Value.absent(),
    this.project = const Value.absent(),
    this.trNo = const Value.absent(),
    this.testDate = const Value.absent(),
  });
  TestReportLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required int databaseID,
    this.id = const Value.absent(),
    @required String client,
    this.customer = const Value.absent(),
    @required String project,
    @required int trNo,
    this.testDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        client = Value(client),
        project = Value(project),
        trNo = Value(trNo);
  static Insertable<TestReportLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> client,
    Expression<String> customer,
    Expression<String> project,
    Expression<int> trNo,
    Expression<DateTime> testDate,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (client != null) 'client': client,
      if (customer != null) 'customer': customer,
      if (project != null) 'project': project,
      if (trNo != null) 'tr_no': trNo,
      if (testDate != null) 'test_date': testDate,
    });
  }

  TestReportLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<int> databaseID,
      Value<int> id,
      Value<String> client,
      Value<String> customer,
      Value<String> project,
      Value<int> trNo,
      Value<DateTime> testDate}) {
    return TestReportLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      client: client ?? this.client,
      customer: customer ?? this.customer,
      project: project ?? this.project,
      trNo: trNo ?? this.trNo,
      testDate: testDate ?? this.testDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (client.present) {
      map['client'] = Variable<String>(client.value);
    }
    if (customer.present) {
      map['customer'] = Variable<String>(customer.value);
    }
    if (project.present) {
      map['project'] = Variable<String>(project.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (testDate.present) {
      map['test_date'] = Variable<DateTime>(testDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TestReportLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('client: $client, ')
          ..write('customer: $customer, ')
          ..write('project: $project, ')
          ..write('trNo: $trNo, ')
          ..write('testDate: $testDate')
          ..write(')'))
        .toString();
  }
}

class $TestReportLocalDatasourceImplTable extends TestReportLocalDatasourceImpl
    with TableInfo<$TestReportLocalDatasourceImplTable, TestReportLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $TestReportLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _clientMeta = const VerificationMeta('client');
  GeneratedColumn<String> _client;
  @override
  GeneratedColumn<String> get client => _client ??= GeneratedColumn<String>(
      'client', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _customerMeta = const VerificationMeta('customer');
  GeneratedColumn<String> _customer;
  @override
  GeneratedColumn<String> get customer => _customer ??= GeneratedColumn<String>(
      'customer', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: false);
  final VerificationMeta _projectMeta = const VerificationMeta('project');
  GeneratedColumn<String> _project;
  @override
  GeneratedColumn<String> get project => _project ??= GeneratedColumn<String>(
      'project', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _testDateMeta = const VerificationMeta('testDate');
  GeneratedColumn<DateTime> _testDate;
  @override
  GeneratedColumn<DateTime> get testDate =>
      _testDate ??= GeneratedColumn<DateTime>('test_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns =>
      [lastUpdated, databaseID, id, client, customer, project, trNo, testDate];
  @override
  String get aliasedName => _alias ?? 'test_report_local_datasource_impl';
  @override
  String get actualTableName => 'test_report_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<TestReportLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('client')) {
      context.handle(_clientMeta,
          client.isAcceptableOrUnknown(data['client'], _clientMeta));
    } else if (isInserting) {
      context.missing(_clientMeta);
    }
    if (data.containsKey('customer')) {
      context.handle(_customerMeta,
          customer.isAcceptableOrUnknown(data['customer'], _customerMeta));
    }
    if (data.containsKey('project')) {
      context.handle(_projectMeta,
          project.isAcceptableOrUnknown(data['project'], _projectMeta));
    } else if (isInserting) {
      context.missing(_projectMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('test_date')) {
      context.handle(_testDateMeta,
          testDate.isAcceptableOrUnknown(data['test_date'], _testDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TestReportLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return TestReportLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TestReportLocalDatasourceImplTable createAlias(String alias) {
    return $TestReportLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class AcbLocalData extends DataClass implements Insertable<AcbLocalData> {
  final DateTime lastUpdated;
  final double motorVoltage;
  final double closeCoilTripVolt;
  final String TestedBy;
  final String VerifiedBy;
  final String WitnessedBy;
  final int databaseID;
  final int id;
  final String etype;
  final String designation;
  final String location;
  final String panel;
  final String make;
  final String type;
  final String serialNo;
  final int ratedSystemVoltage;
  final int ratedSystemCurrent;
  final int yom;
  final int noOfPoles;
  final int iecStandard;
  final int trNo;
  final DateTime dateOfTesting;
  final DateTime dueDateOfTesting;
  AcbLocalData(
      {@required this.lastUpdated,
      @required this.motorVoltage,
      @required this.closeCoilTripVolt,
      @required this.TestedBy,
      @required this.VerifiedBy,
      @required this.WitnessedBy,
      @required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.designation,
      @required this.location,
      @required this.panel,
      @required this.make,
      @required this.type,
      @required this.serialNo,
      @required this.ratedSystemVoltage,
      @required this.ratedSystemCurrent,
      @required this.yom,
      @required this.noOfPoles,
      @required this.iecStandard,
      @required this.trNo,
      @required this.dateOfTesting,
      @required this.dueDateOfTesting});
  factory AcbLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return AcbLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      motorVoltage: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}motor_voltage']),
      closeCoilTripVolt: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}close_coil_trip_volt']),
      TestedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      VerifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      type: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}type']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      ratedSystemVoltage: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}rated_system_voltage']),
      ratedSystemCurrent: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}rated_system_current']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      noOfPoles: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_poles']),
      iecStandard: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}iec_standard']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      dueDateOfTesting: const DateTimeType().mapFromDatabaseResponse(
          data['${effectivePrefix}due_date_of_testing']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || motorVoltage != null) {
      map['motor_voltage'] = Variable<double>(motorVoltage);
    }
    if (!nullToAbsent || closeCoilTripVolt != null) {
      map['close_coil_trip_volt'] = Variable<double>(closeCoilTripVolt);
    }
    if (!nullToAbsent || TestedBy != null) {
      map['tested_by'] = Variable<String>(TestedBy);
    }
    if (!nullToAbsent || VerifiedBy != null) {
      map['verified_by'] = Variable<String>(VerifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || ratedSystemVoltage != null) {
      map['rated_system_voltage'] = Variable<int>(ratedSystemVoltage);
    }
    if (!nullToAbsent || ratedSystemCurrent != null) {
      map['rated_system_current'] = Variable<int>(ratedSystemCurrent);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || noOfPoles != null) {
      map['no_of_poles'] = Variable<int>(noOfPoles);
    }
    if (!nullToAbsent || iecStandard != null) {
      map['iec_standard'] = Variable<int>(iecStandard);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || dueDateOfTesting != null) {
      map['due_date_of_testing'] = Variable<DateTime>(dueDateOfTesting);
    }
    return map;
  }

  AcbLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return AcbLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      motorVoltage: motorVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(motorVoltage),
      closeCoilTripVolt: closeCoilTripVolt == null && nullToAbsent
          ? const Value.absent()
          : Value(closeCoilTripVolt),
      TestedBy: TestedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(TestedBy),
      VerifiedBy: VerifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(VerifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      type: type == null && nullToAbsent ? const Value.absent() : Value(type),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      ratedSystemVoltage: ratedSystemVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedSystemVoltage),
      ratedSystemCurrent: ratedSystemCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedSystemCurrent),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      noOfPoles: noOfPoles == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfPoles),
      iecStandard: iecStandard == null && nullToAbsent
          ? const Value.absent()
          : Value(iecStandard),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      dueDateOfTesting: dueDateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dueDateOfTesting),
    );
  }

  factory AcbLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AcbLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      motorVoltage: serializer.fromJson<double>(json['motorVoltage']),
      closeCoilTripVolt: serializer.fromJson<double>(json['closeCoilTripVolt']),
      TestedBy: serializer.fromJson<String>(json['TestedBy']),
      VerifiedBy: serializer.fromJson<String>(json['VerifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      panel: serializer.fromJson<String>(json['panel']),
      make: serializer.fromJson<String>(json['make']),
      type: serializer.fromJson<String>(json['type']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      ratedSystemVoltage: serializer.fromJson<int>(json['ratedSystemVoltage']),
      ratedSystemCurrent: serializer.fromJson<int>(json['ratedSystemCurrent']),
      yom: serializer.fromJson<int>(json['yom']),
      noOfPoles: serializer.fromJson<int>(json['noOfPoles']),
      iecStandard: serializer.fromJson<int>(json['iecStandard']),
      trNo: serializer.fromJson<int>(json['trNo']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      dueDateOfTesting: serializer.fromJson<DateTime>(json['dueDateOfTesting']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'motorVoltage': serializer.toJson<double>(motorVoltage),
      'closeCoilTripVolt': serializer.toJson<double>(closeCoilTripVolt),
      'TestedBy': serializer.toJson<String>(TestedBy),
      'VerifiedBy': serializer.toJson<String>(VerifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'panel': serializer.toJson<String>(panel),
      'make': serializer.toJson<String>(make),
      'type': serializer.toJson<String>(type),
      'serialNo': serializer.toJson<String>(serialNo),
      'ratedSystemVoltage': serializer.toJson<int>(ratedSystemVoltage),
      'ratedSystemCurrent': serializer.toJson<int>(ratedSystemCurrent),
      'yom': serializer.toJson<int>(yom),
      'noOfPoles': serializer.toJson<int>(noOfPoles),
      'iecStandard': serializer.toJson<int>(iecStandard),
      'trNo': serializer.toJson<int>(trNo),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'dueDateOfTesting': serializer.toJson<DateTime>(dueDateOfTesting),
    };
  }

  AcbLocalData copyWith(
          {DateTime lastUpdated,
          double motorVoltage,
          double closeCoilTripVolt,
          String TestedBy,
          String VerifiedBy,
          String WitnessedBy,
          int databaseID,
          int id,
          String etype,
          String designation,
          String location,
          String panel,
          String make,
          String type,
          String serialNo,
          int ratedSystemVoltage,
          int ratedSystemCurrent,
          int yom,
          int noOfPoles,
          int iecStandard,
          int trNo,
          DateTime dateOfTesting,
          DateTime dueDateOfTesting}) =>
      AcbLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        motorVoltage: motorVoltage ?? this.motorVoltage,
        closeCoilTripVolt: closeCoilTripVolt ?? this.closeCoilTripVolt,
        TestedBy: TestedBy ?? this.TestedBy,
        VerifiedBy: VerifiedBy ?? this.VerifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        panel: panel ?? this.panel,
        make: make ?? this.make,
        type: type ?? this.type,
        serialNo: serialNo ?? this.serialNo,
        ratedSystemVoltage: ratedSystemVoltage ?? this.ratedSystemVoltage,
        ratedSystemCurrent: ratedSystemCurrent ?? this.ratedSystemCurrent,
        yom: yom ?? this.yom,
        noOfPoles: noOfPoles ?? this.noOfPoles,
        iecStandard: iecStandard ?? this.iecStandard,
        trNo: trNo ?? this.trNo,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        dueDateOfTesting: dueDateOfTesting ?? this.dueDateOfTesting,
      );
  @override
  String toString() {
    return (StringBuffer('AcbLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('motorVoltage: $motorVoltage, ')
          ..write('closeCoilTripVolt: $closeCoilTripVolt, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('type: $type, ')
          ..write('serialNo: $serialNo, ')
          ..write('ratedSystemVoltage: $ratedSystemVoltage, ')
          ..write('ratedSystemCurrent: $ratedSystemCurrent, ')
          ..write('yom: $yom, ')
          ..write('noOfPoles: $noOfPoles, ')
          ..write('iecStandard: $iecStandard, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('dueDateOfTesting: $dueDateOfTesting')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        lastUpdated,
        motorVoltage,
        closeCoilTripVolt,
        TestedBy,
        VerifiedBy,
        WitnessedBy,
        databaseID,
        id,
        etype,
        designation,
        location,
        panel,
        make,
        type,
        serialNo,
        ratedSystemVoltage,
        ratedSystemCurrent,
        yom,
        noOfPoles,
        iecStandard,
        trNo,
        dateOfTesting,
        dueDateOfTesting
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AcbLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.motorVoltage == this.motorVoltage &&
          other.closeCoilTripVolt == this.closeCoilTripVolt &&
          other.TestedBy == this.TestedBy &&
          other.VerifiedBy == this.VerifiedBy &&
          other.WitnessedBy == this.WitnessedBy &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.panel == this.panel &&
          other.make == this.make &&
          other.type == this.type &&
          other.serialNo == this.serialNo &&
          other.ratedSystemVoltage == this.ratedSystemVoltage &&
          other.ratedSystemCurrent == this.ratedSystemCurrent &&
          other.yom == this.yom &&
          other.noOfPoles == this.noOfPoles &&
          other.iecStandard == this.iecStandard &&
          other.trNo == this.trNo &&
          other.dateOfTesting == this.dateOfTesting &&
          other.dueDateOfTesting == this.dueDateOfTesting);
}

class AcbLocalDatasourceImplCompanion extends UpdateCompanion<AcbLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<double> motorVoltage;
  final Value<double> closeCoilTripVolt;
  final Value<String> TestedBy;
  final Value<String> VerifiedBy;
  final Value<String> WitnessedBy;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> panel;
  final Value<String> make;
  final Value<String> type;
  final Value<String> serialNo;
  final Value<int> ratedSystemVoltage;
  final Value<int> ratedSystemCurrent;
  final Value<int> yom;
  final Value<int> noOfPoles;
  final Value<int> iecStandard;
  final Value<int> trNo;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> dueDateOfTesting;
  const AcbLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.motorVoltage = const Value.absent(),
    this.closeCoilTripVolt = const Value.absent(),
    this.TestedBy = const Value.absent(),
    this.VerifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.panel = const Value.absent(),
    this.make = const Value.absent(),
    this.type = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.ratedSystemVoltage = const Value.absent(),
    this.ratedSystemCurrent = const Value.absent(),
    this.yom = const Value.absent(),
    this.noOfPoles = const Value.absent(),
    this.iecStandard = const Value.absent(),
    this.trNo = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.dueDateOfTesting = const Value.absent(),
  });
  AcbLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required double motorVoltage,
    @required double closeCoilTripVolt,
    @required String TestedBy,
    @required String VerifiedBy,
    @required String WitnessedBy,
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required String designation,
    @required String location,
    @required String panel,
    @required String make,
    @required String type,
    @required String serialNo,
    @required int ratedSystemVoltage,
    @required int ratedSystemCurrent,
    @required int yom,
    @required int noOfPoles,
    @required int iecStandard,
    @required int trNo,
    this.dateOfTesting = const Value.absent(),
    this.dueDateOfTesting = const Value.absent(),
  })  : motorVoltage = Value(motorVoltage),
        closeCoilTripVolt = Value(closeCoilTripVolt),
        TestedBy = Value(TestedBy),
        VerifiedBy = Value(VerifiedBy),
        WitnessedBy = Value(WitnessedBy),
        databaseID = Value(databaseID),
        etype = Value(etype),
        designation = Value(designation),
        location = Value(location),
        panel = Value(panel),
        make = Value(make),
        type = Value(type),
        serialNo = Value(serialNo),
        ratedSystemVoltage = Value(ratedSystemVoltage),
        ratedSystemCurrent = Value(ratedSystemCurrent),
        yom = Value(yom),
        noOfPoles = Value(noOfPoles),
        iecStandard = Value(iecStandard),
        trNo = Value(trNo);
  static Insertable<AcbLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<double> motorVoltage,
    Expression<double> closeCoilTripVolt,
    Expression<String> TestedBy,
    Expression<String> VerifiedBy,
    Expression<String> WitnessedBy,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> panel,
    Expression<String> make,
    Expression<String> type,
    Expression<String> serialNo,
    Expression<int> ratedSystemVoltage,
    Expression<int> ratedSystemCurrent,
    Expression<int> yom,
    Expression<int> noOfPoles,
    Expression<int> iecStandard,
    Expression<int> trNo,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> dueDateOfTesting,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (motorVoltage != null) 'motor_voltage': motorVoltage,
      if (closeCoilTripVolt != null) 'close_coil_trip_volt': closeCoilTripVolt,
      if (TestedBy != null) 'tested_by': TestedBy,
      if (VerifiedBy != null) 'verified_by': VerifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (panel != null) 'panel': panel,
      if (make != null) 'make': make,
      if (type != null) 'type': type,
      if (serialNo != null) 'serial_no': serialNo,
      if (ratedSystemVoltage != null)
        'rated_system_voltage': ratedSystemVoltage,
      if (ratedSystemCurrent != null)
        'rated_system_current': ratedSystemCurrent,
      if (yom != null) 'yom': yom,
      if (noOfPoles != null) 'no_of_poles': noOfPoles,
      if (iecStandard != null) 'iec_standard': iecStandard,
      if (trNo != null) 'tr_no': trNo,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (dueDateOfTesting != null) 'due_date_of_testing': dueDateOfTesting,
    });
  }

  AcbLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<double> motorVoltage,
      Value<double> closeCoilTripVolt,
      Value<String> TestedBy,
      Value<String> VerifiedBy,
      Value<String> WitnessedBy,
      Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<String> designation,
      Value<String> location,
      Value<String> panel,
      Value<String> make,
      Value<String> type,
      Value<String> serialNo,
      Value<int> ratedSystemVoltage,
      Value<int> ratedSystemCurrent,
      Value<int> yom,
      Value<int> noOfPoles,
      Value<int> iecStandard,
      Value<int> trNo,
      Value<DateTime> dateOfTesting,
      Value<DateTime> dueDateOfTesting}) {
    return AcbLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      motorVoltage: motorVoltage ?? this.motorVoltage,
      closeCoilTripVolt: closeCoilTripVolt ?? this.closeCoilTripVolt,
      TestedBy: TestedBy ?? this.TestedBy,
      VerifiedBy: VerifiedBy ?? this.VerifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      panel: panel ?? this.panel,
      make: make ?? this.make,
      type: type ?? this.type,
      serialNo: serialNo ?? this.serialNo,
      ratedSystemVoltage: ratedSystemVoltage ?? this.ratedSystemVoltage,
      ratedSystemCurrent: ratedSystemCurrent ?? this.ratedSystemCurrent,
      yom: yom ?? this.yom,
      noOfPoles: noOfPoles ?? this.noOfPoles,
      iecStandard: iecStandard ?? this.iecStandard,
      trNo: trNo ?? this.trNo,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      dueDateOfTesting: dueDateOfTesting ?? this.dueDateOfTesting,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (motorVoltage.present) {
      map['motor_voltage'] = Variable<double>(motorVoltage.value);
    }
    if (closeCoilTripVolt.present) {
      map['close_coil_trip_volt'] = Variable<double>(closeCoilTripVolt.value);
    }
    if (TestedBy.present) {
      map['tested_by'] = Variable<String>(TestedBy.value);
    }
    if (VerifiedBy.present) {
      map['verified_by'] = Variable<String>(VerifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (ratedSystemVoltage.present) {
      map['rated_system_voltage'] = Variable<int>(ratedSystemVoltage.value);
    }
    if (ratedSystemCurrent.present) {
      map['rated_system_current'] = Variable<int>(ratedSystemCurrent.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (noOfPoles.present) {
      map['no_of_poles'] = Variable<int>(noOfPoles.value);
    }
    if (iecStandard.present) {
      map['iec_standard'] = Variable<int>(iecStandard.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (dueDateOfTesting.present) {
      map['due_date_of_testing'] = Variable<DateTime>(dueDateOfTesting.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AcbLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('motorVoltage: $motorVoltage, ')
          ..write('closeCoilTripVolt: $closeCoilTripVolt, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('type: $type, ')
          ..write('serialNo: $serialNo, ')
          ..write('ratedSystemVoltage: $ratedSystemVoltage, ')
          ..write('ratedSystemCurrent: $ratedSystemCurrent, ')
          ..write('yom: $yom, ')
          ..write('noOfPoles: $noOfPoles, ')
          ..write('iecStandard: $iecStandard, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('dueDateOfTesting: $dueDateOfTesting')
          ..write(')'))
        .toString();
  }
}

class $AcbLocalDatasourceImplTable extends AcbLocalDatasourceImpl
    with TableInfo<$AcbLocalDatasourceImplTable, AcbLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $AcbLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _motorVoltageMeta =
      const VerificationMeta('motorVoltage');
  GeneratedColumn<double> _motorVoltage;
  @override
  GeneratedColumn<double> get motorVoltage => _motorVoltage ??=
      GeneratedColumn<double>('motor_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _closeCoilTripVoltMeta =
      const VerificationMeta('closeCoilTripVolt');
  GeneratedColumn<double> _closeCoilTripVolt;
  @override
  GeneratedColumn<double> get closeCoilTripVolt => _closeCoilTripVolt ??=
      GeneratedColumn<double>('close_coil_trip_volt', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _TestedByMeta = const VerificationMeta('TestedBy');
  GeneratedColumn<String> _TestedBy;
  @override
  GeneratedColumn<String> get TestedBy => _TestedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _VerifiedByMeta = const VerificationMeta('VerifiedBy');
  GeneratedColumn<String> _VerifiedBy;
  @override
  GeneratedColumn<String> get VerifiedBy =>
      _VerifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedColumn<String> _type;
  @override
  GeneratedColumn<String> get type => _type ??= GeneratedColumn<String>(
      'type', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratedSystemVoltageMeta =
      const VerificationMeta('ratedSystemVoltage');
  GeneratedColumn<int> _ratedSystemVoltage;
  @override
  GeneratedColumn<int> get ratedSystemVoltage => _ratedSystemVoltage ??=
      GeneratedColumn<int>('rated_system_voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedSystemCurrentMeta =
      const VerificationMeta('ratedSystemCurrent');
  GeneratedColumn<int> _ratedSystemCurrent;
  @override
  GeneratedColumn<int> get ratedSystemCurrent => _ratedSystemCurrent ??=
      GeneratedColumn<int>('rated_system_current', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _noOfPolesMeta = const VerificationMeta('noOfPoles');
  GeneratedColumn<int> _noOfPoles;
  @override
  GeneratedColumn<int> get noOfPoles =>
      _noOfPoles ??= GeneratedColumn<int>('no_of_poles', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _iecStandardMeta =
      const VerificationMeta('iecStandard');
  GeneratedColumn<int> _iecStandard;
  @override
  GeneratedColumn<int> get iecStandard =>
      _iecStandard ??= GeneratedColumn<int>('iec_standard', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _dueDateOfTestingMeta =
      const VerificationMeta('dueDateOfTesting');
  GeneratedColumn<DateTime> _dueDateOfTesting;
  @override
  GeneratedColumn<DateTime> get dueDateOfTesting => _dueDateOfTesting ??=
      GeneratedColumn<DateTime>('due_date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        motorVoltage,
        closeCoilTripVolt,
        TestedBy,
        VerifiedBy,
        WitnessedBy,
        databaseID,
        id,
        etype,
        designation,
        location,
        panel,
        make,
        type,
        serialNo,
        ratedSystemVoltage,
        ratedSystemCurrent,
        yom,
        noOfPoles,
        iecStandard,
        trNo,
        dateOfTesting,
        dueDateOfTesting
      ];
  @override
  String get aliasedName => _alias ?? 'acb_local_datasource_impl';
  @override
  String get actualTableName => 'acb_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<AcbLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('motor_voltage')) {
      context.handle(
          _motorVoltageMeta,
          motorVoltage.isAcceptableOrUnknown(
              data['motor_voltage'], _motorVoltageMeta));
    } else if (isInserting) {
      context.missing(_motorVoltageMeta);
    }
    if (data.containsKey('close_coil_trip_volt')) {
      context.handle(
          _closeCoilTripVoltMeta,
          closeCoilTripVolt.isAcceptableOrUnknown(
              data['close_coil_trip_volt'], _closeCoilTripVoltMeta));
    } else if (isInserting) {
      context.missing(_closeCoilTripVoltMeta);
    }
    if (data.containsKey('tested_by')) {
      context.handle(_TestedByMeta,
          TestedBy.isAcceptableOrUnknown(data['tested_by'], _TestedByMeta));
    } else if (isInserting) {
      context.missing(_TestedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _VerifiedByMeta,
          VerifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _VerifiedByMeta));
    } else if (isInserting) {
      context.missing(_VerifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    } else if (isInserting) {
      context.missing(_typeMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('rated_system_voltage')) {
      context.handle(
          _ratedSystemVoltageMeta,
          ratedSystemVoltage.isAcceptableOrUnknown(
              data['rated_system_voltage'], _ratedSystemVoltageMeta));
    } else if (isInserting) {
      context.missing(_ratedSystemVoltageMeta);
    }
    if (data.containsKey('rated_system_current')) {
      context.handle(
          _ratedSystemCurrentMeta,
          ratedSystemCurrent.isAcceptableOrUnknown(
              data['rated_system_current'], _ratedSystemCurrentMeta));
    } else if (isInserting) {
      context.missing(_ratedSystemCurrentMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('no_of_poles')) {
      context.handle(_noOfPolesMeta,
          noOfPoles.isAcceptableOrUnknown(data['no_of_poles'], _noOfPolesMeta));
    } else if (isInserting) {
      context.missing(_noOfPolesMeta);
    }
    if (data.containsKey('iec_standard')) {
      context.handle(
          _iecStandardMeta,
          iecStandard.isAcceptableOrUnknown(
              data['iec_standard'], _iecStandardMeta));
    } else if (isInserting) {
      context.missing(_iecStandardMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('due_date_of_testing')) {
      context.handle(
          _dueDateOfTestingMeta,
          dueDateOfTesting.isAcceptableOrUnknown(
              data['due_date_of_testing'], _dueDateOfTestingMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AcbLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return AcbLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $AcbLocalDatasourceImplTable createAlias(String alias) {
    return $AcbLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class AcbIrLocalData extends DataClass implements Insertable<AcbIrLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double ry;
  final double yb;
  final double br;
  final double rn;
  final double yn;
  final double bn;
  final double re;
  final double ye;
  final double be;
  final double ne;
  final double rR;
  final double yY;
  final double bB;
  final double nN;
  final double cb;
  final double cr;
  final double cy;
  AcbIrLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.ry,
      @required this.yb,
      @required this.br,
      @required this.rn,
      @required this.yn,
      @required this.bn,
      @required this.re,
      @required this.ye,
      @required this.be,
      @required this.ne,
      @required this.rR,
      @required this.yY,
      @required this.bB,
      @required this.nN,
      @required this.cb,
      @required this.cr,
      @required this.cy});
  factory AcbIrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return AcbIrLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      ry: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry']),
      yb: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb']),
      br: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br']),
      rn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rn']),
      yn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yn']),
      bn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bn']),
      re: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}re']),
      ye: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ye']),
      be: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}be']),
      ne: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ne']),
      rR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_r']),
      yY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_y']),
      bB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_b']),
      nN: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}n_n']),
      cb: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}cb']),
      cr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}cr']),
      cy: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}cy']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || ry != null) {
      map['ry'] = Variable<double>(ry);
    }
    if (!nullToAbsent || yb != null) {
      map['yb'] = Variable<double>(yb);
    }
    if (!nullToAbsent || br != null) {
      map['br'] = Variable<double>(br);
    }
    if (!nullToAbsent || rn != null) {
      map['rn'] = Variable<double>(rn);
    }
    if (!nullToAbsent || yn != null) {
      map['yn'] = Variable<double>(yn);
    }
    if (!nullToAbsent || bn != null) {
      map['bn'] = Variable<double>(bn);
    }
    if (!nullToAbsent || re != null) {
      map['re'] = Variable<double>(re);
    }
    if (!nullToAbsent || ye != null) {
      map['ye'] = Variable<double>(ye);
    }
    if (!nullToAbsent || be != null) {
      map['be'] = Variable<double>(be);
    }
    if (!nullToAbsent || ne != null) {
      map['ne'] = Variable<double>(ne);
    }
    if (!nullToAbsent || rR != null) {
      map['r_r'] = Variable<double>(rR);
    }
    if (!nullToAbsent || yY != null) {
      map['y_y'] = Variable<double>(yY);
    }
    if (!nullToAbsent || bB != null) {
      map['b_b'] = Variable<double>(bB);
    }
    if (!nullToAbsent || nN != null) {
      map['n_n'] = Variable<double>(nN);
    }
    if (!nullToAbsent || cb != null) {
      map['cb'] = Variable<double>(cb);
    }
    if (!nullToAbsent || cr != null) {
      map['cr'] = Variable<double>(cr);
    }
    if (!nullToAbsent || cy != null) {
      map['cy'] = Variable<double>(cy);
    }
    return map;
  }

  AcbIrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return AcbIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      ry: ry == null && nullToAbsent ? const Value.absent() : Value(ry),
      yb: yb == null && nullToAbsent ? const Value.absent() : Value(yb),
      br: br == null && nullToAbsent ? const Value.absent() : Value(br),
      rn: rn == null && nullToAbsent ? const Value.absent() : Value(rn),
      yn: yn == null && nullToAbsent ? const Value.absent() : Value(yn),
      bn: bn == null && nullToAbsent ? const Value.absent() : Value(bn),
      re: re == null && nullToAbsent ? const Value.absent() : Value(re),
      ye: ye == null && nullToAbsent ? const Value.absent() : Value(ye),
      be: be == null && nullToAbsent ? const Value.absent() : Value(be),
      ne: ne == null && nullToAbsent ? const Value.absent() : Value(ne),
      rR: rR == null && nullToAbsent ? const Value.absent() : Value(rR),
      yY: yY == null && nullToAbsent ? const Value.absent() : Value(yY),
      bB: bB == null && nullToAbsent ? const Value.absent() : Value(bB),
      nN: nN == null && nullToAbsent ? const Value.absent() : Value(nN),
      cb: cb == null && nullToAbsent ? const Value.absent() : Value(cb),
      cr: cr == null && nullToAbsent ? const Value.absent() : Value(cr),
      cy: cy == null && nullToAbsent ? const Value.absent() : Value(cy),
    );
  }

  factory AcbIrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AcbIrLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      ry: serializer.fromJson<double>(json['ry']),
      yb: serializer.fromJson<double>(json['yb']),
      br: serializer.fromJson<double>(json['br']),
      rn: serializer.fromJson<double>(json['rn']),
      yn: serializer.fromJson<double>(json['yn']),
      bn: serializer.fromJson<double>(json['bn']),
      re: serializer.fromJson<double>(json['re']),
      ye: serializer.fromJson<double>(json['ye']),
      be: serializer.fromJson<double>(json['be']),
      ne: serializer.fromJson<double>(json['ne']),
      rR: serializer.fromJson<double>(json['rR']),
      yY: serializer.fromJson<double>(json['yY']),
      bB: serializer.fromJson<double>(json['bB']),
      nN: serializer.fromJson<double>(json['nN']),
      cb: serializer.fromJson<double>(json['cb']),
      cr: serializer.fromJson<double>(json['cr']),
      cy: serializer.fromJson<double>(json['cy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'ry': serializer.toJson<double>(ry),
      'yb': serializer.toJson<double>(yb),
      'br': serializer.toJson<double>(br),
      'rn': serializer.toJson<double>(rn),
      'yn': serializer.toJson<double>(yn),
      'bn': serializer.toJson<double>(bn),
      're': serializer.toJson<double>(re),
      'ye': serializer.toJson<double>(ye),
      'be': serializer.toJson<double>(be),
      'ne': serializer.toJson<double>(ne),
      'rR': serializer.toJson<double>(rR),
      'yY': serializer.toJson<double>(yY),
      'bB': serializer.toJson<double>(bB),
      'nN': serializer.toJson<double>(nN),
      'cb': serializer.toJson<double>(cb),
      'cr': serializer.toJson<double>(cr),
      'cy': serializer.toJson<double>(cy),
    };
  }

  AcbIrLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double ry,
          double yb,
          double br,
          double rn,
          double yn,
          double bn,
          double re,
          double ye,
          double be,
          double ne,
          double rR,
          double yY,
          double bB,
          double nN,
          double cb,
          double cr,
          double cy}) =>
      AcbIrLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        ry: ry ?? this.ry,
        yb: yb ?? this.yb,
        br: br ?? this.br,
        rn: rn ?? this.rn,
        yn: yn ?? this.yn,
        bn: bn ?? this.bn,
        re: re ?? this.re,
        ye: ye ?? this.ye,
        be: be ?? this.be,
        ne: ne ?? this.ne,
        rR: rR ?? this.rR,
        yY: yY ?? this.yY,
        bB: bB ?? this.bB,
        nN: nN ?? this.nN,
        cb: cb ?? this.cb,
        cr: cr ?? this.cr,
        cy: cy ?? this.cy,
      );
  @override
  String toString() {
    return (StringBuffer('AcbIrLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('ry: $ry, ')
          ..write('yb: $yb, ')
          ..write('br: $br, ')
          ..write('rn: $rn, ')
          ..write('yn: $yn, ')
          ..write('bn: $bn, ')
          ..write('re: $re, ')
          ..write('ye: $ye, ')
          ..write('be: $be, ')
          ..write('ne: $ne, ')
          ..write('rR: $rR, ')
          ..write('yY: $yY, ')
          ..write('bB: $bB, ')
          ..write('nN: $nN, ')
          ..write('cb: $cb, ')
          ..write('cr: $cr, ')
          ..write('cy: $cy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        ry,
        yb,
        br,
        rn,
        yn,
        bn,
        re,
        ye,
        be,
        ne,
        rR,
        yY,
        bB,
        nN,
        cb,
        cr,
        cy
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AcbIrLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.ry == this.ry &&
          other.yb == this.yb &&
          other.br == this.br &&
          other.rn == this.rn &&
          other.yn == this.yn &&
          other.bn == this.bn &&
          other.re == this.re &&
          other.ye == this.ye &&
          other.be == this.be &&
          other.ne == this.ne &&
          other.rR == this.rR &&
          other.yY == this.yY &&
          other.bB == this.bB &&
          other.nN == this.nN &&
          other.cb == this.cb &&
          other.cr == this.cr &&
          other.cy == this.cy);
}

class AcbIrLocalDatasourceImplCompanion
    extends UpdateCompanion<AcbIrLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> ry;
  final Value<double> yb;
  final Value<double> br;
  final Value<double> rn;
  final Value<double> yn;
  final Value<double> bn;
  final Value<double> re;
  final Value<double> ye;
  final Value<double> be;
  final Value<double> ne;
  final Value<double> rR;
  final Value<double> yY;
  final Value<double> bB;
  final Value<double> nN;
  final Value<double> cb;
  final Value<double> cr;
  final Value<double> cy;
  const AcbIrLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.ry = const Value.absent(),
    this.yb = const Value.absent(),
    this.br = const Value.absent(),
    this.rn = const Value.absent(),
    this.yn = const Value.absent(),
    this.bn = const Value.absent(),
    this.re = const Value.absent(),
    this.ye = const Value.absent(),
    this.be = const Value.absent(),
    this.ne = const Value.absent(),
    this.rR = const Value.absent(),
    this.yY = const Value.absent(),
    this.bB = const Value.absent(),
    this.nN = const Value.absent(),
    this.cb = const Value.absent(),
    this.cr = const Value.absent(),
    this.cy = const Value.absent(),
  });
  AcbIrLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double ry,
    @required double yb,
    @required double br,
    @required double rn,
    @required double yn,
    @required double bn,
    @required double re,
    @required double ye,
    @required double be,
    @required double ne,
    @required double rR,
    @required double yY,
    @required double bB,
    @required double nN,
    @required double cb,
    @required double cr,
    @required double cy,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        ry = Value(ry),
        yb = Value(yb),
        br = Value(br),
        rn = Value(rn),
        yn = Value(yn),
        bn = Value(bn),
        re = Value(re),
        ye = Value(ye),
        be = Value(be),
        ne = Value(ne),
        rR = Value(rR),
        yY = Value(yY),
        bB = Value(bB),
        nN = Value(nN),
        cb = Value(cb),
        cr = Value(cr),
        cy = Value(cy);
  static Insertable<AcbIrLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> ry,
    Expression<double> yb,
    Expression<double> br,
    Expression<double> rn,
    Expression<double> yn,
    Expression<double> bn,
    Expression<double> re,
    Expression<double> ye,
    Expression<double> be,
    Expression<double> ne,
    Expression<double> rR,
    Expression<double> yY,
    Expression<double> bB,
    Expression<double> nN,
    Expression<double> cb,
    Expression<double> cr,
    Expression<double> cy,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (ry != null) 'ry': ry,
      if (yb != null) 'yb': yb,
      if (br != null) 'br': br,
      if (rn != null) 'rn': rn,
      if (yn != null) 'yn': yn,
      if (bn != null) 'bn': bn,
      if (re != null) 're': re,
      if (ye != null) 'ye': ye,
      if (be != null) 'be': be,
      if (ne != null) 'ne': ne,
      if (rR != null) 'r_r': rR,
      if (yY != null) 'y_y': yY,
      if (bB != null) 'b_b': bB,
      if (nN != null) 'n_n': nN,
      if (cb != null) 'cb': cb,
      if (cr != null) 'cr': cr,
      if (cy != null) 'cy': cy,
    });
  }

  AcbIrLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> ry,
      Value<double> yb,
      Value<double> br,
      Value<double> rn,
      Value<double> yn,
      Value<double> bn,
      Value<double> re,
      Value<double> ye,
      Value<double> be,
      Value<double> ne,
      Value<double> rR,
      Value<double> yY,
      Value<double> bB,
      Value<double> nN,
      Value<double> cb,
      Value<double> cr,
      Value<double> cy}) {
    return AcbIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      ry: ry ?? this.ry,
      yb: yb ?? this.yb,
      br: br ?? this.br,
      rn: rn ?? this.rn,
      yn: yn ?? this.yn,
      bn: bn ?? this.bn,
      re: re ?? this.re,
      ye: ye ?? this.ye,
      be: be ?? this.be,
      ne: ne ?? this.ne,
      rR: rR ?? this.rR,
      yY: yY ?? this.yY,
      bB: bB ?? this.bB,
      nN: nN ?? this.nN,
      cb: cb ?? this.cb,
      cr: cr ?? this.cr,
      cy: cy ?? this.cy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (ry.present) {
      map['ry'] = Variable<double>(ry.value);
    }
    if (yb.present) {
      map['yb'] = Variable<double>(yb.value);
    }
    if (br.present) {
      map['br'] = Variable<double>(br.value);
    }
    if (rn.present) {
      map['rn'] = Variable<double>(rn.value);
    }
    if (yn.present) {
      map['yn'] = Variable<double>(yn.value);
    }
    if (bn.present) {
      map['bn'] = Variable<double>(bn.value);
    }
    if (re.present) {
      map['re'] = Variable<double>(re.value);
    }
    if (ye.present) {
      map['ye'] = Variable<double>(ye.value);
    }
    if (be.present) {
      map['be'] = Variable<double>(be.value);
    }
    if (ne.present) {
      map['ne'] = Variable<double>(ne.value);
    }
    if (rR.present) {
      map['r_r'] = Variable<double>(rR.value);
    }
    if (yY.present) {
      map['y_y'] = Variable<double>(yY.value);
    }
    if (bB.present) {
      map['b_b'] = Variable<double>(bB.value);
    }
    if (nN.present) {
      map['n_n'] = Variable<double>(nN.value);
    }
    if (cb.present) {
      map['cb'] = Variable<double>(cb.value);
    }
    if (cr.present) {
      map['cr'] = Variable<double>(cr.value);
    }
    if (cy.present) {
      map['cy'] = Variable<double>(cy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AcbIrLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('ry: $ry, ')
          ..write('yb: $yb, ')
          ..write('br: $br, ')
          ..write('rn: $rn, ')
          ..write('yn: $yn, ')
          ..write('bn: $bn, ')
          ..write('re: $re, ')
          ..write('ye: $ye, ')
          ..write('be: $be, ')
          ..write('ne: $ne, ')
          ..write('rR: $rR, ')
          ..write('yY: $yY, ')
          ..write('bB: $bB, ')
          ..write('nN: $nN, ')
          ..write('cb: $cb, ')
          ..write('cr: $cr, ')
          ..write('cy: $cy')
          ..write(')'))
        .toString();
  }
}

class $AcbIrLocalDatasourceImplTable extends AcbIrLocalDatasourceImpl
    with TableInfo<$AcbIrLocalDatasourceImplTable, AcbIrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $AcbIrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ryMeta = const VerificationMeta('ry');
  GeneratedColumn<double> _ry;
  @override
  GeneratedColumn<double> get ry =>
      _ry ??= GeneratedColumn<double>('ry', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ybMeta = const VerificationMeta('yb');
  GeneratedColumn<double> _yb;
  @override
  GeneratedColumn<double> get yb =>
      _yb ??= GeneratedColumn<double>('yb', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _brMeta = const VerificationMeta('br');
  GeneratedColumn<double> _br;
  @override
  GeneratedColumn<double> get br =>
      _br ??= GeneratedColumn<double>('br', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rnMeta = const VerificationMeta('rn');
  GeneratedColumn<double> _rn;
  @override
  GeneratedColumn<double> get rn =>
      _rn ??= GeneratedColumn<double>('rn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ynMeta = const VerificationMeta('yn');
  GeneratedColumn<double> _yn;
  @override
  GeneratedColumn<double> get yn =>
      _yn ??= GeneratedColumn<double>('yn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bnMeta = const VerificationMeta('bn');
  GeneratedColumn<double> _bn;
  @override
  GeneratedColumn<double> get bn =>
      _bn ??= GeneratedColumn<double>('bn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _reMeta = const VerificationMeta('re');
  GeneratedColumn<double> _re;
  @override
  GeneratedColumn<double> get re =>
      _re ??= GeneratedColumn<double>('re', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yeMeta = const VerificationMeta('ye');
  GeneratedColumn<double> _ye;
  @override
  GeneratedColumn<double> get ye =>
      _ye ??= GeneratedColumn<double>('ye', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _beMeta = const VerificationMeta('be');
  GeneratedColumn<double> _be;
  @override
  GeneratedColumn<double> get be =>
      _be ??= GeneratedColumn<double>('be', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _neMeta = const VerificationMeta('ne');
  GeneratedColumn<double> _ne;
  @override
  GeneratedColumn<double> get ne =>
      _ne ??= GeneratedColumn<double>('ne', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rRMeta = const VerificationMeta('rR');
  GeneratedColumn<double> _rR;
  @override
  GeneratedColumn<double> get rR =>
      _rR ??= GeneratedColumn<double>('r_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yYMeta = const VerificationMeta('yY');
  GeneratedColumn<double> _yY;
  @override
  GeneratedColumn<double> get yY =>
      _yY ??= GeneratedColumn<double>('y_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bBMeta = const VerificationMeta('bB');
  GeneratedColumn<double> _bB;
  @override
  GeneratedColumn<double> get bB =>
      _bB ??= GeneratedColumn<double>('b_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _nNMeta = const VerificationMeta('nN');
  GeneratedColumn<double> _nN;
  @override
  GeneratedColumn<double> get nN =>
      _nN ??= GeneratedColumn<double>('n_n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _cbMeta = const VerificationMeta('cb');
  GeneratedColumn<double> _cb;
  @override
  GeneratedColumn<double> get cb =>
      _cb ??= GeneratedColumn<double>('cb', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _crMeta = const VerificationMeta('cr');
  GeneratedColumn<double> _cr;
  @override
  GeneratedColumn<double> get cr =>
      _cr ??= GeneratedColumn<double>('cr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _cyMeta = const VerificationMeta('cy');
  GeneratedColumn<double> _cy;
  @override
  GeneratedColumn<double> get cy =>
      _cy ??= GeneratedColumn<double>('cy', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        ry,
        yb,
        br,
        rn,
        yn,
        bn,
        re,
        ye,
        be,
        ne,
        rR,
        yY,
        bB,
        nN,
        cb,
        cr,
        cy
      ];
  @override
  String get aliasedName => _alias ?? 'acb_ir_local_datasource_impl';
  @override
  String get actualTableName => 'acb_ir_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<AcbIrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('ry')) {
      context.handle(_ryMeta, ry.isAcceptableOrUnknown(data['ry'], _ryMeta));
    } else if (isInserting) {
      context.missing(_ryMeta);
    }
    if (data.containsKey('yb')) {
      context.handle(_ybMeta, yb.isAcceptableOrUnknown(data['yb'], _ybMeta));
    } else if (isInserting) {
      context.missing(_ybMeta);
    }
    if (data.containsKey('br')) {
      context.handle(_brMeta, br.isAcceptableOrUnknown(data['br'], _brMeta));
    } else if (isInserting) {
      context.missing(_brMeta);
    }
    if (data.containsKey('rn')) {
      context.handle(_rnMeta, rn.isAcceptableOrUnknown(data['rn'], _rnMeta));
    } else if (isInserting) {
      context.missing(_rnMeta);
    }
    if (data.containsKey('yn')) {
      context.handle(_ynMeta, yn.isAcceptableOrUnknown(data['yn'], _ynMeta));
    } else if (isInserting) {
      context.missing(_ynMeta);
    }
    if (data.containsKey('bn')) {
      context.handle(_bnMeta, bn.isAcceptableOrUnknown(data['bn'], _bnMeta));
    } else if (isInserting) {
      context.missing(_bnMeta);
    }
    if (data.containsKey('re')) {
      context.handle(_reMeta, re.isAcceptableOrUnknown(data['re'], _reMeta));
    } else if (isInserting) {
      context.missing(_reMeta);
    }
    if (data.containsKey('ye')) {
      context.handle(_yeMeta, ye.isAcceptableOrUnknown(data['ye'], _yeMeta));
    } else if (isInserting) {
      context.missing(_yeMeta);
    }
    if (data.containsKey('be')) {
      context.handle(_beMeta, be.isAcceptableOrUnknown(data['be'], _beMeta));
    } else if (isInserting) {
      context.missing(_beMeta);
    }
    if (data.containsKey('ne')) {
      context.handle(_neMeta, ne.isAcceptableOrUnknown(data['ne'], _neMeta));
    } else if (isInserting) {
      context.missing(_neMeta);
    }
    if (data.containsKey('r_r')) {
      context.handle(_rRMeta, rR.isAcceptableOrUnknown(data['r_r'], _rRMeta));
    } else if (isInserting) {
      context.missing(_rRMeta);
    }
    if (data.containsKey('y_y')) {
      context.handle(_yYMeta, yY.isAcceptableOrUnknown(data['y_y'], _yYMeta));
    } else if (isInserting) {
      context.missing(_yYMeta);
    }
    if (data.containsKey('b_b')) {
      context.handle(_bBMeta, bB.isAcceptableOrUnknown(data['b_b'], _bBMeta));
    } else if (isInserting) {
      context.missing(_bBMeta);
    }
    if (data.containsKey('n_n')) {
      context.handle(_nNMeta, nN.isAcceptableOrUnknown(data['n_n'], _nNMeta));
    } else if (isInserting) {
      context.missing(_nNMeta);
    }
    if (data.containsKey('cb')) {
      context.handle(_cbMeta, cb.isAcceptableOrUnknown(data['cb'], _cbMeta));
    } else if (isInserting) {
      context.missing(_cbMeta);
    }
    if (data.containsKey('cr')) {
      context.handle(_crMeta, cr.isAcceptableOrUnknown(data['cr'], _crMeta));
    } else if (isInserting) {
      context.missing(_crMeta);
    }
    if (data.containsKey('cy')) {
      context.handle(_cyMeta, cy.isAcceptableOrUnknown(data['cy'], _cyMeta));
    } else if (isInserting) {
      context.missing(_cyMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AcbIrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return AcbIrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $AcbIrLocalDatasourceImplTable createAlias(String alias) {
    return $AcbIrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class AcbCrmLocalData extends DataClass implements Insertable<AcbCrmLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double rR;
  final double yY;
  final double bB;
  final double nN;
  AcbCrmLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.rR,
      @required this.yY,
      @required this.bB,
      @required this.nN});
  factory AcbCrmLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return AcbCrmLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      rR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_r']),
      yY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_y']),
      bB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_b']),
      nN: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}n_n']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || rR != null) {
      map['r_r'] = Variable<double>(rR);
    }
    if (!nullToAbsent || yY != null) {
      map['y_y'] = Variable<double>(yY);
    }
    if (!nullToAbsent || bB != null) {
      map['b_b'] = Variable<double>(bB);
    }
    if (!nullToAbsent || nN != null) {
      map['n_n'] = Variable<double>(nN);
    }
    return map;
  }

  AcbCrmLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return AcbCrmLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      rR: rR == null && nullToAbsent ? const Value.absent() : Value(rR),
      yY: yY == null && nullToAbsent ? const Value.absent() : Value(yY),
      bB: bB == null && nullToAbsent ? const Value.absent() : Value(bB),
      nN: nN == null && nullToAbsent ? const Value.absent() : Value(nN),
    );
  }

  factory AcbCrmLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AcbCrmLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      rR: serializer.fromJson<double>(json['rR']),
      yY: serializer.fromJson<double>(json['yY']),
      bB: serializer.fromJson<double>(json['bB']),
      nN: serializer.fromJson<double>(json['nN']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'rR': serializer.toJson<double>(rR),
      'yY': serializer.toJson<double>(yY),
      'bB': serializer.toJson<double>(bB),
      'nN': serializer.toJson<double>(nN),
    };
  }

  AcbCrmLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double rR,
          double yY,
          double bB,
          double nN}) =>
      AcbCrmLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        rR: rR ?? this.rR,
        yY: yY ?? this.yY,
        bB: bB ?? this.bB,
        nN: nN ?? this.nN,
      );
  @override
  String toString() {
    return (StringBuffer('AcbCrmLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rR: $rR, ')
          ..write('yY: $yY, ')
          ..write('bB: $bB, ')
          ..write('nN: $nN')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, serialNo, rR, yY, bB, nN);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AcbCrmLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.rR == this.rR &&
          other.yY == this.yY &&
          other.bB == this.bB &&
          other.nN == this.nN);
}

class AcbCrmLocalDatasourceImplCompanion
    extends UpdateCompanion<AcbCrmLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> rR;
  final Value<double> yY;
  final Value<double> bB;
  final Value<double> nN;
  const AcbCrmLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.rR = const Value.absent(),
    this.yY = const Value.absent(),
    this.bB = const Value.absent(),
    this.nN = const Value.absent(),
  });
  AcbCrmLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double rR,
    @required double yY,
    @required double bB,
    @required double nN,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        rR = Value(rR),
        yY = Value(yY),
        bB = Value(bB),
        nN = Value(nN);
  static Insertable<AcbCrmLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> rR,
    Expression<double> yY,
    Expression<double> bB,
    Expression<double> nN,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (rR != null) 'r_r': rR,
      if (yY != null) 'y_y': yY,
      if (bB != null) 'b_b': bB,
      if (nN != null) 'n_n': nN,
    });
  }

  AcbCrmLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> rR,
      Value<double> yY,
      Value<double> bB,
      Value<double> nN}) {
    return AcbCrmLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      rR: rR ?? this.rR,
      yY: yY ?? this.yY,
      bB: bB ?? this.bB,
      nN: nN ?? this.nN,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (rR.present) {
      map['r_r'] = Variable<double>(rR.value);
    }
    if (yY.present) {
      map['y_y'] = Variable<double>(yY.value);
    }
    if (bB.present) {
      map['b_b'] = Variable<double>(bB.value);
    }
    if (nN.present) {
      map['n_n'] = Variable<double>(nN.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AcbCrmLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rR: $rR, ')
          ..write('yY: $yY, ')
          ..write('bB: $bB, ')
          ..write('nN: $nN')
          ..write(')'))
        .toString();
  }
}

class $AcbCrmLocalDatasourceImplTable extends AcbCrmLocalDatasourceImpl
    with TableInfo<$AcbCrmLocalDatasourceImplTable, AcbCrmLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $AcbCrmLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rRMeta = const VerificationMeta('rR');
  GeneratedColumn<double> _rR;
  @override
  GeneratedColumn<double> get rR =>
      _rR ??= GeneratedColumn<double>('r_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yYMeta = const VerificationMeta('yY');
  GeneratedColumn<double> _yY;
  @override
  GeneratedColumn<double> get yY =>
      _yY ??= GeneratedColumn<double>('y_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bBMeta = const VerificationMeta('bB');
  GeneratedColumn<double> _bB;
  @override
  GeneratedColumn<double> get bB =>
      _bB ??= GeneratedColumn<double>('b_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _nNMeta = const VerificationMeta('nN');
  GeneratedColumn<double> _nN;
  @override
  GeneratedColumn<double> get nN =>
      _nN ??= GeneratedColumn<double>('n_n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        rR,
        yY,
        bB,
        nN
      ];
  @override
  String get aliasedName => _alias ?? 'acb_crm_local_datasource_impl';
  @override
  String get actualTableName => 'acb_crm_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<AcbCrmLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('r_r')) {
      context.handle(_rRMeta, rR.isAcceptableOrUnknown(data['r_r'], _rRMeta));
    } else if (isInserting) {
      context.missing(_rRMeta);
    }
    if (data.containsKey('y_y')) {
      context.handle(_yYMeta, yY.isAcceptableOrUnknown(data['y_y'], _yYMeta));
    } else if (isInserting) {
      context.missing(_yYMeta);
    }
    if (data.containsKey('b_b')) {
      context.handle(_bBMeta, bB.isAcceptableOrUnknown(data['b_b'], _bBMeta));
    } else if (isInserting) {
      context.missing(_bBMeta);
    }
    if (data.containsKey('n_n')) {
      context.handle(_nNMeta, nN.isAcceptableOrUnknown(data['n_n'], _nNMeta));
    } else if (isInserting) {
      context.missing(_nNMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AcbCrmLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return AcbCrmLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $AcbCrmLocalDatasourceImplTable createAlias(String alias) {
    return $AcbCrmLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class AcbCRLocalData extends DataClass implements Insertable<AcbCRLocalData> {
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double motorCoil;
  final double closeCoil;
  final double tripCoil;
  final DateTime lastUpdated;
  AcbCRLocalData(
      {@required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.motorCoil,
      @required this.closeCoil,
      @required this.tripCoil,
      @required this.lastUpdated});
  factory AcbCRLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return AcbCRLocalData(
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      motorCoil: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}motor_coil']),
      closeCoil: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}close_coil']),
      tripCoil: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}trip_coil']),
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || motorCoil != null) {
      map['motor_coil'] = Variable<double>(motorCoil);
    }
    if (!nullToAbsent || closeCoil != null) {
      map['close_coil'] = Variable<double>(closeCoil);
    }
    if (!nullToAbsent || tripCoil != null) {
      map['trip_coil'] = Variable<double>(tripCoil);
    }
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    return map;
  }

  AcbCRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return AcbCRLocalDatasourceImplCompanion(
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      motorCoil: motorCoil == null && nullToAbsent
          ? const Value.absent()
          : Value(motorCoil),
      closeCoil: closeCoil == null && nullToAbsent
          ? const Value.absent()
          : Value(closeCoil),
      tripCoil: tripCoil == null && nullToAbsent
          ? const Value.absent()
          : Value(tripCoil),
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
    );
  }

  factory AcbCRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AcbCRLocalData(
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      motorCoil: serializer.fromJson<double>(json['motorCoil']),
      closeCoil: serializer.fromJson<double>(json['closeCoil']),
      tripCoil: serializer.fromJson<double>(json['tripCoil']),
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'motorCoil': serializer.toJson<double>(motorCoil),
      'closeCoil': serializer.toJson<double>(closeCoil),
      'tripCoil': serializer.toJson<double>(tripCoil),
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
    };
  }

  AcbCRLocalData copyWith(
          {String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double motorCoil,
          double closeCoil,
          double tripCoil,
          DateTime lastUpdated}) =>
      AcbCRLocalData(
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        motorCoil: motorCoil ?? this.motorCoil,
        closeCoil: closeCoil ?? this.closeCoil,
        tripCoil: tripCoil ?? this.tripCoil,
        lastUpdated: lastUpdated ?? this.lastUpdated,
      );
  @override
  String toString() {
    return (StringBuffer('AcbCRLocalData(')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('motorCoil: $motorCoil, ')
          ..write('closeCoil: $closeCoil, ')
          ..write('tripCoil: $tripCoil, ')
          ..write('lastUpdated: $lastUpdated')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(EquipmentType, databaseID, id, trNo, serialNo,
      motorCoil, closeCoil, tripCoil, lastUpdated);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AcbCRLocalData &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.motorCoil == this.motorCoil &&
          other.closeCoil == this.closeCoil &&
          other.tripCoil == this.tripCoil &&
          other.lastUpdated == this.lastUpdated);
}

class AcbCRLocalDatasourceImplCompanion
    extends UpdateCompanion<AcbCRLocalData> {
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> motorCoil;
  final Value<double> closeCoil;
  final Value<double> tripCoil;
  final Value<DateTime> lastUpdated;
  const AcbCRLocalDatasourceImplCompanion({
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.motorCoil = const Value.absent(),
    this.closeCoil = const Value.absent(),
    this.tripCoil = const Value.absent(),
    this.lastUpdated = const Value.absent(),
  });
  AcbCRLocalDatasourceImplCompanion.insert({
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double motorCoil,
    @required double closeCoil,
    @required double tripCoil,
    this.lastUpdated = const Value.absent(),
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        motorCoil = Value(motorCoil),
        closeCoil = Value(closeCoil),
        tripCoil = Value(tripCoil);
  static Insertable<AcbCRLocalData> custom({
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> motorCoil,
    Expression<double> closeCoil,
    Expression<double> tripCoil,
    Expression<DateTime> lastUpdated,
  }) {
    return RawValuesInsertable({
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (motorCoil != null) 'motor_coil': motorCoil,
      if (closeCoil != null) 'close_coil': closeCoil,
      if (tripCoil != null) 'trip_coil': tripCoil,
      if (lastUpdated != null) 'last_updated': lastUpdated,
    });
  }

  AcbCRLocalDatasourceImplCompanion copyWith(
      {Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> motorCoil,
      Value<double> closeCoil,
      Value<double> tripCoil,
      Value<DateTime> lastUpdated}) {
    return AcbCRLocalDatasourceImplCompanion(
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      motorCoil: motorCoil ?? this.motorCoil,
      closeCoil: closeCoil ?? this.closeCoil,
      tripCoil: tripCoil ?? this.tripCoil,
      lastUpdated: lastUpdated ?? this.lastUpdated,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (motorCoil.present) {
      map['motor_coil'] = Variable<double>(motorCoil.value);
    }
    if (closeCoil.present) {
      map['close_coil'] = Variable<double>(closeCoil.value);
    }
    if (tripCoil.present) {
      map['trip_coil'] = Variable<double>(tripCoil.value);
    }
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AcbCRLocalDatasourceImplCompanion(')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('motorCoil: $motorCoil, ')
          ..write('closeCoil: $closeCoil, ')
          ..write('tripCoil: $tripCoil, ')
          ..write('lastUpdated: $lastUpdated')
          ..write(')'))
        .toString();
  }
}

class $AcbCRLocalDatasourceImplTable extends AcbCRLocalDatasourceImpl
    with TableInfo<$AcbCRLocalDatasourceImplTable, AcbCRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $AcbCRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _motorCoilMeta = const VerificationMeta('motorCoil');
  GeneratedColumn<double> _motorCoil;
  @override
  GeneratedColumn<double> get motorCoil =>
      _motorCoil ??= GeneratedColumn<double>('motor_coil', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _closeCoilMeta = const VerificationMeta('closeCoil');
  GeneratedColumn<double> _closeCoil;
  @override
  GeneratedColumn<double> get closeCoil =>
      _closeCoil ??= GeneratedColumn<double>('close_coil', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tripCoilMeta = const VerificationMeta('tripCoil');
  GeneratedColumn<double> _tripCoil;
  @override
  GeneratedColumn<double> get tripCoil =>
      _tripCoil ??= GeneratedColumn<double>('trip_coil', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        motorCoil,
        closeCoil,
        tripCoil,
        lastUpdated
      ];
  @override
  String get aliasedName => _alias ?? 'acb_c_r_local_datasource_impl';
  @override
  String get actualTableName => 'acb_c_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<AcbCRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('motor_coil')) {
      context.handle(_motorCoilMeta,
          motorCoil.isAcceptableOrUnknown(data['motor_coil'], _motorCoilMeta));
    } else if (isInserting) {
      context.missing(_motorCoilMeta);
    }
    if (data.containsKey('close_coil')) {
      context.handle(_closeCoilMeta,
          closeCoil.isAcceptableOrUnknown(data['close_coil'], _closeCoilMeta));
    } else if (isInserting) {
      context.missing(_closeCoilMeta);
    }
    if (data.containsKey('trip_coil')) {
      context.handle(_tripCoilMeta,
          tripCoil.isAcceptableOrUnknown(data['trip_coil'], _tripCoilMeta));
    } else if (isInserting) {
      context.missing(_tripCoilMeta);
    }
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AcbCRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return AcbCRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $AcbCRLocalDatasourceImplTable createAlias(String alias) {
    return $AcbCRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class VcbTimingLocalData extends DataClass
    implements Insertable<VcbTimingLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double closeR;
  final double closeY;
  final double closeB;
  final double tc1OpenR;
  final double tc1OpenY;
  final double tc1OpenB;
  final double tc1CloseR;
  final double tc1CloseY;
  final double tc1CloseB;
  final double tc2OpenY;
  final double tc2OpenR;
  final double tc2OpenB;
  final double tc2CloseR;
  final double tc2CloseY;
  final double tc2CloseB;
  VcbTimingLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.closeR,
      @required this.closeY,
      @required this.closeB,
      @required this.tc1OpenR,
      @required this.tc1OpenY,
      @required this.tc1OpenB,
      @required this.tc1CloseR,
      @required this.tc1CloseY,
      @required this.tc1CloseB,
      @required this.tc2OpenY,
      @required this.tc2OpenR,
      @required this.tc2OpenB,
      @required this.tc2CloseR,
      @required this.tc2CloseY,
      @required this.tc2CloseB});
  factory VcbTimingLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return VcbTimingLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      closeR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}close_r']),
      closeY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}close_y']),
      closeB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}close_b']),
      tc1OpenR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc1_open_r']),
      tc1OpenY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc1_open_y']),
      tc1OpenB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc1_open_b']),
      tc1CloseR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc1_close_r']),
      tc1CloseY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc1_close_y']),
      tc1CloseB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc1_close_b']),
      tc2OpenY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc2_open_y']),
      tc2OpenR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc2_open_r']),
      tc2OpenB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc2_open_b']),
      tc2CloseR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc2_close_r']),
      tc2CloseY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc2_close_y']),
      tc2CloseB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tc2_close_b']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || closeR != null) {
      map['close_r'] = Variable<double>(closeR);
    }
    if (!nullToAbsent || closeY != null) {
      map['close_y'] = Variable<double>(closeY);
    }
    if (!nullToAbsent || closeB != null) {
      map['close_b'] = Variable<double>(closeB);
    }
    if (!nullToAbsent || tc1OpenR != null) {
      map['tc1_open_r'] = Variable<double>(tc1OpenR);
    }
    if (!nullToAbsent || tc1OpenY != null) {
      map['tc1_open_y'] = Variable<double>(tc1OpenY);
    }
    if (!nullToAbsent || tc1OpenB != null) {
      map['tc1_open_b'] = Variable<double>(tc1OpenB);
    }
    if (!nullToAbsent || tc1CloseR != null) {
      map['tc1_close_r'] = Variable<double>(tc1CloseR);
    }
    if (!nullToAbsent || tc1CloseY != null) {
      map['tc1_close_y'] = Variable<double>(tc1CloseY);
    }
    if (!nullToAbsent || tc1CloseB != null) {
      map['tc1_close_b'] = Variable<double>(tc1CloseB);
    }
    if (!nullToAbsent || tc2OpenY != null) {
      map['tc2_open_y'] = Variable<double>(tc2OpenY);
    }
    if (!nullToAbsent || tc2OpenR != null) {
      map['tc2_open_r'] = Variable<double>(tc2OpenR);
    }
    if (!nullToAbsent || tc2OpenB != null) {
      map['tc2_open_b'] = Variable<double>(tc2OpenB);
    }
    if (!nullToAbsent || tc2CloseR != null) {
      map['tc2_close_r'] = Variable<double>(tc2CloseR);
    }
    if (!nullToAbsent || tc2CloseY != null) {
      map['tc2_close_y'] = Variable<double>(tc2CloseY);
    }
    if (!nullToAbsent || tc2CloseB != null) {
      map['tc2_close_b'] = Variable<double>(tc2CloseB);
    }
    return map;
  }

  VcbTimingLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return VcbTimingLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      closeR:
          closeR == null && nullToAbsent ? const Value.absent() : Value(closeR),
      closeY:
          closeY == null && nullToAbsent ? const Value.absent() : Value(closeY),
      closeB:
          closeB == null && nullToAbsent ? const Value.absent() : Value(closeB),
      tc1OpenR: tc1OpenR == null && nullToAbsent
          ? const Value.absent()
          : Value(tc1OpenR),
      tc1OpenY: tc1OpenY == null && nullToAbsent
          ? const Value.absent()
          : Value(tc1OpenY),
      tc1OpenB: tc1OpenB == null && nullToAbsent
          ? const Value.absent()
          : Value(tc1OpenB),
      tc1CloseR: tc1CloseR == null && nullToAbsent
          ? const Value.absent()
          : Value(tc1CloseR),
      tc1CloseY: tc1CloseY == null && nullToAbsent
          ? const Value.absent()
          : Value(tc1CloseY),
      tc1CloseB: tc1CloseB == null && nullToAbsent
          ? const Value.absent()
          : Value(tc1CloseB),
      tc2OpenY: tc2OpenY == null && nullToAbsent
          ? const Value.absent()
          : Value(tc2OpenY),
      tc2OpenR: tc2OpenR == null && nullToAbsent
          ? const Value.absent()
          : Value(tc2OpenR),
      tc2OpenB: tc2OpenB == null && nullToAbsent
          ? const Value.absent()
          : Value(tc2OpenB),
      tc2CloseR: tc2CloseR == null && nullToAbsent
          ? const Value.absent()
          : Value(tc2CloseR),
      tc2CloseY: tc2CloseY == null && nullToAbsent
          ? const Value.absent()
          : Value(tc2CloseY),
      tc2CloseB: tc2CloseB == null && nullToAbsent
          ? const Value.absent()
          : Value(tc2CloseB),
    );
  }

  factory VcbTimingLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return VcbTimingLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      closeR: serializer.fromJson<double>(json['closeR']),
      closeY: serializer.fromJson<double>(json['closeY']),
      closeB: serializer.fromJson<double>(json['closeB']),
      tc1OpenR: serializer.fromJson<double>(json['tc1OpenR']),
      tc1OpenY: serializer.fromJson<double>(json['tc1OpenY']),
      tc1OpenB: serializer.fromJson<double>(json['tc1OpenB']),
      tc1CloseR: serializer.fromJson<double>(json['tc1CloseR']),
      tc1CloseY: serializer.fromJson<double>(json['tc1CloseY']),
      tc1CloseB: serializer.fromJson<double>(json['tc1CloseB']),
      tc2OpenY: serializer.fromJson<double>(json['tc2OpenY']),
      tc2OpenR: serializer.fromJson<double>(json['tc2OpenR']),
      tc2OpenB: serializer.fromJson<double>(json['tc2OpenB']),
      tc2CloseR: serializer.fromJson<double>(json['tc2CloseR']),
      tc2CloseY: serializer.fromJson<double>(json['tc2CloseY']),
      tc2CloseB: serializer.fromJson<double>(json['tc2CloseB']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'closeR': serializer.toJson<double>(closeR),
      'closeY': serializer.toJson<double>(closeY),
      'closeB': serializer.toJson<double>(closeB),
      'tc1OpenR': serializer.toJson<double>(tc1OpenR),
      'tc1OpenY': serializer.toJson<double>(tc1OpenY),
      'tc1OpenB': serializer.toJson<double>(tc1OpenB),
      'tc1CloseR': serializer.toJson<double>(tc1CloseR),
      'tc1CloseY': serializer.toJson<double>(tc1CloseY),
      'tc1CloseB': serializer.toJson<double>(tc1CloseB),
      'tc2OpenY': serializer.toJson<double>(tc2OpenY),
      'tc2OpenR': serializer.toJson<double>(tc2OpenR),
      'tc2OpenB': serializer.toJson<double>(tc2OpenB),
      'tc2CloseR': serializer.toJson<double>(tc2CloseR),
      'tc2CloseY': serializer.toJson<double>(tc2CloseY),
      'tc2CloseB': serializer.toJson<double>(tc2CloseB),
    };
  }

  VcbTimingLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double closeR,
          double closeY,
          double closeB,
          double tc1OpenR,
          double tc1OpenY,
          double tc1OpenB,
          double tc1CloseR,
          double tc1CloseY,
          double tc1CloseB,
          double tc2OpenY,
          double tc2OpenR,
          double tc2OpenB,
          double tc2CloseR,
          double tc2CloseY,
          double tc2CloseB}) =>
      VcbTimingLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        closeR: closeR ?? this.closeR,
        closeY: closeY ?? this.closeY,
        closeB: closeB ?? this.closeB,
        tc1OpenR: tc1OpenR ?? this.tc1OpenR,
        tc1OpenY: tc1OpenY ?? this.tc1OpenY,
        tc1OpenB: tc1OpenB ?? this.tc1OpenB,
        tc1CloseR: tc1CloseR ?? this.tc1CloseR,
        tc1CloseY: tc1CloseY ?? this.tc1CloseY,
        tc1CloseB: tc1CloseB ?? this.tc1CloseB,
        tc2OpenY: tc2OpenY ?? this.tc2OpenY,
        tc2OpenR: tc2OpenR ?? this.tc2OpenR,
        tc2OpenB: tc2OpenB ?? this.tc2OpenB,
        tc2CloseR: tc2CloseR ?? this.tc2CloseR,
        tc2CloseY: tc2CloseY ?? this.tc2CloseY,
        tc2CloseB: tc2CloseB ?? this.tc2CloseB,
      );
  @override
  String toString() {
    return (StringBuffer('VcbTimingLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('closeR: $closeR, ')
          ..write('closeY: $closeY, ')
          ..write('closeB: $closeB, ')
          ..write('tc1OpenR: $tc1OpenR, ')
          ..write('tc1OpenY: $tc1OpenY, ')
          ..write('tc1OpenB: $tc1OpenB, ')
          ..write('tc1CloseR: $tc1CloseR, ')
          ..write('tc1CloseY: $tc1CloseY, ')
          ..write('tc1CloseB: $tc1CloseB, ')
          ..write('tc2OpenY: $tc2OpenY, ')
          ..write('tc2OpenR: $tc2OpenR, ')
          ..write('tc2OpenB: $tc2OpenB, ')
          ..write('tc2CloseR: $tc2CloseR, ')
          ..write('tc2CloseY: $tc2CloseY, ')
          ..write('tc2CloseB: $tc2CloseB')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        closeR,
        closeY,
        closeB,
        tc1OpenR,
        tc1OpenY,
        tc1OpenB,
        tc1CloseR,
        tc1CloseY,
        tc1CloseB,
        tc2OpenY,
        tc2OpenR,
        tc2OpenB,
        tc2CloseR,
        tc2CloseY,
        tc2CloseB
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is VcbTimingLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.closeR == this.closeR &&
          other.closeY == this.closeY &&
          other.closeB == this.closeB &&
          other.tc1OpenR == this.tc1OpenR &&
          other.tc1OpenY == this.tc1OpenY &&
          other.tc1OpenB == this.tc1OpenB &&
          other.tc1CloseR == this.tc1CloseR &&
          other.tc1CloseY == this.tc1CloseY &&
          other.tc1CloseB == this.tc1CloseB &&
          other.tc2OpenY == this.tc2OpenY &&
          other.tc2OpenR == this.tc2OpenR &&
          other.tc2OpenB == this.tc2OpenB &&
          other.tc2CloseR == this.tc2CloseR &&
          other.tc2CloseY == this.tc2CloseY &&
          other.tc2CloseB == this.tc2CloseB);
}

class VcbTimingLocalDatasourceImplCompanion
    extends UpdateCompanion<VcbTimingLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> closeR;
  final Value<double> closeY;
  final Value<double> closeB;
  final Value<double> tc1OpenR;
  final Value<double> tc1OpenY;
  final Value<double> tc1OpenB;
  final Value<double> tc1CloseR;
  final Value<double> tc1CloseY;
  final Value<double> tc1CloseB;
  final Value<double> tc2OpenY;
  final Value<double> tc2OpenR;
  final Value<double> tc2OpenB;
  final Value<double> tc2CloseR;
  final Value<double> tc2CloseY;
  final Value<double> tc2CloseB;
  const VcbTimingLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.closeR = const Value.absent(),
    this.closeY = const Value.absent(),
    this.closeB = const Value.absent(),
    this.tc1OpenR = const Value.absent(),
    this.tc1OpenY = const Value.absent(),
    this.tc1OpenB = const Value.absent(),
    this.tc1CloseR = const Value.absent(),
    this.tc1CloseY = const Value.absent(),
    this.tc1CloseB = const Value.absent(),
    this.tc2OpenY = const Value.absent(),
    this.tc2OpenR = const Value.absent(),
    this.tc2OpenB = const Value.absent(),
    this.tc2CloseR = const Value.absent(),
    this.tc2CloseY = const Value.absent(),
    this.tc2CloseB = const Value.absent(),
  });
  VcbTimingLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double closeR,
    @required double closeY,
    @required double closeB,
    @required double tc1OpenR,
    @required double tc1OpenY,
    @required double tc1OpenB,
    @required double tc1CloseR,
    @required double tc1CloseY,
    @required double tc1CloseB,
    @required double tc2OpenY,
    @required double tc2OpenR,
    @required double tc2OpenB,
    @required double tc2CloseR,
    @required double tc2CloseY,
    @required double tc2CloseB,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        closeR = Value(closeR),
        closeY = Value(closeY),
        closeB = Value(closeB),
        tc1OpenR = Value(tc1OpenR),
        tc1OpenY = Value(tc1OpenY),
        tc1OpenB = Value(tc1OpenB),
        tc1CloseR = Value(tc1CloseR),
        tc1CloseY = Value(tc1CloseY),
        tc1CloseB = Value(tc1CloseB),
        tc2OpenY = Value(tc2OpenY),
        tc2OpenR = Value(tc2OpenR),
        tc2OpenB = Value(tc2OpenB),
        tc2CloseR = Value(tc2CloseR),
        tc2CloseY = Value(tc2CloseY),
        tc2CloseB = Value(tc2CloseB);
  static Insertable<VcbTimingLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> closeR,
    Expression<double> closeY,
    Expression<double> closeB,
    Expression<double> tc1OpenR,
    Expression<double> tc1OpenY,
    Expression<double> tc1OpenB,
    Expression<double> tc1CloseR,
    Expression<double> tc1CloseY,
    Expression<double> tc1CloseB,
    Expression<double> tc2OpenY,
    Expression<double> tc2OpenR,
    Expression<double> tc2OpenB,
    Expression<double> tc2CloseR,
    Expression<double> tc2CloseY,
    Expression<double> tc2CloseB,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (closeR != null) 'close_r': closeR,
      if (closeY != null) 'close_y': closeY,
      if (closeB != null) 'close_b': closeB,
      if (tc1OpenR != null) 'tc1_open_r': tc1OpenR,
      if (tc1OpenY != null) 'tc1_open_y': tc1OpenY,
      if (tc1OpenB != null) 'tc1_open_b': tc1OpenB,
      if (tc1CloseR != null) 'tc1_close_r': tc1CloseR,
      if (tc1CloseY != null) 'tc1_close_y': tc1CloseY,
      if (tc1CloseB != null) 'tc1_close_b': tc1CloseB,
      if (tc2OpenY != null) 'tc2_open_y': tc2OpenY,
      if (tc2OpenR != null) 'tc2_open_r': tc2OpenR,
      if (tc2OpenB != null) 'tc2_open_b': tc2OpenB,
      if (tc2CloseR != null) 'tc2_close_r': tc2CloseR,
      if (tc2CloseY != null) 'tc2_close_y': tc2CloseY,
      if (tc2CloseB != null) 'tc2_close_b': tc2CloseB,
    });
  }

  VcbTimingLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> closeR,
      Value<double> closeY,
      Value<double> closeB,
      Value<double> tc1OpenR,
      Value<double> tc1OpenY,
      Value<double> tc1OpenB,
      Value<double> tc1CloseR,
      Value<double> tc1CloseY,
      Value<double> tc1CloseB,
      Value<double> tc2OpenY,
      Value<double> tc2OpenR,
      Value<double> tc2OpenB,
      Value<double> tc2CloseR,
      Value<double> tc2CloseY,
      Value<double> tc2CloseB}) {
    return VcbTimingLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      closeR: closeR ?? this.closeR,
      closeY: closeY ?? this.closeY,
      closeB: closeB ?? this.closeB,
      tc1OpenR: tc1OpenR ?? this.tc1OpenR,
      tc1OpenY: tc1OpenY ?? this.tc1OpenY,
      tc1OpenB: tc1OpenB ?? this.tc1OpenB,
      tc1CloseR: tc1CloseR ?? this.tc1CloseR,
      tc1CloseY: tc1CloseY ?? this.tc1CloseY,
      tc1CloseB: tc1CloseB ?? this.tc1CloseB,
      tc2OpenY: tc2OpenY ?? this.tc2OpenY,
      tc2OpenR: tc2OpenR ?? this.tc2OpenR,
      tc2OpenB: tc2OpenB ?? this.tc2OpenB,
      tc2CloseR: tc2CloseR ?? this.tc2CloseR,
      tc2CloseY: tc2CloseY ?? this.tc2CloseY,
      tc2CloseB: tc2CloseB ?? this.tc2CloseB,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (closeR.present) {
      map['close_r'] = Variable<double>(closeR.value);
    }
    if (closeY.present) {
      map['close_y'] = Variable<double>(closeY.value);
    }
    if (closeB.present) {
      map['close_b'] = Variable<double>(closeB.value);
    }
    if (tc1OpenR.present) {
      map['tc1_open_r'] = Variable<double>(tc1OpenR.value);
    }
    if (tc1OpenY.present) {
      map['tc1_open_y'] = Variable<double>(tc1OpenY.value);
    }
    if (tc1OpenB.present) {
      map['tc1_open_b'] = Variable<double>(tc1OpenB.value);
    }
    if (tc1CloseR.present) {
      map['tc1_close_r'] = Variable<double>(tc1CloseR.value);
    }
    if (tc1CloseY.present) {
      map['tc1_close_y'] = Variable<double>(tc1CloseY.value);
    }
    if (tc1CloseB.present) {
      map['tc1_close_b'] = Variable<double>(tc1CloseB.value);
    }
    if (tc2OpenY.present) {
      map['tc2_open_y'] = Variable<double>(tc2OpenY.value);
    }
    if (tc2OpenR.present) {
      map['tc2_open_r'] = Variable<double>(tc2OpenR.value);
    }
    if (tc2OpenB.present) {
      map['tc2_open_b'] = Variable<double>(tc2OpenB.value);
    }
    if (tc2CloseR.present) {
      map['tc2_close_r'] = Variable<double>(tc2CloseR.value);
    }
    if (tc2CloseY.present) {
      map['tc2_close_y'] = Variable<double>(tc2CloseY.value);
    }
    if (tc2CloseB.present) {
      map['tc2_close_b'] = Variable<double>(tc2CloseB.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('VcbTimingLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('closeR: $closeR, ')
          ..write('closeY: $closeY, ')
          ..write('closeB: $closeB, ')
          ..write('tc1OpenR: $tc1OpenR, ')
          ..write('tc1OpenY: $tc1OpenY, ')
          ..write('tc1OpenB: $tc1OpenB, ')
          ..write('tc1CloseR: $tc1CloseR, ')
          ..write('tc1CloseY: $tc1CloseY, ')
          ..write('tc1CloseB: $tc1CloseB, ')
          ..write('tc2OpenY: $tc2OpenY, ')
          ..write('tc2OpenR: $tc2OpenR, ')
          ..write('tc2OpenB: $tc2OpenB, ')
          ..write('tc2CloseR: $tc2CloseR, ')
          ..write('tc2CloseY: $tc2CloseY, ')
          ..write('tc2CloseB: $tc2CloseB')
          ..write(')'))
        .toString();
  }
}

class $VcbTimingLocalDatasourceImplTable extends VcbTimingLocalDatasourceImpl
    with TableInfo<$VcbTimingLocalDatasourceImplTable, VcbTimingLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $VcbTimingLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _closeRMeta = const VerificationMeta('closeR');
  GeneratedColumn<double> _closeR;
  @override
  GeneratedColumn<double> get closeR =>
      _closeR ??= GeneratedColumn<double>('close_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _closeYMeta = const VerificationMeta('closeY');
  GeneratedColumn<double> _closeY;
  @override
  GeneratedColumn<double> get closeY =>
      _closeY ??= GeneratedColumn<double>('close_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _closeBMeta = const VerificationMeta('closeB');
  GeneratedColumn<double> _closeB;
  @override
  GeneratedColumn<double> get closeB =>
      _closeB ??= GeneratedColumn<double>('close_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc1OpenRMeta = const VerificationMeta('tc1OpenR');
  GeneratedColumn<double> _tc1OpenR;
  @override
  GeneratedColumn<double> get tc1OpenR =>
      _tc1OpenR ??= GeneratedColumn<double>('tc1_open_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc1OpenYMeta = const VerificationMeta('tc1OpenY');
  GeneratedColumn<double> _tc1OpenY;
  @override
  GeneratedColumn<double> get tc1OpenY =>
      _tc1OpenY ??= GeneratedColumn<double>('tc1_open_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc1OpenBMeta = const VerificationMeta('tc1OpenB');
  GeneratedColumn<double> _tc1OpenB;
  @override
  GeneratedColumn<double> get tc1OpenB =>
      _tc1OpenB ??= GeneratedColumn<double>('tc1_open_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc1CloseRMeta = const VerificationMeta('tc1CloseR');
  GeneratedColumn<double> _tc1CloseR;
  @override
  GeneratedColumn<double> get tc1CloseR =>
      _tc1CloseR ??= GeneratedColumn<double>('tc1_close_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc1CloseYMeta = const VerificationMeta('tc1CloseY');
  GeneratedColumn<double> _tc1CloseY;
  @override
  GeneratedColumn<double> get tc1CloseY =>
      _tc1CloseY ??= GeneratedColumn<double>('tc1_close_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc1CloseBMeta = const VerificationMeta('tc1CloseB');
  GeneratedColumn<double> _tc1CloseB;
  @override
  GeneratedColumn<double> get tc1CloseB =>
      _tc1CloseB ??= GeneratedColumn<double>('tc1_close_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc2OpenYMeta = const VerificationMeta('tc2OpenY');
  GeneratedColumn<double> _tc2OpenY;
  @override
  GeneratedColumn<double> get tc2OpenY =>
      _tc2OpenY ??= GeneratedColumn<double>('tc2_open_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc2OpenRMeta = const VerificationMeta('tc2OpenR');
  GeneratedColumn<double> _tc2OpenR;
  @override
  GeneratedColumn<double> get tc2OpenR =>
      _tc2OpenR ??= GeneratedColumn<double>('tc2_open_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc2OpenBMeta = const VerificationMeta('tc2OpenB');
  GeneratedColumn<double> _tc2OpenB;
  @override
  GeneratedColumn<double> get tc2OpenB =>
      _tc2OpenB ??= GeneratedColumn<double>('tc2_open_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc2CloseRMeta = const VerificationMeta('tc2CloseR');
  GeneratedColumn<double> _tc2CloseR;
  @override
  GeneratedColumn<double> get tc2CloseR =>
      _tc2CloseR ??= GeneratedColumn<double>('tc2_close_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc2CloseYMeta = const VerificationMeta('tc2CloseY');
  GeneratedColumn<double> _tc2CloseY;
  @override
  GeneratedColumn<double> get tc2CloseY =>
      _tc2CloseY ??= GeneratedColumn<double>('tc2_close_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tc2CloseBMeta = const VerificationMeta('tc2CloseB');
  GeneratedColumn<double> _tc2CloseB;
  @override
  GeneratedColumn<double> get tc2CloseB =>
      _tc2CloseB ??= GeneratedColumn<double>('tc2_close_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        closeR,
        closeY,
        closeB,
        tc1OpenR,
        tc1OpenY,
        tc1OpenB,
        tc1CloseR,
        tc1CloseY,
        tc1CloseB,
        tc2OpenY,
        tc2OpenR,
        tc2OpenB,
        tc2CloseR,
        tc2CloseY,
        tc2CloseB
      ];
  @override
  String get aliasedName => _alias ?? 'vcb_timing_local_datasource_impl';
  @override
  String get actualTableName => 'vcb_timing_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<VcbTimingLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('close_r')) {
      context.handle(_closeRMeta,
          closeR.isAcceptableOrUnknown(data['close_r'], _closeRMeta));
    } else if (isInserting) {
      context.missing(_closeRMeta);
    }
    if (data.containsKey('close_y')) {
      context.handle(_closeYMeta,
          closeY.isAcceptableOrUnknown(data['close_y'], _closeYMeta));
    } else if (isInserting) {
      context.missing(_closeYMeta);
    }
    if (data.containsKey('close_b')) {
      context.handle(_closeBMeta,
          closeB.isAcceptableOrUnknown(data['close_b'], _closeBMeta));
    } else if (isInserting) {
      context.missing(_closeBMeta);
    }
    if (data.containsKey('tc1_open_r')) {
      context.handle(_tc1OpenRMeta,
          tc1OpenR.isAcceptableOrUnknown(data['tc1_open_r'], _tc1OpenRMeta));
    } else if (isInserting) {
      context.missing(_tc1OpenRMeta);
    }
    if (data.containsKey('tc1_open_y')) {
      context.handle(_tc1OpenYMeta,
          tc1OpenY.isAcceptableOrUnknown(data['tc1_open_y'], _tc1OpenYMeta));
    } else if (isInserting) {
      context.missing(_tc1OpenYMeta);
    }
    if (data.containsKey('tc1_open_b')) {
      context.handle(_tc1OpenBMeta,
          tc1OpenB.isAcceptableOrUnknown(data['tc1_open_b'], _tc1OpenBMeta));
    } else if (isInserting) {
      context.missing(_tc1OpenBMeta);
    }
    if (data.containsKey('tc1_close_r')) {
      context.handle(_tc1CloseRMeta,
          tc1CloseR.isAcceptableOrUnknown(data['tc1_close_r'], _tc1CloseRMeta));
    } else if (isInserting) {
      context.missing(_tc1CloseRMeta);
    }
    if (data.containsKey('tc1_close_y')) {
      context.handle(_tc1CloseYMeta,
          tc1CloseY.isAcceptableOrUnknown(data['tc1_close_y'], _tc1CloseYMeta));
    } else if (isInserting) {
      context.missing(_tc1CloseYMeta);
    }
    if (data.containsKey('tc1_close_b')) {
      context.handle(_tc1CloseBMeta,
          tc1CloseB.isAcceptableOrUnknown(data['tc1_close_b'], _tc1CloseBMeta));
    } else if (isInserting) {
      context.missing(_tc1CloseBMeta);
    }
    if (data.containsKey('tc2_open_y')) {
      context.handle(_tc2OpenYMeta,
          tc2OpenY.isAcceptableOrUnknown(data['tc2_open_y'], _tc2OpenYMeta));
    } else if (isInserting) {
      context.missing(_tc2OpenYMeta);
    }
    if (data.containsKey('tc2_open_r')) {
      context.handle(_tc2OpenRMeta,
          tc2OpenR.isAcceptableOrUnknown(data['tc2_open_r'], _tc2OpenRMeta));
    } else if (isInserting) {
      context.missing(_tc2OpenRMeta);
    }
    if (data.containsKey('tc2_open_b')) {
      context.handle(_tc2OpenBMeta,
          tc2OpenB.isAcceptableOrUnknown(data['tc2_open_b'], _tc2OpenBMeta));
    } else if (isInserting) {
      context.missing(_tc2OpenBMeta);
    }
    if (data.containsKey('tc2_close_r')) {
      context.handle(_tc2CloseRMeta,
          tc2CloseR.isAcceptableOrUnknown(data['tc2_close_r'], _tc2CloseRMeta));
    } else if (isInserting) {
      context.missing(_tc2CloseRMeta);
    }
    if (data.containsKey('tc2_close_y')) {
      context.handle(_tc2CloseYMeta,
          tc2CloseY.isAcceptableOrUnknown(data['tc2_close_y'], _tc2CloseYMeta));
    } else if (isInserting) {
      context.missing(_tc2CloseYMeta);
    }
    if (data.containsKey('tc2_close_b')) {
      context.handle(_tc2CloseBMeta,
          tc2CloseB.isAcceptableOrUnknown(data['tc2_close_b'], _tc2CloseBMeta));
    } else if (isInserting) {
      context.missing(_tc2CloseBMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  VcbTimingLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return VcbTimingLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $VcbTimingLocalDatasourceImplTable createAlias(String alias) {
    return $VcbTimingLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class UserLocalData extends DataClass implements Insertable<UserLocalData> {
  final DateTime lastUpdated;
  final int databaseID;
  final int id;
  final String name;
  final String designation;
  final int contact;
  final String empGender;
  final String empEmail;
  final String empMangerName;
  final int empNo;
  final int empMangerEmpNo;
  final int empPfNo;
  final int empEsic;
  final int empGIP;
  final DateTime empDOJ;
  final DateTime empDOB;
  UserLocalData(
      {@required this.lastUpdated,
      @required this.databaseID,
      @required this.id,
      @required this.name,
      @required this.designation,
      @required this.contact,
      @required this.empGender,
      @required this.empEmail,
      @required this.empMangerName,
      @required this.empNo,
      @required this.empMangerEmpNo,
      @required this.empPfNo,
      @required this.empEsic,
      @required this.empGIP,
      @required this.empDOJ,
      @required this.empDOB});
  factory UserLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return UserLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      name: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}name']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      contact: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}contact']),
      empGender: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}emp_gender']),
      empEmail: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}emp_email']),
      empMangerName: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}emp_manger_name']),
      empNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}emp_no']),
      empMangerEmpNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}emp_manger_emp_no']),
      empPfNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}emp_pf_no']),
      empEsic: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}emp_esic']),
      empGIP: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}emp_g_i_p']),
      empDOJ: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}emp_d_o_j']),
      empDOB: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}emp_d_o_b']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<String>(name);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || contact != null) {
      map['contact'] = Variable<int>(contact);
    }
    if (!nullToAbsent || empGender != null) {
      map['emp_gender'] = Variable<String>(empGender);
    }
    if (!nullToAbsent || empEmail != null) {
      map['emp_email'] = Variable<String>(empEmail);
    }
    if (!nullToAbsent || empMangerName != null) {
      map['emp_manger_name'] = Variable<String>(empMangerName);
    }
    if (!nullToAbsent || empNo != null) {
      map['emp_no'] = Variable<int>(empNo);
    }
    if (!nullToAbsent || empMangerEmpNo != null) {
      map['emp_manger_emp_no'] = Variable<int>(empMangerEmpNo);
    }
    if (!nullToAbsent || empPfNo != null) {
      map['emp_pf_no'] = Variable<int>(empPfNo);
    }
    if (!nullToAbsent || empEsic != null) {
      map['emp_esic'] = Variable<int>(empEsic);
    }
    if (!nullToAbsent || empGIP != null) {
      map['emp_g_i_p'] = Variable<int>(empGIP);
    }
    if (!nullToAbsent || empDOJ != null) {
      map['emp_d_o_j'] = Variable<DateTime>(empDOJ);
    }
    if (!nullToAbsent || empDOB != null) {
      map['emp_d_o_b'] = Variable<DateTime>(empDOB);
    }
    return map;
  }

  UserLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return UserLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      contact: contact == null && nullToAbsent
          ? const Value.absent()
          : Value(contact),
      empGender: empGender == null && nullToAbsent
          ? const Value.absent()
          : Value(empGender),
      empEmail: empEmail == null && nullToAbsent
          ? const Value.absent()
          : Value(empEmail),
      empMangerName: empMangerName == null && nullToAbsent
          ? const Value.absent()
          : Value(empMangerName),
      empNo:
          empNo == null && nullToAbsent ? const Value.absent() : Value(empNo),
      empMangerEmpNo: empMangerEmpNo == null && nullToAbsent
          ? const Value.absent()
          : Value(empMangerEmpNo),
      empPfNo: empPfNo == null && nullToAbsent
          ? const Value.absent()
          : Value(empPfNo),
      empEsic: empEsic == null && nullToAbsent
          ? const Value.absent()
          : Value(empEsic),
      empGIP:
          empGIP == null && nullToAbsent ? const Value.absent() : Value(empGIP),
      empDOJ:
          empDOJ == null && nullToAbsent ? const Value.absent() : Value(empDOJ),
      empDOB:
          empDOB == null && nullToAbsent ? const Value.absent() : Value(empDOB),
    );
  }

  factory UserLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return UserLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      name: serializer.fromJson<String>(json['name']),
      designation: serializer.fromJson<String>(json['designation']),
      contact: serializer.fromJson<int>(json['contact']),
      empGender: serializer.fromJson<String>(json['empGender']),
      empEmail: serializer.fromJson<String>(json['empEmail']),
      empMangerName: serializer.fromJson<String>(json['empMangerName']),
      empNo: serializer.fromJson<int>(json['empNo']),
      empMangerEmpNo: serializer.fromJson<int>(json['empMangerEmpNo']),
      empPfNo: serializer.fromJson<int>(json['empPfNo']),
      empEsic: serializer.fromJson<int>(json['empEsic']),
      empGIP: serializer.fromJson<int>(json['empGIP']),
      empDOJ: serializer.fromJson<DateTime>(json['empDOJ']),
      empDOB: serializer.fromJson<DateTime>(json['empDOB']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'name': serializer.toJson<String>(name),
      'designation': serializer.toJson<String>(designation),
      'contact': serializer.toJson<int>(contact),
      'empGender': serializer.toJson<String>(empGender),
      'empEmail': serializer.toJson<String>(empEmail),
      'empMangerName': serializer.toJson<String>(empMangerName),
      'empNo': serializer.toJson<int>(empNo),
      'empMangerEmpNo': serializer.toJson<int>(empMangerEmpNo),
      'empPfNo': serializer.toJson<int>(empPfNo),
      'empEsic': serializer.toJson<int>(empEsic),
      'empGIP': serializer.toJson<int>(empGIP),
      'empDOJ': serializer.toJson<DateTime>(empDOJ),
      'empDOB': serializer.toJson<DateTime>(empDOB),
    };
  }

  UserLocalData copyWith(
          {DateTime lastUpdated,
          int databaseID,
          int id,
          String name,
          String designation,
          int contact,
          String empGender,
          String empEmail,
          String empMangerName,
          int empNo,
          int empMangerEmpNo,
          int empPfNo,
          int empEsic,
          int empGIP,
          DateTime empDOJ,
          DateTime empDOB}) =>
      UserLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        name: name ?? this.name,
        designation: designation ?? this.designation,
        contact: contact ?? this.contact,
        empGender: empGender ?? this.empGender,
        empEmail: empEmail ?? this.empEmail,
        empMangerName: empMangerName ?? this.empMangerName,
        empNo: empNo ?? this.empNo,
        empMangerEmpNo: empMangerEmpNo ?? this.empMangerEmpNo,
        empPfNo: empPfNo ?? this.empPfNo,
        empEsic: empEsic ?? this.empEsic,
        empGIP: empGIP ?? this.empGIP,
        empDOJ: empDOJ ?? this.empDOJ,
        empDOB: empDOB ?? this.empDOB,
      );
  @override
  String toString() {
    return (StringBuffer('UserLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('designation: $designation, ')
          ..write('contact: $contact, ')
          ..write('empGender: $empGender, ')
          ..write('empEmail: $empEmail, ')
          ..write('empMangerName: $empMangerName, ')
          ..write('empNo: $empNo, ')
          ..write('empMangerEmpNo: $empMangerEmpNo, ')
          ..write('empPfNo: $empPfNo, ')
          ..write('empEsic: $empEsic, ')
          ..write('empGIP: $empGIP, ')
          ..write('empDOJ: $empDOJ, ')
          ..write('empDOB: $empDOB')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      databaseID,
      id,
      name,
      designation,
      contact,
      empGender,
      empEmail,
      empMangerName,
      empNo,
      empMangerEmpNo,
      empPfNo,
      empEsic,
      empGIP,
      empDOJ,
      empDOB);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is UserLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.name == this.name &&
          other.designation == this.designation &&
          other.contact == this.contact &&
          other.empGender == this.empGender &&
          other.empEmail == this.empEmail &&
          other.empMangerName == this.empMangerName &&
          other.empNo == this.empNo &&
          other.empMangerEmpNo == this.empMangerEmpNo &&
          other.empPfNo == this.empPfNo &&
          other.empEsic == this.empEsic &&
          other.empGIP == this.empGIP &&
          other.empDOJ == this.empDOJ &&
          other.empDOB == this.empDOB);
}

class UserLocalDatasourceImplCompanion extends UpdateCompanion<UserLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> name;
  final Value<String> designation;
  final Value<int> contact;
  final Value<String> empGender;
  final Value<String> empEmail;
  final Value<String> empMangerName;
  final Value<int> empNo;
  final Value<int> empMangerEmpNo;
  final Value<int> empPfNo;
  final Value<int> empEsic;
  final Value<int> empGIP;
  final Value<DateTime> empDOJ;
  final Value<DateTime> empDOB;
  const UserLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.name = const Value.absent(),
    this.designation = const Value.absent(),
    this.contact = const Value.absent(),
    this.empGender = const Value.absent(),
    this.empEmail = const Value.absent(),
    this.empMangerName = const Value.absent(),
    this.empNo = const Value.absent(),
    this.empMangerEmpNo = const Value.absent(),
    this.empPfNo = const Value.absent(),
    this.empEsic = const Value.absent(),
    this.empGIP = const Value.absent(),
    this.empDOJ = const Value.absent(),
    this.empDOB = const Value.absent(),
  });
  UserLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required int databaseID,
    this.id = const Value.absent(),
    @required String name,
    @required String designation,
    @required int contact,
    @required String empGender,
    @required String empEmail,
    @required String empMangerName,
    @required int empNo,
    @required int empMangerEmpNo,
    @required int empPfNo,
    @required int empEsic,
    @required int empGIP,
    this.empDOJ = const Value.absent(),
    this.empDOB = const Value.absent(),
  })  : databaseID = Value(databaseID),
        name = Value(name),
        designation = Value(designation),
        contact = Value(contact),
        empGender = Value(empGender),
        empEmail = Value(empEmail),
        empMangerName = Value(empMangerName),
        empNo = Value(empNo),
        empMangerEmpNo = Value(empMangerEmpNo),
        empPfNo = Value(empPfNo),
        empEsic = Value(empEsic),
        empGIP = Value(empGIP);
  static Insertable<UserLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> name,
    Expression<String> designation,
    Expression<int> contact,
    Expression<String> empGender,
    Expression<String> empEmail,
    Expression<String> empMangerName,
    Expression<int> empNo,
    Expression<int> empMangerEmpNo,
    Expression<int> empPfNo,
    Expression<int> empEsic,
    Expression<int> empGIP,
    Expression<DateTime> empDOJ,
    Expression<DateTime> empDOB,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (name != null) 'name': name,
      if (designation != null) 'designation': designation,
      if (contact != null) 'contact': contact,
      if (empGender != null) 'emp_gender': empGender,
      if (empEmail != null) 'emp_email': empEmail,
      if (empMangerName != null) 'emp_manger_name': empMangerName,
      if (empNo != null) 'emp_no': empNo,
      if (empMangerEmpNo != null) 'emp_manger_emp_no': empMangerEmpNo,
      if (empPfNo != null) 'emp_pf_no': empPfNo,
      if (empEsic != null) 'emp_esic': empEsic,
      if (empGIP != null) 'emp_g_i_p': empGIP,
      if (empDOJ != null) 'emp_d_o_j': empDOJ,
      if (empDOB != null) 'emp_d_o_b': empDOB,
    });
  }

  UserLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<int> databaseID,
      Value<int> id,
      Value<String> name,
      Value<String> designation,
      Value<int> contact,
      Value<String> empGender,
      Value<String> empEmail,
      Value<String> empMangerName,
      Value<int> empNo,
      Value<int> empMangerEmpNo,
      Value<int> empPfNo,
      Value<int> empEsic,
      Value<int> empGIP,
      Value<DateTime> empDOJ,
      Value<DateTime> empDOB}) {
    return UserLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      name: name ?? this.name,
      designation: designation ?? this.designation,
      contact: contact ?? this.contact,
      empGender: empGender ?? this.empGender,
      empEmail: empEmail ?? this.empEmail,
      empMangerName: empMangerName ?? this.empMangerName,
      empNo: empNo ?? this.empNo,
      empMangerEmpNo: empMangerEmpNo ?? this.empMangerEmpNo,
      empPfNo: empPfNo ?? this.empPfNo,
      empEsic: empEsic ?? this.empEsic,
      empGIP: empGIP ?? this.empGIP,
      empDOJ: empDOJ ?? this.empDOJ,
      empDOB: empDOB ?? this.empDOB,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (contact.present) {
      map['contact'] = Variable<int>(contact.value);
    }
    if (empGender.present) {
      map['emp_gender'] = Variable<String>(empGender.value);
    }
    if (empEmail.present) {
      map['emp_email'] = Variable<String>(empEmail.value);
    }
    if (empMangerName.present) {
      map['emp_manger_name'] = Variable<String>(empMangerName.value);
    }
    if (empNo.present) {
      map['emp_no'] = Variable<int>(empNo.value);
    }
    if (empMangerEmpNo.present) {
      map['emp_manger_emp_no'] = Variable<int>(empMangerEmpNo.value);
    }
    if (empPfNo.present) {
      map['emp_pf_no'] = Variable<int>(empPfNo.value);
    }
    if (empEsic.present) {
      map['emp_esic'] = Variable<int>(empEsic.value);
    }
    if (empGIP.present) {
      map['emp_g_i_p'] = Variable<int>(empGIP.value);
    }
    if (empDOJ.present) {
      map['emp_d_o_j'] = Variable<DateTime>(empDOJ.value);
    }
    if (empDOB.present) {
      map['emp_d_o_b'] = Variable<DateTime>(empDOB.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('UserLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('designation: $designation, ')
          ..write('contact: $contact, ')
          ..write('empGender: $empGender, ')
          ..write('empEmail: $empEmail, ')
          ..write('empMangerName: $empMangerName, ')
          ..write('empNo: $empNo, ')
          ..write('empMangerEmpNo: $empMangerEmpNo, ')
          ..write('empPfNo: $empPfNo, ')
          ..write('empEsic: $empEsic, ')
          ..write('empGIP: $empGIP, ')
          ..write('empDOJ: $empDOJ, ')
          ..write('empDOB: $empDOB')
          ..write(')'))
        .toString();
  }
}

class $UserLocalDatasourceImplTable extends UserLocalDatasourceImpl
    with TableInfo<$UserLocalDatasourceImplTable, UserLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $UserLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _nameMeta = const VerificationMeta('name');
  GeneratedColumn<String> _name;
  @override
  GeneratedColumn<String> get name => _name ??= GeneratedColumn<String>(
      'name', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _contactMeta = const VerificationMeta('contact');
  GeneratedColumn<int> _contact;
  @override
  GeneratedColumn<int> get contact =>
      _contact ??= GeneratedColumn<int>('contact', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _empGenderMeta = const VerificationMeta('empGender');
  GeneratedColumn<String> _empGender;
  @override
  GeneratedColumn<String> get empGender =>
      _empGender ??= GeneratedColumn<String>('emp_gender', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _empEmailMeta = const VerificationMeta('empEmail');
  GeneratedColumn<String> _empEmail;
  @override
  GeneratedColumn<String> get empEmail => _empEmail ??= GeneratedColumn<String>(
      'emp_email', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _empMangerNameMeta =
      const VerificationMeta('empMangerName');
  GeneratedColumn<String> _empMangerName;
  @override
  GeneratedColumn<String> get empMangerName => _empMangerName ??=
      GeneratedColumn<String>('emp_manger_name', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _empNoMeta = const VerificationMeta('empNo');
  GeneratedColumn<int> _empNo;
  @override
  GeneratedColumn<int> get empNo =>
      _empNo ??= GeneratedColumn<int>('emp_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _empMangerEmpNoMeta =
      const VerificationMeta('empMangerEmpNo');
  GeneratedColumn<int> _empMangerEmpNo;
  @override
  GeneratedColumn<int> get empMangerEmpNo => _empMangerEmpNo ??=
      GeneratedColumn<int>('emp_manger_emp_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _empPfNoMeta = const VerificationMeta('empPfNo');
  GeneratedColumn<int> _empPfNo;
  @override
  GeneratedColumn<int> get empPfNo =>
      _empPfNo ??= GeneratedColumn<int>('emp_pf_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _empEsicMeta = const VerificationMeta('empEsic');
  GeneratedColumn<int> _empEsic;
  @override
  GeneratedColumn<int> get empEsic =>
      _empEsic ??= GeneratedColumn<int>('emp_esic', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _empGIPMeta = const VerificationMeta('empGIP');
  GeneratedColumn<int> _empGIP;
  @override
  GeneratedColumn<int> get empGIP =>
      _empGIP ??= GeneratedColumn<int>('emp_g_i_p', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _empDOJMeta = const VerificationMeta('empDOJ');
  GeneratedColumn<DateTime> _empDOJ;
  @override
  GeneratedColumn<DateTime> get empDOJ =>
      _empDOJ ??= GeneratedColumn<DateTime>('emp_d_o_j', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _empDOBMeta = const VerificationMeta('empDOB');
  GeneratedColumn<DateTime> _empDOB;
  @override
  GeneratedColumn<DateTime> get empDOB =>
      _empDOB ??= GeneratedColumn<DateTime>('emp_d_o_b', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        databaseID,
        id,
        name,
        designation,
        contact,
        empGender,
        empEmail,
        empMangerName,
        empNo,
        empMangerEmpNo,
        empPfNo,
        empEsic,
        empGIP,
        empDOJ,
        empDOB
      ];
  @override
  String get aliasedName => _alias ?? 'user_local_datasource_impl';
  @override
  String get actualTableName => 'user_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<UserLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('name')) {
      context.handle(
          _nameMeta, name.isAcceptableOrUnknown(data['name'], _nameMeta));
    } else if (isInserting) {
      context.missing(_nameMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('contact')) {
      context.handle(_contactMeta,
          contact.isAcceptableOrUnknown(data['contact'], _contactMeta));
    } else if (isInserting) {
      context.missing(_contactMeta);
    }
    if (data.containsKey('emp_gender')) {
      context.handle(_empGenderMeta,
          empGender.isAcceptableOrUnknown(data['emp_gender'], _empGenderMeta));
    } else if (isInserting) {
      context.missing(_empGenderMeta);
    }
    if (data.containsKey('emp_email')) {
      context.handle(_empEmailMeta,
          empEmail.isAcceptableOrUnknown(data['emp_email'], _empEmailMeta));
    } else if (isInserting) {
      context.missing(_empEmailMeta);
    }
    if (data.containsKey('emp_manger_name')) {
      context.handle(
          _empMangerNameMeta,
          empMangerName.isAcceptableOrUnknown(
              data['emp_manger_name'], _empMangerNameMeta));
    } else if (isInserting) {
      context.missing(_empMangerNameMeta);
    }
    if (data.containsKey('emp_no')) {
      context.handle(
          _empNoMeta, empNo.isAcceptableOrUnknown(data['emp_no'], _empNoMeta));
    } else if (isInserting) {
      context.missing(_empNoMeta);
    }
    if (data.containsKey('emp_manger_emp_no')) {
      context.handle(
          _empMangerEmpNoMeta,
          empMangerEmpNo.isAcceptableOrUnknown(
              data['emp_manger_emp_no'], _empMangerEmpNoMeta));
    } else if (isInserting) {
      context.missing(_empMangerEmpNoMeta);
    }
    if (data.containsKey('emp_pf_no')) {
      context.handle(_empPfNoMeta,
          empPfNo.isAcceptableOrUnknown(data['emp_pf_no'], _empPfNoMeta));
    } else if (isInserting) {
      context.missing(_empPfNoMeta);
    }
    if (data.containsKey('emp_esic')) {
      context.handle(_empEsicMeta,
          empEsic.isAcceptableOrUnknown(data['emp_esic'], _empEsicMeta));
    } else if (isInserting) {
      context.missing(_empEsicMeta);
    }
    if (data.containsKey('emp_g_i_p')) {
      context.handle(_empGIPMeta,
          empGIP.isAcceptableOrUnknown(data['emp_g_i_p'], _empGIPMeta));
    } else if (isInserting) {
      context.missing(_empGIPMeta);
    }
    if (data.containsKey('emp_d_o_j')) {
      context.handle(_empDOJMeta,
          empDOJ.isAcceptableOrUnknown(data['emp_d_o_j'], _empDOJMeta));
    }
    if (data.containsKey('emp_d_o_b')) {
      context.handle(_empDOBMeta,
          empDOB.isAcceptableOrUnknown(data['emp_d_o_b'], _empDOBMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  UserLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return UserLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $UserLocalDatasourceImplTable createAlias(String alias) {
    return $UserLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class InventoryLocalData extends DataClass
    implements Insertable<InventoryLocalData> {
  final DateTime lastUpdated;
  final String barcode;
  final String SpecialKit;
  final String serialNo;
  final String type;
  final String make;
  final String model;
  final DateTime dateOfTesting;
  final DateTime dueDateOfTesting;
  InventoryLocalData(
      {@required this.lastUpdated,
      @required this.barcode,
      @required this.SpecialKit,
      @required this.serialNo,
      @required this.type,
      @required this.make,
      @required this.model,
      @required this.dateOfTesting,
      @required this.dueDateOfTesting});
  factory InventoryLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return InventoryLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      barcode: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}barcode']),
      SpecialKit: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}special_kit']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      type: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}type']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      model: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}model']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      dueDateOfTesting: const DateTimeType().mapFromDatabaseResponse(
          data['${effectivePrefix}due_date_of_testing']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || barcode != null) {
      map['barcode'] = Variable<String>(barcode);
    }
    if (!nullToAbsent || SpecialKit != null) {
      map['special_kit'] = Variable<String>(SpecialKit);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || type != null) {
      map['type'] = Variable<String>(type);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || model != null) {
      map['model'] = Variable<String>(model);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || dueDateOfTesting != null) {
      map['due_date_of_testing'] = Variable<DateTime>(dueDateOfTesting);
    }
    return map;
  }

  InventorytocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return InventorytocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      barcode: barcode == null && nullToAbsent
          ? const Value.absent()
          : Value(barcode),
      SpecialKit: SpecialKit == null && nullToAbsent
          ? const Value.absent()
          : Value(SpecialKit),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      type: type == null && nullToAbsent ? const Value.absent() : Value(type),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      model:
          model == null && nullToAbsent ? const Value.absent() : Value(model),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      dueDateOfTesting: dueDateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dueDateOfTesting),
    );
  }

  factory InventoryLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return InventoryLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      barcode: serializer.fromJson<String>(json['barcode']),
      SpecialKit: serializer.fromJson<String>(json['SpecialKit']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      type: serializer.fromJson<String>(json['type']),
      make: serializer.fromJson<String>(json['make']),
      model: serializer.fromJson<String>(json['model']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      dueDateOfTesting: serializer.fromJson<DateTime>(json['dueDateOfTesting']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'barcode': serializer.toJson<String>(barcode),
      'SpecialKit': serializer.toJson<String>(SpecialKit),
      'serialNo': serializer.toJson<String>(serialNo),
      'type': serializer.toJson<String>(type),
      'make': serializer.toJson<String>(make),
      'model': serializer.toJson<String>(model),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'dueDateOfTesting': serializer.toJson<DateTime>(dueDateOfTesting),
    };
  }

  InventoryLocalData copyWith(
          {DateTime lastUpdated,
          String barcode,
          String SpecialKit,
          String serialNo,
          String type,
          String make,
          String model,
          DateTime dateOfTesting,
          DateTime dueDateOfTesting}) =>
      InventoryLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        barcode: barcode ?? this.barcode,
        SpecialKit: SpecialKit ?? this.SpecialKit,
        serialNo: serialNo ?? this.serialNo,
        type: type ?? this.type,
        make: make ?? this.make,
        model: model ?? this.model,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        dueDateOfTesting: dueDateOfTesting ?? this.dueDateOfTesting,
      );
  @override
  String toString() {
    return (StringBuffer('InventoryLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('barcode: $barcode, ')
          ..write('SpecialKit: $SpecialKit, ')
          ..write('serialNo: $serialNo, ')
          ..write('type: $type, ')
          ..write('make: $make, ')
          ..write('model: $model, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('dueDateOfTesting: $dueDateOfTesting')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, barcode, SpecialKit, serialNo,
      type, make, model, dateOfTesting, dueDateOfTesting);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is InventoryLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.barcode == this.barcode &&
          other.SpecialKit == this.SpecialKit &&
          other.serialNo == this.serialNo &&
          other.type == this.type &&
          other.make == this.make &&
          other.model == this.model &&
          other.dateOfTesting == this.dateOfTesting &&
          other.dueDateOfTesting == this.dueDateOfTesting);
}

class InventorytocalDatasourceImplCompanion
    extends UpdateCompanion<InventoryLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> barcode;
  final Value<String> SpecialKit;
  final Value<String> serialNo;
  final Value<String> type;
  final Value<String> make;
  final Value<String> model;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> dueDateOfTesting;
  const InventorytocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.barcode = const Value.absent(),
    this.SpecialKit = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.type = const Value.absent(),
    this.make = const Value.absent(),
    this.model = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.dueDateOfTesting = const Value.absent(),
  });
  InventorytocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String barcode,
    @required String SpecialKit,
    @required String serialNo,
    @required String type,
    @required String make,
    @required String model,
    this.dateOfTesting = const Value.absent(),
    this.dueDateOfTesting = const Value.absent(),
  })  : barcode = Value(barcode),
        SpecialKit = Value(SpecialKit),
        serialNo = Value(serialNo),
        type = Value(type),
        make = Value(make),
        model = Value(model);
  static Insertable<InventoryLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> barcode,
    Expression<String> SpecialKit,
    Expression<String> serialNo,
    Expression<String> type,
    Expression<String> make,
    Expression<String> model,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> dueDateOfTesting,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (barcode != null) 'barcode': barcode,
      if (SpecialKit != null) 'special_kit': SpecialKit,
      if (serialNo != null) 'serial_no': serialNo,
      if (type != null) 'type': type,
      if (make != null) 'make': make,
      if (model != null) 'model': model,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (dueDateOfTesting != null) 'due_date_of_testing': dueDateOfTesting,
    });
  }

  InventorytocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> barcode,
      Value<String> SpecialKit,
      Value<String> serialNo,
      Value<String> type,
      Value<String> make,
      Value<String> model,
      Value<DateTime> dateOfTesting,
      Value<DateTime> dueDateOfTesting}) {
    return InventorytocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      barcode: barcode ?? this.barcode,
      SpecialKit: SpecialKit ?? this.SpecialKit,
      serialNo: serialNo ?? this.serialNo,
      type: type ?? this.type,
      make: make ?? this.make,
      model: model ?? this.model,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      dueDateOfTesting: dueDateOfTesting ?? this.dueDateOfTesting,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (barcode.present) {
      map['barcode'] = Variable<String>(barcode.value);
    }
    if (SpecialKit.present) {
      map['special_kit'] = Variable<String>(SpecialKit.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (model.present) {
      map['model'] = Variable<String>(model.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (dueDateOfTesting.present) {
      map['due_date_of_testing'] = Variable<DateTime>(dueDateOfTesting.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('InventorytocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('barcode: $barcode, ')
          ..write('SpecialKit: $SpecialKit, ')
          ..write('serialNo: $serialNo, ')
          ..write('type: $type, ')
          ..write('make: $make, ')
          ..write('model: $model, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('dueDateOfTesting: $dueDateOfTesting')
          ..write(')'))
        .toString();
  }
}

class $InventorytocalDatasourceImplTable extends InventorytocalDatasourceImpl
    with TableInfo<$InventorytocalDatasourceImplTable, InventoryLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $InventorytocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _barcodeMeta = const VerificationMeta('barcode');
  GeneratedColumn<String> _barcode;
  @override
  GeneratedColumn<String> get barcode => _barcode ??= GeneratedColumn<String>(
      'barcode', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _SpecialKitMeta = const VerificationMeta('SpecialKit');
  GeneratedColumn<String> _SpecialKit;
  @override
  GeneratedColumn<String> get SpecialKit =>
      _SpecialKit ??= GeneratedColumn<String>('special_kit', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _typeMeta = const VerificationMeta('type');
  GeneratedColumn<String> _type;
  @override
  GeneratedColumn<String> get type => _type ??= GeneratedColumn<String>(
      'type', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _modelMeta = const VerificationMeta('model');
  GeneratedColumn<String> _model;
  @override
  GeneratedColumn<String> get model => _model ??= GeneratedColumn<String>(
      'model', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _dueDateOfTestingMeta =
      const VerificationMeta('dueDateOfTesting');
  GeneratedColumn<DateTime> _dueDateOfTesting;
  @override
  GeneratedColumn<DateTime> get dueDateOfTesting => _dueDateOfTesting ??=
      GeneratedColumn<DateTime>('due_date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        barcode,
        SpecialKit,
        serialNo,
        type,
        make,
        model,
        dateOfTesting,
        dueDateOfTesting
      ];
  @override
  String get aliasedName => _alias ?? 'inventorytocal_datasource_impl';
  @override
  String get actualTableName => 'inventorytocal_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<InventoryLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('barcode')) {
      context.handle(_barcodeMeta,
          barcode.isAcceptableOrUnknown(data['barcode'], _barcodeMeta));
    } else if (isInserting) {
      context.missing(_barcodeMeta);
    }
    if (data.containsKey('special_kit')) {
      context.handle(
          _SpecialKitMeta,
          SpecialKit.isAcceptableOrUnknown(
              data['special_kit'], _SpecialKitMeta));
    } else if (isInserting) {
      context.missing(_SpecialKitMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('type')) {
      context.handle(
          _typeMeta, type.isAcceptableOrUnknown(data['type'], _typeMeta));
    } else if (isInserting) {
      context.missing(_typeMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('model')) {
      context.handle(
          _modelMeta, model.isAcceptableOrUnknown(data['model'], _modelMeta));
    } else if (isInserting) {
      context.missing(_modelMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('due_date_of_testing')) {
      context.handle(
          _dueDateOfTestingMeta,
          dueDateOfTesting.isAcceptableOrUnknown(
              data['due_date_of_testing'], _dueDateOfTestingMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {barcode};
  @override
  InventoryLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return InventoryLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $InventorytocalDatasourceImplTable createAlias(String alias) {
    return $InventorytocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EnergyMeterLocalData extends DataClass
    implements Insertable<EnergyMeterLocalData> {
  final DateTime lastUpdated;
  final String TestedBy;
  final String VerifiedBy;
  final String WitnessedBy;
  final int databaseID;
  final int id;
  final String etype;
  final String designation;
  final String location;
  final String panel;
  final String make;
  final String serialNo;
  final String ctr;
  final String ptr;
  final int voltage;
  final int frequency;
  final double eqClass;
  final int trNo;
  final DateTime dateOfTesting;
  EnergyMeterLocalData(
      {@required this.lastUpdated,
      @required this.TestedBy,
      @required this.VerifiedBy,
      @required this.WitnessedBy,
      @required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.designation,
      @required this.location,
      @required this.panel,
      @required this.make,
      @required this.serialNo,
      @required this.ctr,
      @required this.ptr,
      @required this.voltage,
      @required this.frequency,
      @required this.eqClass,
      @required this.trNo,
      @required this.dateOfTesting});
  factory EnergyMeterLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EnergyMeterLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      TestedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      VerifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      ctr: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ctr']),
      ptr: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ptr']),
      voltage: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}voltage']),
      frequency: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency']),
      eqClass: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}eq_class']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || TestedBy != null) {
      map['tested_by'] = Variable<String>(TestedBy);
    }
    if (!nullToAbsent || VerifiedBy != null) {
      map['verified_by'] = Variable<String>(VerifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || ctr != null) {
      map['ctr'] = Variable<String>(ctr);
    }
    if (!nullToAbsent || ptr != null) {
      map['ptr'] = Variable<String>(ptr);
    }
    if (!nullToAbsent || voltage != null) {
      map['voltage'] = Variable<int>(voltage);
    }
    if (!nullToAbsent || frequency != null) {
      map['frequency'] = Variable<int>(frequency);
    }
    if (!nullToAbsent || eqClass != null) {
      map['eq_class'] = Variable<double>(eqClass);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    return map;
  }

  EnergyMeterLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EnergyMeterLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      TestedBy: TestedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(TestedBy),
      VerifiedBy: VerifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(VerifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      ctr: ctr == null && nullToAbsent ? const Value.absent() : Value(ctr),
      ptr: ptr == null && nullToAbsent ? const Value.absent() : Value(ptr),
      voltage: voltage == null && nullToAbsent
          ? const Value.absent()
          : Value(voltage),
      frequency: frequency == null && nullToAbsent
          ? const Value.absent()
          : Value(frequency),
      eqClass: eqClass == null && nullToAbsent
          ? const Value.absent()
          : Value(eqClass),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
    );
  }

  factory EnergyMeterLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EnergyMeterLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      TestedBy: serializer.fromJson<String>(json['TestedBy']),
      VerifiedBy: serializer.fromJson<String>(json['VerifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      panel: serializer.fromJson<String>(json['panel']),
      make: serializer.fromJson<String>(json['make']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      ctr: serializer.fromJson<String>(json['ctr']),
      ptr: serializer.fromJson<String>(json['ptr']),
      voltage: serializer.fromJson<int>(json['voltage']),
      frequency: serializer.fromJson<int>(json['frequency']),
      eqClass: serializer.fromJson<double>(json['eqClass']),
      trNo: serializer.fromJson<int>(json['trNo']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'TestedBy': serializer.toJson<String>(TestedBy),
      'VerifiedBy': serializer.toJson<String>(VerifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'panel': serializer.toJson<String>(panel),
      'make': serializer.toJson<String>(make),
      'serialNo': serializer.toJson<String>(serialNo),
      'ctr': serializer.toJson<String>(ctr),
      'ptr': serializer.toJson<String>(ptr),
      'voltage': serializer.toJson<int>(voltage),
      'frequency': serializer.toJson<int>(frequency),
      'eqClass': serializer.toJson<double>(eqClass),
      'trNo': serializer.toJson<int>(trNo),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
    };
  }

  EnergyMeterLocalData copyWith(
          {DateTime lastUpdated,
          String TestedBy,
          String VerifiedBy,
          String WitnessedBy,
          int databaseID,
          int id,
          String etype,
          String designation,
          String location,
          String panel,
          String make,
          String serialNo,
          String ctr,
          String ptr,
          int voltage,
          int frequency,
          double eqClass,
          int trNo,
          DateTime dateOfTesting}) =>
      EnergyMeterLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        TestedBy: TestedBy ?? this.TestedBy,
        VerifiedBy: VerifiedBy ?? this.VerifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        panel: panel ?? this.panel,
        make: make ?? this.make,
        serialNo: serialNo ?? this.serialNo,
        ctr: ctr ?? this.ctr,
        ptr: ptr ?? this.ptr,
        voltage: voltage ?? this.voltage,
        frequency: frequency ?? this.frequency,
        eqClass: eqClass ?? this.eqClass,
        trNo: trNo ?? this.trNo,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      );
  @override
  String toString() {
    return (StringBuffer('EnergyMeterLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('serialNo: $serialNo, ')
          ..write('ctr: $ctr, ')
          ..write('ptr: $ptr, ')
          ..write('voltage: $voltage, ')
          ..write('frequency: $frequency, ')
          ..write('eqClass: $eqClass, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      TestedBy,
      VerifiedBy,
      WitnessedBy,
      databaseID,
      id,
      etype,
      designation,
      location,
      panel,
      make,
      serialNo,
      ctr,
      ptr,
      voltage,
      frequency,
      eqClass,
      trNo,
      dateOfTesting);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EnergyMeterLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.TestedBy == this.TestedBy &&
          other.VerifiedBy == this.VerifiedBy &&
          other.WitnessedBy == this.WitnessedBy &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.panel == this.panel &&
          other.make == this.make &&
          other.serialNo == this.serialNo &&
          other.ctr == this.ctr &&
          other.ptr == this.ptr &&
          other.voltage == this.voltage &&
          other.frequency == this.frequency &&
          other.eqClass == this.eqClass &&
          other.trNo == this.trNo &&
          other.dateOfTesting == this.dateOfTesting);
}

class EnergyMeterLocalDatasourceImplCompanion
    extends UpdateCompanion<EnergyMeterLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> TestedBy;
  final Value<String> VerifiedBy;
  final Value<String> WitnessedBy;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> panel;
  final Value<String> make;
  final Value<String> serialNo;
  final Value<String> ctr;
  final Value<String> ptr;
  final Value<int> voltage;
  final Value<int> frequency;
  final Value<double> eqClass;
  final Value<int> trNo;
  final Value<DateTime> dateOfTesting;
  const EnergyMeterLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.TestedBy = const Value.absent(),
    this.VerifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.panel = const Value.absent(),
    this.make = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.ctr = const Value.absent(),
    this.ptr = const Value.absent(),
    this.voltage = const Value.absent(),
    this.frequency = const Value.absent(),
    this.eqClass = const Value.absent(),
    this.trNo = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
  });
  EnergyMeterLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String TestedBy,
    @required String VerifiedBy,
    @required String WitnessedBy,
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required String designation,
    @required String location,
    @required String panel,
    @required String make,
    @required String serialNo,
    @required String ctr,
    @required String ptr,
    @required int voltage,
    @required int frequency,
    @required double eqClass,
    @required int trNo,
    this.dateOfTesting = const Value.absent(),
  })  : TestedBy = Value(TestedBy),
        VerifiedBy = Value(VerifiedBy),
        WitnessedBy = Value(WitnessedBy),
        databaseID = Value(databaseID),
        etype = Value(etype),
        designation = Value(designation),
        location = Value(location),
        panel = Value(panel),
        make = Value(make),
        serialNo = Value(serialNo),
        ctr = Value(ctr),
        ptr = Value(ptr),
        voltage = Value(voltage),
        frequency = Value(frequency),
        eqClass = Value(eqClass),
        trNo = Value(trNo);
  static Insertable<EnergyMeterLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> TestedBy,
    Expression<String> VerifiedBy,
    Expression<String> WitnessedBy,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> panel,
    Expression<String> make,
    Expression<String> serialNo,
    Expression<String> ctr,
    Expression<String> ptr,
    Expression<int> voltage,
    Expression<int> frequency,
    Expression<double> eqClass,
    Expression<int> trNo,
    Expression<DateTime> dateOfTesting,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (TestedBy != null) 'tested_by': TestedBy,
      if (VerifiedBy != null) 'verified_by': VerifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (panel != null) 'panel': panel,
      if (make != null) 'make': make,
      if (serialNo != null) 'serial_no': serialNo,
      if (ctr != null) 'ctr': ctr,
      if (ptr != null) 'ptr': ptr,
      if (voltage != null) 'voltage': voltage,
      if (frequency != null) 'frequency': frequency,
      if (eqClass != null) 'eq_class': eqClass,
      if (trNo != null) 'tr_no': trNo,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
    });
  }

  EnergyMeterLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> TestedBy,
      Value<String> VerifiedBy,
      Value<String> WitnessedBy,
      Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<String> designation,
      Value<String> location,
      Value<String> panel,
      Value<String> make,
      Value<String> serialNo,
      Value<String> ctr,
      Value<String> ptr,
      Value<int> voltage,
      Value<int> frequency,
      Value<double> eqClass,
      Value<int> trNo,
      Value<DateTime> dateOfTesting}) {
    return EnergyMeterLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      TestedBy: TestedBy ?? this.TestedBy,
      VerifiedBy: VerifiedBy ?? this.VerifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      panel: panel ?? this.panel,
      make: make ?? this.make,
      serialNo: serialNo ?? this.serialNo,
      ctr: ctr ?? this.ctr,
      ptr: ptr ?? this.ptr,
      voltage: voltage ?? this.voltage,
      frequency: frequency ?? this.frequency,
      eqClass: eqClass ?? this.eqClass,
      trNo: trNo ?? this.trNo,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (TestedBy.present) {
      map['tested_by'] = Variable<String>(TestedBy.value);
    }
    if (VerifiedBy.present) {
      map['verified_by'] = Variable<String>(VerifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (ctr.present) {
      map['ctr'] = Variable<String>(ctr.value);
    }
    if (ptr.present) {
      map['ptr'] = Variable<String>(ptr.value);
    }
    if (voltage.present) {
      map['voltage'] = Variable<int>(voltage.value);
    }
    if (frequency.present) {
      map['frequency'] = Variable<int>(frequency.value);
    }
    if (eqClass.present) {
      map['eq_class'] = Variable<double>(eqClass.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EnergyMeterLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('serialNo: $serialNo, ')
          ..write('ctr: $ctr, ')
          ..write('ptr: $ptr, ')
          ..write('voltage: $voltage, ')
          ..write('frequency: $frequency, ')
          ..write('eqClass: $eqClass, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }
}

class $EnergyMeterLocalDatasourceImplTable
    extends EnergyMeterLocalDatasourceImpl
    with TableInfo<$EnergyMeterLocalDatasourceImplTable, EnergyMeterLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EnergyMeterLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _TestedByMeta = const VerificationMeta('TestedBy');
  GeneratedColumn<String> _TestedBy;
  @override
  GeneratedColumn<String> get TestedBy => _TestedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _VerifiedByMeta = const VerificationMeta('VerifiedBy');
  GeneratedColumn<String> _VerifiedBy;
  @override
  GeneratedColumn<String> get VerifiedBy =>
      _VerifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ctrMeta = const VerificationMeta('ctr');
  GeneratedColumn<String> _ctr;
  @override
  GeneratedColumn<String> get ctr => _ctr ??= GeneratedColumn<String>(
      'ctr', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ptrMeta = const VerificationMeta('ptr');
  GeneratedColumn<String> _ptr;
  @override
  GeneratedColumn<String> get ptr => _ptr ??= GeneratedColumn<String>(
      'ptr', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _voltageMeta = const VerificationMeta('voltage');
  GeneratedColumn<int> _voltage;
  @override
  GeneratedColumn<int> get voltage =>
      _voltage ??= GeneratedColumn<int>('voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _frequencyMeta = const VerificationMeta('frequency');
  GeneratedColumn<int> _frequency;
  @override
  GeneratedColumn<int> get frequency =>
      _frequency ??= GeneratedColumn<int>('frequency', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _eqClassMeta = const VerificationMeta('eqClass');
  GeneratedColumn<double> _eqClass;
  @override
  GeneratedColumn<double> get eqClass =>
      _eqClass ??= GeneratedColumn<double>('eq_class', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        TestedBy,
        VerifiedBy,
        WitnessedBy,
        databaseID,
        id,
        etype,
        designation,
        location,
        panel,
        make,
        serialNo,
        ctr,
        ptr,
        voltage,
        frequency,
        eqClass,
        trNo,
        dateOfTesting
      ];
  @override
  String get aliasedName => _alias ?? 'energy_meter_local_datasource_impl';
  @override
  String get actualTableName => 'energy_meter_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<EnergyMeterLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_TestedByMeta,
          TestedBy.isAcceptableOrUnknown(data['tested_by'], _TestedByMeta));
    } else if (isInserting) {
      context.missing(_TestedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _VerifiedByMeta,
          VerifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _VerifiedByMeta));
    } else if (isInserting) {
      context.missing(_VerifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('ctr')) {
      context.handle(
          _ctrMeta, ctr.isAcceptableOrUnknown(data['ctr'], _ctrMeta));
    } else if (isInserting) {
      context.missing(_ctrMeta);
    }
    if (data.containsKey('ptr')) {
      context.handle(
          _ptrMeta, ptr.isAcceptableOrUnknown(data['ptr'], _ptrMeta));
    } else if (isInserting) {
      context.missing(_ptrMeta);
    }
    if (data.containsKey('voltage')) {
      context.handle(_voltageMeta,
          voltage.isAcceptableOrUnknown(data['voltage'], _voltageMeta));
    } else if (isInserting) {
      context.missing(_voltageMeta);
    }
    if (data.containsKey('frequency')) {
      context.handle(_frequencyMeta,
          frequency.isAcceptableOrUnknown(data['frequency'], _frequencyMeta));
    } else if (isInserting) {
      context.missing(_frequencyMeta);
    }
    if (data.containsKey('eq_class')) {
      context.handle(_eqClassMeta,
          eqClass.isAcceptableOrUnknown(data['eq_class'], _eqClassMeta));
    } else if (isInserting) {
      context.missing(_eqClassMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EnergyMeterLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EnergyMeterLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EnergyMeterLocalDatasourceImplTable createAlias(String alias) {
    return $EnergyMeterLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EnergyMeterViLocalData extends DataClass
    implements Insertable<EnergyMeterViLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double yr;
  final double ya;
  final double br;
  final double ba;
  final double rr;
  final double ra;
  EnergyMeterViLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.yr,
      @required this.ya,
      @required this.br,
      @required this.ba,
      @required this.rr,
      @required this.ra});
  factory EnergyMeterViLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EnergyMeterViLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      yr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yr']),
      ya: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ya']),
      br: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br']),
      ba: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ba']),
      rr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rr']),
      ra: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ra']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || yr != null) {
      map['yr'] = Variable<double>(yr);
    }
    if (!nullToAbsent || ya != null) {
      map['ya'] = Variable<double>(ya);
    }
    if (!nullToAbsent || br != null) {
      map['br'] = Variable<double>(br);
    }
    if (!nullToAbsent || ba != null) {
      map['ba'] = Variable<double>(ba);
    }
    if (!nullToAbsent || rr != null) {
      map['rr'] = Variable<double>(rr);
    }
    if (!nullToAbsent || ra != null) {
      map['ra'] = Variable<double>(ra);
    }
    return map;
  }

  EnergyMeterViLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EnergyMeterViLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      yr: yr == null && nullToAbsent ? const Value.absent() : Value(yr),
      ya: ya == null && nullToAbsent ? const Value.absent() : Value(ya),
      br: br == null && nullToAbsent ? const Value.absent() : Value(br),
      ba: ba == null && nullToAbsent ? const Value.absent() : Value(ba),
      rr: rr == null && nullToAbsent ? const Value.absent() : Value(rr),
      ra: ra == null && nullToAbsent ? const Value.absent() : Value(ra),
    );
  }

  factory EnergyMeterViLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EnergyMeterViLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      yr: serializer.fromJson<double>(json['yr']),
      ya: serializer.fromJson<double>(json['ya']),
      br: serializer.fromJson<double>(json['br']),
      ba: serializer.fromJson<double>(json['ba']),
      rr: serializer.fromJson<double>(json['rr']),
      ra: serializer.fromJson<double>(json['ra']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'yr': serializer.toJson<double>(yr),
      'ya': serializer.toJson<double>(ya),
      'br': serializer.toJson<double>(br),
      'ba': serializer.toJson<double>(ba),
      'rr': serializer.toJson<double>(rr),
      'ra': serializer.toJson<double>(ra),
    };
  }

  EnergyMeterViLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double yr,
          double ya,
          double br,
          double ba,
          double rr,
          double ra}) =>
      EnergyMeterViLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        yr: yr ?? this.yr,
        ya: ya ?? this.ya,
        br: br ?? this.br,
        ba: ba ?? this.ba,
        rr: rr ?? this.rr,
        ra: ra ?? this.ra,
      );
  @override
  String toString() {
    return (StringBuffer('EnergyMeterViLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('yr: $yr, ')
          ..write('ya: $ya, ')
          ..write('br: $br, ')
          ..write('ba: $ba, ')
          ..write('rr: $rr, ')
          ..write('ra: $ra')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, serialNo, yr, ya, br, ba, rr, ra);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EnergyMeterViLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.yr == this.yr &&
          other.ya == this.ya &&
          other.br == this.br &&
          other.ba == this.ba &&
          other.rr == this.rr &&
          other.ra == this.ra);
}

class EnergyMeterViLocalDatasourceImplCompanion
    extends UpdateCompanion<EnergyMeterViLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> yr;
  final Value<double> ya;
  final Value<double> br;
  final Value<double> ba;
  final Value<double> rr;
  final Value<double> ra;
  const EnergyMeterViLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.yr = const Value.absent(),
    this.ya = const Value.absent(),
    this.br = const Value.absent(),
    this.ba = const Value.absent(),
    this.rr = const Value.absent(),
    this.ra = const Value.absent(),
  });
  EnergyMeterViLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double yr,
    @required double ya,
    @required double br,
    @required double ba,
    @required double rr,
    @required double ra,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        yr = Value(yr),
        ya = Value(ya),
        br = Value(br),
        ba = Value(ba),
        rr = Value(rr),
        ra = Value(ra);
  static Insertable<EnergyMeterViLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> yr,
    Expression<double> ya,
    Expression<double> br,
    Expression<double> ba,
    Expression<double> rr,
    Expression<double> ra,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (yr != null) 'yr': yr,
      if (ya != null) 'ya': ya,
      if (br != null) 'br': br,
      if (ba != null) 'ba': ba,
      if (rr != null) 'rr': rr,
      if (ra != null) 'ra': ra,
    });
  }

  EnergyMeterViLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> yr,
      Value<double> ya,
      Value<double> br,
      Value<double> ba,
      Value<double> rr,
      Value<double> ra}) {
    return EnergyMeterViLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      yr: yr ?? this.yr,
      ya: ya ?? this.ya,
      br: br ?? this.br,
      ba: ba ?? this.ba,
      rr: rr ?? this.rr,
      ra: ra ?? this.ra,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (yr.present) {
      map['yr'] = Variable<double>(yr.value);
    }
    if (ya.present) {
      map['ya'] = Variable<double>(ya.value);
    }
    if (br.present) {
      map['br'] = Variable<double>(br.value);
    }
    if (ba.present) {
      map['ba'] = Variable<double>(ba.value);
    }
    if (rr.present) {
      map['rr'] = Variable<double>(rr.value);
    }
    if (ra.present) {
      map['ra'] = Variable<double>(ra.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EnergyMeterViLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('yr: $yr, ')
          ..write('ya: $ya, ')
          ..write('br: $br, ')
          ..write('ba: $ba, ')
          ..write('rr: $rr, ')
          ..write('ra: $ra')
          ..write(')'))
        .toString();
  }
}

class $EnergyMeterViLocalDatasourceImplTable
    extends EnergyMeterViLocalDatasourceImpl
    with
        TableInfo<$EnergyMeterViLocalDatasourceImplTable,
            EnergyMeterViLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EnergyMeterViLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yrMeta = const VerificationMeta('yr');
  GeneratedColumn<double> _yr;
  @override
  GeneratedColumn<double> get yr =>
      _yr ??= GeneratedColumn<double>('yr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yaMeta = const VerificationMeta('ya');
  GeneratedColumn<double> _ya;
  @override
  GeneratedColumn<double> get ya =>
      _ya ??= GeneratedColumn<double>('ya', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _brMeta = const VerificationMeta('br');
  GeneratedColumn<double> _br;
  @override
  GeneratedColumn<double> get br =>
      _br ??= GeneratedColumn<double>('br', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _baMeta = const VerificationMeta('ba');
  GeneratedColumn<double> _ba;
  @override
  GeneratedColumn<double> get ba =>
      _ba ??= GeneratedColumn<double>('ba', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rrMeta = const VerificationMeta('rr');
  GeneratedColumn<double> _rr;
  @override
  GeneratedColumn<double> get rr =>
      _rr ??= GeneratedColumn<double>('rr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _raMeta = const VerificationMeta('ra');
  GeneratedColumn<double> _ra;
  @override
  GeneratedColumn<double> get ra =>
      _ra ??= GeneratedColumn<double>('ra', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        yr,
        ya,
        br,
        ba,
        rr,
        ra
      ];
  @override
  String get aliasedName => _alias ?? 'energy_meter_vi_local_datasource_impl';
  @override
  String get actualTableName => 'energy_meter_vi_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<EnergyMeterViLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('yr')) {
      context.handle(_yrMeta, yr.isAcceptableOrUnknown(data['yr'], _yrMeta));
    } else if (isInserting) {
      context.missing(_yrMeta);
    }
    if (data.containsKey('ya')) {
      context.handle(_yaMeta, ya.isAcceptableOrUnknown(data['ya'], _yaMeta));
    } else if (isInserting) {
      context.missing(_yaMeta);
    }
    if (data.containsKey('br')) {
      context.handle(_brMeta, br.isAcceptableOrUnknown(data['br'], _brMeta));
    } else if (isInserting) {
      context.missing(_brMeta);
    }
    if (data.containsKey('ba')) {
      context.handle(_baMeta, ba.isAcceptableOrUnknown(data['ba'], _baMeta));
    } else if (isInserting) {
      context.missing(_baMeta);
    }
    if (data.containsKey('rr')) {
      context.handle(_rrMeta, rr.isAcceptableOrUnknown(data['rr'], _rrMeta));
    } else if (isInserting) {
      context.missing(_rrMeta);
    }
    if (data.containsKey('ra')) {
      context.handle(_raMeta, ra.isAcceptableOrUnknown(data['ra'], _raMeta));
    } else if (isInserting) {
      context.missing(_raMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EnergyMeterViLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EnergyMeterViLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EnergyMeterViLocalDatasourceImplTable createAlias(String alias) {
    return $EnergyMeterViLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EnergyMeterCiLocalData extends DataClass
    implements Insertable<EnergyMeterCiLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double yr;
  final double ya;
  final double br;
  final double ba;
  final double rr;
  final double ra;
  EnergyMeterCiLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.yr,
      @required this.ya,
      @required this.br,
      @required this.ba,
      @required this.rr,
      @required this.ra});
  factory EnergyMeterCiLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EnergyMeterCiLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      yr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yr']),
      ya: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ya']),
      br: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br']),
      ba: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ba']),
      rr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rr']),
      ra: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ra']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || yr != null) {
      map['yr'] = Variable<double>(yr);
    }
    if (!nullToAbsent || ya != null) {
      map['ya'] = Variable<double>(ya);
    }
    if (!nullToAbsent || br != null) {
      map['br'] = Variable<double>(br);
    }
    if (!nullToAbsent || ba != null) {
      map['ba'] = Variable<double>(ba);
    }
    if (!nullToAbsent || rr != null) {
      map['rr'] = Variable<double>(rr);
    }
    if (!nullToAbsent || ra != null) {
      map['ra'] = Variable<double>(ra);
    }
    return map;
  }

  EnergyMeterCiLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EnergyMeterCiLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      yr: yr == null && nullToAbsent ? const Value.absent() : Value(yr),
      ya: ya == null && nullToAbsent ? const Value.absent() : Value(ya),
      br: br == null && nullToAbsent ? const Value.absent() : Value(br),
      ba: ba == null && nullToAbsent ? const Value.absent() : Value(ba),
      rr: rr == null && nullToAbsent ? const Value.absent() : Value(rr),
      ra: ra == null && nullToAbsent ? const Value.absent() : Value(ra),
    );
  }

  factory EnergyMeterCiLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EnergyMeterCiLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      yr: serializer.fromJson<double>(json['yr']),
      ya: serializer.fromJson<double>(json['ya']),
      br: serializer.fromJson<double>(json['br']),
      ba: serializer.fromJson<double>(json['ba']),
      rr: serializer.fromJson<double>(json['rr']),
      ra: serializer.fromJson<double>(json['ra']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'yr': serializer.toJson<double>(yr),
      'ya': serializer.toJson<double>(ya),
      'br': serializer.toJson<double>(br),
      'ba': serializer.toJson<double>(ba),
      'rr': serializer.toJson<double>(rr),
      'ra': serializer.toJson<double>(ra),
    };
  }

  EnergyMeterCiLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double yr,
          double ya,
          double br,
          double ba,
          double rr,
          double ra}) =>
      EnergyMeterCiLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        yr: yr ?? this.yr,
        ya: ya ?? this.ya,
        br: br ?? this.br,
        ba: ba ?? this.ba,
        rr: rr ?? this.rr,
        ra: ra ?? this.ra,
      );
  @override
  String toString() {
    return (StringBuffer('EnergyMeterCiLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('yr: $yr, ')
          ..write('ya: $ya, ')
          ..write('br: $br, ')
          ..write('ba: $ba, ')
          ..write('rr: $rr, ')
          ..write('ra: $ra')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, serialNo, yr, ya, br, ba, rr, ra);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EnergyMeterCiLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.yr == this.yr &&
          other.ya == this.ya &&
          other.br == this.br &&
          other.ba == this.ba &&
          other.rr == this.rr &&
          other.ra == this.ra);
}

class EnergyMeterCiLocalDatasourceImplCompanion
    extends UpdateCompanion<EnergyMeterCiLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> yr;
  final Value<double> ya;
  final Value<double> br;
  final Value<double> ba;
  final Value<double> rr;
  final Value<double> ra;
  const EnergyMeterCiLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.yr = const Value.absent(),
    this.ya = const Value.absent(),
    this.br = const Value.absent(),
    this.ba = const Value.absent(),
    this.rr = const Value.absent(),
    this.ra = const Value.absent(),
  });
  EnergyMeterCiLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double yr,
    @required double ya,
    @required double br,
    @required double ba,
    @required double rr,
    @required double ra,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        yr = Value(yr),
        ya = Value(ya),
        br = Value(br),
        ba = Value(ba),
        rr = Value(rr),
        ra = Value(ra);
  static Insertable<EnergyMeterCiLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> yr,
    Expression<double> ya,
    Expression<double> br,
    Expression<double> ba,
    Expression<double> rr,
    Expression<double> ra,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (yr != null) 'yr': yr,
      if (ya != null) 'ya': ya,
      if (br != null) 'br': br,
      if (ba != null) 'ba': ba,
      if (rr != null) 'rr': rr,
      if (ra != null) 'ra': ra,
    });
  }

  EnergyMeterCiLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> yr,
      Value<double> ya,
      Value<double> br,
      Value<double> ba,
      Value<double> rr,
      Value<double> ra}) {
    return EnergyMeterCiLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      yr: yr ?? this.yr,
      ya: ya ?? this.ya,
      br: br ?? this.br,
      ba: ba ?? this.ba,
      rr: rr ?? this.rr,
      ra: ra ?? this.ra,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (yr.present) {
      map['yr'] = Variable<double>(yr.value);
    }
    if (ya.present) {
      map['ya'] = Variable<double>(ya.value);
    }
    if (br.present) {
      map['br'] = Variable<double>(br.value);
    }
    if (ba.present) {
      map['ba'] = Variable<double>(ba.value);
    }
    if (rr.present) {
      map['rr'] = Variable<double>(rr.value);
    }
    if (ra.present) {
      map['ra'] = Variable<double>(ra.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EnergyMeterCiLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('yr: $yr, ')
          ..write('ya: $ya, ')
          ..write('br: $br, ')
          ..write('ba: $ba, ')
          ..write('rr: $rr, ')
          ..write('ra: $ra')
          ..write(')'))
        .toString();
  }
}

class $EnergyMeterCiLocalDatasourceImplTable
    extends EnergyMeterCiLocalDatasourceImpl
    with
        TableInfo<$EnergyMeterCiLocalDatasourceImplTable,
            EnergyMeterCiLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EnergyMeterCiLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yrMeta = const VerificationMeta('yr');
  GeneratedColumn<double> _yr;
  @override
  GeneratedColumn<double> get yr =>
      _yr ??= GeneratedColumn<double>('yr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yaMeta = const VerificationMeta('ya');
  GeneratedColumn<double> _ya;
  @override
  GeneratedColumn<double> get ya =>
      _ya ??= GeneratedColumn<double>('ya', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _brMeta = const VerificationMeta('br');
  GeneratedColumn<double> _br;
  @override
  GeneratedColumn<double> get br =>
      _br ??= GeneratedColumn<double>('br', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _baMeta = const VerificationMeta('ba');
  GeneratedColumn<double> _ba;
  @override
  GeneratedColumn<double> get ba =>
      _ba ??= GeneratedColumn<double>('ba', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rrMeta = const VerificationMeta('rr');
  GeneratedColumn<double> _rr;
  @override
  GeneratedColumn<double> get rr =>
      _rr ??= GeneratedColumn<double>('rr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _raMeta = const VerificationMeta('ra');
  GeneratedColumn<double> _ra;
  @override
  GeneratedColumn<double> get ra =>
      _ra ??= GeneratedColumn<double>('ra', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        yr,
        ya,
        br,
        ba,
        rr,
        ra
      ];
  @override
  String get aliasedName => _alias ?? 'energy_meter_ci_local_datasource_impl';
  @override
  String get actualTableName => 'energy_meter_ci_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<EnergyMeterCiLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('yr')) {
      context.handle(_yrMeta, yr.isAcceptableOrUnknown(data['yr'], _yrMeta));
    } else if (isInserting) {
      context.missing(_yrMeta);
    }
    if (data.containsKey('ya')) {
      context.handle(_yaMeta, ya.isAcceptableOrUnknown(data['ya'], _yaMeta));
    } else if (isInserting) {
      context.missing(_yaMeta);
    }
    if (data.containsKey('br')) {
      context.handle(_brMeta, br.isAcceptableOrUnknown(data['br'], _brMeta));
    } else if (isInserting) {
      context.missing(_brMeta);
    }
    if (data.containsKey('ba')) {
      context.handle(_baMeta, ba.isAcceptableOrUnknown(data['ba'], _baMeta));
    } else if (isInserting) {
      context.missing(_baMeta);
    }
    if (data.containsKey('rr')) {
      context.handle(_rrMeta, rr.isAcceptableOrUnknown(data['rr'], _rrMeta));
    } else if (isInserting) {
      context.missing(_rrMeta);
    }
    if (data.containsKey('ra')) {
      context.handle(_raMeta, ra.isAcceptableOrUnknown(data['ra'], _raMeta));
    } else if (isInserting) {
      context.missing(_raMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EnergyMeterCiLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EnergyMeterCiLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EnergyMeterCiLocalDatasourceImplTable createAlias(String alias) {
    return $EnergyMeterCiLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EnergyMeterFiLocalData extends DataClass
    implements Insertable<EnergyMeterFiLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double yr;
  final double ya;
  final double br;
  final double ba;
  final double rr;
  final double ra;
  EnergyMeterFiLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.yr,
      @required this.ya,
      @required this.br,
      @required this.ba,
      @required this.rr,
      @required this.ra});
  factory EnergyMeterFiLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EnergyMeterFiLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      yr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yr']),
      ya: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ya']),
      br: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br']),
      ba: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ba']),
      rr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rr']),
      ra: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ra']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || yr != null) {
      map['yr'] = Variable<double>(yr);
    }
    if (!nullToAbsent || ya != null) {
      map['ya'] = Variable<double>(ya);
    }
    if (!nullToAbsent || br != null) {
      map['br'] = Variable<double>(br);
    }
    if (!nullToAbsent || ba != null) {
      map['ba'] = Variable<double>(ba);
    }
    if (!nullToAbsent || rr != null) {
      map['rr'] = Variable<double>(rr);
    }
    if (!nullToAbsent || ra != null) {
      map['ra'] = Variable<double>(ra);
    }
    return map;
  }

  EnergyMeterFiLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EnergyMeterFiLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      yr: yr == null && nullToAbsent ? const Value.absent() : Value(yr),
      ya: ya == null && nullToAbsent ? const Value.absent() : Value(ya),
      br: br == null && nullToAbsent ? const Value.absent() : Value(br),
      ba: ba == null && nullToAbsent ? const Value.absent() : Value(ba),
      rr: rr == null && nullToAbsent ? const Value.absent() : Value(rr),
      ra: ra == null && nullToAbsent ? const Value.absent() : Value(ra),
    );
  }

  factory EnergyMeterFiLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EnergyMeterFiLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      yr: serializer.fromJson<double>(json['yr']),
      ya: serializer.fromJson<double>(json['ya']),
      br: serializer.fromJson<double>(json['br']),
      ba: serializer.fromJson<double>(json['ba']),
      rr: serializer.fromJson<double>(json['rr']),
      ra: serializer.fromJson<double>(json['ra']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'yr': serializer.toJson<double>(yr),
      'ya': serializer.toJson<double>(ya),
      'br': serializer.toJson<double>(br),
      'ba': serializer.toJson<double>(ba),
      'rr': serializer.toJson<double>(rr),
      'ra': serializer.toJson<double>(ra),
    };
  }

  EnergyMeterFiLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double yr,
          double ya,
          double br,
          double ba,
          double rr,
          double ra}) =>
      EnergyMeterFiLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        yr: yr ?? this.yr,
        ya: ya ?? this.ya,
        br: br ?? this.br,
        ba: ba ?? this.ba,
        rr: rr ?? this.rr,
        ra: ra ?? this.ra,
      );
  @override
  String toString() {
    return (StringBuffer('EnergyMeterFiLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('yr: $yr, ')
          ..write('ya: $ya, ')
          ..write('br: $br, ')
          ..write('ba: $ba, ')
          ..write('rr: $rr, ')
          ..write('ra: $ra')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, serialNo, yr, ya, br, ba, rr, ra);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EnergyMeterFiLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.yr == this.yr &&
          other.ya == this.ya &&
          other.br == this.br &&
          other.ba == this.ba &&
          other.rr == this.rr &&
          other.ra == this.ra);
}

class EnergyMeterFiLocalDatasourceImplCompanion
    extends UpdateCompanion<EnergyMeterFiLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> yr;
  final Value<double> ya;
  final Value<double> br;
  final Value<double> ba;
  final Value<double> rr;
  final Value<double> ra;
  const EnergyMeterFiLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.yr = const Value.absent(),
    this.ya = const Value.absent(),
    this.br = const Value.absent(),
    this.ba = const Value.absent(),
    this.rr = const Value.absent(),
    this.ra = const Value.absent(),
  });
  EnergyMeterFiLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double yr,
    @required double ya,
    @required double br,
    @required double ba,
    @required double rr,
    @required double ra,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        yr = Value(yr),
        ya = Value(ya),
        br = Value(br),
        ba = Value(ba),
        rr = Value(rr),
        ra = Value(ra);
  static Insertable<EnergyMeterFiLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> yr,
    Expression<double> ya,
    Expression<double> br,
    Expression<double> ba,
    Expression<double> rr,
    Expression<double> ra,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (yr != null) 'yr': yr,
      if (ya != null) 'ya': ya,
      if (br != null) 'br': br,
      if (ba != null) 'ba': ba,
      if (rr != null) 'rr': rr,
      if (ra != null) 'ra': ra,
    });
  }

  EnergyMeterFiLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> yr,
      Value<double> ya,
      Value<double> br,
      Value<double> ba,
      Value<double> rr,
      Value<double> ra}) {
    return EnergyMeterFiLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      yr: yr ?? this.yr,
      ya: ya ?? this.ya,
      br: br ?? this.br,
      ba: ba ?? this.ba,
      rr: rr ?? this.rr,
      ra: ra ?? this.ra,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (yr.present) {
      map['yr'] = Variable<double>(yr.value);
    }
    if (ya.present) {
      map['ya'] = Variable<double>(ya.value);
    }
    if (br.present) {
      map['br'] = Variable<double>(br.value);
    }
    if (ba.present) {
      map['ba'] = Variable<double>(ba.value);
    }
    if (rr.present) {
      map['rr'] = Variable<double>(rr.value);
    }
    if (ra.present) {
      map['ra'] = Variable<double>(ra.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EnergyMeterFiLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('yr: $yr, ')
          ..write('ya: $ya, ')
          ..write('br: $br, ')
          ..write('ba: $ba, ')
          ..write('rr: $rr, ')
          ..write('ra: $ra')
          ..write(')'))
        .toString();
  }
}

class $EnergyMeterFiLocalDatasourceImplTable
    extends EnergyMeterFiLocalDatasourceImpl
    with
        TableInfo<$EnergyMeterFiLocalDatasourceImplTable,
            EnergyMeterFiLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EnergyMeterFiLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yrMeta = const VerificationMeta('yr');
  GeneratedColumn<double> _yr;
  @override
  GeneratedColumn<double> get yr =>
      _yr ??= GeneratedColumn<double>('yr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yaMeta = const VerificationMeta('ya');
  GeneratedColumn<double> _ya;
  @override
  GeneratedColumn<double> get ya =>
      _ya ??= GeneratedColumn<double>('ya', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _brMeta = const VerificationMeta('br');
  GeneratedColumn<double> _br;
  @override
  GeneratedColumn<double> get br =>
      _br ??= GeneratedColumn<double>('br', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _baMeta = const VerificationMeta('ba');
  GeneratedColumn<double> _ba;
  @override
  GeneratedColumn<double> get ba =>
      _ba ??= GeneratedColumn<double>('ba', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rrMeta = const VerificationMeta('rr');
  GeneratedColumn<double> _rr;
  @override
  GeneratedColumn<double> get rr =>
      _rr ??= GeneratedColumn<double>('rr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _raMeta = const VerificationMeta('ra');
  GeneratedColumn<double> _ra;
  @override
  GeneratedColumn<double> get ra =>
      _ra ??= GeneratedColumn<double>('ra', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        yr,
        ya,
        br,
        ba,
        rr,
        ra
      ];
  @override
  String get aliasedName => _alias ?? 'energy_meter_fi_local_datasource_impl';
  @override
  String get actualTableName => 'energy_meter_fi_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<EnergyMeterFiLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('yr')) {
      context.handle(_yrMeta, yr.isAcceptableOrUnknown(data['yr'], _yrMeta));
    } else if (isInserting) {
      context.missing(_yrMeta);
    }
    if (data.containsKey('ya')) {
      context.handle(_yaMeta, ya.isAcceptableOrUnknown(data['ya'], _yaMeta));
    } else if (isInserting) {
      context.missing(_yaMeta);
    }
    if (data.containsKey('br')) {
      context.handle(_brMeta, br.isAcceptableOrUnknown(data['br'], _brMeta));
    } else if (isInserting) {
      context.missing(_brMeta);
    }
    if (data.containsKey('ba')) {
      context.handle(_baMeta, ba.isAcceptableOrUnknown(data['ba'], _baMeta));
    } else if (isInserting) {
      context.missing(_baMeta);
    }
    if (data.containsKey('rr')) {
      context.handle(_rrMeta, rr.isAcceptableOrUnknown(data['rr'], _rrMeta));
    } else if (isInserting) {
      context.missing(_rrMeta);
    }
    if (data.containsKey('ra')) {
      context.handle(_raMeta, ra.isAcceptableOrUnknown(data['ra'], _raMeta));
    } else if (isInserting) {
      context.missing(_raMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EnergyMeterFiLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EnergyMeterFiLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EnergyMeterFiLocalDatasourceImplTable createAlias(String alias) {
    return $EnergyMeterFiLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EnergyMeterPfiLocalData extends DataClass
    implements Insertable<EnergyMeterPfiLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double yr;
  final double ya;
  final double br;
  final double ba;
  final double rr;
  final double ra;
  EnergyMeterPfiLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.yr,
      @required this.ya,
      @required this.br,
      @required this.ba,
      @required this.rr,
      @required this.ra});
  factory EnergyMeterPfiLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EnergyMeterPfiLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      yr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yr']),
      ya: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ya']),
      br: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br']),
      ba: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ba']),
      rr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rr']),
      ra: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ra']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || yr != null) {
      map['yr'] = Variable<double>(yr);
    }
    if (!nullToAbsent || ya != null) {
      map['ya'] = Variable<double>(ya);
    }
    if (!nullToAbsent || br != null) {
      map['br'] = Variable<double>(br);
    }
    if (!nullToAbsent || ba != null) {
      map['ba'] = Variable<double>(ba);
    }
    if (!nullToAbsent || rr != null) {
      map['rr'] = Variable<double>(rr);
    }
    if (!nullToAbsent || ra != null) {
      map['ra'] = Variable<double>(ra);
    }
    return map;
  }

  EnergyMeterPfiLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EnergyMeterPfiLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      yr: yr == null && nullToAbsent ? const Value.absent() : Value(yr),
      ya: ya == null && nullToAbsent ? const Value.absent() : Value(ya),
      br: br == null && nullToAbsent ? const Value.absent() : Value(br),
      ba: ba == null && nullToAbsent ? const Value.absent() : Value(ba),
      rr: rr == null && nullToAbsent ? const Value.absent() : Value(rr),
      ra: ra == null && nullToAbsent ? const Value.absent() : Value(ra),
    );
  }

  factory EnergyMeterPfiLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EnergyMeterPfiLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      yr: serializer.fromJson<double>(json['yr']),
      ya: serializer.fromJson<double>(json['ya']),
      br: serializer.fromJson<double>(json['br']),
      ba: serializer.fromJson<double>(json['ba']),
      rr: serializer.fromJson<double>(json['rr']),
      ra: serializer.fromJson<double>(json['ra']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'yr': serializer.toJson<double>(yr),
      'ya': serializer.toJson<double>(ya),
      'br': serializer.toJson<double>(br),
      'ba': serializer.toJson<double>(ba),
      'rr': serializer.toJson<double>(rr),
      'ra': serializer.toJson<double>(ra),
    };
  }

  EnergyMeterPfiLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double yr,
          double ya,
          double br,
          double ba,
          double rr,
          double ra}) =>
      EnergyMeterPfiLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        yr: yr ?? this.yr,
        ya: ya ?? this.ya,
        br: br ?? this.br,
        ba: ba ?? this.ba,
        rr: rr ?? this.rr,
        ra: ra ?? this.ra,
      );
  @override
  String toString() {
    return (StringBuffer('EnergyMeterPfiLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('yr: $yr, ')
          ..write('ya: $ya, ')
          ..write('br: $br, ')
          ..write('ba: $ba, ')
          ..write('rr: $rr, ')
          ..write('ra: $ra')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, serialNo, yr, ya, br, ba, rr, ra);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EnergyMeterPfiLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.yr == this.yr &&
          other.ya == this.ya &&
          other.br == this.br &&
          other.ba == this.ba &&
          other.rr == this.rr &&
          other.ra == this.ra);
}

class EnergyMeterPfiLocalDatasourceImplCompanion
    extends UpdateCompanion<EnergyMeterPfiLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> yr;
  final Value<double> ya;
  final Value<double> br;
  final Value<double> ba;
  final Value<double> rr;
  final Value<double> ra;
  const EnergyMeterPfiLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.yr = const Value.absent(),
    this.ya = const Value.absent(),
    this.br = const Value.absent(),
    this.ba = const Value.absent(),
    this.rr = const Value.absent(),
    this.ra = const Value.absent(),
  });
  EnergyMeterPfiLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double yr,
    @required double ya,
    @required double br,
    @required double ba,
    @required double rr,
    @required double ra,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        yr = Value(yr),
        ya = Value(ya),
        br = Value(br),
        ba = Value(ba),
        rr = Value(rr),
        ra = Value(ra);
  static Insertable<EnergyMeterPfiLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> yr,
    Expression<double> ya,
    Expression<double> br,
    Expression<double> ba,
    Expression<double> rr,
    Expression<double> ra,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (yr != null) 'yr': yr,
      if (ya != null) 'ya': ya,
      if (br != null) 'br': br,
      if (ba != null) 'ba': ba,
      if (rr != null) 'rr': rr,
      if (ra != null) 'ra': ra,
    });
  }

  EnergyMeterPfiLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> yr,
      Value<double> ya,
      Value<double> br,
      Value<double> ba,
      Value<double> rr,
      Value<double> ra}) {
    return EnergyMeterPfiLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      yr: yr ?? this.yr,
      ya: ya ?? this.ya,
      br: br ?? this.br,
      ba: ba ?? this.ba,
      rr: rr ?? this.rr,
      ra: ra ?? this.ra,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (yr.present) {
      map['yr'] = Variable<double>(yr.value);
    }
    if (ya.present) {
      map['ya'] = Variable<double>(ya.value);
    }
    if (br.present) {
      map['br'] = Variable<double>(br.value);
    }
    if (ba.present) {
      map['ba'] = Variable<double>(ba.value);
    }
    if (rr.present) {
      map['rr'] = Variable<double>(rr.value);
    }
    if (ra.present) {
      map['ra'] = Variable<double>(ra.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EnergyMeterPfiLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('yr: $yr, ')
          ..write('ya: $ya, ')
          ..write('br: $br, ')
          ..write('ba: $ba, ')
          ..write('rr: $rr, ')
          ..write('ra: $ra')
          ..write(')'))
        .toString();
  }
}

class $EnergyMeterPfiLocalDatasourceImplTable
    extends EnergyMeterPfiLocalDatasourceImpl
    with
        TableInfo<$EnergyMeterPfiLocalDatasourceImplTable,
            EnergyMeterPfiLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EnergyMeterPfiLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yrMeta = const VerificationMeta('yr');
  GeneratedColumn<double> _yr;
  @override
  GeneratedColumn<double> get yr =>
      _yr ??= GeneratedColumn<double>('yr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yaMeta = const VerificationMeta('ya');
  GeneratedColumn<double> _ya;
  @override
  GeneratedColumn<double> get ya =>
      _ya ??= GeneratedColumn<double>('ya', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _brMeta = const VerificationMeta('br');
  GeneratedColumn<double> _br;
  @override
  GeneratedColumn<double> get br =>
      _br ??= GeneratedColumn<double>('br', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _baMeta = const VerificationMeta('ba');
  GeneratedColumn<double> _ba;
  @override
  GeneratedColumn<double> get ba =>
      _ba ??= GeneratedColumn<double>('ba', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rrMeta = const VerificationMeta('rr');
  GeneratedColumn<double> _rr;
  @override
  GeneratedColumn<double> get rr =>
      _rr ??= GeneratedColumn<double>('rr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _raMeta = const VerificationMeta('ra');
  GeneratedColumn<double> _ra;
  @override
  GeneratedColumn<double> get ra =>
      _ra ??= GeneratedColumn<double>('ra', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        yr,
        ya,
        br,
        ba,
        rr,
        ra
      ];
  @override
  String get aliasedName => _alias ?? 'energy_meter_pfi_local_datasource_impl';
  @override
  String get actualTableName => 'energy_meter_pfi_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<EnergyMeterPfiLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('yr')) {
      context.handle(_yrMeta, yr.isAcceptableOrUnknown(data['yr'], _yrMeta));
    } else if (isInserting) {
      context.missing(_yrMeta);
    }
    if (data.containsKey('ya')) {
      context.handle(_yaMeta, ya.isAcceptableOrUnknown(data['ya'], _yaMeta));
    } else if (isInserting) {
      context.missing(_yaMeta);
    }
    if (data.containsKey('br')) {
      context.handle(_brMeta, br.isAcceptableOrUnknown(data['br'], _brMeta));
    } else if (isInserting) {
      context.missing(_brMeta);
    }
    if (data.containsKey('ba')) {
      context.handle(_baMeta, ba.isAcceptableOrUnknown(data['ba'], _baMeta));
    } else if (isInserting) {
      context.missing(_baMeta);
    }
    if (data.containsKey('rr')) {
      context.handle(_rrMeta, rr.isAcceptableOrUnknown(data['rr'], _rrMeta));
    } else if (isInserting) {
      context.missing(_rrMeta);
    }
    if (data.containsKey('ra')) {
      context.handle(_raMeta, ra.isAcceptableOrUnknown(data['ra'], _raMeta));
    } else if (isInserting) {
      context.missing(_raMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EnergyMeterPfiLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EnergyMeterPfiLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EnergyMeterPfiLocalDatasourceImplTable createAlias(String alias) {
    return $EnergyMeterPfiLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EnergyMeterApLocalData extends DataClass
    implements Insertable<EnergyMeterApLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double initialTestMeterReading;
  final double afterTestMeterReading;
  final double testMeterReading_R;
  final double initialStandardMeterReading;
  final double afterStandardMeterReading;
  final double standardMeterReading_A;
  EnergyMeterApLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.initialTestMeterReading,
      @required this.afterTestMeterReading,
      @required this.testMeterReading_R,
      @required this.initialStandardMeterReading,
      @required this.afterStandardMeterReading,
      @required this.standardMeterReading_A});
  factory EnergyMeterApLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EnergyMeterApLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      initialTestMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}initial_test_meter_reading']),
      afterTestMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}after_test_meter_reading']),
      testMeterReading_R: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}test_meter_reading_r']),
      initialStandardMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}initial_standard_meter_reading']),
      afterStandardMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}after_standard_meter_reading']),
      standardMeterReading_A: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}standard_meter_reading_a']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || initialTestMeterReading != null) {
      map['initial_test_meter_reading'] =
          Variable<double>(initialTestMeterReading);
    }
    if (!nullToAbsent || afterTestMeterReading != null) {
      map['after_test_meter_reading'] = Variable<double>(afterTestMeterReading);
    }
    if (!nullToAbsent || testMeterReading_R != null) {
      map['test_meter_reading_r'] = Variable<double>(testMeterReading_R);
    }
    if (!nullToAbsent || initialStandardMeterReading != null) {
      map['initial_standard_meter_reading'] =
          Variable<double>(initialStandardMeterReading);
    }
    if (!nullToAbsent || afterStandardMeterReading != null) {
      map['after_standard_meter_reading'] =
          Variable<double>(afterStandardMeterReading);
    }
    if (!nullToAbsent || standardMeterReading_A != null) {
      map['standard_meter_reading_a'] =
          Variable<double>(standardMeterReading_A);
    }
    return map;
  }

  EnergyMeterApLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EnergyMeterApLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      initialTestMeterReading: initialTestMeterReading == null && nullToAbsent
          ? const Value.absent()
          : Value(initialTestMeterReading),
      afterTestMeterReading: afterTestMeterReading == null && nullToAbsent
          ? const Value.absent()
          : Value(afterTestMeterReading),
      testMeterReading_R: testMeterReading_R == null && nullToAbsent
          ? const Value.absent()
          : Value(testMeterReading_R),
      initialStandardMeterReading:
          initialStandardMeterReading == null && nullToAbsent
              ? const Value.absent()
              : Value(initialStandardMeterReading),
      afterStandardMeterReading:
          afterStandardMeterReading == null && nullToAbsent
              ? const Value.absent()
              : Value(afterStandardMeterReading),
      standardMeterReading_A: standardMeterReading_A == null && nullToAbsent
          ? const Value.absent()
          : Value(standardMeterReading_A),
    );
  }

  factory EnergyMeterApLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EnergyMeterApLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      initialTestMeterReading:
          serializer.fromJson<double>(json['initialTestMeterReading']),
      afterTestMeterReading:
          serializer.fromJson<double>(json['afterTestMeterReading']),
      testMeterReading_R:
          serializer.fromJson<double>(json['testMeterReading_R']),
      initialStandardMeterReading:
          serializer.fromJson<double>(json['initialStandardMeterReading']),
      afterStandardMeterReading:
          serializer.fromJson<double>(json['afterStandardMeterReading']),
      standardMeterReading_A:
          serializer.fromJson<double>(json['standardMeterReading_A']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'initialTestMeterReading':
          serializer.toJson<double>(initialTestMeterReading),
      'afterTestMeterReading': serializer.toJson<double>(afterTestMeterReading),
      'testMeterReading_R': serializer.toJson<double>(testMeterReading_R),
      'initialStandardMeterReading':
          serializer.toJson<double>(initialStandardMeterReading),
      'afterStandardMeterReading':
          serializer.toJson<double>(afterStandardMeterReading),
      'standardMeterReading_A':
          serializer.toJson<double>(standardMeterReading_A),
    };
  }

  EnergyMeterApLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double initialTestMeterReading,
          double afterTestMeterReading,
          double testMeterReading_R,
          double initialStandardMeterReading,
          double afterStandardMeterReading,
          double standardMeterReading_A}) =>
      EnergyMeterApLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        initialTestMeterReading:
            initialTestMeterReading ?? this.initialTestMeterReading,
        afterTestMeterReading:
            afterTestMeterReading ?? this.afterTestMeterReading,
        testMeterReading_R: testMeterReading_R ?? this.testMeterReading_R,
        initialStandardMeterReading:
            initialStandardMeterReading ?? this.initialStandardMeterReading,
        afterStandardMeterReading:
            afterStandardMeterReading ?? this.afterStandardMeterReading,
        standardMeterReading_A:
            standardMeterReading_A ?? this.standardMeterReading_A,
      );
  @override
  String toString() {
    return (StringBuffer('EnergyMeterApLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('initialTestMeterReading: $initialTestMeterReading, ')
          ..write('afterTestMeterReading: $afterTestMeterReading, ')
          ..write('testMeterReading_R: $testMeterReading_R, ')
          ..write('initialStandardMeterReading: $initialStandardMeterReading, ')
          ..write('afterStandardMeterReading: $afterStandardMeterReading, ')
          ..write('standardMeterReading_A: $standardMeterReading_A')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      EquipmentType,
      databaseID,
      id,
      trNo,
      serialNo,
      initialTestMeterReading,
      afterTestMeterReading,
      testMeterReading_R,
      initialStandardMeterReading,
      afterStandardMeterReading,
      standardMeterReading_A);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EnergyMeterApLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.initialTestMeterReading == this.initialTestMeterReading &&
          other.afterTestMeterReading == this.afterTestMeterReading &&
          other.testMeterReading_R == this.testMeterReading_R &&
          other.initialStandardMeterReading ==
              this.initialStandardMeterReading &&
          other.afterStandardMeterReading == this.afterStandardMeterReading &&
          other.standardMeterReading_A == this.standardMeterReading_A);
}

class EnergyMeterApLocalDatasourceImplCompanion
    extends UpdateCompanion<EnergyMeterApLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> initialTestMeterReading;
  final Value<double> afterTestMeterReading;
  final Value<double> testMeterReading_R;
  final Value<double> initialStandardMeterReading;
  final Value<double> afterStandardMeterReading;
  final Value<double> standardMeterReading_A;
  const EnergyMeterApLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.initialTestMeterReading = const Value.absent(),
    this.afterTestMeterReading = const Value.absent(),
    this.testMeterReading_R = const Value.absent(),
    this.initialStandardMeterReading = const Value.absent(),
    this.afterStandardMeterReading = const Value.absent(),
    this.standardMeterReading_A = const Value.absent(),
  });
  EnergyMeterApLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double initialTestMeterReading,
    @required double afterTestMeterReading,
    @required double testMeterReading_R,
    @required double initialStandardMeterReading,
    @required double afterStandardMeterReading,
    @required double standardMeterReading_A,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        initialTestMeterReading = Value(initialTestMeterReading),
        afterTestMeterReading = Value(afterTestMeterReading),
        testMeterReading_R = Value(testMeterReading_R),
        initialStandardMeterReading = Value(initialStandardMeterReading),
        afterStandardMeterReading = Value(afterStandardMeterReading),
        standardMeterReading_A = Value(standardMeterReading_A);
  static Insertable<EnergyMeterApLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> initialTestMeterReading,
    Expression<double> afterTestMeterReading,
    Expression<double> testMeterReading_R,
    Expression<double> initialStandardMeterReading,
    Expression<double> afterStandardMeterReading,
    Expression<double> standardMeterReading_A,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (initialTestMeterReading != null)
        'initial_test_meter_reading': initialTestMeterReading,
      if (afterTestMeterReading != null)
        'after_test_meter_reading': afterTestMeterReading,
      if (testMeterReading_R != null)
        'test_meter_reading_r': testMeterReading_R,
      if (initialStandardMeterReading != null)
        'initial_standard_meter_reading': initialStandardMeterReading,
      if (afterStandardMeterReading != null)
        'after_standard_meter_reading': afterStandardMeterReading,
      if (standardMeterReading_A != null)
        'standard_meter_reading_a': standardMeterReading_A,
    });
  }

  EnergyMeterApLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> initialTestMeterReading,
      Value<double> afterTestMeterReading,
      Value<double> testMeterReading_R,
      Value<double> initialStandardMeterReading,
      Value<double> afterStandardMeterReading,
      Value<double> standardMeterReading_A}) {
    return EnergyMeterApLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      initialTestMeterReading:
          initialTestMeterReading ?? this.initialTestMeterReading,
      afterTestMeterReading:
          afterTestMeterReading ?? this.afterTestMeterReading,
      testMeterReading_R: testMeterReading_R ?? this.testMeterReading_R,
      initialStandardMeterReading:
          initialStandardMeterReading ?? this.initialStandardMeterReading,
      afterStandardMeterReading:
          afterStandardMeterReading ?? this.afterStandardMeterReading,
      standardMeterReading_A:
          standardMeterReading_A ?? this.standardMeterReading_A,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (initialTestMeterReading.present) {
      map['initial_test_meter_reading'] =
          Variable<double>(initialTestMeterReading.value);
    }
    if (afterTestMeterReading.present) {
      map['after_test_meter_reading'] =
          Variable<double>(afterTestMeterReading.value);
    }
    if (testMeterReading_R.present) {
      map['test_meter_reading_r'] = Variable<double>(testMeterReading_R.value);
    }
    if (initialStandardMeterReading.present) {
      map['initial_standard_meter_reading'] =
          Variable<double>(initialStandardMeterReading.value);
    }
    if (afterStandardMeterReading.present) {
      map['after_standard_meter_reading'] =
          Variable<double>(afterStandardMeterReading.value);
    }
    if (standardMeterReading_A.present) {
      map['standard_meter_reading_a'] =
          Variable<double>(standardMeterReading_A.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EnergyMeterApLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('initialTestMeterReading: $initialTestMeterReading, ')
          ..write('afterTestMeterReading: $afterTestMeterReading, ')
          ..write('testMeterReading_R: $testMeterReading_R, ')
          ..write('initialStandardMeterReading: $initialStandardMeterReading, ')
          ..write('afterStandardMeterReading: $afterStandardMeterReading, ')
          ..write('standardMeterReading_A: $standardMeterReading_A')
          ..write(')'))
        .toString();
  }
}

class $EnergyMeterApLocalDatasourceImplTable
    extends EnergyMeterApLocalDatasourceImpl
    with
        TableInfo<$EnergyMeterApLocalDatasourceImplTable,
            EnergyMeterApLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EnergyMeterApLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _initialTestMeterReadingMeta =
      const VerificationMeta('initialTestMeterReading');
  GeneratedColumn<double> _initialTestMeterReading;
  @override
  GeneratedColumn<double> get initialTestMeterReading =>
      _initialTestMeterReading ??= GeneratedColumn<double>(
          'initial_test_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _afterTestMeterReadingMeta =
      const VerificationMeta('afterTestMeterReading');
  GeneratedColumn<double> _afterTestMeterReading;
  @override
  GeneratedColumn<double> get afterTestMeterReading =>
      _afterTestMeterReading ??= GeneratedColumn<double>(
          'after_test_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _testMeterReading_RMeta =
      const VerificationMeta('testMeterReading_R');
  GeneratedColumn<double> _testMeterReading_R;
  @override
  GeneratedColumn<double> get testMeterReading_R => _testMeterReading_R ??=
      GeneratedColumn<double>('test_meter_reading_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _initialStandardMeterReadingMeta =
      const VerificationMeta('initialStandardMeterReading');
  GeneratedColumn<double> _initialStandardMeterReading;
  @override
  GeneratedColumn<double> get initialStandardMeterReading =>
      _initialStandardMeterReading ??= GeneratedColumn<double>(
          'initial_standard_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _afterStandardMeterReadingMeta =
      const VerificationMeta('afterStandardMeterReading');
  GeneratedColumn<double> _afterStandardMeterReading;
  @override
  GeneratedColumn<double> get afterStandardMeterReading =>
      _afterStandardMeterReading ??= GeneratedColumn<double>(
          'after_standard_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _standardMeterReading_AMeta =
      const VerificationMeta('standardMeterReading_A');
  GeneratedColumn<double> _standardMeterReading_A;
  @override
  GeneratedColumn<double> get standardMeterReading_A =>
      _standardMeterReading_A ??= GeneratedColumn<double>(
          'standard_meter_reading_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        initialTestMeterReading,
        afterTestMeterReading,
        testMeterReading_R,
        initialStandardMeterReading,
        afterStandardMeterReading,
        standardMeterReading_A
      ];
  @override
  String get aliasedName => _alias ?? 'energy_meter_ap_local_datasource_impl';
  @override
  String get actualTableName => 'energy_meter_ap_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<EnergyMeterApLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('initial_test_meter_reading')) {
      context.handle(
          _initialTestMeterReadingMeta,
          initialTestMeterReading.isAcceptableOrUnknown(
              data['initial_test_meter_reading'],
              _initialTestMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_initialTestMeterReadingMeta);
    }
    if (data.containsKey('after_test_meter_reading')) {
      context.handle(
          _afterTestMeterReadingMeta,
          afterTestMeterReading.isAcceptableOrUnknown(
              data['after_test_meter_reading'], _afterTestMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_afterTestMeterReadingMeta);
    }
    if (data.containsKey('test_meter_reading_r')) {
      context.handle(
          _testMeterReading_RMeta,
          testMeterReading_R.isAcceptableOrUnknown(
              data['test_meter_reading_r'], _testMeterReading_RMeta));
    } else if (isInserting) {
      context.missing(_testMeterReading_RMeta);
    }
    if (data.containsKey('initial_standard_meter_reading')) {
      context.handle(
          _initialStandardMeterReadingMeta,
          initialStandardMeterReading.isAcceptableOrUnknown(
              data['initial_standard_meter_reading'],
              _initialStandardMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_initialStandardMeterReadingMeta);
    }
    if (data.containsKey('after_standard_meter_reading')) {
      context.handle(
          _afterStandardMeterReadingMeta,
          afterStandardMeterReading.isAcceptableOrUnknown(
              data['after_standard_meter_reading'],
              _afterStandardMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_afterStandardMeterReadingMeta);
    }
    if (data.containsKey('standard_meter_reading_a')) {
      context.handle(
          _standardMeterReading_AMeta,
          standardMeterReading_A.isAcceptableOrUnknown(
              data['standard_meter_reading_a'], _standardMeterReading_AMeta));
    } else if (isInserting) {
      context.missing(_standardMeterReading_AMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EnergyMeterApLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EnergyMeterApLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EnergyMeterApLocalDatasourceImplTable createAlias(String alias) {
    return $EnergyMeterApLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EnergyMeterRpLocalData extends DataClass
    implements Insertable<EnergyMeterRpLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double initialTestMeterReading;
  final double afterTestMeterReading;
  final double testMeterReading_R;
  final double initialStandardMeterReading;
  final double afterStandardMeterReading;
  final double standardMeterReading_A;
  EnergyMeterRpLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.initialTestMeterReading,
      @required this.afterTestMeterReading,
      @required this.testMeterReading_R,
      @required this.initialStandardMeterReading,
      @required this.afterStandardMeterReading,
      @required this.standardMeterReading_A});
  factory EnergyMeterRpLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EnergyMeterRpLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      initialTestMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}initial_test_meter_reading']),
      afterTestMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}after_test_meter_reading']),
      testMeterReading_R: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}test_meter_reading_r']),
      initialStandardMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}initial_standard_meter_reading']),
      afterStandardMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}after_standard_meter_reading']),
      standardMeterReading_A: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}standard_meter_reading_a']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || initialTestMeterReading != null) {
      map['initial_test_meter_reading'] =
          Variable<double>(initialTestMeterReading);
    }
    if (!nullToAbsent || afterTestMeterReading != null) {
      map['after_test_meter_reading'] = Variable<double>(afterTestMeterReading);
    }
    if (!nullToAbsent || testMeterReading_R != null) {
      map['test_meter_reading_r'] = Variable<double>(testMeterReading_R);
    }
    if (!nullToAbsent || initialStandardMeterReading != null) {
      map['initial_standard_meter_reading'] =
          Variable<double>(initialStandardMeterReading);
    }
    if (!nullToAbsent || afterStandardMeterReading != null) {
      map['after_standard_meter_reading'] =
          Variable<double>(afterStandardMeterReading);
    }
    if (!nullToAbsent || standardMeterReading_A != null) {
      map['standard_meter_reading_a'] =
          Variable<double>(standardMeterReading_A);
    }
    return map;
  }

  EnergyMeterRpLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EnergyMeterRpLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      initialTestMeterReading: initialTestMeterReading == null && nullToAbsent
          ? const Value.absent()
          : Value(initialTestMeterReading),
      afterTestMeterReading: afterTestMeterReading == null && nullToAbsent
          ? const Value.absent()
          : Value(afterTestMeterReading),
      testMeterReading_R: testMeterReading_R == null && nullToAbsent
          ? const Value.absent()
          : Value(testMeterReading_R),
      initialStandardMeterReading:
          initialStandardMeterReading == null && nullToAbsent
              ? const Value.absent()
              : Value(initialStandardMeterReading),
      afterStandardMeterReading:
          afterStandardMeterReading == null && nullToAbsent
              ? const Value.absent()
              : Value(afterStandardMeterReading),
      standardMeterReading_A: standardMeterReading_A == null && nullToAbsent
          ? const Value.absent()
          : Value(standardMeterReading_A),
    );
  }

  factory EnergyMeterRpLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EnergyMeterRpLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      initialTestMeterReading:
          serializer.fromJson<double>(json['initialTestMeterReading']),
      afterTestMeterReading:
          serializer.fromJson<double>(json['afterTestMeterReading']),
      testMeterReading_R:
          serializer.fromJson<double>(json['testMeterReading_R']),
      initialStandardMeterReading:
          serializer.fromJson<double>(json['initialStandardMeterReading']),
      afterStandardMeterReading:
          serializer.fromJson<double>(json['afterStandardMeterReading']),
      standardMeterReading_A:
          serializer.fromJson<double>(json['standardMeterReading_A']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'initialTestMeterReading':
          serializer.toJson<double>(initialTestMeterReading),
      'afterTestMeterReading': serializer.toJson<double>(afterTestMeterReading),
      'testMeterReading_R': serializer.toJson<double>(testMeterReading_R),
      'initialStandardMeterReading':
          serializer.toJson<double>(initialStandardMeterReading),
      'afterStandardMeterReading':
          serializer.toJson<double>(afterStandardMeterReading),
      'standardMeterReading_A':
          serializer.toJson<double>(standardMeterReading_A),
    };
  }

  EnergyMeterRpLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double initialTestMeterReading,
          double afterTestMeterReading,
          double testMeterReading_R,
          double initialStandardMeterReading,
          double afterStandardMeterReading,
          double standardMeterReading_A}) =>
      EnergyMeterRpLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        initialTestMeterReading:
            initialTestMeterReading ?? this.initialTestMeterReading,
        afterTestMeterReading:
            afterTestMeterReading ?? this.afterTestMeterReading,
        testMeterReading_R: testMeterReading_R ?? this.testMeterReading_R,
        initialStandardMeterReading:
            initialStandardMeterReading ?? this.initialStandardMeterReading,
        afterStandardMeterReading:
            afterStandardMeterReading ?? this.afterStandardMeterReading,
        standardMeterReading_A:
            standardMeterReading_A ?? this.standardMeterReading_A,
      );
  @override
  String toString() {
    return (StringBuffer('EnergyMeterRpLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('initialTestMeterReading: $initialTestMeterReading, ')
          ..write('afterTestMeterReading: $afterTestMeterReading, ')
          ..write('testMeterReading_R: $testMeterReading_R, ')
          ..write('initialStandardMeterReading: $initialStandardMeterReading, ')
          ..write('afterStandardMeterReading: $afterStandardMeterReading, ')
          ..write('standardMeterReading_A: $standardMeterReading_A')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      EquipmentType,
      databaseID,
      id,
      trNo,
      serialNo,
      initialTestMeterReading,
      afterTestMeterReading,
      testMeterReading_R,
      initialStandardMeterReading,
      afterStandardMeterReading,
      standardMeterReading_A);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EnergyMeterRpLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.initialTestMeterReading == this.initialTestMeterReading &&
          other.afterTestMeterReading == this.afterTestMeterReading &&
          other.testMeterReading_R == this.testMeterReading_R &&
          other.initialStandardMeterReading ==
              this.initialStandardMeterReading &&
          other.afterStandardMeterReading == this.afterStandardMeterReading &&
          other.standardMeterReading_A == this.standardMeterReading_A);
}

class EnergyMeterRpLocalDatasourceImplCompanion
    extends UpdateCompanion<EnergyMeterRpLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> initialTestMeterReading;
  final Value<double> afterTestMeterReading;
  final Value<double> testMeterReading_R;
  final Value<double> initialStandardMeterReading;
  final Value<double> afterStandardMeterReading;
  final Value<double> standardMeterReading_A;
  const EnergyMeterRpLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.initialTestMeterReading = const Value.absent(),
    this.afterTestMeterReading = const Value.absent(),
    this.testMeterReading_R = const Value.absent(),
    this.initialStandardMeterReading = const Value.absent(),
    this.afterStandardMeterReading = const Value.absent(),
    this.standardMeterReading_A = const Value.absent(),
  });
  EnergyMeterRpLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double initialTestMeterReading,
    @required double afterTestMeterReading,
    @required double testMeterReading_R,
    @required double initialStandardMeterReading,
    @required double afterStandardMeterReading,
    @required double standardMeterReading_A,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        initialTestMeterReading = Value(initialTestMeterReading),
        afterTestMeterReading = Value(afterTestMeterReading),
        testMeterReading_R = Value(testMeterReading_R),
        initialStandardMeterReading = Value(initialStandardMeterReading),
        afterStandardMeterReading = Value(afterStandardMeterReading),
        standardMeterReading_A = Value(standardMeterReading_A);
  static Insertable<EnergyMeterRpLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> initialTestMeterReading,
    Expression<double> afterTestMeterReading,
    Expression<double> testMeterReading_R,
    Expression<double> initialStandardMeterReading,
    Expression<double> afterStandardMeterReading,
    Expression<double> standardMeterReading_A,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (initialTestMeterReading != null)
        'initial_test_meter_reading': initialTestMeterReading,
      if (afterTestMeterReading != null)
        'after_test_meter_reading': afterTestMeterReading,
      if (testMeterReading_R != null)
        'test_meter_reading_r': testMeterReading_R,
      if (initialStandardMeterReading != null)
        'initial_standard_meter_reading': initialStandardMeterReading,
      if (afterStandardMeterReading != null)
        'after_standard_meter_reading': afterStandardMeterReading,
      if (standardMeterReading_A != null)
        'standard_meter_reading_a': standardMeterReading_A,
    });
  }

  EnergyMeterRpLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> initialTestMeterReading,
      Value<double> afterTestMeterReading,
      Value<double> testMeterReading_R,
      Value<double> initialStandardMeterReading,
      Value<double> afterStandardMeterReading,
      Value<double> standardMeterReading_A}) {
    return EnergyMeterRpLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      initialTestMeterReading:
          initialTestMeterReading ?? this.initialTestMeterReading,
      afterTestMeterReading:
          afterTestMeterReading ?? this.afterTestMeterReading,
      testMeterReading_R: testMeterReading_R ?? this.testMeterReading_R,
      initialStandardMeterReading:
          initialStandardMeterReading ?? this.initialStandardMeterReading,
      afterStandardMeterReading:
          afterStandardMeterReading ?? this.afterStandardMeterReading,
      standardMeterReading_A:
          standardMeterReading_A ?? this.standardMeterReading_A,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (initialTestMeterReading.present) {
      map['initial_test_meter_reading'] =
          Variable<double>(initialTestMeterReading.value);
    }
    if (afterTestMeterReading.present) {
      map['after_test_meter_reading'] =
          Variable<double>(afterTestMeterReading.value);
    }
    if (testMeterReading_R.present) {
      map['test_meter_reading_r'] = Variable<double>(testMeterReading_R.value);
    }
    if (initialStandardMeterReading.present) {
      map['initial_standard_meter_reading'] =
          Variable<double>(initialStandardMeterReading.value);
    }
    if (afterStandardMeterReading.present) {
      map['after_standard_meter_reading'] =
          Variable<double>(afterStandardMeterReading.value);
    }
    if (standardMeterReading_A.present) {
      map['standard_meter_reading_a'] =
          Variable<double>(standardMeterReading_A.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EnergyMeterRpLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('initialTestMeterReading: $initialTestMeterReading, ')
          ..write('afterTestMeterReading: $afterTestMeterReading, ')
          ..write('testMeterReading_R: $testMeterReading_R, ')
          ..write('initialStandardMeterReading: $initialStandardMeterReading, ')
          ..write('afterStandardMeterReading: $afterStandardMeterReading, ')
          ..write('standardMeterReading_A: $standardMeterReading_A')
          ..write(')'))
        .toString();
  }
}

class $EnergyMeterRpLocalDatasourceImplTable
    extends EnergyMeterRpLocalDatasourceImpl
    with
        TableInfo<$EnergyMeterRpLocalDatasourceImplTable,
            EnergyMeterRpLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EnergyMeterRpLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _initialTestMeterReadingMeta =
      const VerificationMeta('initialTestMeterReading');
  GeneratedColumn<double> _initialTestMeterReading;
  @override
  GeneratedColumn<double> get initialTestMeterReading =>
      _initialTestMeterReading ??= GeneratedColumn<double>(
          'initial_test_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _afterTestMeterReadingMeta =
      const VerificationMeta('afterTestMeterReading');
  GeneratedColumn<double> _afterTestMeterReading;
  @override
  GeneratedColumn<double> get afterTestMeterReading =>
      _afterTestMeterReading ??= GeneratedColumn<double>(
          'after_test_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _testMeterReading_RMeta =
      const VerificationMeta('testMeterReading_R');
  GeneratedColumn<double> _testMeterReading_R;
  @override
  GeneratedColumn<double> get testMeterReading_R => _testMeterReading_R ??=
      GeneratedColumn<double>('test_meter_reading_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _initialStandardMeterReadingMeta =
      const VerificationMeta('initialStandardMeterReading');
  GeneratedColumn<double> _initialStandardMeterReading;
  @override
  GeneratedColumn<double> get initialStandardMeterReading =>
      _initialStandardMeterReading ??= GeneratedColumn<double>(
          'initial_standard_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _afterStandardMeterReadingMeta =
      const VerificationMeta('afterStandardMeterReading');
  GeneratedColumn<double> _afterStandardMeterReading;
  @override
  GeneratedColumn<double> get afterStandardMeterReading =>
      _afterStandardMeterReading ??= GeneratedColumn<double>(
          'after_standard_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _standardMeterReading_AMeta =
      const VerificationMeta('standardMeterReading_A');
  GeneratedColumn<double> _standardMeterReading_A;
  @override
  GeneratedColumn<double> get standardMeterReading_A =>
      _standardMeterReading_A ??= GeneratedColumn<double>(
          'standard_meter_reading_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        initialTestMeterReading,
        afterTestMeterReading,
        testMeterReading_R,
        initialStandardMeterReading,
        afterStandardMeterReading,
        standardMeterReading_A
      ];
  @override
  String get aliasedName => _alias ?? 'energy_meter_rp_local_datasource_impl';
  @override
  String get actualTableName => 'energy_meter_rp_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<EnergyMeterRpLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('initial_test_meter_reading')) {
      context.handle(
          _initialTestMeterReadingMeta,
          initialTestMeterReading.isAcceptableOrUnknown(
              data['initial_test_meter_reading'],
              _initialTestMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_initialTestMeterReadingMeta);
    }
    if (data.containsKey('after_test_meter_reading')) {
      context.handle(
          _afterTestMeterReadingMeta,
          afterTestMeterReading.isAcceptableOrUnknown(
              data['after_test_meter_reading'], _afterTestMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_afterTestMeterReadingMeta);
    }
    if (data.containsKey('test_meter_reading_r')) {
      context.handle(
          _testMeterReading_RMeta,
          testMeterReading_R.isAcceptableOrUnknown(
              data['test_meter_reading_r'], _testMeterReading_RMeta));
    } else if (isInserting) {
      context.missing(_testMeterReading_RMeta);
    }
    if (data.containsKey('initial_standard_meter_reading')) {
      context.handle(
          _initialStandardMeterReadingMeta,
          initialStandardMeterReading.isAcceptableOrUnknown(
              data['initial_standard_meter_reading'],
              _initialStandardMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_initialStandardMeterReadingMeta);
    }
    if (data.containsKey('after_standard_meter_reading')) {
      context.handle(
          _afterStandardMeterReadingMeta,
          afterStandardMeterReading.isAcceptableOrUnknown(
              data['after_standard_meter_reading'],
              _afterStandardMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_afterStandardMeterReadingMeta);
    }
    if (data.containsKey('standard_meter_reading_a')) {
      context.handle(
          _standardMeterReading_AMeta,
          standardMeterReading_A.isAcceptableOrUnknown(
              data['standard_meter_reading_a'], _standardMeterReading_AMeta));
    } else if (isInserting) {
      context.missing(_standardMeterReading_AMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EnergyMeterRpLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EnergyMeterRpLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EnergyMeterRpLocalDatasourceImplTable createAlias(String alias) {
    return $EnergyMeterRpLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EnergyMeterAprpLocalData extends DataClass
    implements Insertable<EnergyMeterAprpLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double initialTestMeterReading;
  final double afterTestMeterReading;
  final double testMeterReading_R;
  final double initialStandardMeterReading;
  final double afterStandardMeterReading;
  final double standardMeterReading_A;
  EnergyMeterAprpLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.initialTestMeterReading,
      @required this.afterTestMeterReading,
      @required this.testMeterReading_R,
      @required this.initialStandardMeterReading,
      @required this.afterStandardMeterReading,
      @required this.standardMeterReading_A});
  factory EnergyMeterAprpLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EnergyMeterAprpLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      initialTestMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}initial_test_meter_reading']),
      afterTestMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}after_test_meter_reading']),
      testMeterReading_R: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}test_meter_reading_r']),
      initialStandardMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}initial_standard_meter_reading']),
      afterStandardMeterReading: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}after_standard_meter_reading']),
      standardMeterReading_A: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}standard_meter_reading_a']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || initialTestMeterReading != null) {
      map['initial_test_meter_reading'] =
          Variable<double>(initialTestMeterReading);
    }
    if (!nullToAbsent || afterTestMeterReading != null) {
      map['after_test_meter_reading'] = Variable<double>(afterTestMeterReading);
    }
    if (!nullToAbsent || testMeterReading_R != null) {
      map['test_meter_reading_r'] = Variable<double>(testMeterReading_R);
    }
    if (!nullToAbsent || initialStandardMeterReading != null) {
      map['initial_standard_meter_reading'] =
          Variable<double>(initialStandardMeterReading);
    }
    if (!nullToAbsent || afterStandardMeterReading != null) {
      map['after_standard_meter_reading'] =
          Variable<double>(afterStandardMeterReading);
    }
    if (!nullToAbsent || standardMeterReading_A != null) {
      map['standard_meter_reading_a'] =
          Variable<double>(standardMeterReading_A);
    }
    return map;
  }

  EnergyMeterAprpLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EnergyMeterAprpLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      initialTestMeterReading: initialTestMeterReading == null && nullToAbsent
          ? const Value.absent()
          : Value(initialTestMeterReading),
      afterTestMeterReading: afterTestMeterReading == null && nullToAbsent
          ? const Value.absent()
          : Value(afterTestMeterReading),
      testMeterReading_R: testMeterReading_R == null && nullToAbsent
          ? const Value.absent()
          : Value(testMeterReading_R),
      initialStandardMeterReading:
          initialStandardMeterReading == null && nullToAbsent
              ? const Value.absent()
              : Value(initialStandardMeterReading),
      afterStandardMeterReading:
          afterStandardMeterReading == null && nullToAbsent
              ? const Value.absent()
              : Value(afterStandardMeterReading),
      standardMeterReading_A: standardMeterReading_A == null && nullToAbsent
          ? const Value.absent()
          : Value(standardMeterReading_A),
    );
  }

  factory EnergyMeterAprpLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EnergyMeterAprpLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      initialTestMeterReading:
          serializer.fromJson<double>(json['initialTestMeterReading']),
      afterTestMeterReading:
          serializer.fromJson<double>(json['afterTestMeterReading']),
      testMeterReading_R:
          serializer.fromJson<double>(json['testMeterReading_R']),
      initialStandardMeterReading:
          serializer.fromJson<double>(json['initialStandardMeterReading']),
      afterStandardMeterReading:
          serializer.fromJson<double>(json['afterStandardMeterReading']),
      standardMeterReading_A:
          serializer.fromJson<double>(json['standardMeterReading_A']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'initialTestMeterReading':
          serializer.toJson<double>(initialTestMeterReading),
      'afterTestMeterReading': serializer.toJson<double>(afterTestMeterReading),
      'testMeterReading_R': serializer.toJson<double>(testMeterReading_R),
      'initialStandardMeterReading':
          serializer.toJson<double>(initialStandardMeterReading),
      'afterStandardMeterReading':
          serializer.toJson<double>(afterStandardMeterReading),
      'standardMeterReading_A':
          serializer.toJson<double>(standardMeterReading_A),
    };
  }

  EnergyMeterAprpLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double initialTestMeterReading,
          double afterTestMeterReading,
          double testMeterReading_R,
          double initialStandardMeterReading,
          double afterStandardMeterReading,
          double standardMeterReading_A}) =>
      EnergyMeterAprpLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        initialTestMeterReading:
            initialTestMeterReading ?? this.initialTestMeterReading,
        afterTestMeterReading:
            afterTestMeterReading ?? this.afterTestMeterReading,
        testMeterReading_R: testMeterReading_R ?? this.testMeterReading_R,
        initialStandardMeterReading:
            initialStandardMeterReading ?? this.initialStandardMeterReading,
        afterStandardMeterReading:
            afterStandardMeterReading ?? this.afterStandardMeterReading,
        standardMeterReading_A:
            standardMeterReading_A ?? this.standardMeterReading_A,
      );
  @override
  String toString() {
    return (StringBuffer('EnergyMeterAprpLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('initialTestMeterReading: $initialTestMeterReading, ')
          ..write('afterTestMeterReading: $afterTestMeterReading, ')
          ..write('testMeterReading_R: $testMeterReading_R, ')
          ..write('initialStandardMeterReading: $initialStandardMeterReading, ')
          ..write('afterStandardMeterReading: $afterStandardMeterReading, ')
          ..write('standardMeterReading_A: $standardMeterReading_A')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      EquipmentType,
      databaseID,
      id,
      trNo,
      serialNo,
      initialTestMeterReading,
      afterTestMeterReading,
      testMeterReading_R,
      initialStandardMeterReading,
      afterStandardMeterReading,
      standardMeterReading_A);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EnergyMeterAprpLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.initialTestMeterReading == this.initialTestMeterReading &&
          other.afterTestMeterReading == this.afterTestMeterReading &&
          other.testMeterReading_R == this.testMeterReading_R &&
          other.initialStandardMeterReading ==
              this.initialStandardMeterReading &&
          other.afterStandardMeterReading == this.afterStandardMeterReading &&
          other.standardMeterReading_A == this.standardMeterReading_A);
}

class EnergyMeterAprpLocalDatasourceImplCompanion
    extends UpdateCompanion<EnergyMeterAprpLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> initialTestMeterReading;
  final Value<double> afterTestMeterReading;
  final Value<double> testMeterReading_R;
  final Value<double> initialStandardMeterReading;
  final Value<double> afterStandardMeterReading;
  final Value<double> standardMeterReading_A;
  const EnergyMeterAprpLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.initialTestMeterReading = const Value.absent(),
    this.afterTestMeterReading = const Value.absent(),
    this.testMeterReading_R = const Value.absent(),
    this.initialStandardMeterReading = const Value.absent(),
    this.afterStandardMeterReading = const Value.absent(),
    this.standardMeterReading_A = const Value.absent(),
  });
  EnergyMeterAprpLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double initialTestMeterReading,
    @required double afterTestMeterReading,
    @required double testMeterReading_R,
    @required double initialStandardMeterReading,
    @required double afterStandardMeterReading,
    @required double standardMeterReading_A,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        initialTestMeterReading = Value(initialTestMeterReading),
        afterTestMeterReading = Value(afterTestMeterReading),
        testMeterReading_R = Value(testMeterReading_R),
        initialStandardMeterReading = Value(initialStandardMeterReading),
        afterStandardMeterReading = Value(afterStandardMeterReading),
        standardMeterReading_A = Value(standardMeterReading_A);
  static Insertable<EnergyMeterAprpLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> initialTestMeterReading,
    Expression<double> afterTestMeterReading,
    Expression<double> testMeterReading_R,
    Expression<double> initialStandardMeterReading,
    Expression<double> afterStandardMeterReading,
    Expression<double> standardMeterReading_A,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (initialTestMeterReading != null)
        'initial_test_meter_reading': initialTestMeterReading,
      if (afterTestMeterReading != null)
        'after_test_meter_reading': afterTestMeterReading,
      if (testMeterReading_R != null)
        'test_meter_reading_r': testMeterReading_R,
      if (initialStandardMeterReading != null)
        'initial_standard_meter_reading': initialStandardMeterReading,
      if (afterStandardMeterReading != null)
        'after_standard_meter_reading': afterStandardMeterReading,
      if (standardMeterReading_A != null)
        'standard_meter_reading_a': standardMeterReading_A,
    });
  }

  EnergyMeterAprpLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> initialTestMeterReading,
      Value<double> afterTestMeterReading,
      Value<double> testMeterReading_R,
      Value<double> initialStandardMeterReading,
      Value<double> afterStandardMeterReading,
      Value<double> standardMeterReading_A}) {
    return EnergyMeterAprpLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      initialTestMeterReading:
          initialTestMeterReading ?? this.initialTestMeterReading,
      afterTestMeterReading:
          afterTestMeterReading ?? this.afterTestMeterReading,
      testMeterReading_R: testMeterReading_R ?? this.testMeterReading_R,
      initialStandardMeterReading:
          initialStandardMeterReading ?? this.initialStandardMeterReading,
      afterStandardMeterReading:
          afterStandardMeterReading ?? this.afterStandardMeterReading,
      standardMeterReading_A:
          standardMeterReading_A ?? this.standardMeterReading_A,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (initialTestMeterReading.present) {
      map['initial_test_meter_reading'] =
          Variable<double>(initialTestMeterReading.value);
    }
    if (afterTestMeterReading.present) {
      map['after_test_meter_reading'] =
          Variable<double>(afterTestMeterReading.value);
    }
    if (testMeterReading_R.present) {
      map['test_meter_reading_r'] = Variable<double>(testMeterReading_R.value);
    }
    if (initialStandardMeterReading.present) {
      map['initial_standard_meter_reading'] =
          Variable<double>(initialStandardMeterReading.value);
    }
    if (afterStandardMeterReading.present) {
      map['after_standard_meter_reading'] =
          Variable<double>(afterStandardMeterReading.value);
    }
    if (standardMeterReading_A.present) {
      map['standard_meter_reading_a'] =
          Variable<double>(standardMeterReading_A.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EnergyMeterAprpLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('initialTestMeterReading: $initialTestMeterReading, ')
          ..write('afterTestMeterReading: $afterTestMeterReading, ')
          ..write('testMeterReading_R: $testMeterReading_R, ')
          ..write('initialStandardMeterReading: $initialStandardMeterReading, ')
          ..write('afterStandardMeterReading: $afterStandardMeterReading, ')
          ..write('standardMeterReading_A: $standardMeterReading_A')
          ..write(')'))
        .toString();
  }
}

class $EnergyMeterAprpLocalDatasourceImplTable
    extends EnergyMeterAprpLocalDatasourceImpl
    with
        TableInfo<$EnergyMeterAprpLocalDatasourceImplTable,
            EnergyMeterAprpLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EnergyMeterAprpLocalDatasourceImplTable(this.attachedDatabase,
      [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _initialTestMeterReadingMeta =
      const VerificationMeta('initialTestMeterReading');
  GeneratedColumn<double> _initialTestMeterReading;
  @override
  GeneratedColumn<double> get initialTestMeterReading =>
      _initialTestMeterReading ??= GeneratedColumn<double>(
          'initial_test_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _afterTestMeterReadingMeta =
      const VerificationMeta('afterTestMeterReading');
  GeneratedColumn<double> _afterTestMeterReading;
  @override
  GeneratedColumn<double> get afterTestMeterReading =>
      _afterTestMeterReading ??= GeneratedColumn<double>(
          'after_test_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _testMeterReading_RMeta =
      const VerificationMeta('testMeterReading_R');
  GeneratedColumn<double> _testMeterReading_R;
  @override
  GeneratedColumn<double> get testMeterReading_R => _testMeterReading_R ??=
      GeneratedColumn<double>('test_meter_reading_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _initialStandardMeterReadingMeta =
      const VerificationMeta('initialStandardMeterReading');
  GeneratedColumn<double> _initialStandardMeterReading;
  @override
  GeneratedColumn<double> get initialStandardMeterReading =>
      _initialStandardMeterReading ??= GeneratedColumn<double>(
          'initial_standard_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _afterStandardMeterReadingMeta =
      const VerificationMeta('afterStandardMeterReading');
  GeneratedColumn<double> _afterStandardMeterReading;
  @override
  GeneratedColumn<double> get afterStandardMeterReading =>
      _afterStandardMeterReading ??= GeneratedColumn<double>(
          'after_standard_meter_reading', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _standardMeterReading_AMeta =
      const VerificationMeta('standardMeterReading_A');
  GeneratedColumn<double> _standardMeterReading_A;
  @override
  GeneratedColumn<double> get standardMeterReading_A =>
      _standardMeterReading_A ??= GeneratedColumn<double>(
          'standard_meter_reading_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        initialTestMeterReading,
        afterTestMeterReading,
        testMeterReading_R,
        initialStandardMeterReading,
        afterStandardMeterReading,
        standardMeterReading_A
      ];
  @override
  String get aliasedName => _alias ?? 'energy_meter_aprp_local_datasource_impl';
  @override
  String get actualTableName => 'energy_meter_aprp_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<EnergyMeterAprpLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('initial_test_meter_reading')) {
      context.handle(
          _initialTestMeterReadingMeta,
          initialTestMeterReading.isAcceptableOrUnknown(
              data['initial_test_meter_reading'],
              _initialTestMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_initialTestMeterReadingMeta);
    }
    if (data.containsKey('after_test_meter_reading')) {
      context.handle(
          _afterTestMeterReadingMeta,
          afterTestMeterReading.isAcceptableOrUnknown(
              data['after_test_meter_reading'], _afterTestMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_afterTestMeterReadingMeta);
    }
    if (data.containsKey('test_meter_reading_r')) {
      context.handle(
          _testMeterReading_RMeta,
          testMeterReading_R.isAcceptableOrUnknown(
              data['test_meter_reading_r'], _testMeterReading_RMeta));
    } else if (isInserting) {
      context.missing(_testMeterReading_RMeta);
    }
    if (data.containsKey('initial_standard_meter_reading')) {
      context.handle(
          _initialStandardMeterReadingMeta,
          initialStandardMeterReading.isAcceptableOrUnknown(
              data['initial_standard_meter_reading'],
              _initialStandardMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_initialStandardMeterReadingMeta);
    }
    if (data.containsKey('after_standard_meter_reading')) {
      context.handle(
          _afterStandardMeterReadingMeta,
          afterStandardMeterReading.isAcceptableOrUnknown(
              data['after_standard_meter_reading'],
              _afterStandardMeterReadingMeta));
    } else if (isInserting) {
      context.missing(_afterStandardMeterReadingMeta);
    }
    if (data.containsKey('standard_meter_reading_a')) {
      context.handle(
          _standardMeterReading_AMeta,
          standardMeterReading_A.isAcceptableOrUnknown(
              data['standard_meter_reading_a'], _standardMeterReading_AMeta));
    } else if (isInserting) {
      context.missing(_standardMeterReading_AMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EnergyMeterAprpLocalData map(Map<String, dynamic> data,
      {String tablePrefix}) {
    return EnergyMeterAprpLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EnergyMeterAprpLocalDatasourceImplTable createAlias(String alias) {
    return $EnergyMeterAprpLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class CTLocalData extends DataClass implements Insertable<CTLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final double vk;
  final String designation;
  final String location;
  final String make;
  final String panel;
  final String serialNo_Rph;
  final String serialNo_Yph;
  final String serialNo_Bph;
  final int pRatio;
  final int sRatio;
  final int ratedVoltage;
  final int noOfCores;
  final int noOfTaps;
  final String connectedTap;
  final int yom;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  CTLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.vk,
      @required this.designation,
      @required this.location,
      @required this.make,
      @required this.panel,
      @required this.serialNo_Rph,
      @required this.serialNo_Yph,
      @required this.serialNo_Bph,
      @required this.pRatio,
      @required this.sRatio,
      @required this.ratedVoltage,
      @required this.noOfCores,
      @required this.noOfTaps,
      @required this.connectedTap,
      @required this.yom,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory CTLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return CTLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      vk: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}vk']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      serialNo_Rph: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no_rph']),
      serialNo_Yph: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no_yph']),
      serialNo_Bph: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no_bph']),
      pRatio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}p_ratio']),
      sRatio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}s_ratio']),
      ratedVoltage: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage']),
      noOfCores: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_cores']),
      noOfTaps: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_taps']),
      connectedTap: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}connected_tap']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || vk != null) {
      map['vk'] = Variable<double>(vk);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || serialNo_Rph != null) {
      map['serial_no_rph'] = Variable<String>(serialNo_Rph);
    }
    if (!nullToAbsent || serialNo_Yph != null) {
      map['serial_no_yph'] = Variable<String>(serialNo_Yph);
    }
    if (!nullToAbsent || serialNo_Bph != null) {
      map['serial_no_bph'] = Variable<String>(serialNo_Bph);
    }
    if (!nullToAbsent || pRatio != null) {
      map['p_ratio'] = Variable<int>(pRatio);
    }
    if (!nullToAbsent || sRatio != null) {
      map['s_ratio'] = Variable<int>(sRatio);
    }
    if (!nullToAbsent || ratedVoltage != null) {
      map['rated_voltage'] = Variable<int>(ratedVoltage);
    }
    if (!nullToAbsent || noOfCores != null) {
      map['no_of_cores'] = Variable<int>(noOfCores);
    }
    if (!nullToAbsent || noOfTaps != null) {
      map['no_of_taps'] = Variable<int>(noOfTaps);
    }
    if (!nullToAbsent || connectedTap != null) {
      map['connected_tap'] = Variable<String>(connectedTap);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  CTLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return CTLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      vk: vk == null && nullToAbsent ? const Value.absent() : Value(vk),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      serialNo_Rph: serialNo_Rph == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo_Rph),
      serialNo_Yph: serialNo_Yph == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo_Yph),
      serialNo_Bph: serialNo_Bph == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo_Bph),
      pRatio:
          pRatio == null && nullToAbsent ? const Value.absent() : Value(pRatio),
      sRatio:
          sRatio == null && nullToAbsent ? const Value.absent() : Value(sRatio),
      ratedVoltage: ratedVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage),
      noOfCores: noOfCores == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfCores),
      noOfTaps: noOfTaps == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfTaps),
      connectedTap: connectedTap == null && nullToAbsent
          ? const Value.absent()
          : Value(connectedTap),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory CTLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CTLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      vk: serializer.fromJson<double>(json['vk']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      make: serializer.fromJson<String>(json['make']),
      panel: serializer.fromJson<String>(json['panel']),
      serialNo_Rph: serializer.fromJson<String>(json['serialNo_Rph']),
      serialNo_Yph: serializer.fromJson<String>(json['serialNo_Yph']),
      serialNo_Bph: serializer.fromJson<String>(json['serialNo_Bph']),
      pRatio: serializer.fromJson<int>(json['pRatio']),
      sRatio: serializer.fromJson<int>(json['sRatio']),
      ratedVoltage: serializer.fromJson<int>(json['ratedVoltage']),
      noOfCores: serializer.fromJson<int>(json['noOfCores']),
      noOfTaps: serializer.fromJson<int>(json['noOfTaps']),
      connectedTap: serializer.fromJson<String>(json['connectedTap']),
      yom: serializer.fromJson<int>(json['yom']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'vk': serializer.toJson<double>(vk),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'make': serializer.toJson<String>(make),
      'panel': serializer.toJson<String>(panel),
      'serialNo_Rph': serializer.toJson<String>(serialNo_Rph),
      'serialNo_Yph': serializer.toJson<String>(serialNo_Yph),
      'serialNo_Bph': serializer.toJson<String>(serialNo_Bph),
      'pRatio': serializer.toJson<int>(pRatio),
      'sRatio': serializer.toJson<int>(sRatio),
      'ratedVoltage': serializer.toJson<int>(ratedVoltage),
      'noOfCores': serializer.toJson<int>(noOfCores),
      'noOfTaps': serializer.toJson<int>(noOfTaps),
      'connectedTap': serializer.toJson<String>(connectedTap),
      'yom': serializer.toJson<int>(yom),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  CTLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          double vk,
          String designation,
          String location,
          String make,
          String panel,
          String serialNo_Rph,
          String serialNo_Yph,
          String serialNo_Bph,
          int pRatio,
          int sRatio,
          int ratedVoltage,
          int noOfCores,
          int noOfTaps,
          String connectedTap,
          int yom,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      CTLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        vk: vk ?? this.vk,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        make: make ?? this.make,
        panel: panel ?? this.panel,
        serialNo_Rph: serialNo_Rph ?? this.serialNo_Rph,
        serialNo_Yph: serialNo_Yph ?? this.serialNo_Yph,
        serialNo_Bph: serialNo_Bph ?? this.serialNo_Bph,
        pRatio: pRatio ?? this.pRatio,
        sRatio: sRatio ?? this.sRatio,
        ratedVoltage: ratedVoltage ?? this.ratedVoltage,
        noOfCores: noOfCores ?? this.noOfCores,
        noOfTaps: noOfTaps ?? this.noOfTaps,
        connectedTap: connectedTap ?? this.connectedTap,
        yom: yom ?? this.yom,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('CTLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('vk: $vk, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('make: $make, ')
          ..write('panel: $panel, ')
          ..write('serialNo_Rph: $serialNo_Rph, ')
          ..write('serialNo_Yph: $serialNo_Yph, ')
          ..write('serialNo_Bph: $serialNo_Bph, ')
          ..write('pRatio: $pRatio, ')
          ..write('sRatio: $sRatio, ')
          ..write('ratedVoltage: $ratedVoltage, ')
          ..write('noOfCores: $noOfCores, ')
          ..write('noOfTaps: $noOfTaps, ')
          ..write('connectedTap: $connectedTap, ')
          ..write('yom: $yom, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        etype,
        trNo,
        vk,
        designation,
        location,
        make,
        panel,
        serialNo_Rph,
        serialNo_Yph,
        serialNo_Bph,
        pRatio,
        sRatio,
        ratedVoltage,
        noOfCores,
        noOfTaps,
        connectedTap,
        yom,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CTLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.vk == this.vk &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.make == this.make &&
          other.panel == this.panel &&
          other.serialNo_Rph == this.serialNo_Rph &&
          other.serialNo_Yph == this.serialNo_Yph &&
          other.serialNo_Bph == this.serialNo_Bph &&
          other.pRatio == this.pRatio &&
          other.sRatio == this.sRatio &&
          other.ratedVoltage == this.ratedVoltage &&
          other.noOfCores == this.noOfCores &&
          other.noOfTaps == this.noOfTaps &&
          other.connectedTap == this.connectedTap &&
          other.yom == this.yom &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class CTLocalDatasourceImplCompanion extends UpdateCompanion<CTLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<double> vk;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> make;
  final Value<String> panel;
  final Value<String> serialNo_Rph;
  final Value<String> serialNo_Yph;
  final Value<String> serialNo_Bph;
  final Value<int> pRatio;
  final Value<int> sRatio;
  final Value<int> ratedVoltage;
  final Value<int> noOfCores;
  final Value<int> noOfTaps;
  final Value<String> connectedTap;
  final Value<int> yom;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const CTLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.vk = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.make = const Value.absent(),
    this.panel = const Value.absent(),
    this.serialNo_Rph = const Value.absent(),
    this.serialNo_Yph = const Value.absent(),
    this.serialNo_Bph = const Value.absent(),
    this.pRatio = const Value.absent(),
    this.sRatio = const Value.absent(),
    this.ratedVoltage = const Value.absent(),
    this.noOfCores = const Value.absent(),
    this.noOfTaps = const Value.absent(),
    this.connectedTap = const Value.absent(),
    this.yom = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  CTLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required double vk,
    @required String designation,
    @required String location,
    @required String make,
    @required String panel,
    @required String serialNo_Rph,
    @required String serialNo_Yph,
    @required String serialNo_Bph,
    @required int pRatio,
    @required int sRatio,
    @required int ratedVoltage,
    @required int noOfCores,
    @required int noOfTaps,
    @required String connectedTap,
    @required int yom,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        vk = Value(vk),
        designation = Value(designation),
        location = Value(location),
        make = Value(make),
        panel = Value(panel),
        serialNo_Rph = Value(serialNo_Rph),
        serialNo_Yph = Value(serialNo_Yph),
        serialNo_Bph = Value(serialNo_Bph),
        pRatio = Value(pRatio),
        sRatio = Value(sRatio),
        ratedVoltage = Value(ratedVoltage),
        noOfCores = Value(noOfCores),
        noOfTaps = Value(noOfTaps),
        connectedTap = Value(connectedTap),
        yom = Value(yom),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<CTLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<double> vk,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> make,
    Expression<String> panel,
    Expression<String> serialNo_Rph,
    Expression<String> serialNo_Yph,
    Expression<String> serialNo_Bph,
    Expression<int> pRatio,
    Expression<int> sRatio,
    Expression<int> ratedVoltage,
    Expression<int> noOfCores,
    Expression<int> noOfTaps,
    Expression<String> connectedTap,
    Expression<int> yom,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (vk != null) 'vk': vk,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (make != null) 'make': make,
      if (panel != null) 'panel': panel,
      if (serialNo_Rph != null) 'serial_no_rph': serialNo_Rph,
      if (serialNo_Yph != null) 'serial_no_yph': serialNo_Yph,
      if (serialNo_Bph != null) 'serial_no_bph': serialNo_Bph,
      if (pRatio != null) 'p_ratio': pRatio,
      if (sRatio != null) 's_ratio': sRatio,
      if (ratedVoltage != null) 'rated_voltage': ratedVoltage,
      if (noOfCores != null) 'no_of_cores': noOfCores,
      if (noOfTaps != null) 'no_of_taps': noOfTaps,
      if (connectedTap != null) 'connected_tap': connectedTap,
      if (yom != null) 'yom': yom,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  CTLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<double> vk,
      Value<String> designation,
      Value<String> location,
      Value<String> make,
      Value<String> panel,
      Value<String> serialNo_Rph,
      Value<String> serialNo_Yph,
      Value<String> serialNo_Bph,
      Value<int> pRatio,
      Value<int> sRatio,
      Value<int> ratedVoltage,
      Value<int> noOfCores,
      Value<int> noOfTaps,
      Value<String> connectedTap,
      Value<int> yom,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return CTLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      vk: vk ?? this.vk,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      make: make ?? this.make,
      panel: panel ?? this.panel,
      serialNo_Rph: serialNo_Rph ?? this.serialNo_Rph,
      serialNo_Yph: serialNo_Yph ?? this.serialNo_Yph,
      serialNo_Bph: serialNo_Bph ?? this.serialNo_Bph,
      pRatio: pRatio ?? this.pRatio,
      sRatio: sRatio ?? this.sRatio,
      ratedVoltage: ratedVoltage ?? this.ratedVoltage,
      noOfCores: noOfCores ?? this.noOfCores,
      noOfTaps: noOfTaps ?? this.noOfTaps,
      connectedTap: connectedTap ?? this.connectedTap,
      yom: yom ?? this.yom,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (vk.present) {
      map['vk'] = Variable<double>(vk.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (serialNo_Rph.present) {
      map['serial_no_rph'] = Variable<String>(serialNo_Rph.value);
    }
    if (serialNo_Yph.present) {
      map['serial_no_yph'] = Variable<String>(serialNo_Yph.value);
    }
    if (serialNo_Bph.present) {
      map['serial_no_bph'] = Variable<String>(serialNo_Bph.value);
    }
    if (pRatio.present) {
      map['p_ratio'] = Variable<int>(pRatio.value);
    }
    if (sRatio.present) {
      map['s_ratio'] = Variable<int>(sRatio.value);
    }
    if (ratedVoltage.present) {
      map['rated_voltage'] = Variable<int>(ratedVoltage.value);
    }
    if (noOfCores.present) {
      map['no_of_cores'] = Variable<int>(noOfCores.value);
    }
    if (noOfTaps.present) {
      map['no_of_taps'] = Variable<int>(noOfTaps.value);
    }
    if (connectedTap.present) {
      map['connected_tap'] = Variable<String>(connectedTap.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CTLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('vk: $vk, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('make: $make, ')
          ..write('panel: $panel, ')
          ..write('serialNo_Rph: $serialNo_Rph, ')
          ..write('serialNo_Yph: $serialNo_Yph, ')
          ..write('serialNo_Bph: $serialNo_Bph, ')
          ..write('pRatio: $pRatio, ')
          ..write('sRatio: $sRatio, ')
          ..write('ratedVoltage: $ratedVoltage, ')
          ..write('noOfCores: $noOfCores, ')
          ..write('noOfTaps: $noOfTaps, ')
          ..write('connectedTap: $connectedTap, ')
          ..write('yom: $yom, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $CTLocalDatasourceImplTable extends CTLocalDatasourceImpl
    with TableInfo<$CTLocalDatasourceImplTable, CTLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $CTLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _vkMeta = const VerificationMeta('vk');
  GeneratedColumn<double> _vk;
  @override
  GeneratedColumn<double> get vk =>
      _vk ??= GeneratedColumn<double>('vk', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNo_RphMeta =
      const VerificationMeta('serialNo_Rph');
  GeneratedColumn<String> _serialNo_Rph;
  @override
  GeneratedColumn<String> get serialNo_Rph => _serialNo_Rph ??=
      GeneratedColumn<String>('serial_no_rph', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _serialNo_YphMeta =
      const VerificationMeta('serialNo_Yph');
  GeneratedColumn<String> _serialNo_Yph;
  @override
  GeneratedColumn<String> get serialNo_Yph => _serialNo_Yph ??=
      GeneratedColumn<String>('serial_no_yph', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _serialNo_BphMeta =
      const VerificationMeta('serialNo_Bph');
  GeneratedColumn<String> _serialNo_Bph;
  @override
  GeneratedColumn<String> get serialNo_Bph => _serialNo_Bph ??=
      GeneratedColumn<String>('serial_no_bph', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _pRatioMeta = const VerificationMeta('pRatio');
  GeneratedColumn<int> _pRatio;
  @override
  GeneratedColumn<int> get pRatio =>
      _pRatio ??= GeneratedColumn<int>('p_ratio', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _sRatioMeta = const VerificationMeta('sRatio');
  GeneratedColumn<int> _sRatio;
  @override
  GeneratedColumn<int> get sRatio =>
      _sRatio ??= GeneratedColumn<int>('s_ratio', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedVoltageMeta =
      const VerificationMeta('ratedVoltage');
  GeneratedColumn<int> _ratedVoltage;
  @override
  GeneratedColumn<int> get ratedVoltage => _ratedVoltage ??=
      GeneratedColumn<int>('rated_voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _noOfCoresMeta = const VerificationMeta('noOfCores');
  GeneratedColumn<int> _noOfCores;
  @override
  GeneratedColumn<int> get noOfCores =>
      _noOfCores ??= GeneratedColumn<int>('no_of_cores', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _noOfTapsMeta = const VerificationMeta('noOfTaps');
  GeneratedColumn<int> _noOfTaps;
  @override
  GeneratedColumn<int> get noOfTaps =>
      _noOfTaps ??= GeneratedColumn<int>('no_of_taps', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _connectedTapMeta =
      const VerificationMeta('connectedTap');
  GeneratedColumn<String> _connectedTap;
  @override
  GeneratedColumn<String> get connectedTap => _connectedTap ??=
      GeneratedColumn<String>('connected_tap', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        vk,
        designation,
        location,
        make,
        panel,
        serialNo_Rph,
        serialNo_Yph,
        serialNo_Bph,
        pRatio,
        sRatio,
        ratedVoltage,
        noOfCores,
        noOfTaps,
        connectedTap,
        yom,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'c_t_local_datasource_impl';
  @override
  String get actualTableName => 'c_t_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<CTLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('vk')) {
      context.handle(_vkMeta, vk.isAcceptableOrUnknown(data['vk'], _vkMeta));
    } else if (isInserting) {
      context.missing(_vkMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('serial_no_rph')) {
      context.handle(
          _serialNo_RphMeta,
          serialNo_Rph.isAcceptableOrUnknown(
              data['serial_no_rph'], _serialNo_RphMeta));
    } else if (isInserting) {
      context.missing(_serialNo_RphMeta);
    }
    if (data.containsKey('serial_no_yph')) {
      context.handle(
          _serialNo_YphMeta,
          serialNo_Yph.isAcceptableOrUnknown(
              data['serial_no_yph'], _serialNo_YphMeta));
    } else if (isInserting) {
      context.missing(_serialNo_YphMeta);
    }
    if (data.containsKey('serial_no_bph')) {
      context.handle(
          _serialNo_BphMeta,
          serialNo_Bph.isAcceptableOrUnknown(
              data['serial_no_bph'], _serialNo_BphMeta));
    } else if (isInserting) {
      context.missing(_serialNo_BphMeta);
    }
    if (data.containsKey('p_ratio')) {
      context.handle(_pRatioMeta,
          pRatio.isAcceptableOrUnknown(data['p_ratio'], _pRatioMeta));
    } else if (isInserting) {
      context.missing(_pRatioMeta);
    }
    if (data.containsKey('s_ratio')) {
      context.handle(_sRatioMeta,
          sRatio.isAcceptableOrUnknown(data['s_ratio'], _sRatioMeta));
    } else if (isInserting) {
      context.missing(_sRatioMeta);
    }
    if (data.containsKey('rated_voltage')) {
      context.handle(
          _ratedVoltageMeta,
          ratedVoltage.isAcceptableOrUnknown(
              data['rated_voltage'], _ratedVoltageMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltageMeta);
    }
    if (data.containsKey('no_of_cores')) {
      context.handle(_noOfCoresMeta,
          noOfCores.isAcceptableOrUnknown(data['no_of_cores'], _noOfCoresMeta));
    } else if (isInserting) {
      context.missing(_noOfCoresMeta);
    }
    if (data.containsKey('no_of_taps')) {
      context.handle(_noOfTapsMeta,
          noOfTaps.isAcceptableOrUnknown(data['no_of_taps'], _noOfTapsMeta));
    } else if (isInserting) {
      context.missing(_noOfTapsMeta);
    }
    if (data.containsKey('connected_tap')) {
      context.handle(
          _connectedTapMeta,
          connectedTap.isAcceptableOrUnknown(
              data['connected_tap'], _connectedTapMeta));
    } else if (isInserting) {
      context.missing(_connectedTapMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CTLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return CTLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CTLocalDatasourceImplTable createAlias(String alias) {
    return $CTLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class CTcoreLocalData extends DataClass implements Insertable<CTcoreLocalData> {
  final int databaseID;
  final int id;
  final int coreNo;
  final String coreClass;
  final int burden;
  final int ctNo;
  final DateTime updateDate;
  CTcoreLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.coreNo,
      @required this.coreClass,
      @required this.burden,
      @required this.ctNo,
      @required this.updateDate});
  factory CTcoreLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return CTcoreLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      coreNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}core_no']),
      coreClass: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}core_class']),
      burden: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}burden']),
      ctNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ct_no']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || coreNo != null) {
      map['core_no'] = Variable<int>(coreNo);
    }
    if (!nullToAbsent || coreClass != null) {
      map['core_class'] = Variable<String>(coreClass);
    }
    if (!nullToAbsent || burden != null) {
      map['burden'] = Variable<int>(burden);
    }
    if (!nullToAbsent || ctNo != null) {
      map['ct_no'] = Variable<int>(ctNo);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  CT_core_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return CT_core_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      coreNo:
          coreNo == null && nullToAbsent ? const Value.absent() : Value(coreNo),
      coreClass: coreClass == null && nullToAbsent
          ? const Value.absent()
          : Value(coreClass),
      burden:
          burden == null && nullToAbsent ? const Value.absent() : Value(burden),
      ctNo: ctNo == null && nullToAbsent ? const Value.absent() : Value(ctNo),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory CTcoreLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CTcoreLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      coreNo: serializer.fromJson<int>(json['coreNo']),
      coreClass: serializer.fromJson<String>(json['coreClass']),
      burden: serializer.fromJson<int>(json['burden']),
      ctNo: serializer.fromJson<int>(json['ctNo']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'coreNo': serializer.toJson<int>(coreNo),
      'coreClass': serializer.toJson<String>(coreClass),
      'burden': serializer.toJson<int>(burden),
      'ctNo': serializer.toJson<int>(ctNo),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  CTcoreLocalData copyWith(
          {int databaseID,
          int id,
          int coreNo,
          String coreClass,
          int burden,
          int ctNo,
          DateTime updateDate}) =>
      CTcoreLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        coreNo: coreNo ?? this.coreNo,
        coreClass: coreClass ?? this.coreClass,
        burden: burden ?? this.burden,
        ctNo: ctNo ?? this.ctNo,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('CTcoreLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('coreNo: $coreNo, ')
          ..write('coreClass: $coreClass, ')
          ..write('burden: $burden, ')
          ..write('ctNo: $ctNo, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(databaseID, id, coreNo, coreClass, burden, ctNo, updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CTcoreLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.coreNo == this.coreNo &&
          other.coreClass == this.coreClass &&
          other.burden == this.burden &&
          other.ctNo == this.ctNo &&
          other.updateDate == this.updateDate);
}

class CT_core_LocalDatasourceImplCompanion
    extends UpdateCompanion<CTcoreLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> coreNo;
  final Value<String> coreClass;
  final Value<int> burden;
  final Value<int> ctNo;
  final Value<DateTime> updateDate;
  const CT_core_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.coreNo = const Value.absent(),
    this.coreClass = const Value.absent(),
    this.burden = const Value.absent(),
    this.ctNo = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  CT_core_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int coreNo,
    @required String coreClass,
    @required int burden,
    @required int ctNo,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        coreNo = Value(coreNo),
        coreClass = Value(coreClass),
        burden = Value(burden),
        ctNo = Value(ctNo);
  static Insertable<CTcoreLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> coreNo,
    Expression<String> coreClass,
    Expression<int> burden,
    Expression<int> ctNo,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (coreNo != null) 'core_no': coreNo,
      if (coreClass != null) 'core_class': coreClass,
      if (burden != null) 'burden': burden,
      if (ctNo != null) 'ct_no': ctNo,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  CT_core_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> coreNo,
      Value<String> coreClass,
      Value<int> burden,
      Value<int> ctNo,
      Value<DateTime> updateDate}) {
    return CT_core_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      coreNo: coreNo ?? this.coreNo,
      coreClass: coreClass ?? this.coreClass,
      burden: burden ?? this.burden,
      ctNo: ctNo ?? this.ctNo,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (coreNo.present) {
      map['core_no'] = Variable<int>(coreNo.value);
    }
    if (coreClass.present) {
      map['core_class'] = Variable<String>(coreClass.value);
    }
    if (burden.present) {
      map['burden'] = Variable<int>(burden.value);
    }
    if (ctNo.present) {
      map['ct_no'] = Variable<int>(ctNo.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CT_core_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('coreNo: $coreNo, ')
          ..write('coreClass: $coreClass, ')
          ..write('burden: $burden, ')
          ..write('ctNo: $ctNo, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $CT_core_LocalDatasourceImplTable extends CT_core_LocalDatasourceImpl
    with TableInfo<$CT_core_LocalDatasourceImplTable, CTcoreLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $CT_core_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _coreNoMeta = const VerificationMeta('coreNo');
  GeneratedColumn<int> _coreNo;
  @override
  GeneratedColumn<int> get coreNo =>
      _coreNo ??= GeneratedColumn<int>('core_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _coreClassMeta = const VerificationMeta('coreClass');
  GeneratedColumn<String> _coreClass;
  @override
  GeneratedColumn<String> get coreClass =>
      _coreClass ??= GeneratedColumn<String>('core_class', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _burdenMeta = const VerificationMeta('burden');
  GeneratedColumn<int> _burden;
  @override
  GeneratedColumn<int> get burden =>
      _burden ??= GeneratedColumn<int>('burden', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ctNoMeta = const VerificationMeta('ctNo');
  GeneratedColumn<int> _ctNo;
  @override
  GeneratedColumn<int> get ctNo =>
      _ctNo ??= GeneratedColumn<int>('ct_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns =>
      [databaseID, id, coreNo, coreClass, burden, ctNo, updateDate];
  @override
  String get aliasedName => _alias ?? 'c_t_core_local_datasource_impl';
  @override
  String get actualTableName => 'c_t_core_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<CTcoreLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('core_no')) {
      context.handle(_coreNoMeta,
          coreNo.isAcceptableOrUnknown(data['core_no'], _coreNoMeta));
    } else if (isInserting) {
      context.missing(_coreNoMeta);
    }
    if (data.containsKey('core_class')) {
      context.handle(_coreClassMeta,
          coreClass.isAcceptableOrUnknown(data['core_class'], _coreClassMeta));
    } else if (isInserting) {
      context.missing(_coreClassMeta);
    }
    if (data.containsKey('burden')) {
      context.handle(_burdenMeta,
          burden.isAcceptableOrUnknown(data['burden'], _burdenMeta));
    } else if (isInserting) {
      context.missing(_burdenMeta);
    }
    if (data.containsKey('ct_no')) {
      context.handle(
          _ctNoMeta, ctNo.isAcceptableOrUnknown(data['ct_no'], _ctNoMeta));
    } else if (isInserting) {
      context.missing(_ctNoMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CTcoreLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return CTcoreLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CT_core_LocalDatasourceImplTable createAlias(String alias) {
    return $CT_core_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class CTcoreIRLocalData extends DataClass
    implements Insertable<CTcoreIRLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double peR;
  final double peY;
  final double peB;
///////////////////////////////
  final double pc1R;
  final double pc2R;
  final double pc3R;
  final double pc4R;
  final double pc5R;
  final double pc1Y;
  final double pc2Y;
  final double pc3Y;
  final double pc4Y;
  final double pc5Y;
  final double pc1B;
  final double pc2B;
  final double pc3B;
  final double pc4B;
  final double pc5B;
///////////////////////////////
  final double c1eR;
  final double c2eR;
  final double c3eR;
  final double c4eR;
  final double c5eR;
  final double c1eY;
  final double c2eY;
  final double c3eY;
  final double c4eY;
  final double c5eY;
  final double c1eB;
  final double c2eB;
  final double c3eB;
  final double c4eB;
  final double c5eB;
////////////////////////////////
  final double c1c2R;
  final double c1c2Y;
  final double c1c2B;
  final double c2c3R;
  final double c2c3Y;
  final double c2c3B;
  final double c3c4R;
  final double c3c4Y;
  final double c3c4B;
  final double c4c5R;
  final double c4c5Y;
  final double c4c5B;
////////////////////////////////
  final double clc1R;
  final double clc1Y;
  final double clc1B;
  CTcoreIRLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.peR,
      @required this.peY,
      @required this.peB,
      @required this.pc1R,
      @required this.pc2R,
      @required this.pc3R,
      @required this.pc4R,
      @required this.pc5R,
      @required this.pc1Y,
      @required this.pc2Y,
      @required this.pc3Y,
      @required this.pc4Y,
      @required this.pc5Y,
      @required this.pc1B,
      @required this.pc2B,
      @required this.pc3B,
      @required this.pc4B,
      @required this.pc5B,
      @required this.c1eR,
      @required this.c2eR,
      @required this.c3eR,
      @required this.c4eR,
      @required this.c5eR,
      @required this.c1eY,
      @required this.c2eY,
      @required this.c3eY,
      @required this.c4eY,
      @required this.c5eY,
      @required this.c1eB,
      @required this.c2eB,
      @required this.c3eB,
      @required this.c4eB,
      @required this.c5eB,
      @required this.c1c2R,
      @required this.c1c2Y,
      @required this.c1c2B,
      @required this.c2c3R,
      @required this.c2c3Y,
      @required this.c2c3B,
      @required this.c3c4R,
      @required this.c3c4Y,
      @required this.c3c4B,
      @required this.c4c5R,
      @required this.c4c5Y,
      @required this.c4c5B,
      @required this.clc1R,
      @required this.clc1Y,
      @required this.clc1B});
  factory CTcoreIRLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return CTcoreIRLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      peR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pe_r']),
      peY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pe_y']),
      peB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pe_b']),
      pc1R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc1_r']),
      pc2R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc2_r']),
      pc3R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc3_r']),
      pc4R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc4_r']),
      pc5R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc5_r']),
      pc1Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc1_y']),
      pc2Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc2_y']),
      pc3Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc3_y']),
      pc4Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc4_y']),
      pc5Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc5_y']),
      pc1B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc1_b']),
      pc2B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc2_b']),
      pc3B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc3_b']),
      pc4B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc4_b']),
      pc5B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc5_b']),
      c1eR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1e_r']),
      c2eR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2e_r']),
      c3eR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c3e_r']),
      c4eR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c4e_r']),
      c5eR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c5e_r']),
      c1eY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1e_y']),
      c2eY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2e_y']),
      c3eY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c3e_y']),
      c4eY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c4e_y']),
      c5eY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c5e_y']),
      c1eB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1e_b']),
      c2eB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2e_b']),
      c3eB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c3e_b']),
      c4eB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c4e_b']),
      c5eB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c5e_b']),
      c1c2R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1c2_r']),
      c1c2Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1c2_y']),
      c1c2B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1c2_b']),
      c2c3R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2c3_r']),
      c2c3Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2c3_y']),
      c2c3B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2c3_b']),
      c3c4R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c3c4_r']),
      c3c4Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c3c4_y']),
      c3c4B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c3c4_b']),
      c4c5R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c4c5_r']),
      c4c5Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c4c5_y']),
      c4c5B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c4c5_b']),
      clc1R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}clc1_r']),
      clc1Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}clc1_y']),
      clc1B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}clc1_b']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || peR != null) {
      map['pe_r'] = Variable<double>(peR);
    }
    if (!nullToAbsent || peY != null) {
      map['pe_y'] = Variable<double>(peY);
    }
    if (!nullToAbsent || peB != null) {
      map['pe_b'] = Variable<double>(peB);
    }
    if (!nullToAbsent || pc1R != null) {
      map['pc1_r'] = Variable<double>(pc1R);
    }
    if (!nullToAbsent || pc2R != null) {
      map['pc2_r'] = Variable<double>(pc2R);
    }
    if (!nullToAbsent || pc3R != null) {
      map['pc3_r'] = Variable<double>(pc3R);
    }
    if (!nullToAbsent || pc4R != null) {
      map['pc4_r'] = Variable<double>(pc4R);
    }
    if (!nullToAbsent || pc5R != null) {
      map['pc5_r'] = Variable<double>(pc5R);
    }
    if (!nullToAbsent || pc1Y != null) {
      map['pc1_y'] = Variable<double>(pc1Y);
    }
    if (!nullToAbsent || pc2Y != null) {
      map['pc2_y'] = Variable<double>(pc2Y);
    }
    if (!nullToAbsent || pc3Y != null) {
      map['pc3_y'] = Variable<double>(pc3Y);
    }
    if (!nullToAbsent || pc4Y != null) {
      map['pc4_y'] = Variable<double>(pc4Y);
    }
    if (!nullToAbsent || pc5Y != null) {
      map['pc5_y'] = Variable<double>(pc5Y);
    }
    if (!nullToAbsent || pc1B != null) {
      map['pc1_b'] = Variable<double>(pc1B);
    }
    if (!nullToAbsent || pc2B != null) {
      map['pc2_b'] = Variable<double>(pc2B);
    }
    if (!nullToAbsent || pc3B != null) {
      map['pc3_b'] = Variable<double>(pc3B);
    }
    if (!nullToAbsent || pc4B != null) {
      map['pc4_b'] = Variable<double>(pc4B);
    }
    if (!nullToAbsent || pc5B != null) {
      map['pc5_b'] = Variable<double>(pc5B);
    }
    if (!nullToAbsent || c1eR != null) {
      map['c1e_r'] = Variable<double>(c1eR);
    }
    if (!nullToAbsent || c2eR != null) {
      map['c2e_r'] = Variable<double>(c2eR);
    }
    if (!nullToAbsent || c3eR != null) {
      map['c3e_r'] = Variable<double>(c3eR);
    }
    if (!nullToAbsent || c4eR != null) {
      map['c4e_r'] = Variable<double>(c4eR);
    }
    if (!nullToAbsent || c5eR != null) {
      map['c5e_r'] = Variable<double>(c5eR);
    }
    if (!nullToAbsent || c1eY != null) {
      map['c1e_y'] = Variable<double>(c1eY);
    }
    if (!nullToAbsent || c2eY != null) {
      map['c2e_y'] = Variable<double>(c2eY);
    }
    if (!nullToAbsent || c3eY != null) {
      map['c3e_y'] = Variable<double>(c3eY);
    }
    if (!nullToAbsent || c4eY != null) {
      map['c4e_y'] = Variable<double>(c4eY);
    }
    if (!nullToAbsent || c5eY != null) {
      map['c5e_y'] = Variable<double>(c5eY);
    }
    if (!nullToAbsent || c1eB != null) {
      map['c1e_b'] = Variable<double>(c1eB);
    }
    if (!nullToAbsent || c2eB != null) {
      map['c2e_b'] = Variable<double>(c2eB);
    }
    if (!nullToAbsent || c3eB != null) {
      map['c3e_b'] = Variable<double>(c3eB);
    }
    if (!nullToAbsent || c4eB != null) {
      map['c4e_b'] = Variable<double>(c4eB);
    }
    if (!nullToAbsent || c5eB != null) {
      map['c5e_b'] = Variable<double>(c5eB);
    }
    if (!nullToAbsent || c1c2R != null) {
      map['c1c2_r'] = Variable<double>(c1c2R);
    }
    if (!nullToAbsent || c1c2Y != null) {
      map['c1c2_y'] = Variable<double>(c1c2Y);
    }
    if (!nullToAbsent || c1c2B != null) {
      map['c1c2_b'] = Variable<double>(c1c2B);
    }
    if (!nullToAbsent || c2c3R != null) {
      map['c2c3_r'] = Variable<double>(c2c3R);
    }
    if (!nullToAbsent || c2c3Y != null) {
      map['c2c3_y'] = Variable<double>(c2c3Y);
    }
    if (!nullToAbsent || c2c3B != null) {
      map['c2c3_b'] = Variable<double>(c2c3B);
    }
    if (!nullToAbsent || c3c4R != null) {
      map['c3c4_r'] = Variable<double>(c3c4R);
    }
    if (!nullToAbsent || c3c4Y != null) {
      map['c3c4_y'] = Variable<double>(c3c4Y);
    }
    if (!nullToAbsent || c3c4B != null) {
      map['c3c4_b'] = Variable<double>(c3c4B);
    }
    if (!nullToAbsent || c4c5R != null) {
      map['c4c5_r'] = Variable<double>(c4c5R);
    }
    if (!nullToAbsent || c4c5Y != null) {
      map['c4c5_y'] = Variable<double>(c4c5Y);
    }
    if (!nullToAbsent || c4c5B != null) {
      map['c4c5_b'] = Variable<double>(c4c5B);
    }
    if (!nullToAbsent || clc1R != null) {
      map['clc1_r'] = Variable<double>(clc1R);
    }
    if (!nullToAbsent || clc1Y != null) {
      map['clc1_y'] = Variable<double>(clc1Y);
    }
    if (!nullToAbsent || clc1B != null) {
      map['clc1_b'] = Variable<double>(clc1B);
    }
    return map;
  }

  CTcoreIRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return CTcoreIRLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      peR: peR == null && nullToAbsent ? const Value.absent() : Value(peR),
      peY: peY == null && nullToAbsent ? const Value.absent() : Value(peY),
      peB: peB == null && nullToAbsent ? const Value.absent() : Value(peB),
      pc1R: pc1R == null && nullToAbsent ? const Value.absent() : Value(pc1R),
      pc2R: pc2R == null && nullToAbsent ? const Value.absent() : Value(pc2R),
      pc3R: pc3R == null && nullToAbsent ? const Value.absent() : Value(pc3R),
      pc4R: pc4R == null && nullToAbsent ? const Value.absent() : Value(pc4R),
      pc5R: pc5R == null && nullToAbsent ? const Value.absent() : Value(pc5R),
      pc1Y: pc1Y == null && nullToAbsent ? const Value.absent() : Value(pc1Y),
      pc2Y: pc2Y == null && nullToAbsent ? const Value.absent() : Value(pc2Y),
      pc3Y: pc3Y == null && nullToAbsent ? const Value.absent() : Value(pc3Y),
      pc4Y: pc4Y == null && nullToAbsent ? const Value.absent() : Value(pc4Y),
      pc5Y: pc5Y == null && nullToAbsent ? const Value.absent() : Value(pc5Y),
      pc1B: pc1B == null && nullToAbsent ? const Value.absent() : Value(pc1B),
      pc2B: pc2B == null && nullToAbsent ? const Value.absent() : Value(pc2B),
      pc3B: pc3B == null && nullToAbsent ? const Value.absent() : Value(pc3B),
      pc4B: pc4B == null && nullToAbsent ? const Value.absent() : Value(pc4B),
      pc5B: pc5B == null && nullToAbsent ? const Value.absent() : Value(pc5B),
      c1eR: c1eR == null && nullToAbsent ? const Value.absent() : Value(c1eR),
      c2eR: c2eR == null && nullToAbsent ? const Value.absent() : Value(c2eR),
      c3eR: c3eR == null && nullToAbsent ? const Value.absent() : Value(c3eR),
      c4eR: c4eR == null && nullToAbsent ? const Value.absent() : Value(c4eR),
      c5eR: c5eR == null && nullToAbsent ? const Value.absent() : Value(c5eR),
      c1eY: c1eY == null && nullToAbsent ? const Value.absent() : Value(c1eY),
      c2eY: c2eY == null && nullToAbsent ? const Value.absent() : Value(c2eY),
      c3eY: c3eY == null && nullToAbsent ? const Value.absent() : Value(c3eY),
      c4eY: c4eY == null && nullToAbsent ? const Value.absent() : Value(c4eY),
      c5eY: c5eY == null && nullToAbsent ? const Value.absent() : Value(c5eY),
      c1eB: c1eB == null && nullToAbsent ? const Value.absent() : Value(c1eB),
      c2eB: c2eB == null && nullToAbsent ? const Value.absent() : Value(c2eB),
      c3eB: c3eB == null && nullToAbsent ? const Value.absent() : Value(c3eB),
      c4eB: c4eB == null && nullToAbsent ? const Value.absent() : Value(c4eB),
      c5eB: c5eB == null && nullToAbsent ? const Value.absent() : Value(c5eB),
      c1c2R:
          c1c2R == null && nullToAbsent ? const Value.absent() : Value(c1c2R),
      c1c2Y:
          c1c2Y == null && nullToAbsent ? const Value.absent() : Value(c1c2Y),
      c1c2B:
          c1c2B == null && nullToAbsent ? const Value.absent() : Value(c1c2B),
      c2c3R:
          c2c3R == null && nullToAbsent ? const Value.absent() : Value(c2c3R),
      c2c3Y:
          c2c3Y == null && nullToAbsent ? const Value.absent() : Value(c2c3Y),
      c2c3B:
          c2c3B == null && nullToAbsent ? const Value.absent() : Value(c2c3B),
      c3c4R:
          c3c4R == null && nullToAbsent ? const Value.absent() : Value(c3c4R),
      c3c4Y:
          c3c4Y == null && nullToAbsent ? const Value.absent() : Value(c3c4Y),
      c3c4B:
          c3c4B == null && nullToAbsent ? const Value.absent() : Value(c3c4B),
      c4c5R:
          c4c5R == null && nullToAbsent ? const Value.absent() : Value(c4c5R),
      c4c5Y:
          c4c5Y == null && nullToAbsent ? const Value.absent() : Value(c4c5Y),
      c4c5B:
          c4c5B == null && nullToAbsent ? const Value.absent() : Value(c4c5B),
      clc1R:
          clc1R == null && nullToAbsent ? const Value.absent() : Value(clc1R),
      clc1Y:
          clc1Y == null && nullToAbsent ? const Value.absent() : Value(clc1Y),
      clc1B:
          clc1B == null && nullToAbsent ? const Value.absent() : Value(clc1B),
    );
  }

  factory CTcoreIRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CTcoreIRLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      peR: serializer.fromJson<double>(json['peR']),
      peY: serializer.fromJson<double>(json['peY']),
      peB: serializer.fromJson<double>(json['peB']),
      pc1R: serializer.fromJson<double>(json['pc1R']),
      pc2R: serializer.fromJson<double>(json['pc2R']),
      pc3R: serializer.fromJson<double>(json['pc3R']),
      pc4R: serializer.fromJson<double>(json['pc4R']),
      pc5R: serializer.fromJson<double>(json['pc5R']),
      pc1Y: serializer.fromJson<double>(json['pc1Y']),
      pc2Y: serializer.fromJson<double>(json['pc2Y']),
      pc3Y: serializer.fromJson<double>(json['pc3Y']),
      pc4Y: serializer.fromJson<double>(json['pc4Y']),
      pc5Y: serializer.fromJson<double>(json['pc5Y']),
      pc1B: serializer.fromJson<double>(json['pc1B']),
      pc2B: serializer.fromJson<double>(json['pc2B']),
      pc3B: serializer.fromJson<double>(json['pc3B']),
      pc4B: serializer.fromJson<double>(json['pc4B']),
      pc5B: serializer.fromJson<double>(json['pc5B']),
      c1eR: serializer.fromJson<double>(json['c1eR']),
      c2eR: serializer.fromJson<double>(json['c2eR']),
      c3eR: serializer.fromJson<double>(json['c3eR']),
      c4eR: serializer.fromJson<double>(json['c4eR']),
      c5eR: serializer.fromJson<double>(json['c5eR']),
      c1eY: serializer.fromJson<double>(json['c1eY']),
      c2eY: serializer.fromJson<double>(json['c2eY']),
      c3eY: serializer.fromJson<double>(json['c3eY']),
      c4eY: serializer.fromJson<double>(json['c4eY']),
      c5eY: serializer.fromJson<double>(json['c5eY']),
      c1eB: serializer.fromJson<double>(json['c1eB']),
      c2eB: serializer.fromJson<double>(json['c2eB']),
      c3eB: serializer.fromJson<double>(json['c3eB']),
      c4eB: serializer.fromJson<double>(json['c4eB']),
      c5eB: serializer.fromJson<double>(json['c5eB']),
      c1c2R: serializer.fromJson<double>(json['c1c2R']),
      c1c2Y: serializer.fromJson<double>(json['c1c2Y']),
      c1c2B: serializer.fromJson<double>(json['c1c2B']),
      c2c3R: serializer.fromJson<double>(json['c2c3R']),
      c2c3Y: serializer.fromJson<double>(json['c2c3Y']),
      c2c3B: serializer.fromJson<double>(json['c2c3B']),
      c3c4R: serializer.fromJson<double>(json['c3c4R']),
      c3c4Y: serializer.fromJson<double>(json['c3c4Y']),
      c3c4B: serializer.fromJson<double>(json['c3c4B']),
      c4c5R: serializer.fromJson<double>(json['c4c5R']),
      c4c5Y: serializer.fromJson<double>(json['c4c5Y']),
      c4c5B: serializer.fromJson<double>(json['c4c5B']),
      clc1R: serializer.fromJson<double>(json['clc1R']),
      clc1Y: serializer.fromJson<double>(json['clc1Y']),
      clc1B: serializer.fromJson<double>(json['clc1B']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'peR': serializer.toJson<double>(peR),
      'peY': serializer.toJson<double>(peY),
      'peB': serializer.toJson<double>(peB),
      'pc1R': serializer.toJson<double>(pc1R),
      'pc2R': serializer.toJson<double>(pc2R),
      'pc3R': serializer.toJson<double>(pc3R),
      'pc4R': serializer.toJson<double>(pc4R),
      'pc5R': serializer.toJson<double>(pc5R),
      'pc1Y': serializer.toJson<double>(pc1Y),
      'pc2Y': serializer.toJson<double>(pc2Y),
      'pc3Y': serializer.toJson<double>(pc3Y),
      'pc4Y': serializer.toJson<double>(pc4Y),
      'pc5Y': serializer.toJson<double>(pc5Y),
      'pc1B': serializer.toJson<double>(pc1B),
      'pc2B': serializer.toJson<double>(pc2B),
      'pc3B': serializer.toJson<double>(pc3B),
      'pc4B': serializer.toJson<double>(pc4B),
      'pc5B': serializer.toJson<double>(pc5B),
      'c1eR': serializer.toJson<double>(c1eR),
      'c2eR': serializer.toJson<double>(c2eR),
      'c3eR': serializer.toJson<double>(c3eR),
      'c4eR': serializer.toJson<double>(c4eR),
      'c5eR': serializer.toJson<double>(c5eR),
      'c1eY': serializer.toJson<double>(c1eY),
      'c2eY': serializer.toJson<double>(c2eY),
      'c3eY': serializer.toJson<double>(c3eY),
      'c4eY': serializer.toJson<double>(c4eY),
      'c5eY': serializer.toJson<double>(c5eY),
      'c1eB': serializer.toJson<double>(c1eB),
      'c2eB': serializer.toJson<double>(c2eB),
      'c3eB': serializer.toJson<double>(c3eB),
      'c4eB': serializer.toJson<double>(c4eB),
      'c5eB': serializer.toJson<double>(c5eB),
      'c1c2R': serializer.toJson<double>(c1c2R),
      'c1c2Y': serializer.toJson<double>(c1c2Y),
      'c1c2B': serializer.toJson<double>(c1c2B),
      'c2c3R': serializer.toJson<double>(c2c3R),
      'c2c3Y': serializer.toJson<double>(c2c3Y),
      'c2c3B': serializer.toJson<double>(c2c3B),
      'c3c4R': serializer.toJson<double>(c3c4R),
      'c3c4Y': serializer.toJson<double>(c3c4Y),
      'c3c4B': serializer.toJson<double>(c3c4B),
      'c4c5R': serializer.toJson<double>(c4c5R),
      'c4c5Y': serializer.toJson<double>(c4c5Y),
      'c4c5B': serializer.toJson<double>(c4c5B),
      'clc1R': serializer.toJson<double>(clc1R),
      'clc1Y': serializer.toJson<double>(clc1Y),
      'clc1B': serializer.toJson<double>(clc1B),
    };
  }

  CTcoreIRLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double peR,
          double peY,
          double peB,
          double pc1R,
          double pc2R,
          double pc3R,
          double pc4R,
          double pc5R,
          double pc1Y,
          double pc2Y,
          double pc3Y,
          double pc4Y,
          double pc5Y,
          double pc1B,
          double pc2B,
          double pc3B,
          double pc4B,
          double pc5B,
          double c1eR,
          double c2eR,
          double c3eR,
          double c4eR,
          double c5eR,
          double c1eY,
          double c2eY,
          double c3eY,
          double c4eY,
          double c5eY,
          double c1eB,
          double c2eB,
          double c3eB,
          double c4eB,
          double c5eB,
          double c1c2R,
          double c1c2Y,
          double c1c2B,
          double c2c3R,
          double c2c3Y,
          double c2c3B,
          double c3c4R,
          double c3c4Y,
          double c3c4B,
          double c4c5R,
          double c4c5Y,
          double c4c5B,
          double clc1R,
          double clc1Y,
          double clc1B}) =>
      CTcoreIRLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        peR: peR ?? this.peR,
        peY: peY ?? this.peY,
        peB: peB ?? this.peB,
        pc1R: pc1R ?? this.pc1R,
        pc2R: pc2R ?? this.pc2R,
        pc3R: pc3R ?? this.pc3R,
        pc4R: pc4R ?? this.pc4R,
        pc5R: pc5R ?? this.pc5R,
        pc1Y: pc1Y ?? this.pc1Y,
        pc2Y: pc2Y ?? this.pc2Y,
        pc3Y: pc3Y ?? this.pc3Y,
        pc4Y: pc4Y ?? this.pc4Y,
        pc5Y: pc5Y ?? this.pc5Y,
        pc1B: pc1B ?? this.pc1B,
        pc2B: pc2B ?? this.pc2B,
        pc3B: pc3B ?? this.pc3B,
        pc4B: pc4B ?? this.pc4B,
        pc5B: pc5B ?? this.pc5B,
        c1eR: c1eR ?? this.c1eR,
        c2eR: c2eR ?? this.c2eR,
        c3eR: c3eR ?? this.c3eR,
        c4eR: c4eR ?? this.c4eR,
        c5eR: c5eR ?? this.c5eR,
        c1eY: c1eY ?? this.c1eY,
        c2eY: c2eY ?? this.c2eY,
        c3eY: c3eY ?? this.c3eY,
        c4eY: c4eY ?? this.c4eY,
        c5eY: c5eY ?? this.c5eY,
        c1eB: c1eB ?? this.c1eB,
        c2eB: c2eB ?? this.c2eB,
        c3eB: c3eB ?? this.c3eB,
        c4eB: c4eB ?? this.c4eB,
        c5eB: c5eB ?? this.c5eB,
        c1c2R: c1c2R ?? this.c1c2R,
        c1c2Y: c1c2Y ?? this.c1c2Y,
        c1c2B: c1c2B ?? this.c1c2B,
        c2c3R: c2c3R ?? this.c2c3R,
        c2c3Y: c2c3Y ?? this.c2c3Y,
        c2c3B: c2c3B ?? this.c2c3B,
        c3c4R: c3c4R ?? this.c3c4R,
        c3c4Y: c3c4Y ?? this.c3c4Y,
        c3c4B: c3c4B ?? this.c3c4B,
        c4c5R: c4c5R ?? this.c4c5R,
        c4c5Y: c4c5Y ?? this.c4c5Y,
        c4c5B: c4c5B ?? this.c4c5B,
        clc1R: clc1R ?? this.clc1R,
        clc1Y: clc1Y ?? this.clc1Y,
        clc1B: clc1B ?? this.clc1B,
      );
  @override
  String toString() {
    return (StringBuffer('CTcoreIRLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('peR: $peR, ')
          ..write('peY: $peY, ')
          ..write('peB: $peB, ')
          ..write('pc1R: $pc1R, ')
          ..write('pc2R: $pc2R, ')
          ..write('pc3R: $pc3R, ')
          ..write('pc4R: $pc4R, ')
          ..write('pc5R: $pc5R, ')
          ..write('pc1Y: $pc1Y, ')
          ..write('pc2Y: $pc2Y, ')
          ..write('pc3Y: $pc3Y, ')
          ..write('pc4Y: $pc4Y, ')
          ..write('pc5Y: $pc5Y, ')
          ..write('pc1B: $pc1B, ')
          ..write('pc2B: $pc2B, ')
          ..write('pc3B: $pc3B, ')
          ..write('pc4B: $pc4B, ')
          ..write('pc5B: $pc5B, ')
          ..write('c1eR: $c1eR, ')
          ..write('c2eR: $c2eR, ')
          ..write('c3eR: $c3eR, ')
          ..write('c4eR: $c4eR, ')
          ..write('c5eR: $c5eR, ')
          ..write('c1eY: $c1eY, ')
          ..write('c2eY: $c2eY, ')
          ..write('c3eY: $c3eY, ')
          ..write('c4eY: $c4eY, ')
          ..write('c5eY: $c5eY, ')
          ..write('c1eB: $c1eB, ')
          ..write('c2eB: $c2eB, ')
          ..write('c3eB: $c3eB, ')
          ..write('c4eB: $c4eB, ')
          ..write('c5eB: $c5eB, ')
          ..write('c1c2R: $c1c2R, ')
          ..write('c1c2Y: $c1c2Y, ')
          ..write('c1c2B: $c1c2B, ')
          ..write('c2c3R: $c2c3R, ')
          ..write('c2c3Y: $c2c3Y, ')
          ..write('c2c3B: $c2c3B, ')
          ..write('c3c4R: $c3c4R, ')
          ..write('c3c4Y: $c3c4Y, ')
          ..write('c3c4B: $c3c4B, ')
          ..write('c4c5R: $c4c5R, ')
          ..write('c4c5Y: $c4c5Y, ')
          ..write('c4c5B: $c4c5B, ')
          ..write('clc1R: $clc1R, ')
          ..write('clc1Y: $clc1Y, ')
          ..write('clc1B: $clc1B')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        peR,
        peY,
        peB,
        pc1R,
        pc2R,
        pc3R,
        pc4R,
        pc5R,
        pc1Y,
        pc2Y,
        pc3Y,
        pc4Y,
        pc5Y,
        pc1B,
        pc2B,
        pc3B,
        pc4B,
        pc5B,
        c1eR,
        c2eR,
        c3eR,
        c4eR,
        c5eR,
        c1eY,
        c2eY,
        c3eY,
        c4eY,
        c5eY,
        c1eB,
        c2eB,
        c3eB,
        c4eB,
        c5eB,
        c1c2R,
        c1c2Y,
        c1c2B,
        c2c3R,
        c2c3Y,
        c2c3B,
        c3c4R,
        c3c4Y,
        c3c4B,
        c4c5R,
        c4c5Y,
        c4c5B,
        clc1R,
        clc1Y,
        clc1B
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CTcoreIRLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.peR == this.peR &&
          other.peY == this.peY &&
          other.peB == this.peB &&
          other.pc1R == this.pc1R &&
          other.pc2R == this.pc2R &&
          other.pc3R == this.pc3R &&
          other.pc4R == this.pc4R &&
          other.pc5R == this.pc5R &&
          other.pc1Y == this.pc1Y &&
          other.pc2Y == this.pc2Y &&
          other.pc3Y == this.pc3Y &&
          other.pc4Y == this.pc4Y &&
          other.pc5Y == this.pc5Y &&
          other.pc1B == this.pc1B &&
          other.pc2B == this.pc2B &&
          other.pc3B == this.pc3B &&
          other.pc4B == this.pc4B &&
          other.pc5B == this.pc5B &&
          other.c1eR == this.c1eR &&
          other.c2eR == this.c2eR &&
          other.c3eR == this.c3eR &&
          other.c4eR == this.c4eR &&
          other.c5eR == this.c5eR &&
          other.c1eY == this.c1eY &&
          other.c2eY == this.c2eY &&
          other.c3eY == this.c3eY &&
          other.c4eY == this.c4eY &&
          other.c5eY == this.c5eY &&
          other.c1eB == this.c1eB &&
          other.c2eB == this.c2eB &&
          other.c3eB == this.c3eB &&
          other.c4eB == this.c4eB &&
          other.c5eB == this.c5eB &&
          other.c1c2R == this.c1c2R &&
          other.c1c2Y == this.c1c2Y &&
          other.c1c2B == this.c1c2B &&
          other.c2c3R == this.c2c3R &&
          other.c2c3Y == this.c2c3Y &&
          other.c2c3B == this.c2c3B &&
          other.c3c4R == this.c3c4R &&
          other.c3c4Y == this.c3c4Y &&
          other.c3c4B == this.c3c4B &&
          other.c4c5R == this.c4c5R &&
          other.c4c5Y == this.c4c5Y &&
          other.c4c5B == this.c4c5B &&
          other.clc1R == this.clc1R &&
          other.clc1Y == this.clc1Y &&
          other.clc1B == this.clc1B);
}

class CTcoreIRLocalDatasourceImplCompanion
    extends UpdateCompanion<CTcoreIRLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> peR;
  final Value<double> peY;
  final Value<double> peB;
  final Value<double> pc1R;
  final Value<double> pc2R;
  final Value<double> pc3R;
  final Value<double> pc4R;
  final Value<double> pc5R;
  final Value<double> pc1Y;
  final Value<double> pc2Y;
  final Value<double> pc3Y;
  final Value<double> pc4Y;
  final Value<double> pc5Y;
  final Value<double> pc1B;
  final Value<double> pc2B;
  final Value<double> pc3B;
  final Value<double> pc4B;
  final Value<double> pc5B;
  final Value<double> c1eR;
  final Value<double> c2eR;
  final Value<double> c3eR;
  final Value<double> c4eR;
  final Value<double> c5eR;
  final Value<double> c1eY;
  final Value<double> c2eY;
  final Value<double> c3eY;
  final Value<double> c4eY;
  final Value<double> c5eY;
  final Value<double> c1eB;
  final Value<double> c2eB;
  final Value<double> c3eB;
  final Value<double> c4eB;
  final Value<double> c5eB;
  final Value<double> c1c2R;
  final Value<double> c1c2Y;
  final Value<double> c1c2B;
  final Value<double> c2c3R;
  final Value<double> c2c3Y;
  final Value<double> c2c3B;
  final Value<double> c3c4R;
  final Value<double> c3c4Y;
  final Value<double> c3c4B;
  final Value<double> c4c5R;
  final Value<double> c4c5Y;
  final Value<double> c4c5B;
  final Value<double> clc1R;
  final Value<double> clc1Y;
  final Value<double> clc1B;
  const CTcoreIRLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.peR = const Value.absent(),
    this.peY = const Value.absent(),
    this.peB = const Value.absent(),
    this.pc1R = const Value.absent(),
    this.pc2R = const Value.absent(),
    this.pc3R = const Value.absent(),
    this.pc4R = const Value.absent(),
    this.pc5R = const Value.absent(),
    this.pc1Y = const Value.absent(),
    this.pc2Y = const Value.absent(),
    this.pc3Y = const Value.absent(),
    this.pc4Y = const Value.absent(),
    this.pc5Y = const Value.absent(),
    this.pc1B = const Value.absent(),
    this.pc2B = const Value.absent(),
    this.pc3B = const Value.absent(),
    this.pc4B = const Value.absent(),
    this.pc5B = const Value.absent(),
    this.c1eR = const Value.absent(),
    this.c2eR = const Value.absent(),
    this.c3eR = const Value.absent(),
    this.c4eR = const Value.absent(),
    this.c5eR = const Value.absent(),
    this.c1eY = const Value.absent(),
    this.c2eY = const Value.absent(),
    this.c3eY = const Value.absent(),
    this.c4eY = const Value.absent(),
    this.c5eY = const Value.absent(),
    this.c1eB = const Value.absent(),
    this.c2eB = const Value.absent(),
    this.c3eB = const Value.absent(),
    this.c4eB = const Value.absent(),
    this.c5eB = const Value.absent(),
    this.c1c2R = const Value.absent(),
    this.c1c2Y = const Value.absent(),
    this.c1c2B = const Value.absent(),
    this.c2c3R = const Value.absent(),
    this.c2c3Y = const Value.absent(),
    this.c2c3B = const Value.absent(),
    this.c3c4R = const Value.absent(),
    this.c3c4Y = const Value.absent(),
    this.c3c4B = const Value.absent(),
    this.c4c5R = const Value.absent(),
    this.c4c5Y = const Value.absent(),
    this.c4c5B = const Value.absent(),
    this.clc1R = const Value.absent(),
    this.clc1Y = const Value.absent(),
    this.clc1B = const Value.absent(),
  });
  CTcoreIRLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double peR,
    @required double peY,
    @required double peB,
    @required double pc1R,
    @required double pc2R,
    @required double pc3R,
    @required double pc4R,
    @required double pc5R,
    @required double pc1Y,
    @required double pc2Y,
    @required double pc3Y,
    @required double pc4Y,
    @required double pc5Y,
    @required double pc1B,
    @required double pc2B,
    @required double pc3B,
    @required double pc4B,
    @required double pc5B,
    @required double c1eR,
    @required double c2eR,
    @required double c3eR,
    @required double c4eR,
    @required double c5eR,
    @required double c1eY,
    @required double c2eY,
    @required double c3eY,
    @required double c4eY,
    @required double c5eY,
    @required double c1eB,
    @required double c2eB,
    @required double c3eB,
    @required double c4eB,
    @required double c5eB,
    @required double c1c2R,
    @required double c1c2Y,
    @required double c1c2B,
    @required double c2c3R,
    @required double c2c3Y,
    @required double c2c3B,
    @required double c3c4R,
    @required double c3c4Y,
    @required double c3c4B,
    @required double c4c5R,
    @required double c4c5Y,
    @required double c4c5B,
    @required double clc1R,
    @required double clc1Y,
    @required double clc1B,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        peR = Value(peR),
        peY = Value(peY),
        peB = Value(peB),
        pc1R = Value(pc1R),
        pc2R = Value(pc2R),
        pc3R = Value(pc3R),
        pc4R = Value(pc4R),
        pc5R = Value(pc5R),
        pc1Y = Value(pc1Y),
        pc2Y = Value(pc2Y),
        pc3Y = Value(pc3Y),
        pc4Y = Value(pc4Y),
        pc5Y = Value(pc5Y),
        pc1B = Value(pc1B),
        pc2B = Value(pc2B),
        pc3B = Value(pc3B),
        pc4B = Value(pc4B),
        pc5B = Value(pc5B),
        c1eR = Value(c1eR),
        c2eR = Value(c2eR),
        c3eR = Value(c3eR),
        c4eR = Value(c4eR),
        c5eR = Value(c5eR),
        c1eY = Value(c1eY),
        c2eY = Value(c2eY),
        c3eY = Value(c3eY),
        c4eY = Value(c4eY),
        c5eY = Value(c5eY),
        c1eB = Value(c1eB),
        c2eB = Value(c2eB),
        c3eB = Value(c3eB),
        c4eB = Value(c4eB),
        c5eB = Value(c5eB),
        c1c2R = Value(c1c2R),
        c1c2Y = Value(c1c2Y),
        c1c2B = Value(c1c2B),
        c2c3R = Value(c2c3R),
        c2c3Y = Value(c2c3Y),
        c2c3B = Value(c2c3B),
        c3c4R = Value(c3c4R),
        c3c4Y = Value(c3c4Y),
        c3c4B = Value(c3c4B),
        c4c5R = Value(c4c5R),
        c4c5Y = Value(c4c5Y),
        c4c5B = Value(c4c5B),
        clc1R = Value(clc1R),
        clc1Y = Value(clc1Y),
        clc1B = Value(clc1B);
  static Insertable<CTcoreIRLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> peR,
    Expression<double> peY,
    Expression<double> peB,
    Expression<double> pc1R,
    Expression<double> pc2R,
    Expression<double> pc3R,
    Expression<double> pc4R,
    Expression<double> pc5R,
    Expression<double> pc1Y,
    Expression<double> pc2Y,
    Expression<double> pc3Y,
    Expression<double> pc4Y,
    Expression<double> pc5Y,
    Expression<double> pc1B,
    Expression<double> pc2B,
    Expression<double> pc3B,
    Expression<double> pc4B,
    Expression<double> pc5B,
    Expression<double> c1eR,
    Expression<double> c2eR,
    Expression<double> c3eR,
    Expression<double> c4eR,
    Expression<double> c5eR,
    Expression<double> c1eY,
    Expression<double> c2eY,
    Expression<double> c3eY,
    Expression<double> c4eY,
    Expression<double> c5eY,
    Expression<double> c1eB,
    Expression<double> c2eB,
    Expression<double> c3eB,
    Expression<double> c4eB,
    Expression<double> c5eB,
    Expression<double> c1c2R,
    Expression<double> c1c2Y,
    Expression<double> c1c2B,
    Expression<double> c2c3R,
    Expression<double> c2c3Y,
    Expression<double> c2c3B,
    Expression<double> c3c4R,
    Expression<double> c3c4Y,
    Expression<double> c3c4B,
    Expression<double> c4c5R,
    Expression<double> c4c5Y,
    Expression<double> c4c5B,
    Expression<double> clc1R,
    Expression<double> clc1Y,
    Expression<double> clc1B,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (peR != null) 'pe_r': peR,
      if (peY != null) 'pe_y': peY,
      if (peB != null) 'pe_b': peB,
      if (pc1R != null) 'pc1_r': pc1R,
      if (pc2R != null) 'pc2_r': pc2R,
      if (pc3R != null) 'pc3_r': pc3R,
      if (pc4R != null) 'pc4_r': pc4R,
      if (pc5R != null) 'pc5_r': pc5R,
      if (pc1Y != null) 'pc1_y': pc1Y,
      if (pc2Y != null) 'pc2_y': pc2Y,
      if (pc3Y != null) 'pc3_y': pc3Y,
      if (pc4Y != null) 'pc4_y': pc4Y,
      if (pc5Y != null) 'pc5_y': pc5Y,
      if (pc1B != null) 'pc1_b': pc1B,
      if (pc2B != null) 'pc2_b': pc2B,
      if (pc3B != null) 'pc3_b': pc3B,
      if (pc4B != null) 'pc4_b': pc4B,
      if (pc5B != null) 'pc5_b': pc5B,
      if (c1eR != null) 'c1e_r': c1eR,
      if (c2eR != null) 'c2e_r': c2eR,
      if (c3eR != null) 'c3e_r': c3eR,
      if (c4eR != null) 'c4e_r': c4eR,
      if (c5eR != null) 'c5e_r': c5eR,
      if (c1eY != null) 'c1e_y': c1eY,
      if (c2eY != null) 'c2e_y': c2eY,
      if (c3eY != null) 'c3e_y': c3eY,
      if (c4eY != null) 'c4e_y': c4eY,
      if (c5eY != null) 'c5e_y': c5eY,
      if (c1eB != null) 'c1e_b': c1eB,
      if (c2eB != null) 'c2e_b': c2eB,
      if (c3eB != null) 'c3e_b': c3eB,
      if (c4eB != null) 'c4e_b': c4eB,
      if (c5eB != null) 'c5e_b': c5eB,
      if (c1c2R != null) 'c1c2_r': c1c2R,
      if (c1c2Y != null) 'c1c2_y': c1c2Y,
      if (c1c2B != null) 'c1c2_b': c1c2B,
      if (c2c3R != null) 'c2c3_r': c2c3R,
      if (c2c3Y != null) 'c2c3_y': c2c3Y,
      if (c2c3B != null) 'c2c3_b': c2c3B,
      if (c3c4R != null) 'c3c4_r': c3c4R,
      if (c3c4Y != null) 'c3c4_y': c3c4Y,
      if (c3c4B != null) 'c3c4_b': c3c4B,
      if (c4c5R != null) 'c4c5_r': c4c5R,
      if (c4c5Y != null) 'c4c5_y': c4c5Y,
      if (c4c5B != null) 'c4c5_b': c4c5B,
      if (clc1R != null) 'clc1_r': clc1R,
      if (clc1Y != null) 'clc1_y': clc1Y,
      if (clc1B != null) 'clc1_b': clc1B,
    });
  }

  CTcoreIRLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> peR,
      Value<double> peY,
      Value<double> peB,
      Value<double> pc1R,
      Value<double> pc2R,
      Value<double> pc3R,
      Value<double> pc4R,
      Value<double> pc5R,
      Value<double> pc1Y,
      Value<double> pc2Y,
      Value<double> pc3Y,
      Value<double> pc4Y,
      Value<double> pc5Y,
      Value<double> pc1B,
      Value<double> pc2B,
      Value<double> pc3B,
      Value<double> pc4B,
      Value<double> pc5B,
      Value<double> c1eR,
      Value<double> c2eR,
      Value<double> c3eR,
      Value<double> c4eR,
      Value<double> c5eR,
      Value<double> c1eY,
      Value<double> c2eY,
      Value<double> c3eY,
      Value<double> c4eY,
      Value<double> c5eY,
      Value<double> c1eB,
      Value<double> c2eB,
      Value<double> c3eB,
      Value<double> c4eB,
      Value<double> c5eB,
      Value<double> c1c2R,
      Value<double> c1c2Y,
      Value<double> c1c2B,
      Value<double> c2c3R,
      Value<double> c2c3Y,
      Value<double> c2c3B,
      Value<double> c3c4R,
      Value<double> c3c4Y,
      Value<double> c3c4B,
      Value<double> c4c5R,
      Value<double> c4c5Y,
      Value<double> c4c5B,
      Value<double> clc1R,
      Value<double> clc1Y,
      Value<double> clc1B}) {
    return CTcoreIRLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      peR: peR ?? this.peR,
      peY: peY ?? this.peY,
      peB: peB ?? this.peB,
      pc1R: pc1R ?? this.pc1R,
      pc2R: pc2R ?? this.pc2R,
      pc3R: pc3R ?? this.pc3R,
      pc4R: pc4R ?? this.pc4R,
      pc5R: pc5R ?? this.pc5R,
      pc1Y: pc1Y ?? this.pc1Y,
      pc2Y: pc2Y ?? this.pc2Y,
      pc3Y: pc3Y ?? this.pc3Y,
      pc4Y: pc4Y ?? this.pc4Y,
      pc5Y: pc5Y ?? this.pc5Y,
      pc1B: pc1B ?? this.pc1B,
      pc2B: pc2B ?? this.pc2B,
      pc3B: pc3B ?? this.pc3B,
      pc4B: pc4B ?? this.pc4B,
      pc5B: pc5B ?? this.pc5B,
      c1eR: c1eR ?? this.c1eR,
      c2eR: c2eR ?? this.c2eR,
      c3eR: c3eR ?? this.c3eR,
      c4eR: c4eR ?? this.c4eR,
      c5eR: c5eR ?? this.c5eR,
      c1eY: c1eY ?? this.c1eY,
      c2eY: c2eY ?? this.c2eY,
      c3eY: c3eY ?? this.c3eY,
      c4eY: c4eY ?? this.c4eY,
      c5eY: c5eY ?? this.c5eY,
      c1eB: c1eB ?? this.c1eB,
      c2eB: c2eB ?? this.c2eB,
      c3eB: c3eB ?? this.c3eB,
      c4eB: c4eB ?? this.c4eB,
      c5eB: c5eB ?? this.c5eB,
      c1c2R: c1c2R ?? this.c1c2R,
      c1c2Y: c1c2Y ?? this.c1c2Y,
      c1c2B: c1c2B ?? this.c1c2B,
      c2c3R: c2c3R ?? this.c2c3R,
      c2c3Y: c2c3Y ?? this.c2c3Y,
      c2c3B: c2c3B ?? this.c2c3B,
      c3c4R: c3c4R ?? this.c3c4R,
      c3c4Y: c3c4Y ?? this.c3c4Y,
      c3c4B: c3c4B ?? this.c3c4B,
      c4c5R: c4c5R ?? this.c4c5R,
      c4c5Y: c4c5Y ?? this.c4c5Y,
      c4c5B: c4c5B ?? this.c4c5B,
      clc1R: clc1R ?? this.clc1R,
      clc1Y: clc1Y ?? this.clc1Y,
      clc1B: clc1B ?? this.clc1B,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (peR.present) {
      map['pe_r'] = Variable<double>(peR.value);
    }
    if (peY.present) {
      map['pe_y'] = Variable<double>(peY.value);
    }
    if (peB.present) {
      map['pe_b'] = Variable<double>(peB.value);
    }
    if (pc1R.present) {
      map['pc1_r'] = Variable<double>(pc1R.value);
    }
    if (pc2R.present) {
      map['pc2_r'] = Variable<double>(pc2R.value);
    }
    if (pc3R.present) {
      map['pc3_r'] = Variable<double>(pc3R.value);
    }
    if (pc4R.present) {
      map['pc4_r'] = Variable<double>(pc4R.value);
    }
    if (pc5R.present) {
      map['pc5_r'] = Variable<double>(pc5R.value);
    }
    if (pc1Y.present) {
      map['pc1_y'] = Variable<double>(pc1Y.value);
    }
    if (pc2Y.present) {
      map['pc2_y'] = Variable<double>(pc2Y.value);
    }
    if (pc3Y.present) {
      map['pc3_y'] = Variable<double>(pc3Y.value);
    }
    if (pc4Y.present) {
      map['pc4_y'] = Variable<double>(pc4Y.value);
    }
    if (pc5Y.present) {
      map['pc5_y'] = Variable<double>(pc5Y.value);
    }
    if (pc1B.present) {
      map['pc1_b'] = Variable<double>(pc1B.value);
    }
    if (pc2B.present) {
      map['pc2_b'] = Variable<double>(pc2B.value);
    }
    if (pc3B.present) {
      map['pc3_b'] = Variable<double>(pc3B.value);
    }
    if (pc4B.present) {
      map['pc4_b'] = Variable<double>(pc4B.value);
    }
    if (pc5B.present) {
      map['pc5_b'] = Variable<double>(pc5B.value);
    }
    if (c1eR.present) {
      map['c1e_r'] = Variable<double>(c1eR.value);
    }
    if (c2eR.present) {
      map['c2e_r'] = Variable<double>(c2eR.value);
    }
    if (c3eR.present) {
      map['c3e_r'] = Variable<double>(c3eR.value);
    }
    if (c4eR.present) {
      map['c4e_r'] = Variable<double>(c4eR.value);
    }
    if (c5eR.present) {
      map['c5e_r'] = Variable<double>(c5eR.value);
    }
    if (c1eY.present) {
      map['c1e_y'] = Variable<double>(c1eY.value);
    }
    if (c2eY.present) {
      map['c2e_y'] = Variable<double>(c2eY.value);
    }
    if (c3eY.present) {
      map['c3e_y'] = Variable<double>(c3eY.value);
    }
    if (c4eY.present) {
      map['c4e_y'] = Variable<double>(c4eY.value);
    }
    if (c5eY.present) {
      map['c5e_y'] = Variable<double>(c5eY.value);
    }
    if (c1eB.present) {
      map['c1e_b'] = Variable<double>(c1eB.value);
    }
    if (c2eB.present) {
      map['c2e_b'] = Variable<double>(c2eB.value);
    }
    if (c3eB.present) {
      map['c3e_b'] = Variable<double>(c3eB.value);
    }
    if (c4eB.present) {
      map['c4e_b'] = Variable<double>(c4eB.value);
    }
    if (c5eB.present) {
      map['c5e_b'] = Variable<double>(c5eB.value);
    }
    if (c1c2R.present) {
      map['c1c2_r'] = Variable<double>(c1c2R.value);
    }
    if (c1c2Y.present) {
      map['c1c2_y'] = Variable<double>(c1c2Y.value);
    }
    if (c1c2B.present) {
      map['c1c2_b'] = Variable<double>(c1c2B.value);
    }
    if (c2c3R.present) {
      map['c2c3_r'] = Variable<double>(c2c3R.value);
    }
    if (c2c3Y.present) {
      map['c2c3_y'] = Variable<double>(c2c3Y.value);
    }
    if (c2c3B.present) {
      map['c2c3_b'] = Variable<double>(c2c3B.value);
    }
    if (c3c4R.present) {
      map['c3c4_r'] = Variable<double>(c3c4R.value);
    }
    if (c3c4Y.present) {
      map['c3c4_y'] = Variable<double>(c3c4Y.value);
    }
    if (c3c4B.present) {
      map['c3c4_b'] = Variable<double>(c3c4B.value);
    }
    if (c4c5R.present) {
      map['c4c5_r'] = Variable<double>(c4c5R.value);
    }
    if (c4c5Y.present) {
      map['c4c5_y'] = Variable<double>(c4c5Y.value);
    }
    if (c4c5B.present) {
      map['c4c5_b'] = Variable<double>(c4c5B.value);
    }
    if (clc1R.present) {
      map['clc1_r'] = Variable<double>(clc1R.value);
    }
    if (clc1Y.present) {
      map['clc1_y'] = Variable<double>(clc1Y.value);
    }
    if (clc1B.present) {
      map['clc1_b'] = Variable<double>(clc1B.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CTcoreIRLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('peR: $peR, ')
          ..write('peY: $peY, ')
          ..write('peB: $peB, ')
          ..write('pc1R: $pc1R, ')
          ..write('pc2R: $pc2R, ')
          ..write('pc3R: $pc3R, ')
          ..write('pc4R: $pc4R, ')
          ..write('pc5R: $pc5R, ')
          ..write('pc1Y: $pc1Y, ')
          ..write('pc2Y: $pc2Y, ')
          ..write('pc3Y: $pc3Y, ')
          ..write('pc4Y: $pc4Y, ')
          ..write('pc5Y: $pc5Y, ')
          ..write('pc1B: $pc1B, ')
          ..write('pc2B: $pc2B, ')
          ..write('pc3B: $pc3B, ')
          ..write('pc4B: $pc4B, ')
          ..write('pc5B: $pc5B, ')
          ..write('c1eR: $c1eR, ')
          ..write('c2eR: $c2eR, ')
          ..write('c3eR: $c3eR, ')
          ..write('c4eR: $c4eR, ')
          ..write('c5eR: $c5eR, ')
          ..write('c1eY: $c1eY, ')
          ..write('c2eY: $c2eY, ')
          ..write('c3eY: $c3eY, ')
          ..write('c4eY: $c4eY, ')
          ..write('c5eY: $c5eY, ')
          ..write('c1eB: $c1eB, ')
          ..write('c2eB: $c2eB, ')
          ..write('c3eB: $c3eB, ')
          ..write('c4eB: $c4eB, ')
          ..write('c5eB: $c5eB, ')
          ..write('c1c2R: $c1c2R, ')
          ..write('c1c2Y: $c1c2Y, ')
          ..write('c1c2B: $c1c2B, ')
          ..write('c2c3R: $c2c3R, ')
          ..write('c2c3Y: $c2c3Y, ')
          ..write('c2c3B: $c2c3B, ')
          ..write('c3c4R: $c3c4R, ')
          ..write('c3c4Y: $c3c4Y, ')
          ..write('c3c4B: $c3c4B, ')
          ..write('c4c5R: $c4c5R, ')
          ..write('c4c5Y: $c4c5Y, ')
          ..write('c4c5B: $c4c5B, ')
          ..write('clc1R: $clc1R, ')
          ..write('clc1Y: $clc1Y, ')
          ..write('clc1B: $clc1B')
          ..write(')'))
        .toString();
  }
}

class $CTcoreIRLocalDatasourceImplTable extends CTcoreIRLocalDatasourceImpl
    with TableInfo<$CTcoreIRLocalDatasourceImplTable, CTcoreIRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $CTcoreIRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _peRMeta = const VerificationMeta('peR');
  GeneratedColumn<double> _peR;
  @override
  GeneratedColumn<double> get peR =>
      _peR ??= GeneratedColumn<double>('pe_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _peYMeta = const VerificationMeta('peY');
  GeneratedColumn<double> _peY;
  @override
  GeneratedColumn<double> get peY =>
      _peY ??= GeneratedColumn<double>('pe_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _peBMeta = const VerificationMeta('peB');
  GeneratedColumn<double> _peB;
  @override
  GeneratedColumn<double> get peB =>
      _peB ??= GeneratedColumn<double>('pe_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc1RMeta = const VerificationMeta('pc1R');
  GeneratedColumn<double> _pc1R;
  @override
  GeneratedColumn<double> get pc1R =>
      _pc1R ??= GeneratedColumn<double>('pc1_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc2RMeta = const VerificationMeta('pc2R');
  GeneratedColumn<double> _pc2R;
  @override
  GeneratedColumn<double> get pc2R =>
      _pc2R ??= GeneratedColumn<double>('pc2_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc3RMeta = const VerificationMeta('pc3R');
  GeneratedColumn<double> _pc3R;
  @override
  GeneratedColumn<double> get pc3R =>
      _pc3R ??= GeneratedColumn<double>('pc3_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc4RMeta = const VerificationMeta('pc4R');
  GeneratedColumn<double> _pc4R;
  @override
  GeneratedColumn<double> get pc4R =>
      _pc4R ??= GeneratedColumn<double>('pc4_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc5RMeta = const VerificationMeta('pc5R');
  GeneratedColumn<double> _pc5R;
  @override
  GeneratedColumn<double> get pc5R =>
      _pc5R ??= GeneratedColumn<double>('pc5_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc1YMeta = const VerificationMeta('pc1Y');
  GeneratedColumn<double> _pc1Y;
  @override
  GeneratedColumn<double> get pc1Y =>
      _pc1Y ??= GeneratedColumn<double>('pc1_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc2YMeta = const VerificationMeta('pc2Y');
  GeneratedColumn<double> _pc2Y;
  @override
  GeneratedColumn<double> get pc2Y =>
      _pc2Y ??= GeneratedColumn<double>('pc2_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc3YMeta = const VerificationMeta('pc3Y');
  GeneratedColumn<double> _pc3Y;
  @override
  GeneratedColumn<double> get pc3Y =>
      _pc3Y ??= GeneratedColumn<double>('pc3_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc4YMeta = const VerificationMeta('pc4Y');
  GeneratedColumn<double> _pc4Y;
  @override
  GeneratedColumn<double> get pc4Y =>
      _pc4Y ??= GeneratedColumn<double>('pc4_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc5YMeta = const VerificationMeta('pc5Y');
  GeneratedColumn<double> _pc5Y;
  @override
  GeneratedColumn<double> get pc5Y =>
      _pc5Y ??= GeneratedColumn<double>('pc5_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc1BMeta = const VerificationMeta('pc1B');
  GeneratedColumn<double> _pc1B;
  @override
  GeneratedColumn<double> get pc1B =>
      _pc1B ??= GeneratedColumn<double>('pc1_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc2BMeta = const VerificationMeta('pc2B');
  GeneratedColumn<double> _pc2B;
  @override
  GeneratedColumn<double> get pc2B =>
      _pc2B ??= GeneratedColumn<double>('pc2_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc3BMeta = const VerificationMeta('pc3B');
  GeneratedColumn<double> _pc3B;
  @override
  GeneratedColumn<double> get pc3B =>
      _pc3B ??= GeneratedColumn<double>('pc3_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc4BMeta = const VerificationMeta('pc4B');
  GeneratedColumn<double> _pc4B;
  @override
  GeneratedColumn<double> get pc4B =>
      _pc4B ??= GeneratedColumn<double>('pc4_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc5BMeta = const VerificationMeta('pc5B');
  GeneratedColumn<double> _pc5B;
  @override
  GeneratedColumn<double> get pc5B =>
      _pc5B ??= GeneratedColumn<double>('pc5_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1eRMeta = const VerificationMeta('c1eR');
  GeneratedColumn<double> _c1eR;
  @override
  GeneratedColumn<double> get c1eR =>
      _c1eR ??= GeneratedColumn<double>('c1e_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2eRMeta = const VerificationMeta('c2eR');
  GeneratedColumn<double> _c2eR;
  @override
  GeneratedColumn<double> get c2eR =>
      _c2eR ??= GeneratedColumn<double>('c2e_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c3eRMeta = const VerificationMeta('c3eR');
  GeneratedColumn<double> _c3eR;
  @override
  GeneratedColumn<double> get c3eR =>
      _c3eR ??= GeneratedColumn<double>('c3e_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c4eRMeta = const VerificationMeta('c4eR');
  GeneratedColumn<double> _c4eR;
  @override
  GeneratedColumn<double> get c4eR =>
      _c4eR ??= GeneratedColumn<double>('c4e_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c5eRMeta = const VerificationMeta('c5eR');
  GeneratedColumn<double> _c5eR;
  @override
  GeneratedColumn<double> get c5eR =>
      _c5eR ??= GeneratedColumn<double>('c5e_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1eYMeta = const VerificationMeta('c1eY');
  GeneratedColumn<double> _c1eY;
  @override
  GeneratedColumn<double> get c1eY =>
      _c1eY ??= GeneratedColumn<double>('c1e_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2eYMeta = const VerificationMeta('c2eY');
  GeneratedColumn<double> _c2eY;
  @override
  GeneratedColumn<double> get c2eY =>
      _c2eY ??= GeneratedColumn<double>('c2e_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c3eYMeta = const VerificationMeta('c3eY');
  GeneratedColumn<double> _c3eY;
  @override
  GeneratedColumn<double> get c3eY =>
      _c3eY ??= GeneratedColumn<double>('c3e_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c4eYMeta = const VerificationMeta('c4eY');
  GeneratedColumn<double> _c4eY;
  @override
  GeneratedColumn<double> get c4eY =>
      _c4eY ??= GeneratedColumn<double>('c4e_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c5eYMeta = const VerificationMeta('c5eY');
  GeneratedColumn<double> _c5eY;
  @override
  GeneratedColumn<double> get c5eY =>
      _c5eY ??= GeneratedColumn<double>('c5e_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1eBMeta = const VerificationMeta('c1eB');
  GeneratedColumn<double> _c1eB;
  @override
  GeneratedColumn<double> get c1eB =>
      _c1eB ??= GeneratedColumn<double>('c1e_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2eBMeta = const VerificationMeta('c2eB');
  GeneratedColumn<double> _c2eB;
  @override
  GeneratedColumn<double> get c2eB =>
      _c2eB ??= GeneratedColumn<double>('c2e_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c3eBMeta = const VerificationMeta('c3eB');
  GeneratedColumn<double> _c3eB;
  @override
  GeneratedColumn<double> get c3eB =>
      _c3eB ??= GeneratedColumn<double>('c3e_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c4eBMeta = const VerificationMeta('c4eB');
  GeneratedColumn<double> _c4eB;
  @override
  GeneratedColumn<double> get c4eB =>
      _c4eB ??= GeneratedColumn<double>('c4e_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c5eBMeta = const VerificationMeta('c5eB');
  GeneratedColumn<double> _c5eB;
  @override
  GeneratedColumn<double> get c5eB =>
      _c5eB ??= GeneratedColumn<double>('c5e_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1c2RMeta = const VerificationMeta('c1c2R');
  GeneratedColumn<double> _c1c2R;
  @override
  GeneratedColumn<double> get c1c2R =>
      _c1c2R ??= GeneratedColumn<double>('c1c2_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1c2YMeta = const VerificationMeta('c1c2Y');
  GeneratedColumn<double> _c1c2Y;
  @override
  GeneratedColumn<double> get c1c2Y =>
      _c1c2Y ??= GeneratedColumn<double>('c1c2_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1c2BMeta = const VerificationMeta('c1c2B');
  GeneratedColumn<double> _c1c2B;
  @override
  GeneratedColumn<double> get c1c2B =>
      _c1c2B ??= GeneratedColumn<double>('c1c2_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2c3RMeta = const VerificationMeta('c2c3R');
  GeneratedColumn<double> _c2c3R;
  @override
  GeneratedColumn<double> get c2c3R =>
      _c2c3R ??= GeneratedColumn<double>('c2c3_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2c3YMeta = const VerificationMeta('c2c3Y');
  GeneratedColumn<double> _c2c3Y;
  @override
  GeneratedColumn<double> get c2c3Y =>
      _c2c3Y ??= GeneratedColumn<double>('c2c3_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2c3BMeta = const VerificationMeta('c2c3B');
  GeneratedColumn<double> _c2c3B;
  @override
  GeneratedColumn<double> get c2c3B =>
      _c2c3B ??= GeneratedColumn<double>('c2c3_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c3c4RMeta = const VerificationMeta('c3c4R');
  GeneratedColumn<double> _c3c4R;
  @override
  GeneratedColumn<double> get c3c4R =>
      _c3c4R ??= GeneratedColumn<double>('c3c4_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c3c4YMeta = const VerificationMeta('c3c4Y');
  GeneratedColumn<double> _c3c4Y;
  @override
  GeneratedColumn<double> get c3c4Y =>
      _c3c4Y ??= GeneratedColumn<double>('c3c4_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c3c4BMeta = const VerificationMeta('c3c4B');
  GeneratedColumn<double> _c3c4B;
  @override
  GeneratedColumn<double> get c3c4B =>
      _c3c4B ??= GeneratedColumn<double>('c3c4_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c4c5RMeta = const VerificationMeta('c4c5R');
  GeneratedColumn<double> _c4c5R;
  @override
  GeneratedColumn<double> get c4c5R =>
      _c4c5R ??= GeneratedColumn<double>('c4c5_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c4c5YMeta = const VerificationMeta('c4c5Y');
  GeneratedColumn<double> _c4c5Y;
  @override
  GeneratedColumn<double> get c4c5Y =>
      _c4c5Y ??= GeneratedColumn<double>('c4c5_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c4c5BMeta = const VerificationMeta('c4c5B');
  GeneratedColumn<double> _c4c5B;
  @override
  GeneratedColumn<double> get c4c5B =>
      _c4c5B ??= GeneratedColumn<double>('c4c5_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _clc1RMeta = const VerificationMeta('clc1R');
  GeneratedColumn<double> _clc1R;
  @override
  GeneratedColumn<double> get clc1R =>
      _clc1R ??= GeneratedColumn<double>('clc1_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _clc1YMeta = const VerificationMeta('clc1Y');
  GeneratedColumn<double> _clc1Y;
  @override
  GeneratedColumn<double> get clc1Y =>
      _clc1Y ??= GeneratedColumn<double>('clc1_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _clc1BMeta = const VerificationMeta('clc1B');
  GeneratedColumn<double> _clc1B;
  @override
  GeneratedColumn<double> get clc1B =>
      _clc1B ??= GeneratedColumn<double>('clc1_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        peR,
        peY,
        peB,
        pc1R,
        pc2R,
        pc3R,
        pc4R,
        pc5R,
        pc1Y,
        pc2Y,
        pc3Y,
        pc4Y,
        pc5Y,
        pc1B,
        pc2B,
        pc3B,
        pc4B,
        pc5B,
        c1eR,
        c2eR,
        c3eR,
        c4eR,
        c5eR,
        c1eY,
        c2eY,
        c3eY,
        c4eY,
        c5eY,
        c1eB,
        c2eB,
        c3eB,
        c4eB,
        c5eB,
        c1c2R,
        c1c2Y,
        c1c2B,
        c2c3R,
        c2c3Y,
        c2c3B,
        c3c4R,
        c3c4Y,
        c3c4B,
        c4c5R,
        c4c5Y,
        c4c5B,
        clc1R,
        clc1Y,
        clc1B
      ];
  @override
  String get aliasedName => _alias ?? 'c_tcore_i_r_local_datasource_impl';
  @override
  String get actualTableName => 'c_tcore_i_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<CTcoreIRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('pe_r')) {
      context.handle(
          _peRMeta, peR.isAcceptableOrUnknown(data['pe_r'], _peRMeta));
    } else if (isInserting) {
      context.missing(_peRMeta);
    }
    if (data.containsKey('pe_y')) {
      context.handle(
          _peYMeta, peY.isAcceptableOrUnknown(data['pe_y'], _peYMeta));
    } else if (isInserting) {
      context.missing(_peYMeta);
    }
    if (data.containsKey('pe_b')) {
      context.handle(
          _peBMeta, peB.isAcceptableOrUnknown(data['pe_b'], _peBMeta));
    } else if (isInserting) {
      context.missing(_peBMeta);
    }
    if (data.containsKey('pc1_r')) {
      context.handle(
          _pc1RMeta, pc1R.isAcceptableOrUnknown(data['pc1_r'], _pc1RMeta));
    } else if (isInserting) {
      context.missing(_pc1RMeta);
    }
    if (data.containsKey('pc2_r')) {
      context.handle(
          _pc2RMeta, pc2R.isAcceptableOrUnknown(data['pc2_r'], _pc2RMeta));
    } else if (isInserting) {
      context.missing(_pc2RMeta);
    }
    if (data.containsKey('pc3_r')) {
      context.handle(
          _pc3RMeta, pc3R.isAcceptableOrUnknown(data['pc3_r'], _pc3RMeta));
    } else if (isInserting) {
      context.missing(_pc3RMeta);
    }
    if (data.containsKey('pc4_r')) {
      context.handle(
          _pc4RMeta, pc4R.isAcceptableOrUnknown(data['pc4_r'], _pc4RMeta));
    } else if (isInserting) {
      context.missing(_pc4RMeta);
    }
    if (data.containsKey('pc5_r')) {
      context.handle(
          _pc5RMeta, pc5R.isAcceptableOrUnknown(data['pc5_r'], _pc5RMeta));
    } else if (isInserting) {
      context.missing(_pc5RMeta);
    }
    if (data.containsKey('pc1_y')) {
      context.handle(
          _pc1YMeta, pc1Y.isAcceptableOrUnknown(data['pc1_y'], _pc1YMeta));
    } else if (isInserting) {
      context.missing(_pc1YMeta);
    }
    if (data.containsKey('pc2_y')) {
      context.handle(
          _pc2YMeta, pc2Y.isAcceptableOrUnknown(data['pc2_y'], _pc2YMeta));
    } else if (isInserting) {
      context.missing(_pc2YMeta);
    }
    if (data.containsKey('pc3_y')) {
      context.handle(
          _pc3YMeta, pc3Y.isAcceptableOrUnknown(data['pc3_y'], _pc3YMeta));
    } else if (isInserting) {
      context.missing(_pc3YMeta);
    }
    if (data.containsKey('pc4_y')) {
      context.handle(
          _pc4YMeta, pc4Y.isAcceptableOrUnknown(data['pc4_y'], _pc4YMeta));
    } else if (isInserting) {
      context.missing(_pc4YMeta);
    }
    if (data.containsKey('pc5_y')) {
      context.handle(
          _pc5YMeta, pc5Y.isAcceptableOrUnknown(data['pc5_y'], _pc5YMeta));
    } else if (isInserting) {
      context.missing(_pc5YMeta);
    }
    if (data.containsKey('pc1_b')) {
      context.handle(
          _pc1BMeta, pc1B.isAcceptableOrUnknown(data['pc1_b'], _pc1BMeta));
    } else if (isInserting) {
      context.missing(_pc1BMeta);
    }
    if (data.containsKey('pc2_b')) {
      context.handle(
          _pc2BMeta, pc2B.isAcceptableOrUnknown(data['pc2_b'], _pc2BMeta));
    } else if (isInserting) {
      context.missing(_pc2BMeta);
    }
    if (data.containsKey('pc3_b')) {
      context.handle(
          _pc3BMeta, pc3B.isAcceptableOrUnknown(data['pc3_b'], _pc3BMeta));
    } else if (isInserting) {
      context.missing(_pc3BMeta);
    }
    if (data.containsKey('pc4_b')) {
      context.handle(
          _pc4BMeta, pc4B.isAcceptableOrUnknown(data['pc4_b'], _pc4BMeta));
    } else if (isInserting) {
      context.missing(_pc4BMeta);
    }
    if (data.containsKey('pc5_b')) {
      context.handle(
          _pc5BMeta, pc5B.isAcceptableOrUnknown(data['pc5_b'], _pc5BMeta));
    } else if (isInserting) {
      context.missing(_pc5BMeta);
    }
    if (data.containsKey('c1e_r')) {
      context.handle(
          _c1eRMeta, c1eR.isAcceptableOrUnknown(data['c1e_r'], _c1eRMeta));
    } else if (isInserting) {
      context.missing(_c1eRMeta);
    }
    if (data.containsKey('c2e_r')) {
      context.handle(
          _c2eRMeta, c2eR.isAcceptableOrUnknown(data['c2e_r'], _c2eRMeta));
    } else if (isInserting) {
      context.missing(_c2eRMeta);
    }
    if (data.containsKey('c3e_r')) {
      context.handle(
          _c3eRMeta, c3eR.isAcceptableOrUnknown(data['c3e_r'], _c3eRMeta));
    } else if (isInserting) {
      context.missing(_c3eRMeta);
    }
    if (data.containsKey('c4e_r')) {
      context.handle(
          _c4eRMeta, c4eR.isAcceptableOrUnknown(data['c4e_r'], _c4eRMeta));
    } else if (isInserting) {
      context.missing(_c4eRMeta);
    }
    if (data.containsKey('c5e_r')) {
      context.handle(
          _c5eRMeta, c5eR.isAcceptableOrUnknown(data['c5e_r'], _c5eRMeta));
    } else if (isInserting) {
      context.missing(_c5eRMeta);
    }
    if (data.containsKey('c1e_y')) {
      context.handle(
          _c1eYMeta, c1eY.isAcceptableOrUnknown(data['c1e_y'], _c1eYMeta));
    } else if (isInserting) {
      context.missing(_c1eYMeta);
    }
    if (data.containsKey('c2e_y')) {
      context.handle(
          _c2eYMeta, c2eY.isAcceptableOrUnknown(data['c2e_y'], _c2eYMeta));
    } else if (isInserting) {
      context.missing(_c2eYMeta);
    }
    if (data.containsKey('c3e_y')) {
      context.handle(
          _c3eYMeta, c3eY.isAcceptableOrUnknown(data['c3e_y'], _c3eYMeta));
    } else if (isInserting) {
      context.missing(_c3eYMeta);
    }
    if (data.containsKey('c4e_y')) {
      context.handle(
          _c4eYMeta, c4eY.isAcceptableOrUnknown(data['c4e_y'], _c4eYMeta));
    } else if (isInserting) {
      context.missing(_c4eYMeta);
    }
    if (data.containsKey('c5e_y')) {
      context.handle(
          _c5eYMeta, c5eY.isAcceptableOrUnknown(data['c5e_y'], _c5eYMeta));
    } else if (isInserting) {
      context.missing(_c5eYMeta);
    }
    if (data.containsKey('c1e_b')) {
      context.handle(
          _c1eBMeta, c1eB.isAcceptableOrUnknown(data['c1e_b'], _c1eBMeta));
    } else if (isInserting) {
      context.missing(_c1eBMeta);
    }
    if (data.containsKey('c2e_b')) {
      context.handle(
          _c2eBMeta, c2eB.isAcceptableOrUnknown(data['c2e_b'], _c2eBMeta));
    } else if (isInserting) {
      context.missing(_c2eBMeta);
    }
    if (data.containsKey('c3e_b')) {
      context.handle(
          _c3eBMeta, c3eB.isAcceptableOrUnknown(data['c3e_b'], _c3eBMeta));
    } else if (isInserting) {
      context.missing(_c3eBMeta);
    }
    if (data.containsKey('c4e_b')) {
      context.handle(
          _c4eBMeta, c4eB.isAcceptableOrUnknown(data['c4e_b'], _c4eBMeta));
    } else if (isInserting) {
      context.missing(_c4eBMeta);
    }
    if (data.containsKey('c5e_b')) {
      context.handle(
          _c5eBMeta, c5eB.isAcceptableOrUnknown(data['c5e_b'], _c5eBMeta));
    } else if (isInserting) {
      context.missing(_c5eBMeta);
    }
    if (data.containsKey('c1c2_r')) {
      context.handle(
          _c1c2RMeta, c1c2R.isAcceptableOrUnknown(data['c1c2_r'], _c1c2RMeta));
    } else if (isInserting) {
      context.missing(_c1c2RMeta);
    }
    if (data.containsKey('c1c2_y')) {
      context.handle(
          _c1c2YMeta, c1c2Y.isAcceptableOrUnknown(data['c1c2_y'], _c1c2YMeta));
    } else if (isInserting) {
      context.missing(_c1c2YMeta);
    }
    if (data.containsKey('c1c2_b')) {
      context.handle(
          _c1c2BMeta, c1c2B.isAcceptableOrUnknown(data['c1c2_b'], _c1c2BMeta));
    } else if (isInserting) {
      context.missing(_c1c2BMeta);
    }
    if (data.containsKey('c2c3_r')) {
      context.handle(
          _c2c3RMeta, c2c3R.isAcceptableOrUnknown(data['c2c3_r'], _c2c3RMeta));
    } else if (isInserting) {
      context.missing(_c2c3RMeta);
    }
    if (data.containsKey('c2c3_y')) {
      context.handle(
          _c2c3YMeta, c2c3Y.isAcceptableOrUnknown(data['c2c3_y'], _c2c3YMeta));
    } else if (isInserting) {
      context.missing(_c2c3YMeta);
    }
    if (data.containsKey('c2c3_b')) {
      context.handle(
          _c2c3BMeta, c2c3B.isAcceptableOrUnknown(data['c2c3_b'], _c2c3BMeta));
    } else if (isInserting) {
      context.missing(_c2c3BMeta);
    }
    if (data.containsKey('c3c4_r')) {
      context.handle(
          _c3c4RMeta, c3c4R.isAcceptableOrUnknown(data['c3c4_r'], _c3c4RMeta));
    } else if (isInserting) {
      context.missing(_c3c4RMeta);
    }
    if (data.containsKey('c3c4_y')) {
      context.handle(
          _c3c4YMeta, c3c4Y.isAcceptableOrUnknown(data['c3c4_y'], _c3c4YMeta));
    } else if (isInserting) {
      context.missing(_c3c4YMeta);
    }
    if (data.containsKey('c3c4_b')) {
      context.handle(
          _c3c4BMeta, c3c4B.isAcceptableOrUnknown(data['c3c4_b'], _c3c4BMeta));
    } else if (isInserting) {
      context.missing(_c3c4BMeta);
    }
    if (data.containsKey('c4c5_r')) {
      context.handle(
          _c4c5RMeta, c4c5R.isAcceptableOrUnknown(data['c4c5_r'], _c4c5RMeta));
    } else if (isInserting) {
      context.missing(_c4c5RMeta);
    }
    if (data.containsKey('c4c5_y')) {
      context.handle(
          _c4c5YMeta, c4c5Y.isAcceptableOrUnknown(data['c4c5_y'], _c4c5YMeta));
    } else if (isInserting) {
      context.missing(_c4c5YMeta);
    }
    if (data.containsKey('c4c5_b')) {
      context.handle(
          _c4c5BMeta, c4c5B.isAcceptableOrUnknown(data['c4c5_b'], _c4c5BMeta));
    } else if (isInserting) {
      context.missing(_c4c5BMeta);
    }
    if (data.containsKey('clc1_r')) {
      context.handle(
          _clc1RMeta, clc1R.isAcceptableOrUnknown(data['clc1_r'], _clc1RMeta));
    } else if (isInserting) {
      context.missing(_clc1RMeta);
    }
    if (data.containsKey('clc1_y')) {
      context.handle(
          _clc1YMeta, clc1Y.isAcceptableOrUnknown(data['clc1_y'], _clc1YMeta));
    } else if (isInserting) {
      context.missing(_clc1YMeta);
    }
    if (data.containsKey('clc1_b')) {
      context.handle(
          _clc1BMeta, clc1B.isAcceptableOrUnknown(data['clc1_b'], _clc1BMeta));
    } else if (isInserting) {
      context.missing(_clc1BMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CTcoreIRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return CTcoreIRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CTcoreIRLocalDatasourceImplTable createAlias(String alias) {
    return $CTcoreIRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class CTcoreWRLocalData extends DataClass
    implements Insertable<CTcoreWRLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double R_1S1_1S2;
  final double R_2S1_2S2;
  final double R_3S1_3S2;
  final double R_4S1_4S2;
  final double R_5S1_5S2;
  final double Y_1S1_1S2;
  final double Y_2S1_2S2;
  final double Y_3S1_3S2;
  final double Y_4S1_4S2;
  final double Y_5S1_5S2;
  final double B_1S1_1S2;
  final double B_2S1_2S2;
  final double B_3S1_3S2;
  final double B_4S1_4S2;
  final double B_5S1_5S2;
  CTcoreWRLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.R_1S1_1S2,
      @required this.R_2S1_2S2,
      @required this.R_3S1_3S2,
      @required this.R_4S1_4S2,
      @required this.R_5S1_5S2,
      @required this.Y_1S1_1S2,
      @required this.Y_2S1_2S2,
      @required this.Y_3S1_3S2,
      @required this.Y_4S1_4S2,
      @required this.Y_5S1_5S2,
      @required this.B_1S1_1S2,
      @required this.B_2S1_2S2,
      @required this.B_3S1_3S2,
      @required this.B_4S1_4S2,
      @required this.B_5S1_5S2});
  factory CTcoreWRLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return CTcoreWRLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      R_1S1_1S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1s1_1s2']),
      R_2S1_2S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2s1_2s2']),
      R_3S1_3S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3s1_3s2']),
      R_4S1_4S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_4s1_4s2']),
      R_5S1_5S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_5s1_5s2']),
      Y_1S1_1S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1s1_1s2']),
      Y_2S1_2S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2s1_2s2']),
      Y_3S1_3S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3s1_3s2']),
      Y_4S1_4S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_4s1_4s2']),
      Y_5S1_5S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_5s1_5s2']),
      B_1S1_1S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1s1_1s2']),
      B_2S1_2S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2s1_2s2']),
      B_3S1_3S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3s1_3s2']),
      B_4S1_4S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_4s1_4s2']),
      B_5S1_5S2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_5s1_5s2']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || R_1S1_1S2 != null) {
      map['r_1s1_1s2'] = Variable<double>(R_1S1_1S2);
    }
    if (!nullToAbsent || R_2S1_2S2 != null) {
      map['r_2s1_2s2'] = Variable<double>(R_2S1_2S2);
    }
    if (!nullToAbsent || R_3S1_3S2 != null) {
      map['r_3s1_3s2'] = Variable<double>(R_3S1_3S2);
    }
    if (!nullToAbsent || R_4S1_4S2 != null) {
      map['r_4s1_4s2'] = Variable<double>(R_4S1_4S2);
    }
    if (!nullToAbsent || R_5S1_5S2 != null) {
      map['r_5s1_5s2'] = Variable<double>(R_5S1_5S2);
    }
    if (!nullToAbsent || Y_1S1_1S2 != null) {
      map['y_1s1_1s2'] = Variable<double>(Y_1S1_1S2);
    }
    if (!nullToAbsent || Y_2S1_2S2 != null) {
      map['y_2s1_2s2'] = Variable<double>(Y_2S1_2S2);
    }
    if (!nullToAbsent || Y_3S1_3S2 != null) {
      map['y_3s1_3s2'] = Variable<double>(Y_3S1_3S2);
    }
    if (!nullToAbsent || Y_4S1_4S2 != null) {
      map['y_4s1_4s2'] = Variable<double>(Y_4S1_4S2);
    }
    if (!nullToAbsent || Y_5S1_5S2 != null) {
      map['y_5s1_5s2'] = Variable<double>(Y_5S1_5S2);
    }
    if (!nullToAbsent || B_1S1_1S2 != null) {
      map['b_1s1_1s2'] = Variable<double>(B_1S1_1S2);
    }
    if (!nullToAbsent || B_2S1_2S2 != null) {
      map['b_2s1_2s2'] = Variable<double>(B_2S1_2S2);
    }
    if (!nullToAbsent || B_3S1_3S2 != null) {
      map['b_3s1_3s2'] = Variable<double>(B_3S1_3S2);
    }
    if (!nullToAbsent || B_4S1_4S2 != null) {
      map['b_4s1_4s2'] = Variable<double>(B_4S1_4S2);
    }
    if (!nullToAbsent || B_5S1_5S2 != null) {
      map['b_5s1_5s2'] = Variable<double>(B_5S1_5S2);
    }
    return map;
  }

  CTcoreWRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return CTcoreWRLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      R_1S1_1S2: R_1S1_1S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1S1_1S2),
      R_2S1_2S2: R_2S1_2S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2S1_2S2),
      R_3S1_3S2: R_3S1_3S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3S1_3S2),
      R_4S1_4S2: R_4S1_4S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_4S1_4S2),
      R_5S1_5S2: R_5S1_5S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_5S1_5S2),
      Y_1S1_1S2: Y_1S1_1S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1S1_1S2),
      Y_2S1_2S2: Y_2S1_2S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2S1_2S2),
      Y_3S1_3S2: Y_3S1_3S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3S1_3S2),
      Y_4S1_4S2: Y_4S1_4S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_4S1_4S2),
      Y_5S1_5S2: Y_5S1_5S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_5S1_5S2),
      B_1S1_1S2: B_1S1_1S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1S1_1S2),
      B_2S1_2S2: B_2S1_2S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2S1_2S2),
      B_3S1_3S2: B_3S1_3S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3S1_3S2),
      B_4S1_4S2: B_4S1_4S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_4S1_4S2),
      B_5S1_5S2: B_5S1_5S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_5S1_5S2),
    );
  }

  factory CTcoreWRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CTcoreWRLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      R_1S1_1S2: serializer.fromJson<double>(json['R_1S1_1S2']),
      R_2S1_2S2: serializer.fromJson<double>(json['R_2S1_2S2']),
      R_3S1_3S2: serializer.fromJson<double>(json['R_3S1_3S2']),
      R_4S1_4S2: serializer.fromJson<double>(json['R_4S1_4S2']),
      R_5S1_5S2: serializer.fromJson<double>(json['R_5S1_5S2']),
      Y_1S1_1S2: serializer.fromJson<double>(json['Y_1S1_1S2']),
      Y_2S1_2S2: serializer.fromJson<double>(json['Y_2S1_2S2']),
      Y_3S1_3S2: serializer.fromJson<double>(json['Y_3S1_3S2']),
      Y_4S1_4S2: serializer.fromJson<double>(json['Y_4S1_4S2']),
      Y_5S1_5S2: serializer.fromJson<double>(json['Y_5S1_5S2']),
      B_1S1_1S2: serializer.fromJson<double>(json['B_1S1_1S2']),
      B_2S1_2S2: serializer.fromJson<double>(json['B_2S1_2S2']),
      B_3S1_3S2: serializer.fromJson<double>(json['B_3S1_3S2']),
      B_4S1_4S2: serializer.fromJson<double>(json['B_4S1_4S2']),
      B_5S1_5S2: serializer.fromJson<double>(json['B_5S1_5S2']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'R_1S1_1S2': serializer.toJson<double>(R_1S1_1S2),
      'R_2S1_2S2': serializer.toJson<double>(R_2S1_2S2),
      'R_3S1_3S2': serializer.toJson<double>(R_3S1_3S2),
      'R_4S1_4S2': serializer.toJson<double>(R_4S1_4S2),
      'R_5S1_5S2': serializer.toJson<double>(R_5S1_5S2),
      'Y_1S1_1S2': serializer.toJson<double>(Y_1S1_1S2),
      'Y_2S1_2S2': serializer.toJson<double>(Y_2S1_2S2),
      'Y_3S1_3S2': serializer.toJson<double>(Y_3S1_3S2),
      'Y_4S1_4S2': serializer.toJson<double>(Y_4S1_4S2),
      'Y_5S1_5S2': serializer.toJson<double>(Y_5S1_5S2),
      'B_1S1_1S2': serializer.toJson<double>(B_1S1_1S2),
      'B_2S1_2S2': serializer.toJson<double>(B_2S1_2S2),
      'B_3S1_3S2': serializer.toJson<double>(B_3S1_3S2),
      'B_4S1_4S2': serializer.toJson<double>(B_4S1_4S2),
      'B_5S1_5S2': serializer.toJson<double>(B_5S1_5S2),
    };
  }

  CTcoreWRLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double R_1S1_1S2,
          double R_2S1_2S2,
          double R_3S1_3S2,
          double R_4S1_4S2,
          double R_5S1_5S2,
          double Y_1S1_1S2,
          double Y_2S1_2S2,
          double Y_3S1_3S2,
          double Y_4S1_4S2,
          double Y_5S1_5S2,
          double B_1S1_1S2,
          double B_2S1_2S2,
          double B_3S1_3S2,
          double B_4S1_4S2,
          double B_5S1_5S2}) =>
      CTcoreWRLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        R_1S1_1S2: R_1S1_1S2 ?? this.R_1S1_1S2,
        R_2S1_2S2: R_2S1_2S2 ?? this.R_2S1_2S2,
        R_3S1_3S2: R_3S1_3S2 ?? this.R_3S1_3S2,
        R_4S1_4S2: R_4S1_4S2 ?? this.R_4S1_4S2,
        R_5S1_5S2: R_5S1_5S2 ?? this.R_5S1_5S2,
        Y_1S1_1S2: Y_1S1_1S2 ?? this.Y_1S1_1S2,
        Y_2S1_2S2: Y_2S1_2S2 ?? this.Y_2S1_2S2,
        Y_3S1_3S2: Y_3S1_3S2 ?? this.Y_3S1_3S2,
        Y_4S1_4S2: Y_4S1_4S2 ?? this.Y_4S1_4S2,
        Y_5S1_5S2: Y_5S1_5S2 ?? this.Y_5S1_5S2,
        B_1S1_1S2: B_1S1_1S2 ?? this.B_1S1_1S2,
        B_2S1_2S2: B_2S1_2S2 ?? this.B_2S1_2S2,
        B_3S1_3S2: B_3S1_3S2 ?? this.B_3S1_3S2,
        B_4S1_4S2: B_4S1_4S2 ?? this.B_4S1_4S2,
        B_5S1_5S2: B_5S1_5S2 ?? this.B_5S1_5S2,
      );
  @override
  String toString() {
    return (StringBuffer('CTcoreWRLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_1S1_1S2: $R_1S1_1S2, ')
          ..write('R_2S1_2S2: $R_2S1_2S2, ')
          ..write('R_3S1_3S2: $R_3S1_3S2, ')
          ..write('R_4S1_4S2: $R_4S1_4S2, ')
          ..write('R_5S1_5S2: $R_5S1_5S2, ')
          ..write('Y_1S1_1S2: $Y_1S1_1S2, ')
          ..write('Y_2S1_2S2: $Y_2S1_2S2, ')
          ..write('Y_3S1_3S2: $Y_3S1_3S2, ')
          ..write('Y_4S1_4S2: $Y_4S1_4S2, ')
          ..write('Y_5S1_5S2: $Y_5S1_5S2, ')
          ..write('B_1S1_1S2: $B_1S1_1S2, ')
          ..write('B_2S1_2S2: $B_2S1_2S2, ')
          ..write('B_3S1_3S2: $B_3S1_3S2, ')
          ..write('B_4S1_4S2: $B_4S1_4S2, ')
          ..write('B_5S1_5S2: $B_5S1_5S2')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_1S1_1S2,
        R_2S1_2S2,
        R_3S1_3S2,
        R_4S1_4S2,
        R_5S1_5S2,
        Y_1S1_1S2,
        Y_2S1_2S2,
        Y_3S1_3S2,
        Y_4S1_4S2,
        Y_5S1_5S2,
        B_1S1_1S2,
        B_2S1_2S2,
        B_3S1_3S2,
        B_4S1_4S2,
        B_5S1_5S2
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CTcoreWRLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.R_1S1_1S2 == this.R_1S1_1S2 &&
          other.R_2S1_2S2 == this.R_2S1_2S2 &&
          other.R_3S1_3S2 == this.R_3S1_3S2 &&
          other.R_4S1_4S2 == this.R_4S1_4S2 &&
          other.R_5S1_5S2 == this.R_5S1_5S2 &&
          other.Y_1S1_1S2 == this.Y_1S1_1S2 &&
          other.Y_2S1_2S2 == this.Y_2S1_2S2 &&
          other.Y_3S1_3S2 == this.Y_3S1_3S2 &&
          other.Y_4S1_4S2 == this.Y_4S1_4S2 &&
          other.Y_5S1_5S2 == this.Y_5S1_5S2 &&
          other.B_1S1_1S2 == this.B_1S1_1S2 &&
          other.B_2S1_2S2 == this.B_2S1_2S2 &&
          other.B_3S1_3S2 == this.B_3S1_3S2 &&
          other.B_4S1_4S2 == this.B_4S1_4S2 &&
          other.B_5S1_5S2 == this.B_5S1_5S2);
}

class CTcoreWRLocalDatasourceImplCompanion
    extends UpdateCompanion<CTcoreWRLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> R_1S1_1S2;
  final Value<double> R_2S1_2S2;
  final Value<double> R_3S1_3S2;
  final Value<double> R_4S1_4S2;
  final Value<double> R_5S1_5S2;
  final Value<double> Y_1S1_1S2;
  final Value<double> Y_2S1_2S2;
  final Value<double> Y_3S1_3S2;
  final Value<double> Y_4S1_4S2;
  final Value<double> Y_5S1_5S2;
  final Value<double> B_1S1_1S2;
  final Value<double> B_2S1_2S2;
  final Value<double> B_3S1_3S2;
  final Value<double> B_4S1_4S2;
  final Value<double> B_5S1_5S2;
  const CTcoreWRLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.R_1S1_1S2 = const Value.absent(),
    this.R_2S1_2S2 = const Value.absent(),
    this.R_3S1_3S2 = const Value.absent(),
    this.R_4S1_4S2 = const Value.absent(),
    this.R_5S1_5S2 = const Value.absent(),
    this.Y_1S1_1S2 = const Value.absent(),
    this.Y_2S1_2S2 = const Value.absent(),
    this.Y_3S1_3S2 = const Value.absent(),
    this.Y_4S1_4S2 = const Value.absent(),
    this.Y_5S1_5S2 = const Value.absent(),
    this.B_1S1_1S2 = const Value.absent(),
    this.B_2S1_2S2 = const Value.absent(),
    this.B_3S1_3S2 = const Value.absent(),
    this.B_4S1_4S2 = const Value.absent(),
    this.B_5S1_5S2 = const Value.absent(),
  });
  CTcoreWRLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double R_1S1_1S2,
    @required double R_2S1_2S2,
    @required double R_3S1_3S2,
    @required double R_4S1_4S2,
    @required double R_5S1_5S2,
    @required double Y_1S1_1S2,
    @required double Y_2S1_2S2,
    @required double Y_3S1_3S2,
    @required double Y_4S1_4S2,
    @required double Y_5S1_5S2,
    @required double B_1S1_1S2,
    @required double B_2S1_2S2,
    @required double B_3S1_3S2,
    @required double B_4S1_4S2,
    @required double B_5S1_5S2,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        R_1S1_1S2 = Value(R_1S1_1S2),
        R_2S1_2S2 = Value(R_2S1_2S2),
        R_3S1_3S2 = Value(R_3S1_3S2),
        R_4S1_4S2 = Value(R_4S1_4S2),
        R_5S1_5S2 = Value(R_5S1_5S2),
        Y_1S1_1S2 = Value(Y_1S1_1S2),
        Y_2S1_2S2 = Value(Y_2S1_2S2),
        Y_3S1_3S2 = Value(Y_3S1_3S2),
        Y_4S1_4S2 = Value(Y_4S1_4S2),
        Y_5S1_5S2 = Value(Y_5S1_5S2),
        B_1S1_1S2 = Value(B_1S1_1S2),
        B_2S1_2S2 = Value(B_2S1_2S2),
        B_3S1_3S2 = Value(B_3S1_3S2),
        B_4S1_4S2 = Value(B_4S1_4S2),
        B_5S1_5S2 = Value(B_5S1_5S2);
  static Insertable<CTcoreWRLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> R_1S1_1S2,
    Expression<double> R_2S1_2S2,
    Expression<double> R_3S1_3S2,
    Expression<double> R_4S1_4S2,
    Expression<double> R_5S1_5S2,
    Expression<double> Y_1S1_1S2,
    Expression<double> Y_2S1_2S2,
    Expression<double> Y_3S1_3S2,
    Expression<double> Y_4S1_4S2,
    Expression<double> Y_5S1_5S2,
    Expression<double> B_1S1_1S2,
    Expression<double> B_2S1_2S2,
    Expression<double> B_3S1_3S2,
    Expression<double> B_4S1_4S2,
    Expression<double> B_5S1_5S2,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (R_1S1_1S2 != null) 'r_1s1_1s2': R_1S1_1S2,
      if (R_2S1_2S2 != null) 'r_2s1_2s2': R_2S1_2S2,
      if (R_3S1_3S2 != null) 'r_3s1_3s2': R_3S1_3S2,
      if (R_4S1_4S2 != null) 'r_4s1_4s2': R_4S1_4S2,
      if (R_5S1_5S2 != null) 'r_5s1_5s2': R_5S1_5S2,
      if (Y_1S1_1S2 != null) 'y_1s1_1s2': Y_1S1_1S2,
      if (Y_2S1_2S2 != null) 'y_2s1_2s2': Y_2S1_2S2,
      if (Y_3S1_3S2 != null) 'y_3s1_3s2': Y_3S1_3S2,
      if (Y_4S1_4S2 != null) 'y_4s1_4s2': Y_4S1_4S2,
      if (Y_5S1_5S2 != null) 'y_5s1_5s2': Y_5S1_5S2,
      if (B_1S1_1S2 != null) 'b_1s1_1s2': B_1S1_1S2,
      if (B_2S1_2S2 != null) 'b_2s1_2s2': B_2S1_2S2,
      if (B_3S1_3S2 != null) 'b_3s1_3s2': B_3S1_3S2,
      if (B_4S1_4S2 != null) 'b_4s1_4s2': B_4S1_4S2,
      if (B_5S1_5S2 != null) 'b_5s1_5s2': B_5S1_5S2,
    });
  }

  CTcoreWRLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> R_1S1_1S2,
      Value<double> R_2S1_2S2,
      Value<double> R_3S1_3S2,
      Value<double> R_4S1_4S2,
      Value<double> R_5S1_5S2,
      Value<double> Y_1S1_1S2,
      Value<double> Y_2S1_2S2,
      Value<double> Y_3S1_3S2,
      Value<double> Y_4S1_4S2,
      Value<double> Y_5S1_5S2,
      Value<double> B_1S1_1S2,
      Value<double> B_2S1_2S2,
      Value<double> B_3S1_3S2,
      Value<double> B_4S1_4S2,
      Value<double> B_5S1_5S2}) {
    return CTcoreWRLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      R_1S1_1S2: R_1S1_1S2 ?? this.R_1S1_1S2,
      R_2S1_2S2: R_2S1_2S2 ?? this.R_2S1_2S2,
      R_3S1_3S2: R_3S1_3S2 ?? this.R_3S1_3S2,
      R_4S1_4S2: R_4S1_4S2 ?? this.R_4S1_4S2,
      R_5S1_5S2: R_5S1_5S2 ?? this.R_5S1_5S2,
      Y_1S1_1S2: Y_1S1_1S2 ?? this.Y_1S1_1S2,
      Y_2S1_2S2: Y_2S1_2S2 ?? this.Y_2S1_2S2,
      Y_3S1_3S2: Y_3S1_3S2 ?? this.Y_3S1_3S2,
      Y_4S1_4S2: Y_4S1_4S2 ?? this.Y_4S1_4S2,
      Y_5S1_5S2: Y_5S1_5S2 ?? this.Y_5S1_5S2,
      B_1S1_1S2: B_1S1_1S2 ?? this.B_1S1_1S2,
      B_2S1_2S2: B_2S1_2S2 ?? this.B_2S1_2S2,
      B_3S1_3S2: B_3S1_3S2 ?? this.B_3S1_3S2,
      B_4S1_4S2: B_4S1_4S2 ?? this.B_4S1_4S2,
      B_5S1_5S2: B_5S1_5S2 ?? this.B_5S1_5S2,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (R_1S1_1S2.present) {
      map['r_1s1_1s2'] = Variable<double>(R_1S1_1S2.value);
    }
    if (R_2S1_2S2.present) {
      map['r_2s1_2s2'] = Variable<double>(R_2S1_2S2.value);
    }
    if (R_3S1_3S2.present) {
      map['r_3s1_3s2'] = Variable<double>(R_3S1_3S2.value);
    }
    if (R_4S1_4S2.present) {
      map['r_4s1_4s2'] = Variable<double>(R_4S1_4S2.value);
    }
    if (R_5S1_5S2.present) {
      map['r_5s1_5s2'] = Variable<double>(R_5S1_5S2.value);
    }
    if (Y_1S1_1S2.present) {
      map['y_1s1_1s2'] = Variable<double>(Y_1S1_1S2.value);
    }
    if (Y_2S1_2S2.present) {
      map['y_2s1_2s2'] = Variable<double>(Y_2S1_2S2.value);
    }
    if (Y_3S1_3S2.present) {
      map['y_3s1_3s2'] = Variable<double>(Y_3S1_3S2.value);
    }
    if (Y_4S1_4S2.present) {
      map['y_4s1_4s2'] = Variable<double>(Y_4S1_4S2.value);
    }
    if (Y_5S1_5S2.present) {
      map['y_5s1_5s2'] = Variable<double>(Y_5S1_5S2.value);
    }
    if (B_1S1_1S2.present) {
      map['b_1s1_1s2'] = Variable<double>(B_1S1_1S2.value);
    }
    if (B_2S1_2S2.present) {
      map['b_2s1_2s2'] = Variable<double>(B_2S1_2S2.value);
    }
    if (B_3S1_3S2.present) {
      map['b_3s1_3s2'] = Variable<double>(B_3S1_3S2.value);
    }
    if (B_4S1_4S2.present) {
      map['b_4s1_4s2'] = Variable<double>(B_4S1_4S2.value);
    }
    if (B_5S1_5S2.present) {
      map['b_5s1_5s2'] = Variable<double>(B_5S1_5S2.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CTcoreWRLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_1S1_1S2: $R_1S1_1S2, ')
          ..write('R_2S1_2S2: $R_2S1_2S2, ')
          ..write('R_3S1_3S2: $R_3S1_3S2, ')
          ..write('R_4S1_4S2: $R_4S1_4S2, ')
          ..write('R_5S1_5S2: $R_5S1_5S2, ')
          ..write('Y_1S1_1S2: $Y_1S1_1S2, ')
          ..write('Y_2S1_2S2: $Y_2S1_2S2, ')
          ..write('Y_3S1_3S2: $Y_3S1_3S2, ')
          ..write('Y_4S1_4S2: $Y_4S1_4S2, ')
          ..write('Y_5S1_5S2: $Y_5S1_5S2, ')
          ..write('B_1S1_1S2: $B_1S1_1S2, ')
          ..write('B_2S1_2S2: $B_2S1_2S2, ')
          ..write('B_3S1_3S2: $B_3S1_3S2, ')
          ..write('B_4S1_4S2: $B_4S1_4S2, ')
          ..write('B_5S1_5S2: $B_5S1_5S2')
          ..write(')'))
        .toString();
  }
}

class $CTcoreWRLocalDatasourceImplTable extends CTcoreWRLocalDatasourceImpl
    with TableInfo<$CTcoreWRLocalDatasourceImplTable, CTcoreWRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $CTcoreWRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _R_1S1_1S2Meta = const VerificationMeta('R_1S1_1S2');
  GeneratedColumn<double> _R_1S1_1S2;
  @override
  GeneratedColumn<double> get R_1S1_1S2 =>
      _R_1S1_1S2 ??= GeneratedColumn<double>('r_1s1_1s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_2S1_2S2Meta = const VerificationMeta('R_2S1_2S2');
  GeneratedColumn<double> _R_2S1_2S2;
  @override
  GeneratedColumn<double> get R_2S1_2S2 =>
      _R_2S1_2S2 ??= GeneratedColumn<double>('r_2s1_2s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_3S1_3S2Meta = const VerificationMeta('R_3S1_3S2');
  GeneratedColumn<double> _R_3S1_3S2;
  @override
  GeneratedColumn<double> get R_3S1_3S2 =>
      _R_3S1_3S2 ??= GeneratedColumn<double>('r_3s1_3s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_4S1_4S2Meta = const VerificationMeta('R_4S1_4S2');
  GeneratedColumn<double> _R_4S1_4S2;
  @override
  GeneratedColumn<double> get R_4S1_4S2 =>
      _R_4S1_4S2 ??= GeneratedColumn<double>('r_4s1_4s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_5S1_5S2Meta = const VerificationMeta('R_5S1_5S2');
  GeneratedColumn<double> _R_5S1_5S2;
  @override
  GeneratedColumn<double> get R_5S1_5S2 =>
      _R_5S1_5S2 ??= GeneratedColumn<double>('r_5s1_5s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_1S1_1S2Meta = const VerificationMeta('Y_1S1_1S2');
  GeneratedColumn<double> _Y_1S1_1S2;
  @override
  GeneratedColumn<double> get Y_1S1_1S2 =>
      _Y_1S1_1S2 ??= GeneratedColumn<double>('y_1s1_1s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_2S1_2S2Meta = const VerificationMeta('Y_2S1_2S2');
  GeneratedColumn<double> _Y_2S1_2S2;
  @override
  GeneratedColumn<double> get Y_2S1_2S2 =>
      _Y_2S1_2S2 ??= GeneratedColumn<double>('y_2s1_2s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_3S1_3S2Meta = const VerificationMeta('Y_3S1_3S2');
  GeneratedColumn<double> _Y_3S1_3S2;
  @override
  GeneratedColumn<double> get Y_3S1_3S2 =>
      _Y_3S1_3S2 ??= GeneratedColumn<double>('y_3s1_3s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_4S1_4S2Meta = const VerificationMeta('Y_4S1_4S2');
  GeneratedColumn<double> _Y_4S1_4S2;
  @override
  GeneratedColumn<double> get Y_4S1_4S2 =>
      _Y_4S1_4S2 ??= GeneratedColumn<double>('y_4s1_4s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_5S1_5S2Meta = const VerificationMeta('Y_5S1_5S2');
  GeneratedColumn<double> _Y_5S1_5S2;
  @override
  GeneratedColumn<double> get Y_5S1_5S2 =>
      _Y_5S1_5S2 ??= GeneratedColumn<double>('y_5s1_5s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_1S1_1S2Meta = const VerificationMeta('B_1S1_1S2');
  GeneratedColumn<double> _B_1S1_1S2;
  @override
  GeneratedColumn<double> get B_1S1_1S2 =>
      _B_1S1_1S2 ??= GeneratedColumn<double>('b_1s1_1s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_2S1_2S2Meta = const VerificationMeta('B_2S1_2S2');
  GeneratedColumn<double> _B_2S1_2S2;
  @override
  GeneratedColumn<double> get B_2S1_2S2 =>
      _B_2S1_2S2 ??= GeneratedColumn<double>('b_2s1_2s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_3S1_3S2Meta = const VerificationMeta('B_3S1_3S2');
  GeneratedColumn<double> _B_3S1_3S2;
  @override
  GeneratedColumn<double> get B_3S1_3S2 =>
      _B_3S1_3S2 ??= GeneratedColumn<double>('b_3s1_3s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_4S1_4S2Meta = const VerificationMeta('B_4S1_4S2');
  GeneratedColumn<double> _B_4S1_4S2;
  @override
  GeneratedColumn<double> get B_4S1_4S2 =>
      _B_4S1_4S2 ??= GeneratedColumn<double>('b_4s1_4s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_5S1_5S2Meta = const VerificationMeta('B_5S1_5S2');
  GeneratedColumn<double> _B_5S1_5S2;
  @override
  GeneratedColumn<double> get B_5S1_5S2 =>
      _B_5S1_5S2 ??= GeneratedColumn<double>('b_5s1_5s2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_1S1_1S2,
        R_2S1_2S2,
        R_3S1_3S2,
        R_4S1_4S2,
        R_5S1_5S2,
        Y_1S1_1S2,
        Y_2S1_2S2,
        Y_3S1_3S2,
        Y_4S1_4S2,
        Y_5S1_5S2,
        B_1S1_1S2,
        B_2S1_2S2,
        B_3S1_3S2,
        B_4S1_4S2,
        B_5S1_5S2
      ];
  @override
  String get aliasedName => _alias ?? 'c_tcore_w_r_local_datasource_impl';
  @override
  String get actualTableName => 'c_tcore_w_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<CTcoreWRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('r_1s1_1s2')) {
      context.handle(_R_1S1_1S2Meta,
          R_1S1_1S2.isAcceptableOrUnknown(data['r_1s1_1s2'], _R_1S1_1S2Meta));
    } else if (isInserting) {
      context.missing(_R_1S1_1S2Meta);
    }
    if (data.containsKey('r_2s1_2s2')) {
      context.handle(_R_2S1_2S2Meta,
          R_2S1_2S2.isAcceptableOrUnknown(data['r_2s1_2s2'], _R_2S1_2S2Meta));
    } else if (isInserting) {
      context.missing(_R_2S1_2S2Meta);
    }
    if (data.containsKey('r_3s1_3s2')) {
      context.handle(_R_3S1_3S2Meta,
          R_3S1_3S2.isAcceptableOrUnknown(data['r_3s1_3s2'], _R_3S1_3S2Meta));
    } else if (isInserting) {
      context.missing(_R_3S1_3S2Meta);
    }
    if (data.containsKey('r_4s1_4s2')) {
      context.handle(_R_4S1_4S2Meta,
          R_4S1_4S2.isAcceptableOrUnknown(data['r_4s1_4s2'], _R_4S1_4S2Meta));
    } else if (isInserting) {
      context.missing(_R_4S1_4S2Meta);
    }
    if (data.containsKey('r_5s1_5s2')) {
      context.handle(_R_5S1_5S2Meta,
          R_5S1_5S2.isAcceptableOrUnknown(data['r_5s1_5s2'], _R_5S1_5S2Meta));
    } else if (isInserting) {
      context.missing(_R_5S1_5S2Meta);
    }
    if (data.containsKey('y_1s1_1s2')) {
      context.handle(_Y_1S1_1S2Meta,
          Y_1S1_1S2.isAcceptableOrUnknown(data['y_1s1_1s2'], _Y_1S1_1S2Meta));
    } else if (isInserting) {
      context.missing(_Y_1S1_1S2Meta);
    }
    if (data.containsKey('y_2s1_2s2')) {
      context.handle(_Y_2S1_2S2Meta,
          Y_2S1_2S2.isAcceptableOrUnknown(data['y_2s1_2s2'], _Y_2S1_2S2Meta));
    } else if (isInserting) {
      context.missing(_Y_2S1_2S2Meta);
    }
    if (data.containsKey('y_3s1_3s2')) {
      context.handle(_Y_3S1_3S2Meta,
          Y_3S1_3S2.isAcceptableOrUnknown(data['y_3s1_3s2'], _Y_3S1_3S2Meta));
    } else if (isInserting) {
      context.missing(_Y_3S1_3S2Meta);
    }
    if (data.containsKey('y_4s1_4s2')) {
      context.handle(_Y_4S1_4S2Meta,
          Y_4S1_4S2.isAcceptableOrUnknown(data['y_4s1_4s2'], _Y_4S1_4S2Meta));
    } else if (isInserting) {
      context.missing(_Y_4S1_4S2Meta);
    }
    if (data.containsKey('y_5s1_5s2')) {
      context.handle(_Y_5S1_5S2Meta,
          Y_5S1_5S2.isAcceptableOrUnknown(data['y_5s1_5s2'], _Y_5S1_5S2Meta));
    } else if (isInserting) {
      context.missing(_Y_5S1_5S2Meta);
    }
    if (data.containsKey('b_1s1_1s2')) {
      context.handle(_B_1S1_1S2Meta,
          B_1S1_1S2.isAcceptableOrUnknown(data['b_1s1_1s2'], _B_1S1_1S2Meta));
    } else if (isInserting) {
      context.missing(_B_1S1_1S2Meta);
    }
    if (data.containsKey('b_2s1_2s2')) {
      context.handle(_B_2S1_2S2Meta,
          B_2S1_2S2.isAcceptableOrUnknown(data['b_2s1_2s2'], _B_2S1_2S2Meta));
    } else if (isInserting) {
      context.missing(_B_2S1_2S2Meta);
    }
    if (data.containsKey('b_3s1_3s2')) {
      context.handle(_B_3S1_3S2Meta,
          B_3S1_3S2.isAcceptableOrUnknown(data['b_3s1_3s2'], _B_3S1_3S2Meta));
    } else if (isInserting) {
      context.missing(_B_3S1_3S2Meta);
    }
    if (data.containsKey('b_4s1_4s2')) {
      context.handle(_B_4S1_4S2Meta,
          B_4S1_4S2.isAcceptableOrUnknown(data['b_4s1_4s2'], _B_4S1_4S2Meta));
    } else if (isInserting) {
      context.missing(_B_4S1_4S2Meta);
    }
    if (data.containsKey('b_5s1_5s2')) {
      context.handle(_B_5S1_5S2Meta,
          B_5S1_5S2.isAcceptableOrUnknown(data['b_5s1_5s2'], _B_5S1_5S2Meta));
    } else if (isInserting) {
      context.missing(_B_5S1_5S2Meta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CTcoreWRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return CTcoreWRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CTcoreWRLocalDatasourceImplTable createAlias(String alias) {
    return $CTcoreWRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class CTcorePLocalData extends DataClass
    implements Insertable<CTcorePLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final String R_1S1_1S2;
  final String R_2S1_2S2;
  final String R_3S1_3S2;
  final String R_4S1_4S2;
  final String R_5S1_5S2;
  final String Y_1S1_1S2;
  final String Y_2S1_2S2;
  final String Y_3S1_3S2;
  final String Y_4S1_4S2;
  final String Y_5S1_5S2;
  final String B_1S1_1S2;
  final String B_2S1_2S2;
  final String B_3S1_3S2;
  final String B_4S1_4S2;
  final String B_5S1_5S2;
  CTcorePLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.R_1S1_1S2,
      @required this.R_2S1_2S2,
      @required this.R_3S1_3S2,
      @required this.R_4S1_4S2,
      @required this.R_5S1_5S2,
      @required this.Y_1S1_1S2,
      @required this.Y_2S1_2S2,
      @required this.Y_3S1_3S2,
      @required this.Y_4S1_4S2,
      @required this.Y_5S1_5S2,
      @required this.B_1S1_1S2,
      @required this.B_2S1_2S2,
      @required this.B_3S1_3S2,
      @required this.B_4S1_4S2,
      @required this.B_5S1_5S2});
  factory CTcorePLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return CTcorePLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      R_1S1_1S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1s1_1s2']),
      R_2S1_2S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2s1_2s2']),
      R_3S1_3S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3s1_3s2']),
      R_4S1_4S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_4s1_4s2']),
      R_5S1_5S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_5s1_5s2']),
      Y_1S1_1S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1s1_1s2']),
      Y_2S1_2S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2s1_2s2']),
      Y_3S1_3S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3s1_3s2']),
      Y_4S1_4S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_4s1_4s2']),
      Y_5S1_5S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_5s1_5s2']),
      B_1S1_1S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1s1_1s2']),
      B_2S1_2S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2s1_2s2']),
      B_3S1_3S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3s1_3s2']),
      B_4S1_4S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_4s1_4s2']),
      B_5S1_5S2: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_5s1_5s2']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || R_1S1_1S2 != null) {
      map['r_1s1_1s2'] = Variable<String>(R_1S1_1S2);
    }
    if (!nullToAbsent || R_2S1_2S2 != null) {
      map['r_2s1_2s2'] = Variable<String>(R_2S1_2S2);
    }
    if (!nullToAbsent || R_3S1_3S2 != null) {
      map['r_3s1_3s2'] = Variable<String>(R_3S1_3S2);
    }
    if (!nullToAbsent || R_4S1_4S2 != null) {
      map['r_4s1_4s2'] = Variable<String>(R_4S1_4S2);
    }
    if (!nullToAbsent || R_5S1_5S2 != null) {
      map['r_5s1_5s2'] = Variable<String>(R_5S1_5S2);
    }
    if (!nullToAbsent || Y_1S1_1S2 != null) {
      map['y_1s1_1s2'] = Variable<String>(Y_1S1_1S2);
    }
    if (!nullToAbsent || Y_2S1_2S2 != null) {
      map['y_2s1_2s2'] = Variable<String>(Y_2S1_2S2);
    }
    if (!nullToAbsent || Y_3S1_3S2 != null) {
      map['y_3s1_3s2'] = Variable<String>(Y_3S1_3S2);
    }
    if (!nullToAbsent || Y_4S1_4S2 != null) {
      map['y_4s1_4s2'] = Variable<String>(Y_4S1_4S2);
    }
    if (!nullToAbsent || Y_5S1_5S2 != null) {
      map['y_5s1_5s2'] = Variable<String>(Y_5S1_5S2);
    }
    if (!nullToAbsent || B_1S1_1S2 != null) {
      map['b_1s1_1s2'] = Variable<String>(B_1S1_1S2);
    }
    if (!nullToAbsent || B_2S1_2S2 != null) {
      map['b_2s1_2s2'] = Variable<String>(B_2S1_2S2);
    }
    if (!nullToAbsent || B_3S1_3S2 != null) {
      map['b_3s1_3s2'] = Variable<String>(B_3S1_3S2);
    }
    if (!nullToAbsent || B_4S1_4S2 != null) {
      map['b_4s1_4s2'] = Variable<String>(B_4S1_4S2);
    }
    if (!nullToAbsent || B_5S1_5S2 != null) {
      map['b_5s1_5s2'] = Variable<String>(B_5S1_5S2);
    }
    return map;
  }

  CTcorePLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return CTcorePLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      R_1S1_1S2: R_1S1_1S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1S1_1S2),
      R_2S1_2S2: R_2S1_2S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2S1_2S2),
      R_3S1_3S2: R_3S1_3S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3S1_3S2),
      R_4S1_4S2: R_4S1_4S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_4S1_4S2),
      R_5S1_5S2: R_5S1_5S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_5S1_5S2),
      Y_1S1_1S2: Y_1S1_1S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1S1_1S2),
      Y_2S1_2S2: Y_2S1_2S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2S1_2S2),
      Y_3S1_3S2: Y_3S1_3S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3S1_3S2),
      Y_4S1_4S2: Y_4S1_4S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_4S1_4S2),
      Y_5S1_5S2: Y_5S1_5S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_5S1_5S2),
      B_1S1_1S2: B_1S1_1S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1S1_1S2),
      B_2S1_2S2: B_2S1_2S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2S1_2S2),
      B_3S1_3S2: B_3S1_3S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3S1_3S2),
      B_4S1_4S2: B_4S1_4S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_4S1_4S2),
      B_5S1_5S2: B_5S1_5S2 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_5S1_5S2),
    );
  }

  factory CTcorePLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CTcorePLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      R_1S1_1S2: serializer.fromJson<String>(json['R_1S1_1S2']),
      R_2S1_2S2: serializer.fromJson<String>(json['R_2S1_2S2']),
      R_3S1_3S2: serializer.fromJson<String>(json['R_3S1_3S2']),
      R_4S1_4S2: serializer.fromJson<String>(json['R_4S1_4S2']),
      R_5S1_5S2: serializer.fromJson<String>(json['R_5S1_5S2']),
      Y_1S1_1S2: serializer.fromJson<String>(json['Y_1S1_1S2']),
      Y_2S1_2S2: serializer.fromJson<String>(json['Y_2S1_2S2']),
      Y_3S1_3S2: serializer.fromJson<String>(json['Y_3S1_3S2']),
      Y_4S1_4S2: serializer.fromJson<String>(json['Y_4S1_4S2']),
      Y_5S1_5S2: serializer.fromJson<String>(json['Y_5S1_5S2']),
      B_1S1_1S2: serializer.fromJson<String>(json['B_1S1_1S2']),
      B_2S1_2S2: serializer.fromJson<String>(json['B_2S1_2S2']),
      B_3S1_3S2: serializer.fromJson<String>(json['B_3S1_3S2']),
      B_4S1_4S2: serializer.fromJson<String>(json['B_4S1_4S2']),
      B_5S1_5S2: serializer.fromJson<String>(json['B_5S1_5S2']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'R_1S1_1S2': serializer.toJson<String>(R_1S1_1S2),
      'R_2S1_2S2': serializer.toJson<String>(R_2S1_2S2),
      'R_3S1_3S2': serializer.toJson<String>(R_3S1_3S2),
      'R_4S1_4S2': serializer.toJson<String>(R_4S1_4S2),
      'R_5S1_5S2': serializer.toJson<String>(R_5S1_5S2),
      'Y_1S1_1S2': serializer.toJson<String>(Y_1S1_1S2),
      'Y_2S1_2S2': serializer.toJson<String>(Y_2S1_2S2),
      'Y_3S1_3S2': serializer.toJson<String>(Y_3S1_3S2),
      'Y_4S1_4S2': serializer.toJson<String>(Y_4S1_4S2),
      'Y_5S1_5S2': serializer.toJson<String>(Y_5S1_5S2),
      'B_1S1_1S2': serializer.toJson<String>(B_1S1_1S2),
      'B_2S1_2S2': serializer.toJson<String>(B_2S1_2S2),
      'B_3S1_3S2': serializer.toJson<String>(B_3S1_3S2),
      'B_4S1_4S2': serializer.toJson<String>(B_4S1_4S2),
      'B_5S1_5S2': serializer.toJson<String>(B_5S1_5S2),
    };
  }

  CTcorePLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          String R_1S1_1S2,
          String R_2S1_2S2,
          String R_3S1_3S2,
          String R_4S1_4S2,
          String R_5S1_5S2,
          String Y_1S1_1S2,
          String Y_2S1_2S2,
          String Y_3S1_3S2,
          String Y_4S1_4S2,
          String Y_5S1_5S2,
          String B_1S1_1S2,
          String B_2S1_2S2,
          String B_3S1_3S2,
          String B_4S1_4S2,
          String B_5S1_5S2}) =>
      CTcorePLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        R_1S1_1S2: R_1S1_1S2 ?? this.R_1S1_1S2,
        R_2S1_2S2: R_2S1_2S2 ?? this.R_2S1_2S2,
        R_3S1_3S2: R_3S1_3S2 ?? this.R_3S1_3S2,
        R_4S1_4S2: R_4S1_4S2 ?? this.R_4S1_4S2,
        R_5S1_5S2: R_5S1_5S2 ?? this.R_5S1_5S2,
        Y_1S1_1S2: Y_1S1_1S2 ?? this.Y_1S1_1S2,
        Y_2S1_2S2: Y_2S1_2S2 ?? this.Y_2S1_2S2,
        Y_3S1_3S2: Y_3S1_3S2 ?? this.Y_3S1_3S2,
        Y_4S1_4S2: Y_4S1_4S2 ?? this.Y_4S1_4S2,
        Y_5S1_5S2: Y_5S1_5S2 ?? this.Y_5S1_5S2,
        B_1S1_1S2: B_1S1_1S2 ?? this.B_1S1_1S2,
        B_2S1_2S2: B_2S1_2S2 ?? this.B_2S1_2S2,
        B_3S1_3S2: B_3S1_3S2 ?? this.B_3S1_3S2,
        B_4S1_4S2: B_4S1_4S2 ?? this.B_4S1_4S2,
        B_5S1_5S2: B_5S1_5S2 ?? this.B_5S1_5S2,
      );
  @override
  String toString() {
    return (StringBuffer('CTcorePLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_1S1_1S2: $R_1S1_1S2, ')
          ..write('R_2S1_2S2: $R_2S1_2S2, ')
          ..write('R_3S1_3S2: $R_3S1_3S2, ')
          ..write('R_4S1_4S2: $R_4S1_4S2, ')
          ..write('R_5S1_5S2: $R_5S1_5S2, ')
          ..write('Y_1S1_1S2: $Y_1S1_1S2, ')
          ..write('Y_2S1_2S2: $Y_2S1_2S2, ')
          ..write('Y_3S1_3S2: $Y_3S1_3S2, ')
          ..write('Y_4S1_4S2: $Y_4S1_4S2, ')
          ..write('Y_5S1_5S2: $Y_5S1_5S2, ')
          ..write('B_1S1_1S2: $B_1S1_1S2, ')
          ..write('B_2S1_2S2: $B_2S1_2S2, ')
          ..write('B_3S1_3S2: $B_3S1_3S2, ')
          ..write('B_4S1_4S2: $B_4S1_4S2, ')
          ..write('B_5S1_5S2: $B_5S1_5S2')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_1S1_1S2,
        R_2S1_2S2,
        R_3S1_3S2,
        R_4S1_4S2,
        R_5S1_5S2,
        Y_1S1_1S2,
        Y_2S1_2S2,
        Y_3S1_3S2,
        Y_4S1_4S2,
        Y_5S1_5S2,
        B_1S1_1S2,
        B_2S1_2S2,
        B_3S1_3S2,
        B_4S1_4S2,
        B_5S1_5S2
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CTcorePLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.R_1S1_1S2 == this.R_1S1_1S2 &&
          other.R_2S1_2S2 == this.R_2S1_2S2 &&
          other.R_3S1_3S2 == this.R_3S1_3S2 &&
          other.R_4S1_4S2 == this.R_4S1_4S2 &&
          other.R_5S1_5S2 == this.R_5S1_5S2 &&
          other.Y_1S1_1S2 == this.Y_1S1_1S2 &&
          other.Y_2S1_2S2 == this.Y_2S1_2S2 &&
          other.Y_3S1_3S2 == this.Y_3S1_3S2 &&
          other.Y_4S1_4S2 == this.Y_4S1_4S2 &&
          other.Y_5S1_5S2 == this.Y_5S1_5S2 &&
          other.B_1S1_1S2 == this.B_1S1_1S2 &&
          other.B_2S1_2S2 == this.B_2S1_2S2 &&
          other.B_3S1_3S2 == this.B_3S1_3S2 &&
          other.B_4S1_4S2 == this.B_4S1_4S2 &&
          other.B_5S1_5S2 == this.B_5S1_5S2);
}

class CTcorePLocalDatasourceImplCompanion
    extends UpdateCompanion<CTcorePLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<String> R_1S1_1S2;
  final Value<String> R_2S1_2S2;
  final Value<String> R_3S1_3S2;
  final Value<String> R_4S1_4S2;
  final Value<String> R_5S1_5S2;
  final Value<String> Y_1S1_1S2;
  final Value<String> Y_2S1_2S2;
  final Value<String> Y_3S1_3S2;
  final Value<String> Y_4S1_4S2;
  final Value<String> Y_5S1_5S2;
  final Value<String> B_1S1_1S2;
  final Value<String> B_2S1_2S2;
  final Value<String> B_3S1_3S2;
  final Value<String> B_4S1_4S2;
  final Value<String> B_5S1_5S2;
  const CTcorePLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.R_1S1_1S2 = const Value.absent(),
    this.R_2S1_2S2 = const Value.absent(),
    this.R_3S1_3S2 = const Value.absent(),
    this.R_4S1_4S2 = const Value.absent(),
    this.R_5S1_5S2 = const Value.absent(),
    this.Y_1S1_1S2 = const Value.absent(),
    this.Y_2S1_2S2 = const Value.absent(),
    this.Y_3S1_3S2 = const Value.absent(),
    this.Y_4S1_4S2 = const Value.absent(),
    this.Y_5S1_5S2 = const Value.absent(),
    this.B_1S1_1S2 = const Value.absent(),
    this.B_2S1_2S2 = const Value.absent(),
    this.B_3S1_3S2 = const Value.absent(),
    this.B_4S1_4S2 = const Value.absent(),
    this.B_5S1_5S2 = const Value.absent(),
  });
  CTcorePLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required String R_1S1_1S2,
    @required String R_2S1_2S2,
    @required String R_3S1_3S2,
    @required String R_4S1_4S2,
    @required String R_5S1_5S2,
    @required String Y_1S1_1S2,
    @required String Y_2S1_2S2,
    @required String Y_3S1_3S2,
    @required String Y_4S1_4S2,
    @required String Y_5S1_5S2,
    @required String B_1S1_1S2,
    @required String B_2S1_2S2,
    @required String B_3S1_3S2,
    @required String B_4S1_4S2,
    @required String B_5S1_5S2,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        R_1S1_1S2 = Value(R_1S1_1S2),
        R_2S1_2S2 = Value(R_2S1_2S2),
        R_3S1_3S2 = Value(R_3S1_3S2),
        R_4S1_4S2 = Value(R_4S1_4S2),
        R_5S1_5S2 = Value(R_5S1_5S2),
        Y_1S1_1S2 = Value(Y_1S1_1S2),
        Y_2S1_2S2 = Value(Y_2S1_2S2),
        Y_3S1_3S2 = Value(Y_3S1_3S2),
        Y_4S1_4S2 = Value(Y_4S1_4S2),
        Y_5S1_5S2 = Value(Y_5S1_5S2),
        B_1S1_1S2 = Value(B_1S1_1S2),
        B_2S1_2S2 = Value(B_2S1_2S2),
        B_3S1_3S2 = Value(B_3S1_3S2),
        B_4S1_4S2 = Value(B_4S1_4S2),
        B_5S1_5S2 = Value(B_5S1_5S2);
  static Insertable<CTcorePLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<String> R_1S1_1S2,
    Expression<String> R_2S1_2S2,
    Expression<String> R_3S1_3S2,
    Expression<String> R_4S1_4S2,
    Expression<String> R_5S1_5S2,
    Expression<String> Y_1S1_1S2,
    Expression<String> Y_2S1_2S2,
    Expression<String> Y_3S1_3S2,
    Expression<String> Y_4S1_4S2,
    Expression<String> Y_5S1_5S2,
    Expression<String> B_1S1_1S2,
    Expression<String> B_2S1_2S2,
    Expression<String> B_3S1_3S2,
    Expression<String> B_4S1_4S2,
    Expression<String> B_5S1_5S2,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (R_1S1_1S2 != null) 'r_1s1_1s2': R_1S1_1S2,
      if (R_2S1_2S2 != null) 'r_2s1_2s2': R_2S1_2S2,
      if (R_3S1_3S2 != null) 'r_3s1_3s2': R_3S1_3S2,
      if (R_4S1_4S2 != null) 'r_4s1_4s2': R_4S1_4S2,
      if (R_5S1_5S2 != null) 'r_5s1_5s2': R_5S1_5S2,
      if (Y_1S1_1S2 != null) 'y_1s1_1s2': Y_1S1_1S2,
      if (Y_2S1_2S2 != null) 'y_2s1_2s2': Y_2S1_2S2,
      if (Y_3S1_3S2 != null) 'y_3s1_3s2': Y_3S1_3S2,
      if (Y_4S1_4S2 != null) 'y_4s1_4s2': Y_4S1_4S2,
      if (Y_5S1_5S2 != null) 'y_5s1_5s2': Y_5S1_5S2,
      if (B_1S1_1S2 != null) 'b_1s1_1s2': B_1S1_1S2,
      if (B_2S1_2S2 != null) 'b_2s1_2s2': B_2S1_2S2,
      if (B_3S1_3S2 != null) 'b_3s1_3s2': B_3S1_3S2,
      if (B_4S1_4S2 != null) 'b_4s1_4s2': B_4S1_4S2,
      if (B_5S1_5S2 != null) 'b_5s1_5s2': B_5S1_5S2,
    });
  }

  CTcorePLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<String> R_1S1_1S2,
      Value<String> R_2S1_2S2,
      Value<String> R_3S1_3S2,
      Value<String> R_4S1_4S2,
      Value<String> R_5S1_5S2,
      Value<String> Y_1S1_1S2,
      Value<String> Y_2S1_2S2,
      Value<String> Y_3S1_3S2,
      Value<String> Y_4S1_4S2,
      Value<String> Y_5S1_5S2,
      Value<String> B_1S1_1S2,
      Value<String> B_2S1_2S2,
      Value<String> B_3S1_3S2,
      Value<String> B_4S1_4S2,
      Value<String> B_5S1_5S2}) {
    return CTcorePLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      R_1S1_1S2: R_1S1_1S2 ?? this.R_1S1_1S2,
      R_2S1_2S2: R_2S1_2S2 ?? this.R_2S1_2S2,
      R_3S1_3S2: R_3S1_3S2 ?? this.R_3S1_3S2,
      R_4S1_4S2: R_4S1_4S2 ?? this.R_4S1_4S2,
      R_5S1_5S2: R_5S1_5S2 ?? this.R_5S1_5S2,
      Y_1S1_1S2: Y_1S1_1S2 ?? this.Y_1S1_1S2,
      Y_2S1_2S2: Y_2S1_2S2 ?? this.Y_2S1_2S2,
      Y_3S1_3S2: Y_3S1_3S2 ?? this.Y_3S1_3S2,
      Y_4S1_4S2: Y_4S1_4S2 ?? this.Y_4S1_4S2,
      Y_5S1_5S2: Y_5S1_5S2 ?? this.Y_5S1_5S2,
      B_1S1_1S2: B_1S1_1S2 ?? this.B_1S1_1S2,
      B_2S1_2S2: B_2S1_2S2 ?? this.B_2S1_2S2,
      B_3S1_3S2: B_3S1_3S2 ?? this.B_3S1_3S2,
      B_4S1_4S2: B_4S1_4S2 ?? this.B_4S1_4S2,
      B_5S1_5S2: B_5S1_5S2 ?? this.B_5S1_5S2,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (R_1S1_1S2.present) {
      map['r_1s1_1s2'] = Variable<String>(R_1S1_1S2.value);
    }
    if (R_2S1_2S2.present) {
      map['r_2s1_2s2'] = Variable<String>(R_2S1_2S2.value);
    }
    if (R_3S1_3S2.present) {
      map['r_3s1_3s2'] = Variable<String>(R_3S1_3S2.value);
    }
    if (R_4S1_4S2.present) {
      map['r_4s1_4s2'] = Variable<String>(R_4S1_4S2.value);
    }
    if (R_5S1_5S2.present) {
      map['r_5s1_5s2'] = Variable<String>(R_5S1_5S2.value);
    }
    if (Y_1S1_1S2.present) {
      map['y_1s1_1s2'] = Variable<String>(Y_1S1_1S2.value);
    }
    if (Y_2S1_2S2.present) {
      map['y_2s1_2s2'] = Variable<String>(Y_2S1_2S2.value);
    }
    if (Y_3S1_3S2.present) {
      map['y_3s1_3s2'] = Variable<String>(Y_3S1_3S2.value);
    }
    if (Y_4S1_4S2.present) {
      map['y_4s1_4s2'] = Variable<String>(Y_4S1_4S2.value);
    }
    if (Y_5S1_5S2.present) {
      map['y_5s1_5s2'] = Variable<String>(Y_5S1_5S2.value);
    }
    if (B_1S1_1S2.present) {
      map['b_1s1_1s2'] = Variable<String>(B_1S1_1S2.value);
    }
    if (B_2S1_2S2.present) {
      map['b_2s1_2s2'] = Variable<String>(B_2S1_2S2.value);
    }
    if (B_3S1_3S2.present) {
      map['b_3s1_3s2'] = Variable<String>(B_3S1_3S2.value);
    }
    if (B_4S1_4S2.present) {
      map['b_4s1_4s2'] = Variable<String>(B_4S1_4S2.value);
    }
    if (B_5S1_5S2.present) {
      map['b_5s1_5s2'] = Variable<String>(B_5S1_5S2.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CTcorePLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_1S1_1S2: $R_1S1_1S2, ')
          ..write('R_2S1_2S2: $R_2S1_2S2, ')
          ..write('R_3S1_3S2: $R_3S1_3S2, ')
          ..write('R_4S1_4S2: $R_4S1_4S2, ')
          ..write('R_5S1_5S2: $R_5S1_5S2, ')
          ..write('Y_1S1_1S2: $Y_1S1_1S2, ')
          ..write('Y_2S1_2S2: $Y_2S1_2S2, ')
          ..write('Y_3S1_3S2: $Y_3S1_3S2, ')
          ..write('Y_4S1_4S2: $Y_4S1_4S2, ')
          ..write('Y_5S1_5S2: $Y_5S1_5S2, ')
          ..write('B_1S1_1S2: $B_1S1_1S2, ')
          ..write('B_2S1_2S2: $B_2S1_2S2, ')
          ..write('B_3S1_3S2: $B_3S1_3S2, ')
          ..write('B_4S1_4S2: $B_4S1_4S2, ')
          ..write('B_5S1_5S2: $B_5S1_5S2')
          ..write(')'))
        .toString();
  }
}

class $CTcorePLocalDatasourceImplTable extends CTcorePLocalDatasourceImpl
    with TableInfo<$CTcorePLocalDatasourceImplTable, CTcorePLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $CTcorePLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _R_1S1_1S2Meta = const VerificationMeta('R_1S1_1S2');
  GeneratedColumn<String> _R_1S1_1S2;
  @override
  GeneratedColumn<String> get R_1S1_1S2 =>
      _R_1S1_1S2 ??= GeneratedColumn<String>('r_1s1_1s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _R_2S1_2S2Meta = const VerificationMeta('R_2S1_2S2');
  GeneratedColumn<String> _R_2S1_2S2;
  @override
  GeneratedColumn<String> get R_2S1_2S2 =>
      _R_2S1_2S2 ??= GeneratedColumn<String>('r_2s1_2s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _R_3S1_3S2Meta = const VerificationMeta('R_3S1_3S2');
  GeneratedColumn<String> _R_3S1_3S2;
  @override
  GeneratedColumn<String> get R_3S1_3S2 =>
      _R_3S1_3S2 ??= GeneratedColumn<String>('r_3s1_3s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _R_4S1_4S2Meta = const VerificationMeta('R_4S1_4S2');
  GeneratedColumn<String> _R_4S1_4S2;
  @override
  GeneratedColumn<String> get R_4S1_4S2 =>
      _R_4S1_4S2 ??= GeneratedColumn<String>('r_4s1_4s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _R_5S1_5S2Meta = const VerificationMeta('R_5S1_5S2');
  GeneratedColumn<String> _R_5S1_5S2;
  @override
  GeneratedColumn<String> get R_5S1_5S2 =>
      _R_5S1_5S2 ??= GeneratedColumn<String>('r_5s1_5s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _Y_1S1_1S2Meta = const VerificationMeta('Y_1S1_1S2');
  GeneratedColumn<String> _Y_1S1_1S2;
  @override
  GeneratedColumn<String> get Y_1S1_1S2 =>
      _Y_1S1_1S2 ??= GeneratedColumn<String>('y_1s1_1s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _Y_2S1_2S2Meta = const VerificationMeta('Y_2S1_2S2');
  GeneratedColumn<String> _Y_2S1_2S2;
  @override
  GeneratedColumn<String> get Y_2S1_2S2 =>
      _Y_2S1_2S2 ??= GeneratedColumn<String>('y_2s1_2s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _Y_3S1_3S2Meta = const VerificationMeta('Y_3S1_3S2');
  GeneratedColumn<String> _Y_3S1_3S2;
  @override
  GeneratedColumn<String> get Y_3S1_3S2 =>
      _Y_3S1_3S2 ??= GeneratedColumn<String>('y_3s1_3s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _Y_4S1_4S2Meta = const VerificationMeta('Y_4S1_4S2');
  GeneratedColumn<String> _Y_4S1_4S2;
  @override
  GeneratedColumn<String> get Y_4S1_4S2 =>
      _Y_4S1_4S2 ??= GeneratedColumn<String>('y_4s1_4s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _Y_5S1_5S2Meta = const VerificationMeta('Y_5S1_5S2');
  GeneratedColumn<String> _Y_5S1_5S2;
  @override
  GeneratedColumn<String> get Y_5S1_5S2 =>
      _Y_5S1_5S2 ??= GeneratedColumn<String>('y_5s1_5s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _B_1S1_1S2Meta = const VerificationMeta('B_1S1_1S2');
  GeneratedColumn<String> _B_1S1_1S2;
  @override
  GeneratedColumn<String> get B_1S1_1S2 =>
      _B_1S1_1S2 ??= GeneratedColumn<String>('b_1s1_1s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _B_2S1_2S2Meta = const VerificationMeta('B_2S1_2S2');
  GeneratedColumn<String> _B_2S1_2S2;
  @override
  GeneratedColumn<String> get B_2S1_2S2 =>
      _B_2S1_2S2 ??= GeneratedColumn<String>('b_2s1_2s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _B_3S1_3S2Meta = const VerificationMeta('B_3S1_3S2');
  GeneratedColumn<String> _B_3S1_3S2;
  @override
  GeneratedColumn<String> get B_3S1_3S2 =>
      _B_3S1_3S2 ??= GeneratedColumn<String>('b_3s1_3s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _B_4S1_4S2Meta = const VerificationMeta('B_4S1_4S2');
  GeneratedColumn<String> _B_4S1_4S2;
  @override
  GeneratedColumn<String> get B_4S1_4S2 =>
      _B_4S1_4S2 ??= GeneratedColumn<String>('b_4s1_4s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _B_5S1_5S2Meta = const VerificationMeta('B_5S1_5S2');
  GeneratedColumn<String> _B_5S1_5S2;
  @override
  GeneratedColumn<String> get B_5S1_5S2 =>
      _B_5S1_5S2 ??= GeneratedColumn<String>('b_5s1_5s2', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_1S1_1S2,
        R_2S1_2S2,
        R_3S1_3S2,
        R_4S1_4S2,
        R_5S1_5S2,
        Y_1S1_1S2,
        Y_2S1_2S2,
        Y_3S1_3S2,
        Y_4S1_4S2,
        Y_5S1_5S2,
        B_1S1_1S2,
        B_2S1_2S2,
        B_3S1_3S2,
        B_4S1_4S2,
        B_5S1_5S2
      ];
  @override
  String get aliasedName => _alias ?? 'c_tcore_p_local_datasource_impl';
  @override
  String get actualTableName => 'c_tcore_p_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<CTcorePLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('r_1s1_1s2')) {
      context.handle(_R_1S1_1S2Meta,
          R_1S1_1S2.isAcceptableOrUnknown(data['r_1s1_1s2'], _R_1S1_1S2Meta));
    } else if (isInserting) {
      context.missing(_R_1S1_1S2Meta);
    }
    if (data.containsKey('r_2s1_2s2')) {
      context.handle(_R_2S1_2S2Meta,
          R_2S1_2S2.isAcceptableOrUnknown(data['r_2s1_2s2'], _R_2S1_2S2Meta));
    } else if (isInserting) {
      context.missing(_R_2S1_2S2Meta);
    }
    if (data.containsKey('r_3s1_3s2')) {
      context.handle(_R_3S1_3S2Meta,
          R_3S1_3S2.isAcceptableOrUnknown(data['r_3s1_3s2'], _R_3S1_3S2Meta));
    } else if (isInserting) {
      context.missing(_R_3S1_3S2Meta);
    }
    if (data.containsKey('r_4s1_4s2')) {
      context.handle(_R_4S1_4S2Meta,
          R_4S1_4S2.isAcceptableOrUnknown(data['r_4s1_4s2'], _R_4S1_4S2Meta));
    } else if (isInserting) {
      context.missing(_R_4S1_4S2Meta);
    }
    if (data.containsKey('r_5s1_5s2')) {
      context.handle(_R_5S1_5S2Meta,
          R_5S1_5S2.isAcceptableOrUnknown(data['r_5s1_5s2'], _R_5S1_5S2Meta));
    } else if (isInserting) {
      context.missing(_R_5S1_5S2Meta);
    }
    if (data.containsKey('y_1s1_1s2')) {
      context.handle(_Y_1S1_1S2Meta,
          Y_1S1_1S2.isAcceptableOrUnknown(data['y_1s1_1s2'], _Y_1S1_1S2Meta));
    } else if (isInserting) {
      context.missing(_Y_1S1_1S2Meta);
    }
    if (data.containsKey('y_2s1_2s2')) {
      context.handle(_Y_2S1_2S2Meta,
          Y_2S1_2S2.isAcceptableOrUnknown(data['y_2s1_2s2'], _Y_2S1_2S2Meta));
    } else if (isInserting) {
      context.missing(_Y_2S1_2S2Meta);
    }
    if (data.containsKey('y_3s1_3s2')) {
      context.handle(_Y_3S1_3S2Meta,
          Y_3S1_3S2.isAcceptableOrUnknown(data['y_3s1_3s2'], _Y_3S1_3S2Meta));
    } else if (isInserting) {
      context.missing(_Y_3S1_3S2Meta);
    }
    if (data.containsKey('y_4s1_4s2')) {
      context.handle(_Y_4S1_4S2Meta,
          Y_4S1_4S2.isAcceptableOrUnknown(data['y_4s1_4s2'], _Y_4S1_4S2Meta));
    } else if (isInserting) {
      context.missing(_Y_4S1_4S2Meta);
    }
    if (data.containsKey('y_5s1_5s2')) {
      context.handle(_Y_5S1_5S2Meta,
          Y_5S1_5S2.isAcceptableOrUnknown(data['y_5s1_5s2'], _Y_5S1_5S2Meta));
    } else if (isInserting) {
      context.missing(_Y_5S1_5S2Meta);
    }
    if (data.containsKey('b_1s1_1s2')) {
      context.handle(_B_1S1_1S2Meta,
          B_1S1_1S2.isAcceptableOrUnknown(data['b_1s1_1s2'], _B_1S1_1S2Meta));
    } else if (isInserting) {
      context.missing(_B_1S1_1S2Meta);
    }
    if (data.containsKey('b_2s1_2s2')) {
      context.handle(_B_2S1_2S2Meta,
          B_2S1_2S2.isAcceptableOrUnknown(data['b_2s1_2s2'], _B_2S1_2S2Meta));
    } else if (isInserting) {
      context.missing(_B_2S1_2S2Meta);
    }
    if (data.containsKey('b_3s1_3s2')) {
      context.handle(_B_3S1_3S2Meta,
          B_3S1_3S2.isAcceptableOrUnknown(data['b_3s1_3s2'], _B_3S1_3S2Meta));
    } else if (isInserting) {
      context.missing(_B_3S1_3S2Meta);
    }
    if (data.containsKey('b_4s1_4s2')) {
      context.handle(_B_4S1_4S2Meta,
          B_4S1_4S2.isAcceptableOrUnknown(data['b_4s1_4s2'], _B_4S1_4S2Meta));
    } else if (isInserting) {
      context.missing(_B_4S1_4S2Meta);
    }
    if (data.containsKey('b_5s1_5s2')) {
      context.handle(_B_5S1_5S2Meta,
          B_5S1_5S2.isAcceptableOrUnknown(data['b_5s1_5s2'], _B_5S1_5S2Meta));
    } else if (isInserting) {
      context.missing(_B_5S1_5S2Meta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CTcorePLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return CTcorePLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CTcorePLocalDatasourceImplTable createAlias(String alias) {
    return $CTcorePLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class CTcoreRLocalData extends DataClass
    implements Insertable<CTcoreRLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double R_1S1_1S2_200;
  final double R_2S1_2S2_200;
  final double R_3S1_3S2_200;
  final double R_4S1_4S2_200;
  final double R_5S1_5S2_200;
  final double Y_1S1_1S2_200;
  final double Y_2S1_2S2_200;
  final double Y_3S1_3S2_200;
  final double Y_4S1_4S2_200;
  final double Y_5S1_5S2_200;
  final double B_1S1_1S2_200;
  final double B_2S1_2S2_200;
  final double B_3S1_3S2_200;
  final double B_4S1_4S2_200;
  final double B_5S1_5S2_200;
////////////////////////////////////////
  final double R_1S1_1S2_400;
  final double R_2S1_2S2_400;
  final double R_3S1_3S2_400;
  final double R_4S1_4S2_400;
  final double R_5S1_5S2_400;
  final double Y_1S1_1S2_400;
  final double Y_2S1_2S2_400;
  final double Y_3S1_3S2_400;
  final double Y_4S1_4S2_400;
  final double Y_5S1_5S2_400;
  final double B_1S1_1S2_400;
  final double B_2S1_2S2_400;
  final double B_3S1_3S2_400;
  final double B_4S1_4S2_400;
  final double B_5S1_5S2_400;
////////////////////////////////////////
  final double R_1S1_1S2_600;
  final double R_2S1_2S2_600;
  final double R_3S1_3S2_600;
  final double R_4S1_4S2_600;
  final double R_5S1_5S2_600;
  final double Y_1S1_1S2_600;
  final double Y_2S1_2S2_600;
  final double Y_3S1_3S2_600;
  final double Y_4S1_4S2_600;
  final double Y_5S1_5S2_600;
  final double B_1S1_1S2_600;
  final double B_2S1_2S2_600;
  final double B_3S1_3S2_600;
  final double B_4S1_4S2_600;
  final double B_5S1_5S2_600;
////////////////////////////////////////
  final double R_1S1_1S2_800;
  final double R_2S1_2S2_800;
  final double R_3S1_3S2_800;
  final double R_4S1_4S2_800;
  final double R_5S1_5S2_800;
  final double Y_1S1_1S2_800;
  final double Y_2S1_2S2_800;
  final double Y_3S1_3S2_800;
  final double Y_4S1_4S2_800;
  final double Y_5S1_5S2_800;
  final double B_1S1_1S2_800;
  final double B_2S1_2S2_800;
  final double B_3S1_3S2_800;
  final double B_4S1_4S2_800;
  final double B_5S1_5S2_800;
  CTcoreRLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.R_1S1_1S2_200,
      @required this.R_2S1_2S2_200,
      @required this.R_3S1_3S2_200,
      @required this.R_4S1_4S2_200,
      @required this.R_5S1_5S2_200,
      @required this.Y_1S1_1S2_200,
      @required this.Y_2S1_2S2_200,
      @required this.Y_3S1_3S2_200,
      @required this.Y_4S1_4S2_200,
      @required this.Y_5S1_5S2_200,
      @required this.B_1S1_1S2_200,
      @required this.B_2S1_2S2_200,
      @required this.B_3S1_3S2_200,
      @required this.B_4S1_4S2_200,
      @required this.B_5S1_5S2_200,
      @required this.R_1S1_1S2_400,
      @required this.R_2S1_2S2_400,
      @required this.R_3S1_3S2_400,
      @required this.R_4S1_4S2_400,
      @required this.R_5S1_5S2_400,
      @required this.Y_1S1_1S2_400,
      @required this.Y_2S1_2S2_400,
      @required this.Y_3S1_3S2_400,
      @required this.Y_4S1_4S2_400,
      @required this.Y_5S1_5S2_400,
      @required this.B_1S1_1S2_400,
      @required this.B_2S1_2S2_400,
      @required this.B_3S1_3S2_400,
      @required this.B_4S1_4S2_400,
      @required this.B_5S1_5S2_400,
      @required this.R_1S1_1S2_600,
      @required this.R_2S1_2S2_600,
      @required this.R_3S1_3S2_600,
      @required this.R_4S1_4S2_600,
      @required this.R_5S1_5S2_600,
      @required this.Y_1S1_1S2_600,
      @required this.Y_2S1_2S2_600,
      @required this.Y_3S1_3S2_600,
      @required this.Y_4S1_4S2_600,
      @required this.Y_5S1_5S2_600,
      @required this.B_1S1_1S2_600,
      @required this.B_2S1_2S2_600,
      @required this.B_3S1_3S2_600,
      @required this.B_4S1_4S2_600,
      @required this.B_5S1_5S2_600,
      @required this.R_1S1_1S2_800,
      @required this.R_2S1_2S2_800,
      @required this.R_3S1_3S2_800,
      @required this.R_4S1_4S2_800,
      @required this.R_5S1_5S2_800,
      @required this.Y_1S1_1S2_800,
      @required this.Y_2S1_2S2_800,
      @required this.Y_3S1_3S2_800,
      @required this.Y_4S1_4S2_800,
      @required this.Y_5S1_5S2_800,
      @required this.B_1S1_1S2_800,
      @required this.B_2S1_2S2_800,
      @required this.B_3S1_3S2_800,
      @required this.B_4S1_4S2_800,
      @required this.B_5S1_5S2_800});
  factory CTcoreRLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return CTcoreRLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      R_1S1_1S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1s1_1s2_200']),
      R_2S1_2S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2s1_2s2_200']),
      R_3S1_3S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3s1_3s2_200']),
      R_4S1_4S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_4s1_4s2_200']),
      R_5S1_5S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_5s1_5s2_200']),
      Y_1S1_1S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1s1_1s2_200']),
      Y_2S1_2S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2s1_2s2_200']),
      Y_3S1_3S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3s1_3s2_200']),
      Y_4S1_4S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_4s1_4s2_200']),
      Y_5S1_5S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_5s1_5s2_200']),
      B_1S1_1S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1s1_1s2_200']),
      B_2S1_2S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2s1_2s2_200']),
      B_3S1_3S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3s1_3s2_200']),
      B_4S1_4S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_4s1_4s2_200']),
      B_5S1_5S2_200: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_5s1_5s2_200']),
      R_1S1_1S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1s1_1s2_400']),
      R_2S1_2S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2s1_2s2_400']),
      R_3S1_3S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3s1_3s2_400']),
      R_4S1_4S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_4s1_4s2_400']),
      R_5S1_5S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_5s1_5s2_400']),
      Y_1S1_1S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1s1_1s2_400']),
      Y_2S1_2S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2s1_2s2_400']),
      Y_3S1_3S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3s1_3s2_400']),
      Y_4S1_4S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_4s1_4s2_400']),
      Y_5S1_5S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_5s1_5s2_400']),
      B_1S1_1S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1s1_1s2_400']),
      B_2S1_2S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2s1_2s2_400']),
      B_3S1_3S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3s1_3s2_400']),
      B_4S1_4S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_4s1_4s2_400']),
      B_5S1_5S2_400: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_5s1_5s2_400']),
      R_1S1_1S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1s1_1s2_600']),
      R_2S1_2S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2s1_2s2_600']),
      R_3S1_3S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3s1_3s2_600']),
      R_4S1_4S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_4s1_4s2_600']),
      R_5S1_5S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_5s1_5s2_600']),
      Y_1S1_1S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1s1_1s2_600']),
      Y_2S1_2S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2s1_2s2_600']),
      Y_3S1_3S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3s1_3s2_600']),
      Y_4S1_4S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_4s1_4s2_600']),
      Y_5S1_5S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_5s1_5s2_600']),
      B_1S1_1S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1s1_1s2_600']),
      B_2S1_2S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2s1_2s2_600']),
      B_3S1_3S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3s1_3s2_600']),
      B_4S1_4S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_4s1_4s2_600']),
      B_5S1_5S2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_5s1_5s2_600']),
      R_1S1_1S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1s1_1s2_800']),
      R_2S1_2S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2s1_2s2_800']),
      R_3S1_3S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3s1_3s2_800']),
      R_4S1_4S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_4s1_4s2_800']),
      R_5S1_5S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_5s1_5s2_800']),
      Y_1S1_1S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1s1_1s2_800']),
      Y_2S1_2S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2s1_2s2_800']),
      Y_3S1_3S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3s1_3s2_800']),
      Y_4S1_4S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_4s1_4s2_800']),
      Y_5S1_5S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_5s1_5s2_800']),
      B_1S1_1S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1s1_1s2_800']),
      B_2S1_2S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2s1_2s2_800']),
      B_3S1_3S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3s1_3s2_800']),
      B_4S1_4S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_4s1_4s2_800']),
      B_5S1_5S2_800: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_5s1_5s2_800']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || R_1S1_1S2_200 != null) {
      map['r_1s1_1s2_200'] = Variable<double>(R_1S1_1S2_200);
    }
    if (!nullToAbsent || R_2S1_2S2_200 != null) {
      map['r_2s1_2s2_200'] = Variable<double>(R_2S1_2S2_200);
    }
    if (!nullToAbsent || R_3S1_3S2_200 != null) {
      map['r_3s1_3s2_200'] = Variable<double>(R_3S1_3S2_200);
    }
    if (!nullToAbsent || R_4S1_4S2_200 != null) {
      map['r_4s1_4s2_200'] = Variable<double>(R_4S1_4S2_200);
    }
    if (!nullToAbsent || R_5S1_5S2_200 != null) {
      map['r_5s1_5s2_200'] = Variable<double>(R_5S1_5S2_200);
    }
    if (!nullToAbsent || Y_1S1_1S2_200 != null) {
      map['y_1s1_1s2_200'] = Variable<double>(Y_1S1_1S2_200);
    }
    if (!nullToAbsent || Y_2S1_2S2_200 != null) {
      map['y_2s1_2s2_200'] = Variable<double>(Y_2S1_2S2_200);
    }
    if (!nullToAbsent || Y_3S1_3S2_200 != null) {
      map['y_3s1_3s2_200'] = Variable<double>(Y_3S1_3S2_200);
    }
    if (!nullToAbsent || Y_4S1_4S2_200 != null) {
      map['y_4s1_4s2_200'] = Variable<double>(Y_4S1_4S2_200);
    }
    if (!nullToAbsent || Y_5S1_5S2_200 != null) {
      map['y_5s1_5s2_200'] = Variable<double>(Y_5S1_5S2_200);
    }
    if (!nullToAbsent || B_1S1_1S2_200 != null) {
      map['b_1s1_1s2_200'] = Variable<double>(B_1S1_1S2_200);
    }
    if (!nullToAbsent || B_2S1_2S2_200 != null) {
      map['b_2s1_2s2_200'] = Variable<double>(B_2S1_2S2_200);
    }
    if (!nullToAbsent || B_3S1_3S2_200 != null) {
      map['b_3s1_3s2_200'] = Variable<double>(B_3S1_3S2_200);
    }
    if (!nullToAbsent || B_4S1_4S2_200 != null) {
      map['b_4s1_4s2_200'] = Variable<double>(B_4S1_4S2_200);
    }
    if (!nullToAbsent || B_5S1_5S2_200 != null) {
      map['b_5s1_5s2_200'] = Variable<double>(B_5S1_5S2_200);
    }
    if (!nullToAbsent || R_1S1_1S2_400 != null) {
      map['r_1s1_1s2_400'] = Variable<double>(R_1S1_1S2_400);
    }
    if (!nullToAbsent || R_2S1_2S2_400 != null) {
      map['r_2s1_2s2_400'] = Variable<double>(R_2S1_2S2_400);
    }
    if (!nullToAbsent || R_3S1_3S2_400 != null) {
      map['r_3s1_3s2_400'] = Variable<double>(R_3S1_3S2_400);
    }
    if (!nullToAbsent || R_4S1_4S2_400 != null) {
      map['r_4s1_4s2_400'] = Variable<double>(R_4S1_4S2_400);
    }
    if (!nullToAbsent || R_5S1_5S2_400 != null) {
      map['r_5s1_5s2_400'] = Variable<double>(R_5S1_5S2_400);
    }
    if (!nullToAbsent || Y_1S1_1S2_400 != null) {
      map['y_1s1_1s2_400'] = Variable<double>(Y_1S1_1S2_400);
    }
    if (!nullToAbsent || Y_2S1_2S2_400 != null) {
      map['y_2s1_2s2_400'] = Variable<double>(Y_2S1_2S2_400);
    }
    if (!nullToAbsent || Y_3S1_3S2_400 != null) {
      map['y_3s1_3s2_400'] = Variable<double>(Y_3S1_3S2_400);
    }
    if (!nullToAbsent || Y_4S1_4S2_400 != null) {
      map['y_4s1_4s2_400'] = Variable<double>(Y_4S1_4S2_400);
    }
    if (!nullToAbsent || Y_5S1_5S2_400 != null) {
      map['y_5s1_5s2_400'] = Variable<double>(Y_5S1_5S2_400);
    }
    if (!nullToAbsent || B_1S1_1S2_400 != null) {
      map['b_1s1_1s2_400'] = Variable<double>(B_1S1_1S2_400);
    }
    if (!nullToAbsent || B_2S1_2S2_400 != null) {
      map['b_2s1_2s2_400'] = Variable<double>(B_2S1_2S2_400);
    }
    if (!nullToAbsent || B_3S1_3S2_400 != null) {
      map['b_3s1_3s2_400'] = Variable<double>(B_3S1_3S2_400);
    }
    if (!nullToAbsent || B_4S1_4S2_400 != null) {
      map['b_4s1_4s2_400'] = Variable<double>(B_4S1_4S2_400);
    }
    if (!nullToAbsent || B_5S1_5S2_400 != null) {
      map['b_5s1_5s2_400'] = Variable<double>(B_5S1_5S2_400);
    }
    if (!nullToAbsent || R_1S1_1S2_600 != null) {
      map['r_1s1_1s2_600'] = Variable<double>(R_1S1_1S2_600);
    }
    if (!nullToAbsent || R_2S1_2S2_600 != null) {
      map['r_2s1_2s2_600'] = Variable<double>(R_2S1_2S2_600);
    }
    if (!nullToAbsent || R_3S1_3S2_600 != null) {
      map['r_3s1_3s2_600'] = Variable<double>(R_3S1_3S2_600);
    }
    if (!nullToAbsent || R_4S1_4S2_600 != null) {
      map['r_4s1_4s2_600'] = Variable<double>(R_4S1_4S2_600);
    }
    if (!nullToAbsent || R_5S1_5S2_600 != null) {
      map['r_5s1_5s2_600'] = Variable<double>(R_5S1_5S2_600);
    }
    if (!nullToAbsent || Y_1S1_1S2_600 != null) {
      map['y_1s1_1s2_600'] = Variable<double>(Y_1S1_1S2_600);
    }
    if (!nullToAbsent || Y_2S1_2S2_600 != null) {
      map['y_2s1_2s2_600'] = Variable<double>(Y_2S1_2S2_600);
    }
    if (!nullToAbsent || Y_3S1_3S2_600 != null) {
      map['y_3s1_3s2_600'] = Variable<double>(Y_3S1_3S2_600);
    }
    if (!nullToAbsent || Y_4S1_4S2_600 != null) {
      map['y_4s1_4s2_600'] = Variable<double>(Y_4S1_4S2_600);
    }
    if (!nullToAbsent || Y_5S1_5S2_600 != null) {
      map['y_5s1_5s2_600'] = Variable<double>(Y_5S1_5S2_600);
    }
    if (!nullToAbsent || B_1S1_1S2_600 != null) {
      map['b_1s1_1s2_600'] = Variable<double>(B_1S1_1S2_600);
    }
    if (!nullToAbsent || B_2S1_2S2_600 != null) {
      map['b_2s1_2s2_600'] = Variable<double>(B_2S1_2S2_600);
    }
    if (!nullToAbsent || B_3S1_3S2_600 != null) {
      map['b_3s1_3s2_600'] = Variable<double>(B_3S1_3S2_600);
    }
    if (!nullToAbsent || B_4S1_4S2_600 != null) {
      map['b_4s1_4s2_600'] = Variable<double>(B_4S1_4S2_600);
    }
    if (!nullToAbsent || B_5S1_5S2_600 != null) {
      map['b_5s1_5s2_600'] = Variable<double>(B_5S1_5S2_600);
    }
    if (!nullToAbsent || R_1S1_1S2_800 != null) {
      map['r_1s1_1s2_800'] = Variable<double>(R_1S1_1S2_800);
    }
    if (!nullToAbsent || R_2S1_2S2_800 != null) {
      map['r_2s1_2s2_800'] = Variable<double>(R_2S1_2S2_800);
    }
    if (!nullToAbsent || R_3S1_3S2_800 != null) {
      map['r_3s1_3s2_800'] = Variable<double>(R_3S1_3S2_800);
    }
    if (!nullToAbsent || R_4S1_4S2_800 != null) {
      map['r_4s1_4s2_800'] = Variable<double>(R_4S1_4S2_800);
    }
    if (!nullToAbsent || R_5S1_5S2_800 != null) {
      map['r_5s1_5s2_800'] = Variable<double>(R_5S1_5S2_800);
    }
    if (!nullToAbsent || Y_1S1_1S2_800 != null) {
      map['y_1s1_1s2_800'] = Variable<double>(Y_1S1_1S2_800);
    }
    if (!nullToAbsent || Y_2S1_2S2_800 != null) {
      map['y_2s1_2s2_800'] = Variable<double>(Y_2S1_2S2_800);
    }
    if (!nullToAbsent || Y_3S1_3S2_800 != null) {
      map['y_3s1_3s2_800'] = Variable<double>(Y_3S1_3S2_800);
    }
    if (!nullToAbsent || Y_4S1_4S2_800 != null) {
      map['y_4s1_4s2_800'] = Variable<double>(Y_4S1_4S2_800);
    }
    if (!nullToAbsent || Y_5S1_5S2_800 != null) {
      map['y_5s1_5s2_800'] = Variable<double>(Y_5S1_5S2_800);
    }
    if (!nullToAbsent || B_1S1_1S2_800 != null) {
      map['b_1s1_1s2_800'] = Variable<double>(B_1S1_1S2_800);
    }
    if (!nullToAbsent || B_2S1_2S2_800 != null) {
      map['b_2s1_2s2_800'] = Variable<double>(B_2S1_2S2_800);
    }
    if (!nullToAbsent || B_3S1_3S2_800 != null) {
      map['b_3s1_3s2_800'] = Variable<double>(B_3S1_3S2_800);
    }
    if (!nullToAbsent || B_4S1_4S2_800 != null) {
      map['b_4s1_4s2_800'] = Variable<double>(B_4S1_4S2_800);
    }
    if (!nullToAbsent || B_5S1_5S2_800 != null) {
      map['b_5s1_5s2_800'] = Variable<double>(B_5S1_5S2_800);
    }
    return map;
  }

  CTcoreRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return CTcoreRLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      R_1S1_1S2_200: R_1S1_1S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1S1_1S2_200),
      R_2S1_2S2_200: R_2S1_2S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2S1_2S2_200),
      R_3S1_3S2_200: R_3S1_3S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3S1_3S2_200),
      R_4S1_4S2_200: R_4S1_4S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_4S1_4S2_200),
      R_5S1_5S2_200: R_5S1_5S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_5S1_5S2_200),
      Y_1S1_1S2_200: Y_1S1_1S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1S1_1S2_200),
      Y_2S1_2S2_200: Y_2S1_2S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2S1_2S2_200),
      Y_3S1_3S2_200: Y_3S1_3S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3S1_3S2_200),
      Y_4S1_4S2_200: Y_4S1_4S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_4S1_4S2_200),
      Y_5S1_5S2_200: Y_5S1_5S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_5S1_5S2_200),
      B_1S1_1S2_200: B_1S1_1S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1S1_1S2_200),
      B_2S1_2S2_200: B_2S1_2S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2S1_2S2_200),
      B_3S1_3S2_200: B_3S1_3S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3S1_3S2_200),
      B_4S1_4S2_200: B_4S1_4S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_4S1_4S2_200),
      B_5S1_5S2_200: B_5S1_5S2_200 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_5S1_5S2_200),
      R_1S1_1S2_400: R_1S1_1S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1S1_1S2_400),
      R_2S1_2S2_400: R_2S1_2S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2S1_2S2_400),
      R_3S1_3S2_400: R_3S1_3S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3S1_3S2_400),
      R_4S1_4S2_400: R_4S1_4S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_4S1_4S2_400),
      R_5S1_5S2_400: R_5S1_5S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_5S1_5S2_400),
      Y_1S1_1S2_400: Y_1S1_1S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1S1_1S2_400),
      Y_2S1_2S2_400: Y_2S1_2S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2S1_2S2_400),
      Y_3S1_3S2_400: Y_3S1_3S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3S1_3S2_400),
      Y_4S1_4S2_400: Y_4S1_4S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_4S1_4S2_400),
      Y_5S1_5S2_400: Y_5S1_5S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_5S1_5S2_400),
      B_1S1_1S2_400: B_1S1_1S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1S1_1S2_400),
      B_2S1_2S2_400: B_2S1_2S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2S1_2S2_400),
      B_3S1_3S2_400: B_3S1_3S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3S1_3S2_400),
      B_4S1_4S2_400: B_4S1_4S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_4S1_4S2_400),
      B_5S1_5S2_400: B_5S1_5S2_400 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_5S1_5S2_400),
      R_1S1_1S2_600: R_1S1_1S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1S1_1S2_600),
      R_2S1_2S2_600: R_2S1_2S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2S1_2S2_600),
      R_3S1_3S2_600: R_3S1_3S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3S1_3S2_600),
      R_4S1_4S2_600: R_4S1_4S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_4S1_4S2_600),
      R_5S1_5S2_600: R_5S1_5S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_5S1_5S2_600),
      Y_1S1_1S2_600: Y_1S1_1S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1S1_1S2_600),
      Y_2S1_2S2_600: Y_2S1_2S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2S1_2S2_600),
      Y_3S1_3S2_600: Y_3S1_3S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3S1_3S2_600),
      Y_4S1_4S2_600: Y_4S1_4S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_4S1_4S2_600),
      Y_5S1_5S2_600: Y_5S1_5S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_5S1_5S2_600),
      B_1S1_1S2_600: B_1S1_1S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1S1_1S2_600),
      B_2S1_2S2_600: B_2S1_2S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2S1_2S2_600),
      B_3S1_3S2_600: B_3S1_3S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3S1_3S2_600),
      B_4S1_4S2_600: B_4S1_4S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_4S1_4S2_600),
      B_5S1_5S2_600: B_5S1_5S2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_5S1_5S2_600),
      R_1S1_1S2_800: R_1S1_1S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1S1_1S2_800),
      R_2S1_2S2_800: R_2S1_2S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2S1_2S2_800),
      R_3S1_3S2_800: R_3S1_3S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3S1_3S2_800),
      R_4S1_4S2_800: R_4S1_4S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_4S1_4S2_800),
      R_5S1_5S2_800: R_5S1_5S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_5S1_5S2_800),
      Y_1S1_1S2_800: Y_1S1_1S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1S1_1S2_800),
      Y_2S1_2S2_800: Y_2S1_2S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2S1_2S2_800),
      Y_3S1_3S2_800: Y_3S1_3S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3S1_3S2_800),
      Y_4S1_4S2_800: Y_4S1_4S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_4S1_4S2_800),
      Y_5S1_5S2_800: Y_5S1_5S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_5S1_5S2_800),
      B_1S1_1S2_800: B_1S1_1S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1S1_1S2_800),
      B_2S1_2S2_800: B_2S1_2S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2S1_2S2_800),
      B_3S1_3S2_800: B_3S1_3S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3S1_3S2_800),
      B_4S1_4S2_800: B_4S1_4S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_4S1_4S2_800),
      B_5S1_5S2_800: B_5S1_5S2_800 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_5S1_5S2_800),
    );
  }

  factory CTcoreRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CTcoreRLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      R_1S1_1S2_200: serializer.fromJson<double>(json['R_1S1_1S2_200']),
      R_2S1_2S2_200: serializer.fromJson<double>(json['R_2S1_2S2_200']),
      R_3S1_3S2_200: serializer.fromJson<double>(json['R_3S1_3S2_200']),
      R_4S1_4S2_200: serializer.fromJson<double>(json['R_4S1_4S2_200']),
      R_5S1_5S2_200: serializer.fromJson<double>(json['R_5S1_5S2_200']),
      Y_1S1_1S2_200: serializer.fromJson<double>(json['Y_1S1_1S2_200']),
      Y_2S1_2S2_200: serializer.fromJson<double>(json['Y_2S1_2S2_200']),
      Y_3S1_3S2_200: serializer.fromJson<double>(json['Y_3S1_3S2_200']),
      Y_4S1_4S2_200: serializer.fromJson<double>(json['Y_4S1_4S2_200']),
      Y_5S1_5S2_200: serializer.fromJson<double>(json['Y_5S1_5S2_200']),
      B_1S1_1S2_200: serializer.fromJson<double>(json['B_1S1_1S2_200']),
      B_2S1_2S2_200: serializer.fromJson<double>(json['B_2S1_2S2_200']),
      B_3S1_3S2_200: serializer.fromJson<double>(json['B_3S1_3S2_200']),
      B_4S1_4S2_200: serializer.fromJson<double>(json['B_4S1_4S2_200']),
      B_5S1_5S2_200: serializer.fromJson<double>(json['B_5S1_5S2_200']),
      R_1S1_1S2_400: serializer.fromJson<double>(json['R_1S1_1S2_400']),
      R_2S1_2S2_400: serializer.fromJson<double>(json['R_2S1_2S2_400']),
      R_3S1_3S2_400: serializer.fromJson<double>(json['R_3S1_3S2_400']),
      R_4S1_4S2_400: serializer.fromJson<double>(json['R_4S1_4S2_400']),
      R_5S1_5S2_400: serializer.fromJson<double>(json['R_5S1_5S2_400']),
      Y_1S1_1S2_400: serializer.fromJson<double>(json['Y_1S1_1S2_400']),
      Y_2S1_2S2_400: serializer.fromJson<double>(json['Y_2S1_2S2_400']),
      Y_3S1_3S2_400: serializer.fromJson<double>(json['Y_3S1_3S2_400']),
      Y_4S1_4S2_400: serializer.fromJson<double>(json['Y_4S1_4S2_400']),
      Y_5S1_5S2_400: serializer.fromJson<double>(json['Y_5S1_5S2_400']),
      B_1S1_1S2_400: serializer.fromJson<double>(json['B_1S1_1S2_400']),
      B_2S1_2S2_400: serializer.fromJson<double>(json['B_2S1_2S2_400']),
      B_3S1_3S2_400: serializer.fromJson<double>(json['B_3S1_3S2_400']),
      B_4S1_4S2_400: serializer.fromJson<double>(json['B_4S1_4S2_400']),
      B_5S1_5S2_400: serializer.fromJson<double>(json['B_5S1_5S2_400']),
      R_1S1_1S2_600: serializer.fromJson<double>(json['R_1S1_1S2_600']),
      R_2S1_2S2_600: serializer.fromJson<double>(json['R_2S1_2S2_600']),
      R_3S1_3S2_600: serializer.fromJson<double>(json['R_3S1_3S2_600']),
      R_4S1_4S2_600: serializer.fromJson<double>(json['R_4S1_4S2_600']),
      R_5S1_5S2_600: serializer.fromJson<double>(json['R_5S1_5S2_600']),
      Y_1S1_1S2_600: serializer.fromJson<double>(json['Y_1S1_1S2_600']),
      Y_2S1_2S2_600: serializer.fromJson<double>(json['Y_2S1_2S2_600']),
      Y_3S1_3S2_600: serializer.fromJson<double>(json['Y_3S1_3S2_600']),
      Y_4S1_4S2_600: serializer.fromJson<double>(json['Y_4S1_4S2_600']),
      Y_5S1_5S2_600: serializer.fromJson<double>(json['Y_5S1_5S2_600']),
      B_1S1_1S2_600: serializer.fromJson<double>(json['B_1S1_1S2_600']),
      B_2S1_2S2_600: serializer.fromJson<double>(json['B_2S1_2S2_600']),
      B_3S1_3S2_600: serializer.fromJson<double>(json['B_3S1_3S2_600']),
      B_4S1_4S2_600: serializer.fromJson<double>(json['B_4S1_4S2_600']),
      B_5S1_5S2_600: serializer.fromJson<double>(json['B_5S1_5S2_600']),
      R_1S1_1S2_800: serializer.fromJson<double>(json['R_1S1_1S2_800']),
      R_2S1_2S2_800: serializer.fromJson<double>(json['R_2S1_2S2_800']),
      R_3S1_3S2_800: serializer.fromJson<double>(json['R_3S1_3S2_800']),
      R_4S1_4S2_800: serializer.fromJson<double>(json['R_4S1_4S2_800']),
      R_5S1_5S2_800: serializer.fromJson<double>(json['R_5S1_5S2_800']),
      Y_1S1_1S2_800: serializer.fromJson<double>(json['Y_1S1_1S2_800']),
      Y_2S1_2S2_800: serializer.fromJson<double>(json['Y_2S1_2S2_800']),
      Y_3S1_3S2_800: serializer.fromJson<double>(json['Y_3S1_3S2_800']),
      Y_4S1_4S2_800: serializer.fromJson<double>(json['Y_4S1_4S2_800']),
      Y_5S1_5S2_800: serializer.fromJson<double>(json['Y_5S1_5S2_800']),
      B_1S1_1S2_800: serializer.fromJson<double>(json['B_1S1_1S2_800']),
      B_2S1_2S2_800: serializer.fromJson<double>(json['B_2S1_2S2_800']),
      B_3S1_3S2_800: serializer.fromJson<double>(json['B_3S1_3S2_800']),
      B_4S1_4S2_800: serializer.fromJson<double>(json['B_4S1_4S2_800']),
      B_5S1_5S2_800: serializer.fromJson<double>(json['B_5S1_5S2_800']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'R_1S1_1S2_200': serializer.toJson<double>(R_1S1_1S2_200),
      'R_2S1_2S2_200': serializer.toJson<double>(R_2S1_2S2_200),
      'R_3S1_3S2_200': serializer.toJson<double>(R_3S1_3S2_200),
      'R_4S1_4S2_200': serializer.toJson<double>(R_4S1_4S2_200),
      'R_5S1_5S2_200': serializer.toJson<double>(R_5S1_5S2_200),
      'Y_1S1_1S2_200': serializer.toJson<double>(Y_1S1_1S2_200),
      'Y_2S1_2S2_200': serializer.toJson<double>(Y_2S1_2S2_200),
      'Y_3S1_3S2_200': serializer.toJson<double>(Y_3S1_3S2_200),
      'Y_4S1_4S2_200': serializer.toJson<double>(Y_4S1_4S2_200),
      'Y_5S1_5S2_200': serializer.toJson<double>(Y_5S1_5S2_200),
      'B_1S1_1S2_200': serializer.toJson<double>(B_1S1_1S2_200),
      'B_2S1_2S2_200': serializer.toJson<double>(B_2S1_2S2_200),
      'B_3S1_3S2_200': serializer.toJson<double>(B_3S1_3S2_200),
      'B_4S1_4S2_200': serializer.toJson<double>(B_4S1_4S2_200),
      'B_5S1_5S2_200': serializer.toJson<double>(B_5S1_5S2_200),
      'R_1S1_1S2_400': serializer.toJson<double>(R_1S1_1S2_400),
      'R_2S1_2S2_400': serializer.toJson<double>(R_2S1_2S2_400),
      'R_3S1_3S2_400': serializer.toJson<double>(R_3S1_3S2_400),
      'R_4S1_4S2_400': serializer.toJson<double>(R_4S1_4S2_400),
      'R_5S1_5S2_400': serializer.toJson<double>(R_5S1_5S2_400),
      'Y_1S1_1S2_400': serializer.toJson<double>(Y_1S1_1S2_400),
      'Y_2S1_2S2_400': serializer.toJson<double>(Y_2S1_2S2_400),
      'Y_3S1_3S2_400': serializer.toJson<double>(Y_3S1_3S2_400),
      'Y_4S1_4S2_400': serializer.toJson<double>(Y_4S1_4S2_400),
      'Y_5S1_5S2_400': serializer.toJson<double>(Y_5S1_5S2_400),
      'B_1S1_1S2_400': serializer.toJson<double>(B_1S1_1S2_400),
      'B_2S1_2S2_400': serializer.toJson<double>(B_2S1_2S2_400),
      'B_3S1_3S2_400': serializer.toJson<double>(B_3S1_3S2_400),
      'B_4S1_4S2_400': serializer.toJson<double>(B_4S1_4S2_400),
      'B_5S1_5S2_400': serializer.toJson<double>(B_5S1_5S2_400),
      'R_1S1_1S2_600': serializer.toJson<double>(R_1S1_1S2_600),
      'R_2S1_2S2_600': serializer.toJson<double>(R_2S1_2S2_600),
      'R_3S1_3S2_600': serializer.toJson<double>(R_3S1_3S2_600),
      'R_4S1_4S2_600': serializer.toJson<double>(R_4S1_4S2_600),
      'R_5S1_5S2_600': serializer.toJson<double>(R_5S1_5S2_600),
      'Y_1S1_1S2_600': serializer.toJson<double>(Y_1S1_1S2_600),
      'Y_2S1_2S2_600': serializer.toJson<double>(Y_2S1_2S2_600),
      'Y_3S1_3S2_600': serializer.toJson<double>(Y_3S1_3S2_600),
      'Y_4S1_4S2_600': serializer.toJson<double>(Y_4S1_4S2_600),
      'Y_5S1_5S2_600': serializer.toJson<double>(Y_5S1_5S2_600),
      'B_1S1_1S2_600': serializer.toJson<double>(B_1S1_1S2_600),
      'B_2S1_2S2_600': serializer.toJson<double>(B_2S1_2S2_600),
      'B_3S1_3S2_600': serializer.toJson<double>(B_3S1_3S2_600),
      'B_4S1_4S2_600': serializer.toJson<double>(B_4S1_4S2_600),
      'B_5S1_5S2_600': serializer.toJson<double>(B_5S1_5S2_600),
      'R_1S1_1S2_800': serializer.toJson<double>(R_1S1_1S2_800),
      'R_2S1_2S2_800': serializer.toJson<double>(R_2S1_2S2_800),
      'R_3S1_3S2_800': serializer.toJson<double>(R_3S1_3S2_800),
      'R_4S1_4S2_800': serializer.toJson<double>(R_4S1_4S2_800),
      'R_5S1_5S2_800': serializer.toJson<double>(R_5S1_5S2_800),
      'Y_1S1_1S2_800': serializer.toJson<double>(Y_1S1_1S2_800),
      'Y_2S1_2S2_800': serializer.toJson<double>(Y_2S1_2S2_800),
      'Y_3S1_3S2_800': serializer.toJson<double>(Y_3S1_3S2_800),
      'Y_4S1_4S2_800': serializer.toJson<double>(Y_4S1_4S2_800),
      'Y_5S1_5S2_800': serializer.toJson<double>(Y_5S1_5S2_800),
      'B_1S1_1S2_800': serializer.toJson<double>(B_1S1_1S2_800),
      'B_2S1_2S2_800': serializer.toJson<double>(B_2S1_2S2_800),
      'B_3S1_3S2_800': serializer.toJson<double>(B_3S1_3S2_800),
      'B_4S1_4S2_800': serializer.toJson<double>(B_4S1_4S2_800),
      'B_5S1_5S2_800': serializer.toJson<double>(B_5S1_5S2_800),
    };
  }

  CTcoreRLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double R_1S1_1S2_200,
          double R_2S1_2S2_200,
          double R_3S1_3S2_200,
          double R_4S1_4S2_200,
          double R_5S1_5S2_200,
          double Y_1S1_1S2_200,
          double Y_2S1_2S2_200,
          double Y_3S1_3S2_200,
          double Y_4S1_4S2_200,
          double Y_5S1_5S2_200,
          double B_1S1_1S2_200,
          double B_2S1_2S2_200,
          double B_3S1_3S2_200,
          double B_4S1_4S2_200,
          double B_5S1_5S2_200,
          double R_1S1_1S2_400,
          double R_2S1_2S2_400,
          double R_3S1_3S2_400,
          double R_4S1_4S2_400,
          double R_5S1_5S2_400,
          double Y_1S1_1S2_400,
          double Y_2S1_2S2_400,
          double Y_3S1_3S2_400,
          double Y_4S1_4S2_400,
          double Y_5S1_5S2_400,
          double B_1S1_1S2_400,
          double B_2S1_2S2_400,
          double B_3S1_3S2_400,
          double B_4S1_4S2_400,
          double B_5S1_5S2_400,
          double R_1S1_1S2_600,
          double R_2S1_2S2_600,
          double R_3S1_3S2_600,
          double R_4S1_4S2_600,
          double R_5S1_5S2_600,
          double Y_1S1_1S2_600,
          double Y_2S1_2S2_600,
          double Y_3S1_3S2_600,
          double Y_4S1_4S2_600,
          double Y_5S1_5S2_600,
          double B_1S1_1S2_600,
          double B_2S1_2S2_600,
          double B_3S1_3S2_600,
          double B_4S1_4S2_600,
          double B_5S1_5S2_600,
          double R_1S1_1S2_800,
          double R_2S1_2S2_800,
          double R_3S1_3S2_800,
          double R_4S1_4S2_800,
          double R_5S1_5S2_800,
          double Y_1S1_1S2_800,
          double Y_2S1_2S2_800,
          double Y_3S1_3S2_800,
          double Y_4S1_4S2_800,
          double Y_5S1_5S2_800,
          double B_1S1_1S2_800,
          double B_2S1_2S2_800,
          double B_3S1_3S2_800,
          double B_4S1_4S2_800,
          double B_5S1_5S2_800}) =>
      CTcoreRLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        R_1S1_1S2_200: R_1S1_1S2_200 ?? this.R_1S1_1S2_200,
        R_2S1_2S2_200: R_2S1_2S2_200 ?? this.R_2S1_2S2_200,
        R_3S1_3S2_200: R_3S1_3S2_200 ?? this.R_3S1_3S2_200,
        R_4S1_4S2_200: R_4S1_4S2_200 ?? this.R_4S1_4S2_200,
        R_5S1_5S2_200: R_5S1_5S2_200 ?? this.R_5S1_5S2_200,
        Y_1S1_1S2_200: Y_1S1_1S2_200 ?? this.Y_1S1_1S2_200,
        Y_2S1_2S2_200: Y_2S1_2S2_200 ?? this.Y_2S1_2S2_200,
        Y_3S1_3S2_200: Y_3S1_3S2_200 ?? this.Y_3S1_3S2_200,
        Y_4S1_4S2_200: Y_4S1_4S2_200 ?? this.Y_4S1_4S2_200,
        Y_5S1_5S2_200: Y_5S1_5S2_200 ?? this.Y_5S1_5S2_200,
        B_1S1_1S2_200: B_1S1_1S2_200 ?? this.B_1S1_1S2_200,
        B_2S1_2S2_200: B_2S1_2S2_200 ?? this.B_2S1_2S2_200,
        B_3S1_3S2_200: B_3S1_3S2_200 ?? this.B_3S1_3S2_200,
        B_4S1_4S2_200: B_4S1_4S2_200 ?? this.B_4S1_4S2_200,
        B_5S1_5S2_200: B_5S1_5S2_200 ?? this.B_5S1_5S2_200,
        R_1S1_1S2_400: R_1S1_1S2_400 ?? this.R_1S1_1S2_400,
        R_2S1_2S2_400: R_2S1_2S2_400 ?? this.R_2S1_2S2_400,
        R_3S1_3S2_400: R_3S1_3S2_400 ?? this.R_3S1_3S2_400,
        R_4S1_4S2_400: R_4S1_4S2_400 ?? this.R_4S1_4S2_400,
        R_5S1_5S2_400: R_5S1_5S2_400 ?? this.R_5S1_5S2_400,
        Y_1S1_1S2_400: Y_1S1_1S2_400 ?? this.Y_1S1_1S2_400,
        Y_2S1_2S2_400: Y_2S1_2S2_400 ?? this.Y_2S1_2S2_400,
        Y_3S1_3S2_400: Y_3S1_3S2_400 ?? this.Y_3S1_3S2_400,
        Y_4S1_4S2_400: Y_4S1_4S2_400 ?? this.Y_4S1_4S2_400,
        Y_5S1_5S2_400: Y_5S1_5S2_400 ?? this.Y_5S1_5S2_400,
        B_1S1_1S2_400: B_1S1_1S2_400 ?? this.B_1S1_1S2_400,
        B_2S1_2S2_400: B_2S1_2S2_400 ?? this.B_2S1_2S2_400,
        B_3S1_3S2_400: B_3S1_3S2_400 ?? this.B_3S1_3S2_400,
        B_4S1_4S2_400: B_4S1_4S2_400 ?? this.B_4S1_4S2_400,
        B_5S1_5S2_400: B_5S1_5S2_400 ?? this.B_5S1_5S2_400,
        R_1S1_1S2_600: R_1S1_1S2_600 ?? this.R_1S1_1S2_600,
        R_2S1_2S2_600: R_2S1_2S2_600 ?? this.R_2S1_2S2_600,
        R_3S1_3S2_600: R_3S1_3S2_600 ?? this.R_3S1_3S2_600,
        R_4S1_4S2_600: R_4S1_4S2_600 ?? this.R_4S1_4S2_600,
        R_5S1_5S2_600: R_5S1_5S2_600 ?? this.R_5S1_5S2_600,
        Y_1S1_1S2_600: Y_1S1_1S2_600 ?? this.Y_1S1_1S2_600,
        Y_2S1_2S2_600: Y_2S1_2S2_600 ?? this.Y_2S1_2S2_600,
        Y_3S1_3S2_600: Y_3S1_3S2_600 ?? this.Y_3S1_3S2_600,
        Y_4S1_4S2_600: Y_4S1_4S2_600 ?? this.Y_4S1_4S2_600,
        Y_5S1_5S2_600: Y_5S1_5S2_600 ?? this.Y_5S1_5S2_600,
        B_1S1_1S2_600: B_1S1_1S2_600 ?? this.B_1S1_1S2_600,
        B_2S1_2S2_600: B_2S1_2S2_600 ?? this.B_2S1_2S2_600,
        B_3S1_3S2_600: B_3S1_3S2_600 ?? this.B_3S1_3S2_600,
        B_4S1_4S2_600: B_4S1_4S2_600 ?? this.B_4S1_4S2_600,
        B_5S1_5S2_600: B_5S1_5S2_600 ?? this.B_5S1_5S2_600,
        R_1S1_1S2_800: R_1S1_1S2_800 ?? this.R_1S1_1S2_800,
        R_2S1_2S2_800: R_2S1_2S2_800 ?? this.R_2S1_2S2_800,
        R_3S1_3S2_800: R_3S1_3S2_800 ?? this.R_3S1_3S2_800,
        R_4S1_4S2_800: R_4S1_4S2_800 ?? this.R_4S1_4S2_800,
        R_5S1_5S2_800: R_5S1_5S2_800 ?? this.R_5S1_5S2_800,
        Y_1S1_1S2_800: Y_1S1_1S2_800 ?? this.Y_1S1_1S2_800,
        Y_2S1_2S2_800: Y_2S1_2S2_800 ?? this.Y_2S1_2S2_800,
        Y_3S1_3S2_800: Y_3S1_3S2_800 ?? this.Y_3S1_3S2_800,
        Y_4S1_4S2_800: Y_4S1_4S2_800 ?? this.Y_4S1_4S2_800,
        Y_5S1_5S2_800: Y_5S1_5S2_800 ?? this.Y_5S1_5S2_800,
        B_1S1_1S2_800: B_1S1_1S2_800 ?? this.B_1S1_1S2_800,
        B_2S1_2S2_800: B_2S1_2S2_800 ?? this.B_2S1_2S2_800,
        B_3S1_3S2_800: B_3S1_3S2_800 ?? this.B_3S1_3S2_800,
        B_4S1_4S2_800: B_4S1_4S2_800 ?? this.B_4S1_4S2_800,
        B_5S1_5S2_800: B_5S1_5S2_800 ?? this.B_5S1_5S2_800,
      );
  @override
  String toString() {
    return (StringBuffer('CTcoreRLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_1S1_1S2_200: $R_1S1_1S2_200, ')
          ..write('R_2S1_2S2_200: $R_2S1_2S2_200, ')
          ..write('R_3S1_3S2_200: $R_3S1_3S2_200, ')
          ..write('R_4S1_4S2_200: $R_4S1_4S2_200, ')
          ..write('R_5S1_5S2_200: $R_5S1_5S2_200, ')
          ..write('Y_1S1_1S2_200: $Y_1S1_1S2_200, ')
          ..write('Y_2S1_2S2_200: $Y_2S1_2S2_200, ')
          ..write('Y_3S1_3S2_200: $Y_3S1_3S2_200, ')
          ..write('Y_4S1_4S2_200: $Y_4S1_4S2_200, ')
          ..write('Y_5S1_5S2_200: $Y_5S1_5S2_200, ')
          ..write('B_1S1_1S2_200: $B_1S1_1S2_200, ')
          ..write('B_2S1_2S2_200: $B_2S1_2S2_200, ')
          ..write('B_3S1_3S2_200: $B_3S1_3S2_200, ')
          ..write('B_4S1_4S2_200: $B_4S1_4S2_200, ')
          ..write('B_5S1_5S2_200: $B_5S1_5S2_200, ')
          ..write('R_1S1_1S2_400: $R_1S1_1S2_400, ')
          ..write('R_2S1_2S2_400: $R_2S1_2S2_400, ')
          ..write('R_3S1_3S2_400: $R_3S1_3S2_400, ')
          ..write('R_4S1_4S2_400: $R_4S1_4S2_400, ')
          ..write('R_5S1_5S2_400: $R_5S1_5S2_400, ')
          ..write('Y_1S1_1S2_400: $Y_1S1_1S2_400, ')
          ..write('Y_2S1_2S2_400: $Y_2S1_2S2_400, ')
          ..write('Y_3S1_3S2_400: $Y_3S1_3S2_400, ')
          ..write('Y_4S1_4S2_400: $Y_4S1_4S2_400, ')
          ..write('Y_5S1_5S2_400: $Y_5S1_5S2_400, ')
          ..write('B_1S1_1S2_400: $B_1S1_1S2_400, ')
          ..write('B_2S1_2S2_400: $B_2S1_2S2_400, ')
          ..write('B_3S1_3S2_400: $B_3S1_3S2_400, ')
          ..write('B_4S1_4S2_400: $B_4S1_4S2_400, ')
          ..write('B_5S1_5S2_400: $B_5S1_5S2_400, ')
          ..write('R_1S1_1S2_600: $R_1S1_1S2_600, ')
          ..write('R_2S1_2S2_600: $R_2S1_2S2_600, ')
          ..write('R_3S1_3S2_600: $R_3S1_3S2_600, ')
          ..write('R_4S1_4S2_600: $R_4S1_4S2_600, ')
          ..write('R_5S1_5S2_600: $R_5S1_5S2_600, ')
          ..write('Y_1S1_1S2_600: $Y_1S1_1S2_600, ')
          ..write('Y_2S1_2S2_600: $Y_2S1_2S2_600, ')
          ..write('Y_3S1_3S2_600: $Y_3S1_3S2_600, ')
          ..write('Y_4S1_4S2_600: $Y_4S1_4S2_600, ')
          ..write('Y_5S1_5S2_600: $Y_5S1_5S2_600, ')
          ..write('B_1S1_1S2_600: $B_1S1_1S2_600, ')
          ..write('B_2S1_2S2_600: $B_2S1_2S2_600, ')
          ..write('B_3S1_3S2_600: $B_3S1_3S2_600, ')
          ..write('B_4S1_4S2_600: $B_4S1_4S2_600, ')
          ..write('B_5S1_5S2_600: $B_5S1_5S2_600, ')
          ..write('R_1S1_1S2_800: $R_1S1_1S2_800, ')
          ..write('R_2S1_2S2_800: $R_2S1_2S2_800, ')
          ..write('R_3S1_3S2_800: $R_3S1_3S2_800, ')
          ..write('R_4S1_4S2_800: $R_4S1_4S2_800, ')
          ..write('R_5S1_5S2_800: $R_5S1_5S2_800, ')
          ..write('Y_1S1_1S2_800: $Y_1S1_1S2_800, ')
          ..write('Y_2S1_2S2_800: $Y_2S1_2S2_800, ')
          ..write('Y_3S1_3S2_800: $Y_3S1_3S2_800, ')
          ..write('Y_4S1_4S2_800: $Y_4S1_4S2_800, ')
          ..write('Y_5S1_5S2_800: $Y_5S1_5S2_800, ')
          ..write('B_1S1_1S2_800: $B_1S1_1S2_800, ')
          ..write('B_2S1_2S2_800: $B_2S1_2S2_800, ')
          ..write('B_3S1_3S2_800: $B_3S1_3S2_800, ')
          ..write('B_4S1_4S2_800: $B_4S1_4S2_800, ')
          ..write('B_5S1_5S2_800: $B_5S1_5S2_800')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_1S1_1S2_200,
        R_2S1_2S2_200,
        R_3S1_3S2_200,
        R_4S1_4S2_200,
        R_5S1_5S2_200,
        Y_1S1_1S2_200,
        Y_2S1_2S2_200,
        Y_3S1_3S2_200,
        Y_4S1_4S2_200,
        Y_5S1_5S2_200,
        B_1S1_1S2_200,
        B_2S1_2S2_200,
        B_3S1_3S2_200,
        B_4S1_4S2_200,
        B_5S1_5S2_200,
        R_1S1_1S2_400,
        R_2S1_2S2_400,
        R_3S1_3S2_400,
        R_4S1_4S2_400,
        R_5S1_5S2_400,
        Y_1S1_1S2_400,
        Y_2S1_2S2_400,
        Y_3S1_3S2_400,
        Y_4S1_4S2_400,
        Y_5S1_5S2_400,
        B_1S1_1S2_400,
        B_2S1_2S2_400,
        B_3S1_3S2_400,
        B_4S1_4S2_400,
        B_5S1_5S2_400,
        R_1S1_1S2_600,
        R_2S1_2S2_600,
        R_3S1_3S2_600,
        R_4S1_4S2_600,
        R_5S1_5S2_600,
        Y_1S1_1S2_600,
        Y_2S1_2S2_600,
        Y_3S1_3S2_600,
        Y_4S1_4S2_600,
        Y_5S1_5S2_600,
        B_1S1_1S2_600,
        B_2S1_2S2_600,
        B_3S1_3S2_600,
        B_4S1_4S2_600,
        B_5S1_5S2_600,
        R_1S1_1S2_800,
        R_2S1_2S2_800,
        R_3S1_3S2_800,
        R_4S1_4S2_800,
        R_5S1_5S2_800,
        Y_1S1_1S2_800,
        Y_2S1_2S2_800,
        Y_3S1_3S2_800,
        Y_4S1_4S2_800,
        Y_5S1_5S2_800,
        B_1S1_1S2_800,
        B_2S1_2S2_800,
        B_3S1_3S2_800,
        B_4S1_4S2_800,
        B_5S1_5S2_800
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CTcoreRLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.R_1S1_1S2_200 == this.R_1S1_1S2_200 &&
          other.R_2S1_2S2_200 == this.R_2S1_2S2_200 &&
          other.R_3S1_3S2_200 == this.R_3S1_3S2_200 &&
          other.R_4S1_4S2_200 == this.R_4S1_4S2_200 &&
          other.R_5S1_5S2_200 == this.R_5S1_5S2_200 &&
          other.Y_1S1_1S2_200 == this.Y_1S1_1S2_200 &&
          other.Y_2S1_2S2_200 == this.Y_2S1_2S2_200 &&
          other.Y_3S1_3S2_200 == this.Y_3S1_3S2_200 &&
          other.Y_4S1_4S2_200 == this.Y_4S1_4S2_200 &&
          other.Y_5S1_5S2_200 == this.Y_5S1_5S2_200 &&
          other.B_1S1_1S2_200 == this.B_1S1_1S2_200 &&
          other.B_2S1_2S2_200 == this.B_2S1_2S2_200 &&
          other.B_3S1_3S2_200 == this.B_3S1_3S2_200 &&
          other.B_4S1_4S2_200 == this.B_4S1_4S2_200 &&
          other.B_5S1_5S2_200 == this.B_5S1_5S2_200 &&
          other.R_1S1_1S2_400 == this.R_1S1_1S2_400 &&
          other.R_2S1_2S2_400 == this.R_2S1_2S2_400 &&
          other.R_3S1_3S2_400 == this.R_3S1_3S2_400 &&
          other.R_4S1_4S2_400 == this.R_4S1_4S2_400 &&
          other.R_5S1_5S2_400 == this.R_5S1_5S2_400 &&
          other.Y_1S1_1S2_400 == this.Y_1S1_1S2_400 &&
          other.Y_2S1_2S2_400 == this.Y_2S1_2S2_400 &&
          other.Y_3S1_3S2_400 == this.Y_3S1_3S2_400 &&
          other.Y_4S1_4S2_400 == this.Y_4S1_4S2_400 &&
          other.Y_5S1_5S2_400 == this.Y_5S1_5S2_400 &&
          other.B_1S1_1S2_400 == this.B_1S1_1S2_400 &&
          other.B_2S1_2S2_400 == this.B_2S1_2S2_400 &&
          other.B_3S1_3S2_400 == this.B_3S1_3S2_400 &&
          other.B_4S1_4S2_400 == this.B_4S1_4S2_400 &&
          other.B_5S1_5S2_400 == this.B_5S1_5S2_400 &&
          other.R_1S1_1S2_600 == this.R_1S1_1S2_600 &&
          other.R_2S1_2S2_600 == this.R_2S1_2S2_600 &&
          other.R_3S1_3S2_600 == this.R_3S1_3S2_600 &&
          other.R_4S1_4S2_600 == this.R_4S1_4S2_600 &&
          other.R_5S1_5S2_600 == this.R_5S1_5S2_600 &&
          other.Y_1S1_1S2_600 == this.Y_1S1_1S2_600 &&
          other.Y_2S1_2S2_600 == this.Y_2S1_2S2_600 &&
          other.Y_3S1_3S2_600 == this.Y_3S1_3S2_600 &&
          other.Y_4S1_4S2_600 == this.Y_4S1_4S2_600 &&
          other.Y_5S1_5S2_600 == this.Y_5S1_5S2_600 &&
          other.B_1S1_1S2_600 == this.B_1S1_1S2_600 &&
          other.B_2S1_2S2_600 == this.B_2S1_2S2_600 &&
          other.B_3S1_3S2_600 == this.B_3S1_3S2_600 &&
          other.B_4S1_4S2_600 == this.B_4S1_4S2_600 &&
          other.B_5S1_5S2_600 == this.B_5S1_5S2_600 &&
          other.R_1S1_1S2_800 == this.R_1S1_1S2_800 &&
          other.R_2S1_2S2_800 == this.R_2S1_2S2_800 &&
          other.R_3S1_3S2_800 == this.R_3S1_3S2_800 &&
          other.R_4S1_4S2_800 == this.R_4S1_4S2_800 &&
          other.R_5S1_5S2_800 == this.R_5S1_5S2_800 &&
          other.Y_1S1_1S2_800 == this.Y_1S1_1S2_800 &&
          other.Y_2S1_2S2_800 == this.Y_2S1_2S2_800 &&
          other.Y_3S1_3S2_800 == this.Y_3S1_3S2_800 &&
          other.Y_4S1_4S2_800 == this.Y_4S1_4S2_800 &&
          other.Y_5S1_5S2_800 == this.Y_5S1_5S2_800 &&
          other.B_1S1_1S2_800 == this.B_1S1_1S2_800 &&
          other.B_2S1_2S2_800 == this.B_2S1_2S2_800 &&
          other.B_3S1_3S2_800 == this.B_3S1_3S2_800 &&
          other.B_4S1_4S2_800 == this.B_4S1_4S2_800 &&
          other.B_5S1_5S2_800 == this.B_5S1_5S2_800);
}

class CTcoreRLocalDatasourceImplCompanion
    extends UpdateCompanion<CTcoreRLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> R_1S1_1S2_200;
  final Value<double> R_2S1_2S2_200;
  final Value<double> R_3S1_3S2_200;
  final Value<double> R_4S1_4S2_200;
  final Value<double> R_5S1_5S2_200;
  final Value<double> Y_1S1_1S2_200;
  final Value<double> Y_2S1_2S2_200;
  final Value<double> Y_3S1_3S2_200;
  final Value<double> Y_4S1_4S2_200;
  final Value<double> Y_5S1_5S2_200;
  final Value<double> B_1S1_1S2_200;
  final Value<double> B_2S1_2S2_200;
  final Value<double> B_3S1_3S2_200;
  final Value<double> B_4S1_4S2_200;
  final Value<double> B_5S1_5S2_200;
  final Value<double> R_1S1_1S2_400;
  final Value<double> R_2S1_2S2_400;
  final Value<double> R_3S1_3S2_400;
  final Value<double> R_4S1_4S2_400;
  final Value<double> R_5S1_5S2_400;
  final Value<double> Y_1S1_1S2_400;
  final Value<double> Y_2S1_2S2_400;
  final Value<double> Y_3S1_3S2_400;
  final Value<double> Y_4S1_4S2_400;
  final Value<double> Y_5S1_5S2_400;
  final Value<double> B_1S1_1S2_400;
  final Value<double> B_2S1_2S2_400;
  final Value<double> B_3S1_3S2_400;
  final Value<double> B_4S1_4S2_400;
  final Value<double> B_5S1_5S2_400;
  final Value<double> R_1S1_1S2_600;
  final Value<double> R_2S1_2S2_600;
  final Value<double> R_3S1_3S2_600;
  final Value<double> R_4S1_4S2_600;
  final Value<double> R_5S1_5S2_600;
  final Value<double> Y_1S1_1S2_600;
  final Value<double> Y_2S1_2S2_600;
  final Value<double> Y_3S1_3S2_600;
  final Value<double> Y_4S1_4S2_600;
  final Value<double> Y_5S1_5S2_600;
  final Value<double> B_1S1_1S2_600;
  final Value<double> B_2S1_2S2_600;
  final Value<double> B_3S1_3S2_600;
  final Value<double> B_4S1_4S2_600;
  final Value<double> B_5S1_5S2_600;
  final Value<double> R_1S1_1S2_800;
  final Value<double> R_2S1_2S2_800;
  final Value<double> R_3S1_3S2_800;
  final Value<double> R_4S1_4S2_800;
  final Value<double> R_5S1_5S2_800;
  final Value<double> Y_1S1_1S2_800;
  final Value<double> Y_2S1_2S2_800;
  final Value<double> Y_3S1_3S2_800;
  final Value<double> Y_4S1_4S2_800;
  final Value<double> Y_5S1_5S2_800;
  final Value<double> B_1S1_1S2_800;
  final Value<double> B_2S1_2S2_800;
  final Value<double> B_3S1_3S2_800;
  final Value<double> B_4S1_4S2_800;
  final Value<double> B_5S1_5S2_800;
  const CTcoreRLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.R_1S1_1S2_200 = const Value.absent(),
    this.R_2S1_2S2_200 = const Value.absent(),
    this.R_3S1_3S2_200 = const Value.absent(),
    this.R_4S1_4S2_200 = const Value.absent(),
    this.R_5S1_5S2_200 = const Value.absent(),
    this.Y_1S1_1S2_200 = const Value.absent(),
    this.Y_2S1_2S2_200 = const Value.absent(),
    this.Y_3S1_3S2_200 = const Value.absent(),
    this.Y_4S1_4S2_200 = const Value.absent(),
    this.Y_5S1_5S2_200 = const Value.absent(),
    this.B_1S1_1S2_200 = const Value.absent(),
    this.B_2S1_2S2_200 = const Value.absent(),
    this.B_3S1_3S2_200 = const Value.absent(),
    this.B_4S1_4S2_200 = const Value.absent(),
    this.B_5S1_5S2_200 = const Value.absent(),
    this.R_1S1_1S2_400 = const Value.absent(),
    this.R_2S1_2S2_400 = const Value.absent(),
    this.R_3S1_3S2_400 = const Value.absent(),
    this.R_4S1_4S2_400 = const Value.absent(),
    this.R_5S1_5S2_400 = const Value.absent(),
    this.Y_1S1_1S2_400 = const Value.absent(),
    this.Y_2S1_2S2_400 = const Value.absent(),
    this.Y_3S1_3S2_400 = const Value.absent(),
    this.Y_4S1_4S2_400 = const Value.absent(),
    this.Y_5S1_5S2_400 = const Value.absent(),
    this.B_1S1_1S2_400 = const Value.absent(),
    this.B_2S1_2S2_400 = const Value.absent(),
    this.B_3S1_3S2_400 = const Value.absent(),
    this.B_4S1_4S2_400 = const Value.absent(),
    this.B_5S1_5S2_400 = const Value.absent(),
    this.R_1S1_1S2_600 = const Value.absent(),
    this.R_2S1_2S2_600 = const Value.absent(),
    this.R_3S1_3S2_600 = const Value.absent(),
    this.R_4S1_4S2_600 = const Value.absent(),
    this.R_5S1_5S2_600 = const Value.absent(),
    this.Y_1S1_1S2_600 = const Value.absent(),
    this.Y_2S1_2S2_600 = const Value.absent(),
    this.Y_3S1_3S2_600 = const Value.absent(),
    this.Y_4S1_4S2_600 = const Value.absent(),
    this.Y_5S1_5S2_600 = const Value.absent(),
    this.B_1S1_1S2_600 = const Value.absent(),
    this.B_2S1_2S2_600 = const Value.absent(),
    this.B_3S1_3S2_600 = const Value.absent(),
    this.B_4S1_4S2_600 = const Value.absent(),
    this.B_5S1_5S2_600 = const Value.absent(),
    this.R_1S1_1S2_800 = const Value.absent(),
    this.R_2S1_2S2_800 = const Value.absent(),
    this.R_3S1_3S2_800 = const Value.absent(),
    this.R_4S1_4S2_800 = const Value.absent(),
    this.R_5S1_5S2_800 = const Value.absent(),
    this.Y_1S1_1S2_800 = const Value.absent(),
    this.Y_2S1_2S2_800 = const Value.absent(),
    this.Y_3S1_3S2_800 = const Value.absent(),
    this.Y_4S1_4S2_800 = const Value.absent(),
    this.Y_5S1_5S2_800 = const Value.absent(),
    this.B_1S1_1S2_800 = const Value.absent(),
    this.B_2S1_2S2_800 = const Value.absent(),
    this.B_3S1_3S2_800 = const Value.absent(),
    this.B_4S1_4S2_800 = const Value.absent(),
    this.B_5S1_5S2_800 = const Value.absent(),
  });
  CTcoreRLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double R_1S1_1S2_200,
    @required double R_2S1_2S2_200,
    @required double R_3S1_3S2_200,
    @required double R_4S1_4S2_200,
    @required double R_5S1_5S2_200,
    @required double Y_1S1_1S2_200,
    @required double Y_2S1_2S2_200,
    @required double Y_3S1_3S2_200,
    @required double Y_4S1_4S2_200,
    @required double Y_5S1_5S2_200,
    @required double B_1S1_1S2_200,
    @required double B_2S1_2S2_200,
    @required double B_3S1_3S2_200,
    @required double B_4S1_4S2_200,
    @required double B_5S1_5S2_200,
    @required double R_1S1_1S2_400,
    @required double R_2S1_2S2_400,
    @required double R_3S1_3S2_400,
    @required double R_4S1_4S2_400,
    @required double R_5S1_5S2_400,
    @required double Y_1S1_1S2_400,
    @required double Y_2S1_2S2_400,
    @required double Y_3S1_3S2_400,
    @required double Y_4S1_4S2_400,
    @required double Y_5S1_5S2_400,
    @required double B_1S1_1S2_400,
    @required double B_2S1_2S2_400,
    @required double B_3S1_3S2_400,
    @required double B_4S1_4S2_400,
    @required double B_5S1_5S2_400,
    @required double R_1S1_1S2_600,
    @required double R_2S1_2S2_600,
    @required double R_3S1_3S2_600,
    @required double R_4S1_4S2_600,
    @required double R_5S1_5S2_600,
    @required double Y_1S1_1S2_600,
    @required double Y_2S1_2S2_600,
    @required double Y_3S1_3S2_600,
    @required double Y_4S1_4S2_600,
    @required double Y_5S1_5S2_600,
    @required double B_1S1_1S2_600,
    @required double B_2S1_2S2_600,
    @required double B_3S1_3S2_600,
    @required double B_4S1_4S2_600,
    @required double B_5S1_5S2_600,
    @required double R_1S1_1S2_800,
    @required double R_2S1_2S2_800,
    @required double R_3S1_3S2_800,
    @required double R_4S1_4S2_800,
    @required double R_5S1_5S2_800,
    @required double Y_1S1_1S2_800,
    @required double Y_2S1_2S2_800,
    @required double Y_3S1_3S2_800,
    @required double Y_4S1_4S2_800,
    @required double Y_5S1_5S2_800,
    @required double B_1S1_1S2_800,
    @required double B_2S1_2S2_800,
    @required double B_3S1_3S2_800,
    @required double B_4S1_4S2_800,
    @required double B_5S1_5S2_800,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        R_1S1_1S2_200 = Value(R_1S1_1S2_200),
        R_2S1_2S2_200 = Value(R_2S1_2S2_200),
        R_3S1_3S2_200 = Value(R_3S1_3S2_200),
        R_4S1_4S2_200 = Value(R_4S1_4S2_200),
        R_5S1_5S2_200 = Value(R_5S1_5S2_200),
        Y_1S1_1S2_200 = Value(Y_1S1_1S2_200),
        Y_2S1_2S2_200 = Value(Y_2S1_2S2_200),
        Y_3S1_3S2_200 = Value(Y_3S1_3S2_200),
        Y_4S1_4S2_200 = Value(Y_4S1_4S2_200),
        Y_5S1_5S2_200 = Value(Y_5S1_5S2_200),
        B_1S1_1S2_200 = Value(B_1S1_1S2_200),
        B_2S1_2S2_200 = Value(B_2S1_2S2_200),
        B_3S1_3S2_200 = Value(B_3S1_3S2_200),
        B_4S1_4S2_200 = Value(B_4S1_4S2_200),
        B_5S1_5S2_200 = Value(B_5S1_5S2_200),
        R_1S1_1S2_400 = Value(R_1S1_1S2_400),
        R_2S1_2S2_400 = Value(R_2S1_2S2_400),
        R_3S1_3S2_400 = Value(R_3S1_3S2_400),
        R_4S1_4S2_400 = Value(R_4S1_4S2_400),
        R_5S1_5S2_400 = Value(R_5S1_5S2_400),
        Y_1S1_1S2_400 = Value(Y_1S1_1S2_400),
        Y_2S1_2S2_400 = Value(Y_2S1_2S2_400),
        Y_3S1_3S2_400 = Value(Y_3S1_3S2_400),
        Y_4S1_4S2_400 = Value(Y_4S1_4S2_400),
        Y_5S1_5S2_400 = Value(Y_5S1_5S2_400),
        B_1S1_1S2_400 = Value(B_1S1_1S2_400),
        B_2S1_2S2_400 = Value(B_2S1_2S2_400),
        B_3S1_3S2_400 = Value(B_3S1_3S2_400),
        B_4S1_4S2_400 = Value(B_4S1_4S2_400),
        B_5S1_5S2_400 = Value(B_5S1_5S2_400),
        R_1S1_1S2_600 = Value(R_1S1_1S2_600),
        R_2S1_2S2_600 = Value(R_2S1_2S2_600),
        R_3S1_3S2_600 = Value(R_3S1_3S2_600),
        R_4S1_4S2_600 = Value(R_4S1_4S2_600),
        R_5S1_5S2_600 = Value(R_5S1_5S2_600),
        Y_1S1_1S2_600 = Value(Y_1S1_1S2_600),
        Y_2S1_2S2_600 = Value(Y_2S1_2S2_600),
        Y_3S1_3S2_600 = Value(Y_3S1_3S2_600),
        Y_4S1_4S2_600 = Value(Y_4S1_4S2_600),
        Y_5S1_5S2_600 = Value(Y_5S1_5S2_600),
        B_1S1_1S2_600 = Value(B_1S1_1S2_600),
        B_2S1_2S2_600 = Value(B_2S1_2S2_600),
        B_3S1_3S2_600 = Value(B_3S1_3S2_600),
        B_4S1_4S2_600 = Value(B_4S1_4S2_600),
        B_5S1_5S2_600 = Value(B_5S1_5S2_600),
        R_1S1_1S2_800 = Value(R_1S1_1S2_800),
        R_2S1_2S2_800 = Value(R_2S1_2S2_800),
        R_3S1_3S2_800 = Value(R_3S1_3S2_800),
        R_4S1_4S2_800 = Value(R_4S1_4S2_800),
        R_5S1_5S2_800 = Value(R_5S1_5S2_800),
        Y_1S1_1S2_800 = Value(Y_1S1_1S2_800),
        Y_2S1_2S2_800 = Value(Y_2S1_2S2_800),
        Y_3S1_3S2_800 = Value(Y_3S1_3S2_800),
        Y_4S1_4S2_800 = Value(Y_4S1_4S2_800),
        Y_5S1_5S2_800 = Value(Y_5S1_5S2_800),
        B_1S1_1S2_800 = Value(B_1S1_1S2_800),
        B_2S1_2S2_800 = Value(B_2S1_2S2_800),
        B_3S1_3S2_800 = Value(B_3S1_3S2_800),
        B_4S1_4S2_800 = Value(B_4S1_4S2_800),
        B_5S1_5S2_800 = Value(B_5S1_5S2_800);
  static Insertable<CTcoreRLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> R_1S1_1S2_200,
    Expression<double> R_2S1_2S2_200,
    Expression<double> R_3S1_3S2_200,
    Expression<double> R_4S1_4S2_200,
    Expression<double> R_5S1_5S2_200,
    Expression<double> Y_1S1_1S2_200,
    Expression<double> Y_2S1_2S2_200,
    Expression<double> Y_3S1_3S2_200,
    Expression<double> Y_4S1_4S2_200,
    Expression<double> Y_5S1_5S2_200,
    Expression<double> B_1S1_1S2_200,
    Expression<double> B_2S1_2S2_200,
    Expression<double> B_3S1_3S2_200,
    Expression<double> B_4S1_4S2_200,
    Expression<double> B_5S1_5S2_200,
    Expression<double> R_1S1_1S2_400,
    Expression<double> R_2S1_2S2_400,
    Expression<double> R_3S1_3S2_400,
    Expression<double> R_4S1_4S2_400,
    Expression<double> R_5S1_5S2_400,
    Expression<double> Y_1S1_1S2_400,
    Expression<double> Y_2S1_2S2_400,
    Expression<double> Y_3S1_3S2_400,
    Expression<double> Y_4S1_4S2_400,
    Expression<double> Y_5S1_5S2_400,
    Expression<double> B_1S1_1S2_400,
    Expression<double> B_2S1_2S2_400,
    Expression<double> B_3S1_3S2_400,
    Expression<double> B_4S1_4S2_400,
    Expression<double> B_5S1_5S2_400,
    Expression<double> R_1S1_1S2_600,
    Expression<double> R_2S1_2S2_600,
    Expression<double> R_3S1_3S2_600,
    Expression<double> R_4S1_4S2_600,
    Expression<double> R_5S1_5S2_600,
    Expression<double> Y_1S1_1S2_600,
    Expression<double> Y_2S1_2S2_600,
    Expression<double> Y_3S1_3S2_600,
    Expression<double> Y_4S1_4S2_600,
    Expression<double> Y_5S1_5S2_600,
    Expression<double> B_1S1_1S2_600,
    Expression<double> B_2S1_2S2_600,
    Expression<double> B_3S1_3S2_600,
    Expression<double> B_4S1_4S2_600,
    Expression<double> B_5S1_5S2_600,
    Expression<double> R_1S1_1S2_800,
    Expression<double> R_2S1_2S2_800,
    Expression<double> R_3S1_3S2_800,
    Expression<double> R_4S1_4S2_800,
    Expression<double> R_5S1_5S2_800,
    Expression<double> Y_1S1_1S2_800,
    Expression<double> Y_2S1_2S2_800,
    Expression<double> Y_3S1_3S2_800,
    Expression<double> Y_4S1_4S2_800,
    Expression<double> Y_5S1_5S2_800,
    Expression<double> B_1S1_1S2_800,
    Expression<double> B_2S1_2S2_800,
    Expression<double> B_3S1_3S2_800,
    Expression<double> B_4S1_4S2_800,
    Expression<double> B_5S1_5S2_800,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (R_1S1_1S2_200 != null) 'r_1s1_1s2_200': R_1S1_1S2_200,
      if (R_2S1_2S2_200 != null) 'r_2s1_2s2_200': R_2S1_2S2_200,
      if (R_3S1_3S2_200 != null) 'r_3s1_3s2_200': R_3S1_3S2_200,
      if (R_4S1_4S2_200 != null) 'r_4s1_4s2_200': R_4S1_4S2_200,
      if (R_5S1_5S2_200 != null) 'r_5s1_5s2_200': R_5S1_5S2_200,
      if (Y_1S1_1S2_200 != null) 'y_1s1_1s2_200': Y_1S1_1S2_200,
      if (Y_2S1_2S2_200 != null) 'y_2s1_2s2_200': Y_2S1_2S2_200,
      if (Y_3S1_3S2_200 != null) 'y_3s1_3s2_200': Y_3S1_3S2_200,
      if (Y_4S1_4S2_200 != null) 'y_4s1_4s2_200': Y_4S1_4S2_200,
      if (Y_5S1_5S2_200 != null) 'y_5s1_5s2_200': Y_5S1_5S2_200,
      if (B_1S1_1S2_200 != null) 'b_1s1_1s2_200': B_1S1_1S2_200,
      if (B_2S1_2S2_200 != null) 'b_2s1_2s2_200': B_2S1_2S2_200,
      if (B_3S1_3S2_200 != null) 'b_3s1_3s2_200': B_3S1_3S2_200,
      if (B_4S1_4S2_200 != null) 'b_4s1_4s2_200': B_4S1_4S2_200,
      if (B_5S1_5S2_200 != null) 'b_5s1_5s2_200': B_5S1_5S2_200,
      if (R_1S1_1S2_400 != null) 'r_1s1_1s2_400': R_1S1_1S2_400,
      if (R_2S1_2S2_400 != null) 'r_2s1_2s2_400': R_2S1_2S2_400,
      if (R_3S1_3S2_400 != null) 'r_3s1_3s2_400': R_3S1_3S2_400,
      if (R_4S1_4S2_400 != null) 'r_4s1_4s2_400': R_4S1_4S2_400,
      if (R_5S1_5S2_400 != null) 'r_5s1_5s2_400': R_5S1_5S2_400,
      if (Y_1S1_1S2_400 != null) 'y_1s1_1s2_400': Y_1S1_1S2_400,
      if (Y_2S1_2S2_400 != null) 'y_2s1_2s2_400': Y_2S1_2S2_400,
      if (Y_3S1_3S2_400 != null) 'y_3s1_3s2_400': Y_3S1_3S2_400,
      if (Y_4S1_4S2_400 != null) 'y_4s1_4s2_400': Y_4S1_4S2_400,
      if (Y_5S1_5S2_400 != null) 'y_5s1_5s2_400': Y_5S1_5S2_400,
      if (B_1S1_1S2_400 != null) 'b_1s1_1s2_400': B_1S1_1S2_400,
      if (B_2S1_2S2_400 != null) 'b_2s1_2s2_400': B_2S1_2S2_400,
      if (B_3S1_3S2_400 != null) 'b_3s1_3s2_400': B_3S1_3S2_400,
      if (B_4S1_4S2_400 != null) 'b_4s1_4s2_400': B_4S1_4S2_400,
      if (B_5S1_5S2_400 != null) 'b_5s1_5s2_400': B_5S1_5S2_400,
      if (R_1S1_1S2_600 != null) 'r_1s1_1s2_600': R_1S1_1S2_600,
      if (R_2S1_2S2_600 != null) 'r_2s1_2s2_600': R_2S1_2S2_600,
      if (R_3S1_3S2_600 != null) 'r_3s1_3s2_600': R_3S1_3S2_600,
      if (R_4S1_4S2_600 != null) 'r_4s1_4s2_600': R_4S1_4S2_600,
      if (R_5S1_5S2_600 != null) 'r_5s1_5s2_600': R_5S1_5S2_600,
      if (Y_1S1_1S2_600 != null) 'y_1s1_1s2_600': Y_1S1_1S2_600,
      if (Y_2S1_2S2_600 != null) 'y_2s1_2s2_600': Y_2S1_2S2_600,
      if (Y_3S1_3S2_600 != null) 'y_3s1_3s2_600': Y_3S1_3S2_600,
      if (Y_4S1_4S2_600 != null) 'y_4s1_4s2_600': Y_4S1_4S2_600,
      if (Y_5S1_5S2_600 != null) 'y_5s1_5s2_600': Y_5S1_5S2_600,
      if (B_1S1_1S2_600 != null) 'b_1s1_1s2_600': B_1S1_1S2_600,
      if (B_2S1_2S2_600 != null) 'b_2s1_2s2_600': B_2S1_2S2_600,
      if (B_3S1_3S2_600 != null) 'b_3s1_3s2_600': B_3S1_3S2_600,
      if (B_4S1_4S2_600 != null) 'b_4s1_4s2_600': B_4S1_4S2_600,
      if (B_5S1_5S2_600 != null) 'b_5s1_5s2_600': B_5S1_5S2_600,
      if (R_1S1_1S2_800 != null) 'r_1s1_1s2_800': R_1S1_1S2_800,
      if (R_2S1_2S2_800 != null) 'r_2s1_2s2_800': R_2S1_2S2_800,
      if (R_3S1_3S2_800 != null) 'r_3s1_3s2_800': R_3S1_3S2_800,
      if (R_4S1_4S2_800 != null) 'r_4s1_4s2_800': R_4S1_4S2_800,
      if (R_5S1_5S2_800 != null) 'r_5s1_5s2_800': R_5S1_5S2_800,
      if (Y_1S1_1S2_800 != null) 'y_1s1_1s2_800': Y_1S1_1S2_800,
      if (Y_2S1_2S2_800 != null) 'y_2s1_2s2_800': Y_2S1_2S2_800,
      if (Y_3S1_3S2_800 != null) 'y_3s1_3s2_800': Y_3S1_3S2_800,
      if (Y_4S1_4S2_800 != null) 'y_4s1_4s2_800': Y_4S1_4S2_800,
      if (Y_5S1_5S2_800 != null) 'y_5s1_5s2_800': Y_5S1_5S2_800,
      if (B_1S1_1S2_800 != null) 'b_1s1_1s2_800': B_1S1_1S2_800,
      if (B_2S1_2S2_800 != null) 'b_2s1_2s2_800': B_2S1_2S2_800,
      if (B_3S1_3S2_800 != null) 'b_3s1_3s2_800': B_3S1_3S2_800,
      if (B_4S1_4S2_800 != null) 'b_4s1_4s2_800': B_4S1_4S2_800,
      if (B_5S1_5S2_800 != null) 'b_5s1_5s2_800': B_5S1_5S2_800,
    });
  }

  CTcoreRLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> R_1S1_1S2_200,
      Value<double> R_2S1_2S2_200,
      Value<double> R_3S1_3S2_200,
      Value<double> R_4S1_4S2_200,
      Value<double> R_5S1_5S2_200,
      Value<double> Y_1S1_1S2_200,
      Value<double> Y_2S1_2S2_200,
      Value<double> Y_3S1_3S2_200,
      Value<double> Y_4S1_4S2_200,
      Value<double> Y_5S1_5S2_200,
      Value<double> B_1S1_1S2_200,
      Value<double> B_2S1_2S2_200,
      Value<double> B_3S1_3S2_200,
      Value<double> B_4S1_4S2_200,
      Value<double> B_5S1_5S2_200,
      Value<double> R_1S1_1S2_400,
      Value<double> R_2S1_2S2_400,
      Value<double> R_3S1_3S2_400,
      Value<double> R_4S1_4S2_400,
      Value<double> R_5S1_5S2_400,
      Value<double> Y_1S1_1S2_400,
      Value<double> Y_2S1_2S2_400,
      Value<double> Y_3S1_3S2_400,
      Value<double> Y_4S1_4S2_400,
      Value<double> Y_5S1_5S2_400,
      Value<double> B_1S1_1S2_400,
      Value<double> B_2S1_2S2_400,
      Value<double> B_3S1_3S2_400,
      Value<double> B_4S1_4S2_400,
      Value<double> B_5S1_5S2_400,
      Value<double> R_1S1_1S2_600,
      Value<double> R_2S1_2S2_600,
      Value<double> R_3S1_3S2_600,
      Value<double> R_4S1_4S2_600,
      Value<double> R_5S1_5S2_600,
      Value<double> Y_1S1_1S2_600,
      Value<double> Y_2S1_2S2_600,
      Value<double> Y_3S1_3S2_600,
      Value<double> Y_4S1_4S2_600,
      Value<double> Y_5S1_5S2_600,
      Value<double> B_1S1_1S2_600,
      Value<double> B_2S1_2S2_600,
      Value<double> B_3S1_3S2_600,
      Value<double> B_4S1_4S2_600,
      Value<double> B_5S1_5S2_600,
      Value<double> R_1S1_1S2_800,
      Value<double> R_2S1_2S2_800,
      Value<double> R_3S1_3S2_800,
      Value<double> R_4S1_4S2_800,
      Value<double> R_5S1_5S2_800,
      Value<double> Y_1S1_1S2_800,
      Value<double> Y_2S1_2S2_800,
      Value<double> Y_3S1_3S2_800,
      Value<double> Y_4S1_4S2_800,
      Value<double> Y_5S1_5S2_800,
      Value<double> B_1S1_1S2_800,
      Value<double> B_2S1_2S2_800,
      Value<double> B_3S1_3S2_800,
      Value<double> B_4S1_4S2_800,
      Value<double> B_5S1_5S2_800}) {
    return CTcoreRLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      R_1S1_1S2_200: R_1S1_1S2_200 ?? this.R_1S1_1S2_200,
      R_2S1_2S2_200: R_2S1_2S2_200 ?? this.R_2S1_2S2_200,
      R_3S1_3S2_200: R_3S1_3S2_200 ?? this.R_3S1_3S2_200,
      R_4S1_4S2_200: R_4S1_4S2_200 ?? this.R_4S1_4S2_200,
      R_5S1_5S2_200: R_5S1_5S2_200 ?? this.R_5S1_5S2_200,
      Y_1S1_1S2_200: Y_1S1_1S2_200 ?? this.Y_1S1_1S2_200,
      Y_2S1_2S2_200: Y_2S1_2S2_200 ?? this.Y_2S1_2S2_200,
      Y_3S1_3S2_200: Y_3S1_3S2_200 ?? this.Y_3S1_3S2_200,
      Y_4S1_4S2_200: Y_4S1_4S2_200 ?? this.Y_4S1_4S2_200,
      Y_5S1_5S2_200: Y_5S1_5S2_200 ?? this.Y_5S1_5S2_200,
      B_1S1_1S2_200: B_1S1_1S2_200 ?? this.B_1S1_1S2_200,
      B_2S1_2S2_200: B_2S1_2S2_200 ?? this.B_2S1_2S2_200,
      B_3S1_3S2_200: B_3S1_3S2_200 ?? this.B_3S1_3S2_200,
      B_4S1_4S2_200: B_4S1_4S2_200 ?? this.B_4S1_4S2_200,
      B_5S1_5S2_200: B_5S1_5S2_200 ?? this.B_5S1_5S2_200,
      R_1S1_1S2_400: R_1S1_1S2_400 ?? this.R_1S1_1S2_400,
      R_2S1_2S2_400: R_2S1_2S2_400 ?? this.R_2S1_2S2_400,
      R_3S1_3S2_400: R_3S1_3S2_400 ?? this.R_3S1_3S2_400,
      R_4S1_4S2_400: R_4S1_4S2_400 ?? this.R_4S1_4S2_400,
      R_5S1_5S2_400: R_5S1_5S2_400 ?? this.R_5S1_5S2_400,
      Y_1S1_1S2_400: Y_1S1_1S2_400 ?? this.Y_1S1_1S2_400,
      Y_2S1_2S2_400: Y_2S1_2S2_400 ?? this.Y_2S1_2S2_400,
      Y_3S1_3S2_400: Y_3S1_3S2_400 ?? this.Y_3S1_3S2_400,
      Y_4S1_4S2_400: Y_4S1_4S2_400 ?? this.Y_4S1_4S2_400,
      Y_5S1_5S2_400: Y_5S1_5S2_400 ?? this.Y_5S1_5S2_400,
      B_1S1_1S2_400: B_1S1_1S2_400 ?? this.B_1S1_1S2_400,
      B_2S1_2S2_400: B_2S1_2S2_400 ?? this.B_2S1_2S2_400,
      B_3S1_3S2_400: B_3S1_3S2_400 ?? this.B_3S1_3S2_400,
      B_4S1_4S2_400: B_4S1_4S2_400 ?? this.B_4S1_4S2_400,
      B_5S1_5S2_400: B_5S1_5S2_400 ?? this.B_5S1_5S2_400,
      R_1S1_1S2_600: R_1S1_1S2_600 ?? this.R_1S1_1S2_600,
      R_2S1_2S2_600: R_2S1_2S2_600 ?? this.R_2S1_2S2_600,
      R_3S1_3S2_600: R_3S1_3S2_600 ?? this.R_3S1_3S2_600,
      R_4S1_4S2_600: R_4S1_4S2_600 ?? this.R_4S1_4S2_600,
      R_5S1_5S2_600: R_5S1_5S2_600 ?? this.R_5S1_5S2_600,
      Y_1S1_1S2_600: Y_1S1_1S2_600 ?? this.Y_1S1_1S2_600,
      Y_2S1_2S2_600: Y_2S1_2S2_600 ?? this.Y_2S1_2S2_600,
      Y_3S1_3S2_600: Y_3S1_3S2_600 ?? this.Y_3S1_3S2_600,
      Y_4S1_4S2_600: Y_4S1_4S2_600 ?? this.Y_4S1_4S2_600,
      Y_5S1_5S2_600: Y_5S1_5S2_600 ?? this.Y_5S1_5S2_600,
      B_1S1_1S2_600: B_1S1_1S2_600 ?? this.B_1S1_1S2_600,
      B_2S1_2S2_600: B_2S1_2S2_600 ?? this.B_2S1_2S2_600,
      B_3S1_3S2_600: B_3S1_3S2_600 ?? this.B_3S1_3S2_600,
      B_4S1_4S2_600: B_4S1_4S2_600 ?? this.B_4S1_4S2_600,
      B_5S1_5S2_600: B_5S1_5S2_600 ?? this.B_5S1_5S2_600,
      R_1S1_1S2_800: R_1S1_1S2_800 ?? this.R_1S1_1S2_800,
      R_2S1_2S2_800: R_2S1_2S2_800 ?? this.R_2S1_2S2_800,
      R_3S1_3S2_800: R_3S1_3S2_800 ?? this.R_3S1_3S2_800,
      R_4S1_4S2_800: R_4S1_4S2_800 ?? this.R_4S1_4S2_800,
      R_5S1_5S2_800: R_5S1_5S2_800 ?? this.R_5S1_5S2_800,
      Y_1S1_1S2_800: Y_1S1_1S2_800 ?? this.Y_1S1_1S2_800,
      Y_2S1_2S2_800: Y_2S1_2S2_800 ?? this.Y_2S1_2S2_800,
      Y_3S1_3S2_800: Y_3S1_3S2_800 ?? this.Y_3S1_3S2_800,
      Y_4S1_4S2_800: Y_4S1_4S2_800 ?? this.Y_4S1_4S2_800,
      Y_5S1_5S2_800: Y_5S1_5S2_800 ?? this.Y_5S1_5S2_800,
      B_1S1_1S2_800: B_1S1_1S2_800 ?? this.B_1S1_1S2_800,
      B_2S1_2S2_800: B_2S1_2S2_800 ?? this.B_2S1_2S2_800,
      B_3S1_3S2_800: B_3S1_3S2_800 ?? this.B_3S1_3S2_800,
      B_4S1_4S2_800: B_4S1_4S2_800 ?? this.B_4S1_4S2_800,
      B_5S1_5S2_800: B_5S1_5S2_800 ?? this.B_5S1_5S2_800,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (R_1S1_1S2_200.present) {
      map['r_1s1_1s2_200'] = Variable<double>(R_1S1_1S2_200.value);
    }
    if (R_2S1_2S2_200.present) {
      map['r_2s1_2s2_200'] = Variable<double>(R_2S1_2S2_200.value);
    }
    if (R_3S1_3S2_200.present) {
      map['r_3s1_3s2_200'] = Variable<double>(R_3S1_3S2_200.value);
    }
    if (R_4S1_4S2_200.present) {
      map['r_4s1_4s2_200'] = Variable<double>(R_4S1_4S2_200.value);
    }
    if (R_5S1_5S2_200.present) {
      map['r_5s1_5s2_200'] = Variable<double>(R_5S1_5S2_200.value);
    }
    if (Y_1S1_1S2_200.present) {
      map['y_1s1_1s2_200'] = Variable<double>(Y_1S1_1S2_200.value);
    }
    if (Y_2S1_2S2_200.present) {
      map['y_2s1_2s2_200'] = Variable<double>(Y_2S1_2S2_200.value);
    }
    if (Y_3S1_3S2_200.present) {
      map['y_3s1_3s2_200'] = Variable<double>(Y_3S1_3S2_200.value);
    }
    if (Y_4S1_4S2_200.present) {
      map['y_4s1_4s2_200'] = Variable<double>(Y_4S1_4S2_200.value);
    }
    if (Y_5S1_5S2_200.present) {
      map['y_5s1_5s2_200'] = Variable<double>(Y_5S1_5S2_200.value);
    }
    if (B_1S1_1S2_200.present) {
      map['b_1s1_1s2_200'] = Variable<double>(B_1S1_1S2_200.value);
    }
    if (B_2S1_2S2_200.present) {
      map['b_2s1_2s2_200'] = Variable<double>(B_2S1_2S2_200.value);
    }
    if (B_3S1_3S2_200.present) {
      map['b_3s1_3s2_200'] = Variable<double>(B_3S1_3S2_200.value);
    }
    if (B_4S1_4S2_200.present) {
      map['b_4s1_4s2_200'] = Variable<double>(B_4S1_4S2_200.value);
    }
    if (B_5S1_5S2_200.present) {
      map['b_5s1_5s2_200'] = Variable<double>(B_5S1_5S2_200.value);
    }
    if (R_1S1_1S2_400.present) {
      map['r_1s1_1s2_400'] = Variable<double>(R_1S1_1S2_400.value);
    }
    if (R_2S1_2S2_400.present) {
      map['r_2s1_2s2_400'] = Variable<double>(R_2S1_2S2_400.value);
    }
    if (R_3S1_3S2_400.present) {
      map['r_3s1_3s2_400'] = Variable<double>(R_3S1_3S2_400.value);
    }
    if (R_4S1_4S2_400.present) {
      map['r_4s1_4s2_400'] = Variable<double>(R_4S1_4S2_400.value);
    }
    if (R_5S1_5S2_400.present) {
      map['r_5s1_5s2_400'] = Variable<double>(R_5S1_5S2_400.value);
    }
    if (Y_1S1_1S2_400.present) {
      map['y_1s1_1s2_400'] = Variable<double>(Y_1S1_1S2_400.value);
    }
    if (Y_2S1_2S2_400.present) {
      map['y_2s1_2s2_400'] = Variable<double>(Y_2S1_2S2_400.value);
    }
    if (Y_3S1_3S2_400.present) {
      map['y_3s1_3s2_400'] = Variable<double>(Y_3S1_3S2_400.value);
    }
    if (Y_4S1_4S2_400.present) {
      map['y_4s1_4s2_400'] = Variable<double>(Y_4S1_4S2_400.value);
    }
    if (Y_5S1_5S2_400.present) {
      map['y_5s1_5s2_400'] = Variable<double>(Y_5S1_5S2_400.value);
    }
    if (B_1S1_1S2_400.present) {
      map['b_1s1_1s2_400'] = Variable<double>(B_1S1_1S2_400.value);
    }
    if (B_2S1_2S2_400.present) {
      map['b_2s1_2s2_400'] = Variable<double>(B_2S1_2S2_400.value);
    }
    if (B_3S1_3S2_400.present) {
      map['b_3s1_3s2_400'] = Variable<double>(B_3S1_3S2_400.value);
    }
    if (B_4S1_4S2_400.present) {
      map['b_4s1_4s2_400'] = Variable<double>(B_4S1_4S2_400.value);
    }
    if (B_5S1_5S2_400.present) {
      map['b_5s1_5s2_400'] = Variable<double>(B_5S1_5S2_400.value);
    }
    if (R_1S1_1S2_600.present) {
      map['r_1s1_1s2_600'] = Variable<double>(R_1S1_1S2_600.value);
    }
    if (R_2S1_2S2_600.present) {
      map['r_2s1_2s2_600'] = Variable<double>(R_2S1_2S2_600.value);
    }
    if (R_3S1_3S2_600.present) {
      map['r_3s1_3s2_600'] = Variable<double>(R_3S1_3S2_600.value);
    }
    if (R_4S1_4S2_600.present) {
      map['r_4s1_4s2_600'] = Variable<double>(R_4S1_4S2_600.value);
    }
    if (R_5S1_5S2_600.present) {
      map['r_5s1_5s2_600'] = Variable<double>(R_5S1_5S2_600.value);
    }
    if (Y_1S1_1S2_600.present) {
      map['y_1s1_1s2_600'] = Variable<double>(Y_1S1_1S2_600.value);
    }
    if (Y_2S1_2S2_600.present) {
      map['y_2s1_2s2_600'] = Variable<double>(Y_2S1_2S2_600.value);
    }
    if (Y_3S1_3S2_600.present) {
      map['y_3s1_3s2_600'] = Variable<double>(Y_3S1_3S2_600.value);
    }
    if (Y_4S1_4S2_600.present) {
      map['y_4s1_4s2_600'] = Variable<double>(Y_4S1_4S2_600.value);
    }
    if (Y_5S1_5S2_600.present) {
      map['y_5s1_5s2_600'] = Variable<double>(Y_5S1_5S2_600.value);
    }
    if (B_1S1_1S2_600.present) {
      map['b_1s1_1s2_600'] = Variable<double>(B_1S1_1S2_600.value);
    }
    if (B_2S1_2S2_600.present) {
      map['b_2s1_2s2_600'] = Variable<double>(B_2S1_2S2_600.value);
    }
    if (B_3S1_3S2_600.present) {
      map['b_3s1_3s2_600'] = Variable<double>(B_3S1_3S2_600.value);
    }
    if (B_4S1_4S2_600.present) {
      map['b_4s1_4s2_600'] = Variable<double>(B_4S1_4S2_600.value);
    }
    if (B_5S1_5S2_600.present) {
      map['b_5s1_5s2_600'] = Variable<double>(B_5S1_5S2_600.value);
    }
    if (R_1S1_1S2_800.present) {
      map['r_1s1_1s2_800'] = Variable<double>(R_1S1_1S2_800.value);
    }
    if (R_2S1_2S2_800.present) {
      map['r_2s1_2s2_800'] = Variable<double>(R_2S1_2S2_800.value);
    }
    if (R_3S1_3S2_800.present) {
      map['r_3s1_3s2_800'] = Variable<double>(R_3S1_3S2_800.value);
    }
    if (R_4S1_4S2_800.present) {
      map['r_4s1_4s2_800'] = Variable<double>(R_4S1_4S2_800.value);
    }
    if (R_5S1_5S2_800.present) {
      map['r_5s1_5s2_800'] = Variable<double>(R_5S1_5S2_800.value);
    }
    if (Y_1S1_1S2_800.present) {
      map['y_1s1_1s2_800'] = Variable<double>(Y_1S1_1S2_800.value);
    }
    if (Y_2S1_2S2_800.present) {
      map['y_2s1_2s2_800'] = Variable<double>(Y_2S1_2S2_800.value);
    }
    if (Y_3S1_3S2_800.present) {
      map['y_3s1_3s2_800'] = Variable<double>(Y_3S1_3S2_800.value);
    }
    if (Y_4S1_4S2_800.present) {
      map['y_4s1_4s2_800'] = Variable<double>(Y_4S1_4S2_800.value);
    }
    if (Y_5S1_5S2_800.present) {
      map['y_5s1_5s2_800'] = Variable<double>(Y_5S1_5S2_800.value);
    }
    if (B_1S1_1S2_800.present) {
      map['b_1s1_1s2_800'] = Variable<double>(B_1S1_1S2_800.value);
    }
    if (B_2S1_2S2_800.present) {
      map['b_2s1_2s2_800'] = Variable<double>(B_2S1_2S2_800.value);
    }
    if (B_3S1_3S2_800.present) {
      map['b_3s1_3s2_800'] = Variable<double>(B_3S1_3S2_800.value);
    }
    if (B_4S1_4S2_800.present) {
      map['b_4s1_4s2_800'] = Variable<double>(B_4S1_4S2_800.value);
    }
    if (B_5S1_5S2_800.present) {
      map['b_5s1_5s2_800'] = Variable<double>(B_5S1_5S2_800.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CTcoreRLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_1S1_1S2_200: $R_1S1_1S2_200, ')
          ..write('R_2S1_2S2_200: $R_2S1_2S2_200, ')
          ..write('R_3S1_3S2_200: $R_3S1_3S2_200, ')
          ..write('R_4S1_4S2_200: $R_4S1_4S2_200, ')
          ..write('R_5S1_5S2_200: $R_5S1_5S2_200, ')
          ..write('Y_1S1_1S2_200: $Y_1S1_1S2_200, ')
          ..write('Y_2S1_2S2_200: $Y_2S1_2S2_200, ')
          ..write('Y_3S1_3S2_200: $Y_3S1_3S2_200, ')
          ..write('Y_4S1_4S2_200: $Y_4S1_4S2_200, ')
          ..write('Y_5S1_5S2_200: $Y_5S1_5S2_200, ')
          ..write('B_1S1_1S2_200: $B_1S1_1S2_200, ')
          ..write('B_2S1_2S2_200: $B_2S1_2S2_200, ')
          ..write('B_3S1_3S2_200: $B_3S1_3S2_200, ')
          ..write('B_4S1_4S2_200: $B_4S1_4S2_200, ')
          ..write('B_5S1_5S2_200: $B_5S1_5S2_200, ')
          ..write('R_1S1_1S2_400: $R_1S1_1S2_400, ')
          ..write('R_2S1_2S2_400: $R_2S1_2S2_400, ')
          ..write('R_3S1_3S2_400: $R_3S1_3S2_400, ')
          ..write('R_4S1_4S2_400: $R_4S1_4S2_400, ')
          ..write('R_5S1_5S2_400: $R_5S1_5S2_400, ')
          ..write('Y_1S1_1S2_400: $Y_1S1_1S2_400, ')
          ..write('Y_2S1_2S2_400: $Y_2S1_2S2_400, ')
          ..write('Y_3S1_3S2_400: $Y_3S1_3S2_400, ')
          ..write('Y_4S1_4S2_400: $Y_4S1_4S2_400, ')
          ..write('Y_5S1_5S2_400: $Y_5S1_5S2_400, ')
          ..write('B_1S1_1S2_400: $B_1S1_1S2_400, ')
          ..write('B_2S1_2S2_400: $B_2S1_2S2_400, ')
          ..write('B_3S1_3S2_400: $B_3S1_3S2_400, ')
          ..write('B_4S1_4S2_400: $B_4S1_4S2_400, ')
          ..write('B_5S1_5S2_400: $B_5S1_5S2_400, ')
          ..write('R_1S1_1S2_600: $R_1S1_1S2_600, ')
          ..write('R_2S1_2S2_600: $R_2S1_2S2_600, ')
          ..write('R_3S1_3S2_600: $R_3S1_3S2_600, ')
          ..write('R_4S1_4S2_600: $R_4S1_4S2_600, ')
          ..write('R_5S1_5S2_600: $R_5S1_5S2_600, ')
          ..write('Y_1S1_1S2_600: $Y_1S1_1S2_600, ')
          ..write('Y_2S1_2S2_600: $Y_2S1_2S2_600, ')
          ..write('Y_3S1_3S2_600: $Y_3S1_3S2_600, ')
          ..write('Y_4S1_4S2_600: $Y_4S1_4S2_600, ')
          ..write('Y_5S1_5S2_600: $Y_5S1_5S2_600, ')
          ..write('B_1S1_1S2_600: $B_1S1_1S2_600, ')
          ..write('B_2S1_2S2_600: $B_2S1_2S2_600, ')
          ..write('B_3S1_3S2_600: $B_3S1_3S2_600, ')
          ..write('B_4S1_4S2_600: $B_4S1_4S2_600, ')
          ..write('B_5S1_5S2_600: $B_5S1_5S2_600, ')
          ..write('R_1S1_1S2_800: $R_1S1_1S2_800, ')
          ..write('R_2S1_2S2_800: $R_2S1_2S2_800, ')
          ..write('R_3S1_3S2_800: $R_3S1_3S2_800, ')
          ..write('R_4S1_4S2_800: $R_4S1_4S2_800, ')
          ..write('R_5S1_5S2_800: $R_5S1_5S2_800, ')
          ..write('Y_1S1_1S2_800: $Y_1S1_1S2_800, ')
          ..write('Y_2S1_2S2_800: $Y_2S1_2S2_800, ')
          ..write('Y_3S1_3S2_800: $Y_3S1_3S2_800, ')
          ..write('Y_4S1_4S2_800: $Y_4S1_4S2_800, ')
          ..write('Y_5S1_5S2_800: $Y_5S1_5S2_800, ')
          ..write('B_1S1_1S2_800: $B_1S1_1S2_800, ')
          ..write('B_2S1_2S2_800: $B_2S1_2S2_800, ')
          ..write('B_3S1_3S2_800: $B_3S1_3S2_800, ')
          ..write('B_4S1_4S2_800: $B_4S1_4S2_800, ')
          ..write('B_5S1_5S2_800: $B_5S1_5S2_800')
          ..write(')'))
        .toString();
  }
}

class $CTcoreRLocalDatasourceImplTable extends CTcoreRLocalDatasourceImpl
    with TableInfo<$CTcoreRLocalDatasourceImplTable, CTcoreRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $CTcoreRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _R_1S1_1S2_200Meta =
      const VerificationMeta('R_1S1_1S2_200');
  GeneratedColumn<double> _R_1S1_1S2_200;
  @override
  GeneratedColumn<double> get R_1S1_1S2_200 => _R_1S1_1S2_200 ??=
      GeneratedColumn<double>('r_1s1_1s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_2S1_2S2_200Meta =
      const VerificationMeta('R_2S1_2S2_200');
  GeneratedColumn<double> _R_2S1_2S2_200;
  @override
  GeneratedColumn<double> get R_2S1_2S2_200 => _R_2S1_2S2_200 ??=
      GeneratedColumn<double>('r_2s1_2s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_3S1_3S2_200Meta =
      const VerificationMeta('R_3S1_3S2_200');
  GeneratedColumn<double> _R_3S1_3S2_200;
  @override
  GeneratedColumn<double> get R_3S1_3S2_200 => _R_3S1_3S2_200 ??=
      GeneratedColumn<double>('r_3s1_3s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_4S1_4S2_200Meta =
      const VerificationMeta('R_4S1_4S2_200');
  GeneratedColumn<double> _R_4S1_4S2_200;
  @override
  GeneratedColumn<double> get R_4S1_4S2_200 => _R_4S1_4S2_200 ??=
      GeneratedColumn<double>('r_4s1_4s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_5S1_5S2_200Meta =
      const VerificationMeta('R_5S1_5S2_200');
  GeneratedColumn<double> _R_5S1_5S2_200;
  @override
  GeneratedColumn<double> get R_5S1_5S2_200 => _R_5S1_5S2_200 ??=
      GeneratedColumn<double>('r_5s1_5s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_1S1_1S2_200Meta =
      const VerificationMeta('Y_1S1_1S2_200');
  GeneratedColumn<double> _Y_1S1_1S2_200;
  @override
  GeneratedColumn<double> get Y_1S1_1S2_200 => _Y_1S1_1S2_200 ??=
      GeneratedColumn<double>('y_1s1_1s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_2S1_2S2_200Meta =
      const VerificationMeta('Y_2S1_2S2_200');
  GeneratedColumn<double> _Y_2S1_2S2_200;
  @override
  GeneratedColumn<double> get Y_2S1_2S2_200 => _Y_2S1_2S2_200 ??=
      GeneratedColumn<double>('y_2s1_2s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_3S1_3S2_200Meta =
      const VerificationMeta('Y_3S1_3S2_200');
  GeneratedColumn<double> _Y_3S1_3S2_200;
  @override
  GeneratedColumn<double> get Y_3S1_3S2_200 => _Y_3S1_3S2_200 ??=
      GeneratedColumn<double>('y_3s1_3s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_4S1_4S2_200Meta =
      const VerificationMeta('Y_4S1_4S2_200');
  GeneratedColumn<double> _Y_4S1_4S2_200;
  @override
  GeneratedColumn<double> get Y_4S1_4S2_200 => _Y_4S1_4S2_200 ??=
      GeneratedColumn<double>('y_4s1_4s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_5S1_5S2_200Meta =
      const VerificationMeta('Y_5S1_5S2_200');
  GeneratedColumn<double> _Y_5S1_5S2_200;
  @override
  GeneratedColumn<double> get Y_5S1_5S2_200 => _Y_5S1_5S2_200 ??=
      GeneratedColumn<double>('y_5s1_5s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_1S1_1S2_200Meta =
      const VerificationMeta('B_1S1_1S2_200');
  GeneratedColumn<double> _B_1S1_1S2_200;
  @override
  GeneratedColumn<double> get B_1S1_1S2_200 => _B_1S1_1S2_200 ??=
      GeneratedColumn<double>('b_1s1_1s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_2S1_2S2_200Meta =
      const VerificationMeta('B_2S1_2S2_200');
  GeneratedColumn<double> _B_2S1_2S2_200;
  @override
  GeneratedColumn<double> get B_2S1_2S2_200 => _B_2S1_2S2_200 ??=
      GeneratedColumn<double>('b_2s1_2s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_3S1_3S2_200Meta =
      const VerificationMeta('B_3S1_3S2_200');
  GeneratedColumn<double> _B_3S1_3S2_200;
  @override
  GeneratedColumn<double> get B_3S1_3S2_200 => _B_3S1_3S2_200 ??=
      GeneratedColumn<double>('b_3s1_3s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_4S1_4S2_200Meta =
      const VerificationMeta('B_4S1_4S2_200');
  GeneratedColumn<double> _B_4S1_4S2_200;
  @override
  GeneratedColumn<double> get B_4S1_4S2_200 => _B_4S1_4S2_200 ??=
      GeneratedColumn<double>('b_4s1_4s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_5S1_5S2_200Meta =
      const VerificationMeta('B_5S1_5S2_200');
  GeneratedColumn<double> _B_5S1_5S2_200;
  @override
  GeneratedColumn<double> get B_5S1_5S2_200 => _B_5S1_5S2_200 ??=
      GeneratedColumn<double>('b_5s1_5s2_200', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_1S1_1S2_400Meta =
      const VerificationMeta('R_1S1_1S2_400');
  GeneratedColumn<double> _R_1S1_1S2_400;
  @override
  GeneratedColumn<double> get R_1S1_1S2_400 => _R_1S1_1S2_400 ??=
      GeneratedColumn<double>('r_1s1_1s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_2S1_2S2_400Meta =
      const VerificationMeta('R_2S1_2S2_400');
  GeneratedColumn<double> _R_2S1_2S2_400;
  @override
  GeneratedColumn<double> get R_2S1_2S2_400 => _R_2S1_2S2_400 ??=
      GeneratedColumn<double>('r_2s1_2s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_3S1_3S2_400Meta =
      const VerificationMeta('R_3S1_3S2_400');
  GeneratedColumn<double> _R_3S1_3S2_400;
  @override
  GeneratedColumn<double> get R_3S1_3S2_400 => _R_3S1_3S2_400 ??=
      GeneratedColumn<double>('r_3s1_3s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_4S1_4S2_400Meta =
      const VerificationMeta('R_4S1_4S2_400');
  GeneratedColumn<double> _R_4S1_4S2_400;
  @override
  GeneratedColumn<double> get R_4S1_4S2_400 => _R_4S1_4S2_400 ??=
      GeneratedColumn<double>('r_4s1_4s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_5S1_5S2_400Meta =
      const VerificationMeta('R_5S1_5S2_400');
  GeneratedColumn<double> _R_5S1_5S2_400;
  @override
  GeneratedColumn<double> get R_5S1_5S2_400 => _R_5S1_5S2_400 ??=
      GeneratedColumn<double>('r_5s1_5s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_1S1_1S2_400Meta =
      const VerificationMeta('Y_1S1_1S2_400');
  GeneratedColumn<double> _Y_1S1_1S2_400;
  @override
  GeneratedColumn<double> get Y_1S1_1S2_400 => _Y_1S1_1S2_400 ??=
      GeneratedColumn<double>('y_1s1_1s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_2S1_2S2_400Meta =
      const VerificationMeta('Y_2S1_2S2_400');
  GeneratedColumn<double> _Y_2S1_2S2_400;
  @override
  GeneratedColumn<double> get Y_2S1_2S2_400 => _Y_2S1_2S2_400 ??=
      GeneratedColumn<double>('y_2s1_2s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_3S1_3S2_400Meta =
      const VerificationMeta('Y_3S1_3S2_400');
  GeneratedColumn<double> _Y_3S1_3S2_400;
  @override
  GeneratedColumn<double> get Y_3S1_3S2_400 => _Y_3S1_3S2_400 ??=
      GeneratedColumn<double>('y_3s1_3s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_4S1_4S2_400Meta =
      const VerificationMeta('Y_4S1_4S2_400');
  GeneratedColumn<double> _Y_4S1_4S2_400;
  @override
  GeneratedColumn<double> get Y_4S1_4S2_400 => _Y_4S1_4S2_400 ??=
      GeneratedColumn<double>('y_4s1_4s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_5S1_5S2_400Meta =
      const VerificationMeta('Y_5S1_5S2_400');
  GeneratedColumn<double> _Y_5S1_5S2_400;
  @override
  GeneratedColumn<double> get Y_5S1_5S2_400 => _Y_5S1_5S2_400 ??=
      GeneratedColumn<double>('y_5s1_5s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_1S1_1S2_400Meta =
      const VerificationMeta('B_1S1_1S2_400');
  GeneratedColumn<double> _B_1S1_1S2_400;
  @override
  GeneratedColumn<double> get B_1S1_1S2_400 => _B_1S1_1S2_400 ??=
      GeneratedColumn<double>('b_1s1_1s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_2S1_2S2_400Meta =
      const VerificationMeta('B_2S1_2S2_400');
  GeneratedColumn<double> _B_2S1_2S2_400;
  @override
  GeneratedColumn<double> get B_2S1_2S2_400 => _B_2S1_2S2_400 ??=
      GeneratedColumn<double>('b_2s1_2s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_3S1_3S2_400Meta =
      const VerificationMeta('B_3S1_3S2_400');
  GeneratedColumn<double> _B_3S1_3S2_400;
  @override
  GeneratedColumn<double> get B_3S1_3S2_400 => _B_3S1_3S2_400 ??=
      GeneratedColumn<double>('b_3s1_3s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_4S1_4S2_400Meta =
      const VerificationMeta('B_4S1_4S2_400');
  GeneratedColumn<double> _B_4S1_4S2_400;
  @override
  GeneratedColumn<double> get B_4S1_4S2_400 => _B_4S1_4S2_400 ??=
      GeneratedColumn<double>('b_4s1_4s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_5S1_5S2_400Meta =
      const VerificationMeta('B_5S1_5S2_400');
  GeneratedColumn<double> _B_5S1_5S2_400;
  @override
  GeneratedColumn<double> get B_5S1_5S2_400 => _B_5S1_5S2_400 ??=
      GeneratedColumn<double>('b_5s1_5s2_400', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_1S1_1S2_600Meta =
      const VerificationMeta('R_1S1_1S2_600');
  GeneratedColumn<double> _R_1S1_1S2_600;
  @override
  GeneratedColumn<double> get R_1S1_1S2_600 => _R_1S1_1S2_600 ??=
      GeneratedColumn<double>('r_1s1_1s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_2S1_2S2_600Meta =
      const VerificationMeta('R_2S1_2S2_600');
  GeneratedColumn<double> _R_2S1_2S2_600;
  @override
  GeneratedColumn<double> get R_2S1_2S2_600 => _R_2S1_2S2_600 ??=
      GeneratedColumn<double>('r_2s1_2s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_3S1_3S2_600Meta =
      const VerificationMeta('R_3S1_3S2_600');
  GeneratedColumn<double> _R_3S1_3S2_600;
  @override
  GeneratedColumn<double> get R_3S1_3S2_600 => _R_3S1_3S2_600 ??=
      GeneratedColumn<double>('r_3s1_3s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_4S1_4S2_600Meta =
      const VerificationMeta('R_4S1_4S2_600');
  GeneratedColumn<double> _R_4S1_4S2_600;
  @override
  GeneratedColumn<double> get R_4S1_4S2_600 => _R_4S1_4S2_600 ??=
      GeneratedColumn<double>('r_4s1_4s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_5S1_5S2_600Meta =
      const VerificationMeta('R_5S1_5S2_600');
  GeneratedColumn<double> _R_5S1_5S2_600;
  @override
  GeneratedColumn<double> get R_5S1_5S2_600 => _R_5S1_5S2_600 ??=
      GeneratedColumn<double>('r_5s1_5s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_1S1_1S2_600Meta =
      const VerificationMeta('Y_1S1_1S2_600');
  GeneratedColumn<double> _Y_1S1_1S2_600;
  @override
  GeneratedColumn<double> get Y_1S1_1S2_600 => _Y_1S1_1S2_600 ??=
      GeneratedColumn<double>('y_1s1_1s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_2S1_2S2_600Meta =
      const VerificationMeta('Y_2S1_2S2_600');
  GeneratedColumn<double> _Y_2S1_2S2_600;
  @override
  GeneratedColumn<double> get Y_2S1_2S2_600 => _Y_2S1_2S2_600 ??=
      GeneratedColumn<double>('y_2s1_2s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_3S1_3S2_600Meta =
      const VerificationMeta('Y_3S1_3S2_600');
  GeneratedColumn<double> _Y_3S1_3S2_600;
  @override
  GeneratedColumn<double> get Y_3S1_3S2_600 => _Y_3S1_3S2_600 ??=
      GeneratedColumn<double>('y_3s1_3s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_4S1_4S2_600Meta =
      const VerificationMeta('Y_4S1_4S2_600');
  GeneratedColumn<double> _Y_4S1_4S2_600;
  @override
  GeneratedColumn<double> get Y_4S1_4S2_600 => _Y_4S1_4S2_600 ??=
      GeneratedColumn<double>('y_4s1_4s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_5S1_5S2_600Meta =
      const VerificationMeta('Y_5S1_5S2_600');
  GeneratedColumn<double> _Y_5S1_5S2_600;
  @override
  GeneratedColumn<double> get Y_5S1_5S2_600 => _Y_5S1_5S2_600 ??=
      GeneratedColumn<double>('y_5s1_5s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_1S1_1S2_600Meta =
      const VerificationMeta('B_1S1_1S2_600');
  GeneratedColumn<double> _B_1S1_1S2_600;
  @override
  GeneratedColumn<double> get B_1S1_1S2_600 => _B_1S1_1S2_600 ??=
      GeneratedColumn<double>('b_1s1_1s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_2S1_2S2_600Meta =
      const VerificationMeta('B_2S1_2S2_600');
  GeneratedColumn<double> _B_2S1_2S2_600;
  @override
  GeneratedColumn<double> get B_2S1_2S2_600 => _B_2S1_2S2_600 ??=
      GeneratedColumn<double>('b_2s1_2s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_3S1_3S2_600Meta =
      const VerificationMeta('B_3S1_3S2_600');
  GeneratedColumn<double> _B_3S1_3S2_600;
  @override
  GeneratedColumn<double> get B_3S1_3S2_600 => _B_3S1_3S2_600 ??=
      GeneratedColumn<double>('b_3s1_3s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_4S1_4S2_600Meta =
      const VerificationMeta('B_4S1_4S2_600');
  GeneratedColumn<double> _B_4S1_4S2_600;
  @override
  GeneratedColumn<double> get B_4S1_4S2_600 => _B_4S1_4S2_600 ??=
      GeneratedColumn<double>('b_4s1_4s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_5S1_5S2_600Meta =
      const VerificationMeta('B_5S1_5S2_600');
  GeneratedColumn<double> _B_5S1_5S2_600;
  @override
  GeneratedColumn<double> get B_5S1_5S2_600 => _B_5S1_5S2_600 ??=
      GeneratedColumn<double>('b_5s1_5s2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_1S1_1S2_800Meta =
      const VerificationMeta('R_1S1_1S2_800');
  GeneratedColumn<double> _R_1S1_1S2_800;
  @override
  GeneratedColumn<double> get R_1S1_1S2_800 => _R_1S1_1S2_800 ??=
      GeneratedColumn<double>('r_1s1_1s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_2S1_2S2_800Meta =
      const VerificationMeta('R_2S1_2S2_800');
  GeneratedColumn<double> _R_2S1_2S2_800;
  @override
  GeneratedColumn<double> get R_2S1_2S2_800 => _R_2S1_2S2_800 ??=
      GeneratedColumn<double>('r_2s1_2s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_3S1_3S2_800Meta =
      const VerificationMeta('R_3S1_3S2_800');
  GeneratedColumn<double> _R_3S1_3S2_800;
  @override
  GeneratedColumn<double> get R_3S1_3S2_800 => _R_3S1_3S2_800 ??=
      GeneratedColumn<double>('r_3s1_3s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_4S1_4S2_800Meta =
      const VerificationMeta('R_4S1_4S2_800');
  GeneratedColumn<double> _R_4S1_4S2_800;
  @override
  GeneratedColumn<double> get R_4S1_4S2_800 => _R_4S1_4S2_800 ??=
      GeneratedColumn<double>('r_4s1_4s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_5S1_5S2_800Meta =
      const VerificationMeta('R_5S1_5S2_800');
  GeneratedColumn<double> _R_5S1_5S2_800;
  @override
  GeneratedColumn<double> get R_5S1_5S2_800 => _R_5S1_5S2_800 ??=
      GeneratedColumn<double>('r_5s1_5s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_1S1_1S2_800Meta =
      const VerificationMeta('Y_1S1_1S2_800');
  GeneratedColumn<double> _Y_1S1_1S2_800;
  @override
  GeneratedColumn<double> get Y_1S1_1S2_800 => _Y_1S1_1S2_800 ??=
      GeneratedColumn<double>('y_1s1_1s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_2S1_2S2_800Meta =
      const VerificationMeta('Y_2S1_2S2_800');
  GeneratedColumn<double> _Y_2S1_2S2_800;
  @override
  GeneratedColumn<double> get Y_2S1_2S2_800 => _Y_2S1_2S2_800 ??=
      GeneratedColumn<double>('y_2s1_2s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_3S1_3S2_800Meta =
      const VerificationMeta('Y_3S1_3S2_800');
  GeneratedColumn<double> _Y_3S1_3S2_800;
  @override
  GeneratedColumn<double> get Y_3S1_3S2_800 => _Y_3S1_3S2_800 ??=
      GeneratedColumn<double>('y_3s1_3s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_4S1_4S2_800Meta =
      const VerificationMeta('Y_4S1_4S2_800');
  GeneratedColumn<double> _Y_4S1_4S2_800;
  @override
  GeneratedColumn<double> get Y_4S1_4S2_800 => _Y_4S1_4S2_800 ??=
      GeneratedColumn<double>('y_4s1_4s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_5S1_5S2_800Meta =
      const VerificationMeta('Y_5S1_5S2_800');
  GeneratedColumn<double> _Y_5S1_5S2_800;
  @override
  GeneratedColumn<double> get Y_5S1_5S2_800 => _Y_5S1_5S2_800 ??=
      GeneratedColumn<double>('y_5s1_5s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_1S1_1S2_800Meta =
      const VerificationMeta('B_1S1_1S2_800');
  GeneratedColumn<double> _B_1S1_1S2_800;
  @override
  GeneratedColumn<double> get B_1S1_1S2_800 => _B_1S1_1S2_800 ??=
      GeneratedColumn<double>('b_1s1_1s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_2S1_2S2_800Meta =
      const VerificationMeta('B_2S1_2S2_800');
  GeneratedColumn<double> _B_2S1_2S2_800;
  @override
  GeneratedColumn<double> get B_2S1_2S2_800 => _B_2S1_2S2_800 ??=
      GeneratedColumn<double>('b_2s1_2s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_3S1_3S2_800Meta =
      const VerificationMeta('B_3S1_3S2_800');
  GeneratedColumn<double> _B_3S1_3S2_800;
  @override
  GeneratedColumn<double> get B_3S1_3S2_800 => _B_3S1_3S2_800 ??=
      GeneratedColumn<double>('b_3s1_3s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_4S1_4S2_800Meta =
      const VerificationMeta('B_4S1_4S2_800');
  GeneratedColumn<double> _B_4S1_4S2_800;
  @override
  GeneratedColumn<double> get B_4S1_4S2_800 => _B_4S1_4S2_800 ??=
      GeneratedColumn<double>('b_4s1_4s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_5S1_5S2_800Meta =
      const VerificationMeta('B_5S1_5S2_800');
  GeneratedColumn<double> _B_5S1_5S2_800;
  @override
  GeneratedColumn<double> get B_5S1_5S2_800 => _B_5S1_5S2_800 ??=
      GeneratedColumn<double>('b_5s1_5s2_800', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_1S1_1S2_200,
        R_2S1_2S2_200,
        R_3S1_3S2_200,
        R_4S1_4S2_200,
        R_5S1_5S2_200,
        Y_1S1_1S2_200,
        Y_2S1_2S2_200,
        Y_3S1_3S2_200,
        Y_4S1_4S2_200,
        Y_5S1_5S2_200,
        B_1S1_1S2_200,
        B_2S1_2S2_200,
        B_3S1_3S2_200,
        B_4S1_4S2_200,
        B_5S1_5S2_200,
        R_1S1_1S2_400,
        R_2S1_2S2_400,
        R_3S1_3S2_400,
        R_4S1_4S2_400,
        R_5S1_5S2_400,
        Y_1S1_1S2_400,
        Y_2S1_2S2_400,
        Y_3S1_3S2_400,
        Y_4S1_4S2_400,
        Y_5S1_5S2_400,
        B_1S1_1S2_400,
        B_2S1_2S2_400,
        B_3S1_3S2_400,
        B_4S1_4S2_400,
        B_5S1_5S2_400,
        R_1S1_1S2_600,
        R_2S1_2S2_600,
        R_3S1_3S2_600,
        R_4S1_4S2_600,
        R_5S1_5S2_600,
        Y_1S1_1S2_600,
        Y_2S1_2S2_600,
        Y_3S1_3S2_600,
        Y_4S1_4S2_600,
        Y_5S1_5S2_600,
        B_1S1_1S2_600,
        B_2S1_2S2_600,
        B_3S1_3S2_600,
        B_4S1_4S2_600,
        B_5S1_5S2_600,
        R_1S1_1S2_800,
        R_2S1_2S2_800,
        R_3S1_3S2_800,
        R_4S1_4S2_800,
        R_5S1_5S2_800,
        Y_1S1_1S2_800,
        Y_2S1_2S2_800,
        Y_3S1_3S2_800,
        Y_4S1_4S2_800,
        Y_5S1_5S2_800,
        B_1S1_1S2_800,
        B_2S1_2S2_800,
        B_3S1_3S2_800,
        B_4S1_4S2_800,
        B_5S1_5S2_800
      ];
  @override
  String get aliasedName => _alias ?? 'c_tcore_r_local_datasource_impl';
  @override
  String get actualTableName => 'c_tcore_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<CTcoreRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('r_1s1_1s2_200')) {
      context.handle(
          _R_1S1_1S2_200Meta,
          R_1S1_1S2_200.isAcceptableOrUnknown(
              data['r_1s1_1s2_200'], _R_1S1_1S2_200Meta));
    } else if (isInserting) {
      context.missing(_R_1S1_1S2_200Meta);
    }
    if (data.containsKey('r_2s1_2s2_200')) {
      context.handle(
          _R_2S1_2S2_200Meta,
          R_2S1_2S2_200.isAcceptableOrUnknown(
              data['r_2s1_2s2_200'], _R_2S1_2S2_200Meta));
    } else if (isInserting) {
      context.missing(_R_2S1_2S2_200Meta);
    }
    if (data.containsKey('r_3s1_3s2_200')) {
      context.handle(
          _R_3S1_3S2_200Meta,
          R_3S1_3S2_200.isAcceptableOrUnknown(
              data['r_3s1_3s2_200'], _R_3S1_3S2_200Meta));
    } else if (isInserting) {
      context.missing(_R_3S1_3S2_200Meta);
    }
    if (data.containsKey('r_4s1_4s2_200')) {
      context.handle(
          _R_4S1_4S2_200Meta,
          R_4S1_4S2_200.isAcceptableOrUnknown(
              data['r_4s1_4s2_200'], _R_4S1_4S2_200Meta));
    } else if (isInserting) {
      context.missing(_R_4S1_4S2_200Meta);
    }
    if (data.containsKey('r_5s1_5s2_200')) {
      context.handle(
          _R_5S1_5S2_200Meta,
          R_5S1_5S2_200.isAcceptableOrUnknown(
              data['r_5s1_5s2_200'], _R_5S1_5S2_200Meta));
    } else if (isInserting) {
      context.missing(_R_5S1_5S2_200Meta);
    }
    if (data.containsKey('y_1s1_1s2_200')) {
      context.handle(
          _Y_1S1_1S2_200Meta,
          Y_1S1_1S2_200.isAcceptableOrUnknown(
              data['y_1s1_1s2_200'], _Y_1S1_1S2_200Meta));
    } else if (isInserting) {
      context.missing(_Y_1S1_1S2_200Meta);
    }
    if (data.containsKey('y_2s1_2s2_200')) {
      context.handle(
          _Y_2S1_2S2_200Meta,
          Y_2S1_2S2_200.isAcceptableOrUnknown(
              data['y_2s1_2s2_200'], _Y_2S1_2S2_200Meta));
    } else if (isInserting) {
      context.missing(_Y_2S1_2S2_200Meta);
    }
    if (data.containsKey('y_3s1_3s2_200')) {
      context.handle(
          _Y_3S1_3S2_200Meta,
          Y_3S1_3S2_200.isAcceptableOrUnknown(
              data['y_3s1_3s2_200'], _Y_3S1_3S2_200Meta));
    } else if (isInserting) {
      context.missing(_Y_3S1_3S2_200Meta);
    }
    if (data.containsKey('y_4s1_4s2_200')) {
      context.handle(
          _Y_4S1_4S2_200Meta,
          Y_4S1_4S2_200.isAcceptableOrUnknown(
              data['y_4s1_4s2_200'], _Y_4S1_4S2_200Meta));
    } else if (isInserting) {
      context.missing(_Y_4S1_4S2_200Meta);
    }
    if (data.containsKey('y_5s1_5s2_200')) {
      context.handle(
          _Y_5S1_5S2_200Meta,
          Y_5S1_5S2_200.isAcceptableOrUnknown(
              data['y_5s1_5s2_200'], _Y_5S1_5S2_200Meta));
    } else if (isInserting) {
      context.missing(_Y_5S1_5S2_200Meta);
    }
    if (data.containsKey('b_1s1_1s2_200')) {
      context.handle(
          _B_1S1_1S2_200Meta,
          B_1S1_1S2_200.isAcceptableOrUnknown(
              data['b_1s1_1s2_200'], _B_1S1_1S2_200Meta));
    } else if (isInserting) {
      context.missing(_B_1S1_1S2_200Meta);
    }
    if (data.containsKey('b_2s1_2s2_200')) {
      context.handle(
          _B_2S1_2S2_200Meta,
          B_2S1_2S2_200.isAcceptableOrUnknown(
              data['b_2s1_2s2_200'], _B_2S1_2S2_200Meta));
    } else if (isInserting) {
      context.missing(_B_2S1_2S2_200Meta);
    }
    if (data.containsKey('b_3s1_3s2_200')) {
      context.handle(
          _B_3S1_3S2_200Meta,
          B_3S1_3S2_200.isAcceptableOrUnknown(
              data['b_3s1_3s2_200'], _B_3S1_3S2_200Meta));
    } else if (isInserting) {
      context.missing(_B_3S1_3S2_200Meta);
    }
    if (data.containsKey('b_4s1_4s2_200')) {
      context.handle(
          _B_4S1_4S2_200Meta,
          B_4S1_4S2_200.isAcceptableOrUnknown(
              data['b_4s1_4s2_200'], _B_4S1_4S2_200Meta));
    } else if (isInserting) {
      context.missing(_B_4S1_4S2_200Meta);
    }
    if (data.containsKey('b_5s1_5s2_200')) {
      context.handle(
          _B_5S1_5S2_200Meta,
          B_5S1_5S2_200.isAcceptableOrUnknown(
              data['b_5s1_5s2_200'], _B_5S1_5S2_200Meta));
    } else if (isInserting) {
      context.missing(_B_5S1_5S2_200Meta);
    }
    if (data.containsKey('r_1s1_1s2_400')) {
      context.handle(
          _R_1S1_1S2_400Meta,
          R_1S1_1S2_400.isAcceptableOrUnknown(
              data['r_1s1_1s2_400'], _R_1S1_1S2_400Meta));
    } else if (isInserting) {
      context.missing(_R_1S1_1S2_400Meta);
    }
    if (data.containsKey('r_2s1_2s2_400')) {
      context.handle(
          _R_2S1_2S2_400Meta,
          R_2S1_2S2_400.isAcceptableOrUnknown(
              data['r_2s1_2s2_400'], _R_2S1_2S2_400Meta));
    } else if (isInserting) {
      context.missing(_R_2S1_2S2_400Meta);
    }
    if (data.containsKey('r_3s1_3s2_400')) {
      context.handle(
          _R_3S1_3S2_400Meta,
          R_3S1_3S2_400.isAcceptableOrUnknown(
              data['r_3s1_3s2_400'], _R_3S1_3S2_400Meta));
    } else if (isInserting) {
      context.missing(_R_3S1_3S2_400Meta);
    }
    if (data.containsKey('r_4s1_4s2_400')) {
      context.handle(
          _R_4S1_4S2_400Meta,
          R_4S1_4S2_400.isAcceptableOrUnknown(
              data['r_4s1_4s2_400'], _R_4S1_4S2_400Meta));
    } else if (isInserting) {
      context.missing(_R_4S1_4S2_400Meta);
    }
    if (data.containsKey('r_5s1_5s2_400')) {
      context.handle(
          _R_5S1_5S2_400Meta,
          R_5S1_5S2_400.isAcceptableOrUnknown(
              data['r_5s1_5s2_400'], _R_5S1_5S2_400Meta));
    } else if (isInserting) {
      context.missing(_R_5S1_5S2_400Meta);
    }
    if (data.containsKey('y_1s1_1s2_400')) {
      context.handle(
          _Y_1S1_1S2_400Meta,
          Y_1S1_1S2_400.isAcceptableOrUnknown(
              data['y_1s1_1s2_400'], _Y_1S1_1S2_400Meta));
    } else if (isInserting) {
      context.missing(_Y_1S1_1S2_400Meta);
    }
    if (data.containsKey('y_2s1_2s2_400')) {
      context.handle(
          _Y_2S1_2S2_400Meta,
          Y_2S1_2S2_400.isAcceptableOrUnknown(
              data['y_2s1_2s2_400'], _Y_2S1_2S2_400Meta));
    } else if (isInserting) {
      context.missing(_Y_2S1_2S2_400Meta);
    }
    if (data.containsKey('y_3s1_3s2_400')) {
      context.handle(
          _Y_3S1_3S2_400Meta,
          Y_3S1_3S2_400.isAcceptableOrUnknown(
              data['y_3s1_3s2_400'], _Y_3S1_3S2_400Meta));
    } else if (isInserting) {
      context.missing(_Y_3S1_3S2_400Meta);
    }
    if (data.containsKey('y_4s1_4s2_400')) {
      context.handle(
          _Y_4S1_4S2_400Meta,
          Y_4S1_4S2_400.isAcceptableOrUnknown(
              data['y_4s1_4s2_400'], _Y_4S1_4S2_400Meta));
    } else if (isInserting) {
      context.missing(_Y_4S1_4S2_400Meta);
    }
    if (data.containsKey('y_5s1_5s2_400')) {
      context.handle(
          _Y_5S1_5S2_400Meta,
          Y_5S1_5S2_400.isAcceptableOrUnknown(
              data['y_5s1_5s2_400'], _Y_5S1_5S2_400Meta));
    } else if (isInserting) {
      context.missing(_Y_5S1_5S2_400Meta);
    }
    if (data.containsKey('b_1s1_1s2_400')) {
      context.handle(
          _B_1S1_1S2_400Meta,
          B_1S1_1S2_400.isAcceptableOrUnknown(
              data['b_1s1_1s2_400'], _B_1S1_1S2_400Meta));
    } else if (isInserting) {
      context.missing(_B_1S1_1S2_400Meta);
    }
    if (data.containsKey('b_2s1_2s2_400')) {
      context.handle(
          _B_2S1_2S2_400Meta,
          B_2S1_2S2_400.isAcceptableOrUnknown(
              data['b_2s1_2s2_400'], _B_2S1_2S2_400Meta));
    } else if (isInserting) {
      context.missing(_B_2S1_2S2_400Meta);
    }
    if (data.containsKey('b_3s1_3s2_400')) {
      context.handle(
          _B_3S1_3S2_400Meta,
          B_3S1_3S2_400.isAcceptableOrUnknown(
              data['b_3s1_3s2_400'], _B_3S1_3S2_400Meta));
    } else if (isInserting) {
      context.missing(_B_3S1_3S2_400Meta);
    }
    if (data.containsKey('b_4s1_4s2_400')) {
      context.handle(
          _B_4S1_4S2_400Meta,
          B_4S1_4S2_400.isAcceptableOrUnknown(
              data['b_4s1_4s2_400'], _B_4S1_4S2_400Meta));
    } else if (isInserting) {
      context.missing(_B_4S1_4S2_400Meta);
    }
    if (data.containsKey('b_5s1_5s2_400')) {
      context.handle(
          _B_5S1_5S2_400Meta,
          B_5S1_5S2_400.isAcceptableOrUnknown(
              data['b_5s1_5s2_400'], _B_5S1_5S2_400Meta));
    } else if (isInserting) {
      context.missing(_B_5S1_5S2_400Meta);
    }
    if (data.containsKey('r_1s1_1s2_600')) {
      context.handle(
          _R_1S1_1S2_600Meta,
          R_1S1_1S2_600.isAcceptableOrUnknown(
              data['r_1s1_1s2_600'], _R_1S1_1S2_600Meta));
    } else if (isInserting) {
      context.missing(_R_1S1_1S2_600Meta);
    }
    if (data.containsKey('r_2s1_2s2_600')) {
      context.handle(
          _R_2S1_2S2_600Meta,
          R_2S1_2S2_600.isAcceptableOrUnknown(
              data['r_2s1_2s2_600'], _R_2S1_2S2_600Meta));
    } else if (isInserting) {
      context.missing(_R_2S1_2S2_600Meta);
    }
    if (data.containsKey('r_3s1_3s2_600')) {
      context.handle(
          _R_3S1_3S2_600Meta,
          R_3S1_3S2_600.isAcceptableOrUnknown(
              data['r_3s1_3s2_600'], _R_3S1_3S2_600Meta));
    } else if (isInserting) {
      context.missing(_R_3S1_3S2_600Meta);
    }
    if (data.containsKey('r_4s1_4s2_600')) {
      context.handle(
          _R_4S1_4S2_600Meta,
          R_4S1_4S2_600.isAcceptableOrUnknown(
              data['r_4s1_4s2_600'], _R_4S1_4S2_600Meta));
    } else if (isInserting) {
      context.missing(_R_4S1_4S2_600Meta);
    }
    if (data.containsKey('r_5s1_5s2_600')) {
      context.handle(
          _R_5S1_5S2_600Meta,
          R_5S1_5S2_600.isAcceptableOrUnknown(
              data['r_5s1_5s2_600'], _R_5S1_5S2_600Meta));
    } else if (isInserting) {
      context.missing(_R_5S1_5S2_600Meta);
    }
    if (data.containsKey('y_1s1_1s2_600')) {
      context.handle(
          _Y_1S1_1S2_600Meta,
          Y_1S1_1S2_600.isAcceptableOrUnknown(
              data['y_1s1_1s2_600'], _Y_1S1_1S2_600Meta));
    } else if (isInserting) {
      context.missing(_Y_1S1_1S2_600Meta);
    }
    if (data.containsKey('y_2s1_2s2_600')) {
      context.handle(
          _Y_2S1_2S2_600Meta,
          Y_2S1_2S2_600.isAcceptableOrUnknown(
              data['y_2s1_2s2_600'], _Y_2S1_2S2_600Meta));
    } else if (isInserting) {
      context.missing(_Y_2S1_2S2_600Meta);
    }
    if (data.containsKey('y_3s1_3s2_600')) {
      context.handle(
          _Y_3S1_3S2_600Meta,
          Y_3S1_3S2_600.isAcceptableOrUnknown(
              data['y_3s1_3s2_600'], _Y_3S1_3S2_600Meta));
    } else if (isInserting) {
      context.missing(_Y_3S1_3S2_600Meta);
    }
    if (data.containsKey('y_4s1_4s2_600')) {
      context.handle(
          _Y_4S1_4S2_600Meta,
          Y_4S1_4S2_600.isAcceptableOrUnknown(
              data['y_4s1_4s2_600'], _Y_4S1_4S2_600Meta));
    } else if (isInserting) {
      context.missing(_Y_4S1_4S2_600Meta);
    }
    if (data.containsKey('y_5s1_5s2_600')) {
      context.handle(
          _Y_5S1_5S2_600Meta,
          Y_5S1_5S2_600.isAcceptableOrUnknown(
              data['y_5s1_5s2_600'], _Y_5S1_5S2_600Meta));
    } else if (isInserting) {
      context.missing(_Y_5S1_5S2_600Meta);
    }
    if (data.containsKey('b_1s1_1s2_600')) {
      context.handle(
          _B_1S1_1S2_600Meta,
          B_1S1_1S2_600.isAcceptableOrUnknown(
              data['b_1s1_1s2_600'], _B_1S1_1S2_600Meta));
    } else if (isInserting) {
      context.missing(_B_1S1_1S2_600Meta);
    }
    if (data.containsKey('b_2s1_2s2_600')) {
      context.handle(
          _B_2S1_2S2_600Meta,
          B_2S1_2S2_600.isAcceptableOrUnknown(
              data['b_2s1_2s2_600'], _B_2S1_2S2_600Meta));
    } else if (isInserting) {
      context.missing(_B_2S1_2S2_600Meta);
    }
    if (data.containsKey('b_3s1_3s2_600')) {
      context.handle(
          _B_3S1_3S2_600Meta,
          B_3S1_3S2_600.isAcceptableOrUnknown(
              data['b_3s1_3s2_600'], _B_3S1_3S2_600Meta));
    } else if (isInserting) {
      context.missing(_B_3S1_3S2_600Meta);
    }
    if (data.containsKey('b_4s1_4s2_600')) {
      context.handle(
          _B_4S1_4S2_600Meta,
          B_4S1_4S2_600.isAcceptableOrUnknown(
              data['b_4s1_4s2_600'], _B_4S1_4S2_600Meta));
    } else if (isInserting) {
      context.missing(_B_4S1_4S2_600Meta);
    }
    if (data.containsKey('b_5s1_5s2_600')) {
      context.handle(
          _B_5S1_5S2_600Meta,
          B_5S1_5S2_600.isAcceptableOrUnknown(
              data['b_5s1_5s2_600'], _B_5S1_5S2_600Meta));
    } else if (isInserting) {
      context.missing(_B_5S1_5S2_600Meta);
    }
    if (data.containsKey('r_1s1_1s2_800')) {
      context.handle(
          _R_1S1_1S2_800Meta,
          R_1S1_1S2_800.isAcceptableOrUnknown(
              data['r_1s1_1s2_800'], _R_1S1_1S2_800Meta));
    } else if (isInserting) {
      context.missing(_R_1S1_1S2_800Meta);
    }
    if (data.containsKey('r_2s1_2s2_800')) {
      context.handle(
          _R_2S1_2S2_800Meta,
          R_2S1_2S2_800.isAcceptableOrUnknown(
              data['r_2s1_2s2_800'], _R_2S1_2S2_800Meta));
    } else if (isInserting) {
      context.missing(_R_2S1_2S2_800Meta);
    }
    if (data.containsKey('r_3s1_3s2_800')) {
      context.handle(
          _R_3S1_3S2_800Meta,
          R_3S1_3S2_800.isAcceptableOrUnknown(
              data['r_3s1_3s2_800'], _R_3S1_3S2_800Meta));
    } else if (isInserting) {
      context.missing(_R_3S1_3S2_800Meta);
    }
    if (data.containsKey('r_4s1_4s2_800')) {
      context.handle(
          _R_4S1_4S2_800Meta,
          R_4S1_4S2_800.isAcceptableOrUnknown(
              data['r_4s1_4s2_800'], _R_4S1_4S2_800Meta));
    } else if (isInserting) {
      context.missing(_R_4S1_4S2_800Meta);
    }
    if (data.containsKey('r_5s1_5s2_800')) {
      context.handle(
          _R_5S1_5S2_800Meta,
          R_5S1_5S2_800.isAcceptableOrUnknown(
              data['r_5s1_5s2_800'], _R_5S1_5S2_800Meta));
    } else if (isInserting) {
      context.missing(_R_5S1_5S2_800Meta);
    }
    if (data.containsKey('y_1s1_1s2_800')) {
      context.handle(
          _Y_1S1_1S2_800Meta,
          Y_1S1_1S2_800.isAcceptableOrUnknown(
              data['y_1s1_1s2_800'], _Y_1S1_1S2_800Meta));
    } else if (isInserting) {
      context.missing(_Y_1S1_1S2_800Meta);
    }
    if (data.containsKey('y_2s1_2s2_800')) {
      context.handle(
          _Y_2S1_2S2_800Meta,
          Y_2S1_2S2_800.isAcceptableOrUnknown(
              data['y_2s1_2s2_800'], _Y_2S1_2S2_800Meta));
    } else if (isInserting) {
      context.missing(_Y_2S1_2S2_800Meta);
    }
    if (data.containsKey('y_3s1_3s2_800')) {
      context.handle(
          _Y_3S1_3S2_800Meta,
          Y_3S1_3S2_800.isAcceptableOrUnknown(
              data['y_3s1_3s2_800'], _Y_3S1_3S2_800Meta));
    } else if (isInserting) {
      context.missing(_Y_3S1_3S2_800Meta);
    }
    if (data.containsKey('y_4s1_4s2_800')) {
      context.handle(
          _Y_4S1_4S2_800Meta,
          Y_4S1_4S2_800.isAcceptableOrUnknown(
              data['y_4s1_4s2_800'], _Y_4S1_4S2_800Meta));
    } else if (isInserting) {
      context.missing(_Y_4S1_4S2_800Meta);
    }
    if (data.containsKey('y_5s1_5s2_800')) {
      context.handle(
          _Y_5S1_5S2_800Meta,
          Y_5S1_5S2_800.isAcceptableOrUnknown(
              data['y_5s1_5s2_800'], _Y_5S1_5S2_800Meta));
    } else if (isInserting) {
      context.missing(_Y_5S1_5S2_800Meta);
    }
    if (data.containsKey('b_1s1_1s2_800')) {
      context.handle(
          _B_1S1_1S2_800Meta,
          B_1S1_1S2_800.isAcceptableOrUnknown(
              data['b_1s1_1s2_800'], _B_1S1_1S2_800Meta));
    } else if (isInserting) {
      context.missing(_B_1S1_1S2_800Meta);
    }
    if (data.containsKey('b_2s1_2s2_800')) {
      context.handle(
          _B_2S1_2S2_800Meta,
          B_2S1_2S2_800.isAcceptableOrUnknown(
              data['b_2s1_2s2_800'], _B_2S1_2S2_800Meta));
    } else if (isInserting) {
      context.missing(_B_2S1_2S2_800Meta);
    }
    if (data.containsKey('b_3s1_3s2_800')) {
      context.handle(
          _B_3S1_3S2_800Meta,
          B_3S1_3S2_800.isAcceptableOrUnknown(
              data['b_3s1_3s2_800'], _B_3S1_3S2_800Meta));
    } else if (isInserting) {
      context.missing(_B_3S1_3S2_800Meta);
    }
    if (data.containsKey('b_4s1_4s2_800')) {
      context.handle(
          _B_4S1_4S2_800Meta,
          B_4S1_4S2_800.isAcceptableOrUnknown(
              data['b_4s1_4s2_800'], _B_4S1_4S2_800Meta));
    } else if (isInserting) {
      context.missing(_B_4S1_4S2_800Meta);
    }
    if (data.containsKey('b_5s1_5s2_800')) {
      context.handle(
          _B_5S1_5S2_800Meta,
          B_5S1_5S2_800.isAcceptableOrUnknown(
              data['b_5s1_5s2_800'], _B_5S1_5S2_800Meta));
    } else if (isInserting) {
      context.missing(_B_5S1_5S2_800Meta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CTcoreRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return CTcoreRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CTcoreRLocalDatasourceImplTable createAlias(String alias) {
    return $CTcoreRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class CTcoreKVPLocalData extends DataClass
    implements Insertable<CTcoreKVPLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double R_35;
  final double R_70;
  final double R_105;
  final double R_140;
  final double R_175;
  final double R_210;
  final double R_245;
  final double R_280;
  final double R_315;
  final double R_350;
  final double R_385;
  final double Y_35;
  final double Y_70;
  final double Y_105;
  final double Y_140;
  final double Y_175;
  final double Y_210;
  final double Y_245;
  final double Y_280;
  final double Y_315;
  final double Y_350;
  final double Y_385;
  final double B_35;
  final double B_70;
  final double B_105;
  final double B_140;
  final double B_175;
  final double B_210;
  final double B_245;
  final double B_280;
  final double B_315;
  final double B_350;
  final double B_385;
  CTcoreKVPLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.R_35,
      @required this.R_70,
      @required this.R_105,
      @required this.R_140,
      @required this.R_175,
      @required this.R_210,
      @required this.R_245,
      @required this.R_280,
      @required this.R_315,
      @required this.R_350,
      @required this.R_385,
      @required this.Y_35,
      @required this.Y_70,
      @required this.Y_105,
      @required this.Y_140,
      @required this.Y_175,
      @required this.Y_210,
      @required this.Y_245,
      @required this.Y_280,
      @required this.Y_315,
      @required this.Y_350,
      @required this.Y_385,
      @required this.B_35,
      @required this.B_70,
      @required this.B_105,
      @required this.B_140,
      @required this.B_175,
      @required this.B_210,
      @required this.B_245,
      @required this.B_280,
      @required this.B_315,
      @required this.B_350,
      @required this.B_385});
  factory CTcoreKVPLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return CTcoreKVPLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      R_35: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_35']),
      R_70: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_70']),
      R_105: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_105']),
      R_140: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_140']),
      R_175: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_175']),
      R_210: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_210']),
      R_245: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_245']),
      R_280: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_280']),
      R_315: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_315']),
      R_350: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_350']),
      R_385: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_385']),
      Y_35: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_35']),
      Y_70: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_70']),
      Y_105: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_105']),
      Y_140: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_140']),
      Y_175: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_175']),
      Y_210: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_210']),
      Y_245: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_245']),
      Y_280: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_280']),
      Y_315: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_315']),
      Y_350: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_350']),
      Y_385: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_385']),
      B_35: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_35']),
      B_70: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_70']),
      B_105: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_105']),
      B_140: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_140']),
      B_175: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_175']),
      B_210: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_210']),
      B_245: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_245']),
      B_280: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_280']),
      B_315: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_315']),
      B_350: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_350']),
      B_385: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_385']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || R_35 != null) {
      map['r_35'] = Variable<double>(R_35);
    }
    if (!nullToAbsent || R_70 != null) {
      map['r_70'] = Variable<double>(R_70);
    }
    if (!nullToAbsent || R_105 != null) {
      map['r_105'] = Variable<double>(R_105);
    }
    if (!nullToAbsent || R_140 != null) {
      map['r_140'] = Variable<double>(R_140);
    }
    if (!nullToAbsent || R_175 != null) {
      map['r_175'] = Variable<double>(R_175);
    }
    if (!nullToAbsent || R_210 != null) {
      map['r_210'] = Variable<double>(R_210);
    }
    if (!nullToAbsent || R_245 != null) {
      map['r_245'] = Variable<double>(R_245);
    }
    if (!nullToAbsent || R_280 != null) {
      map['r_280'] = Variable<double>(R_280);
    }
    if (!nullToAbsent || R_315 != null) {
      map['r_315'] = Variable<double>(R_315);
    }
    if (!nullToAbsent || R_350 != null) {
      map['r_350'] = Variable<double>(R_350);
    }
    if (!nullToAbsent || R_385 != null) {
      map['r_385'] = Variable<double>(R_385);
    }
    if (!nullToAbsent || Y_35 != null) {
      map['y_35'] = Variable<double>(Y_35);
    }
    if (!nullToAbsent || Y_70 != null) {
      map['y_70'] = Variable<double>(Y_70);
    }
    if (!nullToAbsent || Y_105 != null) {
      map['y_105'] = Variable<double>(Y_105);
    }
    if (!nullToAbsent || Y_140 != null) {
      map['y_140'] = Variable<double>(Y_140);
    }
    if (!nullToAbsent || Y_175 != null) {
      map['y_175'] = Variable<double>(Y_175);
    }
    if (!nullToAbsent || Y_210 != null) {
      map['y_210'] = Variable<double>(Y_210);
    }
    if (!nullToAbsent || Y_245 != null) {
      map['y_245'] = Variable<double>(Y_245);
    }
    if (!nullToAbsent || Y_280 != null) {
      map['y_280'] = Variable<double>(Y_280);
    }
    if (!nullToAbsent || Y_315 != null) {
      map['y_315'] = Variable<double>(Y_315);
    }
    if (!nullToAbsent || Y_350 != null) {
      map['y_350'] = Variable<double>(Y_350);
    }
    if (!nullToAbsent || Y_385 != null) {
      map['y_385'] = Variable<double>(Y_385);
    }
    if (!nullToAbsent || B_35 != null) {
      map['b_35'] = Variable<double>(B_35);
    }
    if (!nullToAbsent || B_70 != null) {
      map['b_70'] = Variable<double>(B_70);
    }
    if (!nullToAbsent || B_105 != null) {
      map['b_105'] = Variable<double>(B_105);
    }
    if (!nullToAbsent || B_140 != null) {
      map['b_140'] = Variable<double>(B_140);
    }
    if (!nullToAbsent || B_175 != null) {
      map['b_175'] = Variable<double>(B_175);
    }
    if (!nullToAbsent || B_210 != null) {
      map['b_210'] = Variable<double>(B_210);
    }
    if (!nullToAbsent || B_245 != null) {
      map['b_245'] = Variable<double>(B_245);
    }
    if (!nullToAbsent || B_280 != null) {
      map['b_280'] = Variable<double>(B_280);
    }
    if (!nullToAbsent || B_315 != null) {
      map['b_315'] = Variable<double>(B_315);
    }
    if (!nullToAbsent || B_350 != null) {
      map['b_350'] = Variable<double>(B_350);
    }
    if (!nullToAbsent || B_385 != null) {
      map['b_385'] = Variable<double>(B_385);
    }
    return map;
  }

  CTcoreKVPLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return CTcoreKVPLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      R_35: R_35 == null && nullToAbsent ? const Value.absent() : Value(R_35),
      R_70: R_70 == null && nullToAbsent ? const Value.absent() : Value(R_70),
      R_105:
          R_105 == null && nullToAbsent ? const Value.absent() : Value(R_105),
      R_140:
          R_140 == null && nullToAbsent ? const Value.absent() : Value(R_140),
      R_175:
          R_175 == null && nullToAbsent ? const Value.absent() : Value(R_175),
      R_210:
          R_210 == null && nullToAbsent ? const Value.absent() : Value(R_210),
      R_245:
          R_245 == null && nullToAbsent ? const Value.absent() : Value(R_245),
      R_280:
          R_280 == null && nullToAbsent ? const Value.absent() : Value(R_280),
      R_315:
          R_315 == null && nullToAbsent ? const Value.absent() : Value(R_315),
      R_350:
          R_350 == null && nullToAbsent ? const Value.absent() : Value(R_350),
      R_385:
          R_385 == null && nullToAbsent ? const Value.absent() : Value(R_385),
      Y_35: Y_35 == null && nullToAbsent ? const Value.absent() : Value(Y_35),
      Y_70: Y_70 == null && nullToAbsent ? const Value.absent() : Value(Y_70),
      Y_105:
          Y_105 == null && nullToAbsent ? const Value.absent() : Value(Y_105),
      Y_140:
          Y_140 == null && nullToAbsent ? const Value.absent() : Value(Y_140),
      Y_175:
          Y_175 == null && nullToAbsent ? const Value.absent() : Value(Y_175),
      Y_210:
          Y_210 == null && nullToAbsent ? const Value.absent() : Value(Y_210),
      Y_245:
          Y_245 == null && nullToAbsent ? const Value.absent() : Value(Y_245),
      Y_280:
          Y_280 == null && nullToAbsent ? const Value.absent() : Value(Y_280),
      Y_315:
          Y_315 == null && nullToAbsent ? const Value.absent() : Value(Y_315),
      Y_350:
          Y_350 == null && nullToAbsent ? const Value.absent() : Value(Y_350),
      Y_385:
          Y_385 == null && nullToAbsent ? const Value.absent() : Value(Y_385),
      B_35: B_35 == null && nullToAbsent ? const Value.absent() : Value(B_35),
      B_70: B_70 == null && nullToAbsent ? const Value.absent() : Value(B_70),
      B_105:
          B_105 == null && nullToAbsent ? const Value.absent() : Value(B_105),
      B_140:
          B_140 == null && nullToAbsent ? const Value.absent() : Value(B_140),
      B_175:
          B_175 == null && nullToAbsent ? const Value.absent() : Value(B_175),
      B_210:
          B_210 == null && nullToAbsent ? const Value.absent() : Value(B_210),
      B_245:
          B_245 == null && nullToAbsent ? const Value.absent() : Value(B_245),
      B_280:
          B_280 == null && nullToAbsent ? const Value.absent() : Value(B_280),
      B_315:
          B_315 == null && nullToAbsent ? const Value.absent() : Value(B_315),
      B_350:
          B_350 == null && nullToAbsent ? const Value.absent() : Value(B_350),
      B_385:
          B_385 == null && nullToAbsent ? const Value.absent() : Value(B_385),
    );
  }

  factory CTcoreKVPLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CTcoreKVPLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      R_35: serializer.fromJson<double>(json['R_35']),
      R_70: serializer.fromJson<double>(json['R_70']),
      R_105: serializer.fromJson<double>(json['R_105']),
      R_140: serializer.fromJson<double>(json['R_140']),
      R_175: serializer.fromJson<double>(json['R_175']),
      R_210: serializer.fromJson<double>(json['R_210']),
      R_245: serializer.fromJson<double>(json['R_245']),
      R_280: serializer.fromJson<double>(json['R_280']),
      R_315: serializer.fromJson<double>(json['R_315']),
      R_350: serializer.fromJson<double>(json['R_350']),
      R_385: serializer.fromJson<double>(json['R_385']),
      Y_35: serializer.fromJson<double>(json['Y_35']),
      Y_70: serializer.fromJson<double>(json['Y_70']),
      Y_105: serializer.fromJson<double>(json['Y_105']),
      Y_140: serializer.fromJson<double>(json['Y_140']),
      Y_175: serializer.fromJson<double>(json['Y_175']),
      Y_210: serializer.fromJson<double>(json['Y_210']),
      Y_245: serializer.fromJson<double>(json['Y_245']),
      Y_280: serializer.fromJson<double>(json['Y_280']),
      Y_315: serializer.fromJson<double>(json['Y_315']),
      Y_350: serializer.fromJson<double>(json['Y_350']),
      Y_385: serializer.fromJson<double>(json['Y_385']),
      B_35: serializer.fromJson<double>(json['B_35']),
      B_70: serializer.fromJson<double>(json['B_70']),
      B_105: serializer.fromJson<double>(json['B_105']),
      B_140: serializer.fromJson<double>(json['B_140']),
      B_175: serializer.fromJson<double>(json['B_175']),
      B_210: serializer.fromJson<double>(json['B_210']),
      B_245: serializer.fromJson<double>(json['B_245']),
      B_280: serializer.fromJson<double>(json['B_280']),
      B_315: serializer.fromJson<double>(json['B_315']),
      B_350: serializer.fromJson<double>(json['B_350']),
      B_385: serializer.fromJson<double>(json['B_385']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'R_35': serializer.toJson<double>(R_35),
      'R_70': serializer.toJson<double>(R_70),
      'R_105': serializer.toJson<double>(R_105),
      'R_140': serializer.toJson<double>(R_140),
      'R_175': serializer.toJson<double>(R_175),
      'R_210': serializer.toJson<double>(R_210),
      'R_245': serializer.toJson<double>(R_245),
      'R_280': serializer.toJson<double>(R_280),
      'R_315': serializer.toJson<double>(R_315),
      'R_350': serializer.toJson<double>(R_350),
      'R_385': serializer.toJson<double>(R_385),
      'Y_35': serializer.toJson<double>(Y_35),
      'Y_70': serializer.toJson<double>(Y_70),
      'Y_105': serializer.toJson<double>(Y_105),
      'Y_140': serializer.toJson<double>(Y_140),
      'Y_175': serializer.toJson<double>(Y_175),
      'Y_210': serializer.toJson<double>(Y_210),
      'Y_245': serializer.toJson<double>(Y_245),
      'Y_280': serializer.toJson<double>(Y_280),
      'Y_315': serializer.toJson<double>(Y_315),
      'Y_350': serializer.toJson<double>(Y_350),
      'Y_385': serializer.toJson<double>(Y_385),
      'B_35': serializer.toJson<double>(B_35),
      'B_70': serializer.toJson<double>(B_70),
      'B_105': serializer.toJson<double>(B_105),
      'B_140': serializer.toJson<double>(B_140),
      'B_175': serializer.toJson<double>(B_175),
      'B_210': serializer.toJson<double>(B_210),
      'B_245': serializer.toJson<double>(B_245),
      'B_280': serializer.toJson<double>(B_280),
      'B_315': serializer.toJson<double>(B_315),
      'B_350': serializer.toJson<double>(B_350),
      'B_385': serializer.toJson<double>(B_385),
    };
  }

  CTcoreKVPLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double R_35,
          double R_70,
          double R_105,
          double R_140,
          double R_175,
          double R_210,
          double R_245,
          double R_280,
          double R_315,
          double R_350,
          double R_385,
          double Y_35,
          double Y_70,
          double Y_105,
          double Y_140,
          double Y_175,
          double Y_210,
          double Y_245,
          double Y_280,
          double Y_315,
          double Y_350,
          double Y_385,
          double B_35,
          double B_70,
          double B_105,
          double B_140,
          double B_175,
          double B_210,
          double B_245,
          double B_280,
          double B_315,
          double B_350,
          double B_385}) =>
      CTcoreKVPLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        R_35: R_35 ?? this.R_35,
        R_70: R_70 ?? this.R_70,
        R_105: R_105 ?? this.R_105,
        R_140: R_140 ?? this.R_140,
        R_175: R_175 ?? this.R_175,
        R_210: R_210 ?? this.R_210,
        R_245: R_245 ?? this.R_245,
        R_280: R_280 ?? this.R_280,
        R_315: R_315 ?? this.R_315,
        R_350: R_350 ?? this.R_350,
        R_385: R_385 ?? this.R_385,
        Y_35: Y_35 ?? this.Y_35,
        Y_70: Y_70 ?? this.Y_70,
        Y_105: Y_105 ?? this.Y_105,
        Y_140: Y_140 ?? this.Y_140,
        Y_175: Y_175 ?? this.Y_175,
        Y_210: Y_210 ?? this.Y_210,
        Y_245: Y_245 ?? this.Y_245,
        Y_280: Y_280 ?? this.Y_280,
        Y_315: Y_315 ?? this.Y_315,
        Y_350: Y_350 ?? this.Y_350,
        Y_385: Y_385 ?? this.Y_385,
        B_35: B_35 ?? this.B_35,
        B_70: B_70 ?? this.B_70,
        B_105: B_105 ?? this.B_105,
        B_140: B_140 ?? this.B_140,
        B_175: B_175 ?? this.B_175,
        B_210: B_210 ?? this.B_210,
        B_245: B_245 ?? this.B_245,
        B_280: B_280 ?? this.B_280,
        B_315: B_315 ?? this.B_315,
        B_350: B_350 ?? this.B_350,
        B_385: B_385 ?? this.B_385,
      );
  @override
  String toString() {
    return (StringBuffer('CTcoreKVPLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_35: $R_35, ')
          ..write('R_70: $R_70, ')
          ..write('R_105: $R_105, ')
          ..write('R_140: $R_140, ')
          ..write('R_175: $R_175, ')
          ..write('R_210: $R_210, ')
          ..write('R_245: $R_245, ')
          ..write('R_280: $R_280, ')
          ..write('R_315: $R_315, ')
          ..write('R_350: $R_350, ')
          ..write('R_385: $R_385, ')
          ..write('Y_35: $Y_35, ')
          ..write('Y_70: $Y_70, ')
          ..write('Y_105: $Y_105, ')
          ..write('Y_140: $Y_140, ')
          ..write('Y_175: $Y_175, ')
          ..write('Y_210: $Y_210, ')
          ..write('Y_245: $Y_245, ')
          ..write('Y_280: $Y_280, ')
          ..write('Y_315: $Y_315, ')
          ..write('Y_350: $Y_350, ')
          ..write('Y_385: $Y_385, ')
          ..write('B_35: $B_35, ')
          ..write('B_70: $B_70, ')
          ..write('B_105: $B_105, ')
          ..write('B_140: $B_140, ')
          ..write('B_175: $B_175, ')
          ..write('B_210: $B_210, ')
          ..write('B_245: $B_245, ')
          ..write('B_280: $B_280, ')
          ..write('B_315: $B_315, ')
          ..write('B_350: $B_350, ')
          ..write('B_385: $B_385')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_35,
        R_70,
        R_105,
        R_140,
        R_175,
        R_210,
        R_245,
        R_280,
        R_315,
        R_350,
        R_385,
        Y_35,
        Y_70,
        Y_105,
        Y_140,
        Y_175,
        Y_210,
        Y_245,
        Y_280,
        Y_315,
        Y_350,
        Y_385,
        B_35,
        B_70,
        B_105,
        B_140,
        B_175,
        B_210,
        B_245,
        B_280,
        B_315,
        B_350,
        B_385
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CTcoreKVPLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.R_35 == this.R_35 &&
          other.R_70 == this.R_70 &&
          other.R_105 == this.R_105 &&
          other.R_140 == this.R_140 &&
          other.R_175 == this.R_175 &&
          other.R_210 == this.R_210 &&
          other.R_245 == this.R_245 &&
          other.R_280 == this.R_280 &&
          other.R_315 == this.R_315 &&
          other.R_350 == this.R_350 &&
          other.R_385 == this.R_385 &&
          other.Y_35 == this.Y_35 &&
          other.Y_70 == this.Y_70 &&
          other.Y_105 == this.Y_105 &&
          other.Y_140 == this.Y_140 &&
          other.Y_175 == this.Y_175 &&
          other.Y_210 == this.Y_210 &&
          other.Y_245 == this.Y_245 &&
          other.Y_280 == this.Y_280 &&
          other.Y_315 == this.Y_315 &&
          other.Y_350 == this.Y_350 &&
          other.Y_385 == this.Y_385 &&
          other.B_35 == this.B_35 &&
          other.B_70 == this.B_70 &&
          other.B_105 == this.B_105 &&
          other.B_140 == this.B_140 &&
          other.B_175 == this.B_175 &&
          other.B_210 == this.B_210 &&
          other.B_245 == this.B_245 &&
          other.B_280 == this.B_280 &&
          other.B_315 == this.B_315 &&
          other.B_350 == this.B_350 &&
          other.B_385 == this.B_385);
}

class CTcoreKVPLocalDatasourceImplCompanion
    extends UpdateCompanion<CTcoreKVPLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> R_35;
  final Value<double> R_70;
  final Value<double> R_105;
  final Value<double> R_140;
  final Value<double> R_175;
  final Value<double> R_210;
  final Value<double> R_245;
  final Value<double> R_280;
  final Value<double> R_315;
  final Value<double> R_350;
  final Value<double> R_385;
  final Value<double> Y_35;
  final Value<double> Y_70;
  final Value<double> Y_105;
  final Value<double> Y_140;
  final Value<double> Y_175;
  final Value<double> Y_210;
  final Value<double> Y_245;
  final Value<double> Y_280;
  final Value<double> Y_315;
  final Value<double> Y_350;
  final Value<double> Y_385;
  final Value<double> B_35;
  final Value<double> B_70;
  final Value<double> B_105;
  final Value<double> B_140;
  final Value<double> B_175;
  final Value<double> B_210;
  final Value<double> B_245;
  final Value<double> B_280;
  final Value<double> B_315;
  final Value<double> B_350;
  final Value<double> B_385;
  const CTcoreKVPLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.R_35 = const Value.absent(),
    this.R_70 = const Value.absent(),
    this.R_105 = const Value.absent(),
    this.R_140 = const Value.absent(),
    this.R_175 = const Value.absent(),
    this.R_210 = const Value.absent(),
    this.R_245 = const Value.absent(),
    this.R_280 = const Value.absent(),
    this.R_315 = const Value.absent(),
    this.R_350 = const Value.absent(),
    this.R_385 = const Value.absent(),
    this.Y_35 = const Value.absent(),
    this.Y_70 = const Value.absent(),
    this.Y_105 = const Value.absent(),
    this.Y_140 = const Value.absent(),
    this.Y_175 = const Value.absent(),
    this.Y_210 = const Value.absent(),
    this.Y_245 = const Value.absent(),
    this.Y_280 = const Value.absent(),
    this.Y_315 = const Value.absent(),
    this.Y_350 = const Value.absent(),
    this.Y_385 = const Value.absent(),
    this.B_35 = const Value.absent(),
    this.B_70 = const Value.absent(),
    this.B_105 = const Value.absent(),
    this.B_140 = const Value.absent(),
    this.B_175 = const Value.absent(),
    this.B_210 = const Value.absent(),
    this.B_245 = const Value.absent(),
    this.B_280 = const Value.absent(),
    this.B_315 = const Value.absent(),
    this.B_350 = const Value.absent(),
    this.B_385 = const Value.absent(),
  });
  CTcoreKVPLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double R_35,
    @required double R_70,
    @required double R_105,
    @required double R_140,
    @required double R_175,
    @required double R_210,
    @required double R_245,
    @required double R_280,
    @required double R_315,
    @required double R_350,
    @required double R_385,
    @required double Y_35,
    @required double Y_70,
    @required double Y_105,
    @required double Y_140,
    @required double Y_175,
    @required double Y_210,
    @required double Y_245,
    @required double Y_280,
    @required double Y_315,
    @required double Y_350,
    @required double Y_385,
    @required double B_35,
    @required double B_70,
    @required double B_105,
    @required double B_140,
    @required double B_175,
    @required double B_210,
    @required double B_245,
    @required double B_280,
    @required double B_315,
    @required double B_350,
    @required double B_385,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        R_35 = Value(R_35),
        R_70 = Value(R_70),
        R_105 = Value(R_105),
        R_140 = Value(R_140),
        R_175 = Value(R_175),
        R_210 = Value(R_210),
        R_245 = Value(R_245),
        R_280 = Value(R_280),
        R_315 = Value(R_315),
        R_350 = Value(R_350),
        R_385 = Value(R_385),
        Y_35 = Value(Y_35),
        Y_70 = Value(Y_70),
        Y_105 = Value(Y_105),
        Y_140 = Value(Y_140),
        Y_175 = Value(Y_175),
        Y_210 = Value(Y_210),
        Y_245 = Value(Y_245),
        Y_280 = Value(Y_280),
        Y_315 = Value(Y_315),
        Y_350 = Value(Y_350),
        Y_385 = Value(Y_385),
        B_35 = Value(B_35),
        B_70 = Value(B_70),
        B_105 = Value(B_105),
        B_140 = Value(B_140),
        B_175 = Value(B_175),
        B_210 = Value(B_210),
        B_245 = Value(B_245),
        B_280 = Value(B_280),
        B_315 = Value(B_315),
        B_350 = Value(B_350),
        B_385 = Value(B_385);
  static Insertable<CTcoreKVPLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> R_35,
    Expression<double> R_70,
    Expression<double> R_105,
    Expression<double> R_140,
    Expression<double> R_175,
    Expression<double> R_210,
    Expression<double> R_245,
    Expression<double> R_280,
    Expression<double> R_315,
    Expression<double> R_350,
    Expression<double> R_385,
    Expression<double> Y_35,
    Expression<double> Y_70,
    Expression<double> Y_105,
    Expression<double> Y_140,
    Expression<double> Y_175,
    Expression<double> Y_210,
    Expression<double> Y_245,
    Expression<double> Y_280,
    Expression<double> Y_315,
    Expression<double> Y_350,
    Expression<double> Y_385,
    Expression<double> B_35,
    Expression<double> B_70,
    Expression<double> B_105,
    Expression<double> B_140,
    Expression<double> B_175,
    Expression<double> B_210,
    Expression<double> B_245,
    Expression<double> B_280,
    Expression<double> B_315,
    Expression<double> B_350,
    Expression<double> B_385,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (R_35 != null) 'r_35': R_35,
      if (R_70 != null) 'r_70': R_70,
      if (R_105 != null) 'r_105': R_105,
      if (R_140 != null) 'r_140': R_140,
      if (R_175 != null) 'r_175': R_175,
      if (R_210 != null) 'r_210': R_210,
      if (R_245 != null) 'r_245': R_245,
      if (R_280 != null) 'r_280': R_280,
      if (R_315 != null) 'r_315': R_315,
      if (R_350 != null) 'r_350': R_350,
      if (R_385 != null) 'r_385': R_385,
      if (Y_35 != null) 'y_35': Y_35,
      if (Y_70 != null) 'y_70': Y_70,
      if (Y_105 != null) 'y_105': Y_105,
      if (Y_140 != null) 'y_140': Y_140,
      if (Y_175 != null) 'y_175': Y_175,
      if (Y_210 != null) 'y_210': Y_210,
      if (Y_245 != null) 'y_245': Y_245,
      if (Y_280 != null) 'y_280': Y_280,
      if (Y_315 != null) 'y_315': Y_315,
      if (Y_350 != null) 'y_350': Y_350,
      if (Y_385 != null) 'y_385': Y_385,
      if (B_35 != null) 'b_35': B_35,
      if (B_70 != null) 'b_70': B_70,
      if (B_105 != null) 'b_105': B_105,
      if (B_140 != null) 'b_140': B_140,
      if (B_175 != null) 'b_175': B_175,
      if (B_210 != null) 'b_210': B_210,
      if (B_245 != null) 'b_245': B_245,
      if (B_280 != null) 'b_280': B_280,
      if (B_315 != null) 'b_315': B_315,
      if (B_350 != null) 'b_350': B_350,
      if (B_385 != null) 'b_385': B_385,
    });
  }

  CTcoreKVPLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> R_35,
      Value<double> R_70,
      Value<double> R_105,
      Value<double> R_140,
      Value<double> R_175,
      Value<double> R_210,
      Value<double> R_245,
      Value<double> R_280,
      Value<double> R_315,
      Value<double> R_350,
      Value<double> R_385,
      Value<double> Y_35,
      Value<double> Y_70,
      Value<double> Y_105,
      Value<double> Y_140,
      Value<double> Y_175,
      Value<double> Y_210,
      Value<double> Y_245,
      Value<double> Y_280,
      Value<double> Y_315,
      Value<double> Y_350,
      Value<double> Y_385,
      Value<double> B_35,
      Value<double> B_70,
      Value<double> B_105,
      Value<double> B_140,
      Value<double> B_175,
      Value<double> B_210,
      Value<double> B_245,
      Value<double> B_280,
      Value<double> B_315,
      Value<double> B_350,
      Value<double> B_385}) {
    return CTcoreKVPLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      R_35: R_35 ?? this.R_35,
      R_70: R_70 ?? this.R_70,
      R_105: R_105 ?? this.R_105,
      R_140: R_140 ?? this.R_140,
      R_175: R_175 ?? this.R_175,
      R_210: R_210 ?? this.R_210,
      R_245: R_245 ?? this.R_245,
      R_280: R_280 ?? this.R_280,
      R_315: R_315 ?? this.R_315,
      R_350: R_350 ?? this.R_350,
      R_385: R_385 ?? this.R_385,
      Y_35: Y_35 ?? this.Y_35,
      Y_70: Y_70 ?? this.Y_70,
      Y_105: Y_105 ?? this.Y_105,
      Y_140: Y_140 ?? this.Y_140,
      Y_175: Y_175 ?? this.Y_175,
      Y_210: Y_210 ?? this.Y_210,
      Y_245: Y_245 ?? this.Y_245,
      Y_280: Y_280 ?? this.Y_280,
      Y_315: Y_315 ?? this.Y_315,
      Y_350: Y_350 ?? this.Y_350,
      Y_385: Y_385 ?? this.Y_385,
      B_35: B_35 ?? this.B_35,
      B_70: B_70 ?? this.B_70,
      B_105: B_105 ?? this.B_105,
      B_140: B_140 ?? this.B_140,
      B_175: B_175 ?? this.B_175,
      B_210: B_210 ?? this.B_210,
      B_245: B_245 ?? this.B_245,
      B_280: B_280 ?? this.B_280,
      B_315: B_315 ?? this.B_315,
      B_350: B_350 ?? this.B_350,
      B_385: B_385 ?? this.B_385,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (R_35.present) {
      map['r_35'] = Variable<double>(R_35.value);
    }
    if (R_70.present) {
      map['r_70'] = Variable<double>(R_70.value);
    }
    if (R_105.present) {
      map['r_105'] = Variable<double>(R_105.value);
    }
    if (R_140.present) {
      map['r_140'] = Variable<double>(R_140.value);
    }
    if (R_175.present) {
      map['r_175'] = Variable<double>(R_175.value);
    }
    if (R_210.present) {
      map['r_210'] = Variable<double>(R_210.value);
    }
    if (R_245.present) {
      map['r_245'] = Variable<double>(R_245.value);
    }
    if (R_280.present) {
      map['r_280'] = Variable<double>(R_280.value);
    }
    if (R_315.present) {
      map['r_315'] = Variable<double>(R_315.value);
    }
    if (R_350.present) {
      map['r_350'] = Variable<double>(R_350.value);
    }
    if (R_385.present) {
      map['r_385'] = Variable<double>(R_385.value);
    }
    if (Y_35.present) {
      map['y_35'] = Variable<double>(Y_35.value);
    }
    if (Y_70.present) {
      map['y_70'] = Variable<double>(Y_70.value);
    }
    if (Y_105.present) {
      map['y_105'] = Variable<double>(Y_105.value);
    }
    if (Y_140.present) {
      map['y_140'] = Variable<double>(Y_140.value);
    }
    if (Y_175.present) {
      map['y_175'] = Variable<double>(Y_175.value);
    }
    if (Y_210.present) {
      map['y_210'] = Variable<double>(Y_210.value);
    }
    if (Y_245.present) {
      map['y_245'] = Variable<double>(Y_245.value);
    }
    if (Y_280.present) {
      map['y_280'] = Variable<double>(Y_280.value);
    }
    if (Y_315.present) {
      map['y_315'] = Variable<double>(Y_315.value);
    }
    if (Y_350.present) {
      map['y_350'] = Variable<double>(Y_350.value);
    }
    if (Y_385.present) {
      map['y_385'] = Variable<double>(Y_385.value);
    }
    if (B_35.present) {
      map['b_35'] = Variable<double>(B_35.value);
    }
    if (B_70.present) {
      map['b_70'] = Variable<double>(B_70.value);
    }
    if (B_105.present) {
      map['b_105'] = Variable<double>(B_105.value);
    }
    if (B_140.present) {
      map['b_140'] = Variable<double>(B_140.value);
    }
    if (B_175.present) {
      map['b_175'] = Variable<double>(B_175.value);
    }
    if (B_210.present) {
      map['b_210'] = Variable<double>(B_210.value);
    }
    if (B_245.present) {
      map['b_245'] = Variable<double>(B_245.value);
    }
    if (B_280.present) {
      map['b_280'] = Variable<double>(B_280.value);
    }
    if (B_315.present) {
      map['b_315'] = Variable<double>(B_315.value);
    }
    if (B_350.present) {
      map['b_350'] = Variable<double>(B_350.value);
    }
    if (B_385.present) {
      map['b_385'] = Variable<double>(B_385.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CTcoreKVPLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_35: $R_35, ')
          ..write('R_70: $R_70, ')
          ..write('R_105: $R_105, ')
          ..write('R_140: $R_140, ')
          ..write('R_175: $R_175, ')
          ..write('R_210: $R_210, ')
          ..write('R_245: $R_245, ')
          ..write('R_280: $R_280, ')
          ..write('R_315: $R_315, ')
          ..write('R_350: $R_350, ')
          ..write('R_385: $R_385, ')
          ..write('Y_35: $Y_35, ')
          ..write('Y_70: $Y_70, ')
          ..write('Y_105: $Y_105, ')
          ..write('Y_140: $Y_140, ')
          ..write('Y_175: $Y_175, ')
          ..write('Y_210: $Y_210, ')
          ..write('Y_245: $Y_245, ')
          ..write('Y_280: $Y_280, ')
          ..write('Y_315: $Y_315, ')
          ..write('Y_350: $Y_350, ')
          ..write('Y_385: $Y_385, ')
          ..write('B_35: $B_35, ')
          ..write('B_70: $B_70, ')
          ..write('B_105: $B_105, ')
          ..write('B_140: $B_140, ')
          ..write('B_175: $B_175, ')
          ..write('B_210: $B_210, ')
          ..write('B_245: $B_245, ')
          ..write('B_280: $B_280, ')
          ..write('B_315: $B_315, ')
          ..write('B_350: $B_350, ')
          ..write('B_385: $B_385')
          ..write(')'))
        .toString();
  }
}

class $CTcoreKVPLocalDatasourceImplTable extends CTcoreKVPLocalDatasourceImpl
    with TableInfo<$CTcoreKVPLocalDatasourceImplTable, CTcoreKVPLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $CTcoreKVPLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _R_35Meta = const VerificationMeta('R_35');
  GeneratedColumn<double> _R_35;
  @override
  GeneratedColumn<double> get R_35 =>
      _R_35 ??= GeneratedColumn<double>('r_35', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_70Meta = const VerificationMeta('R_70');
  GeneratedColumn<double> _R_70;
  @override
  GeneratedColumn<double> get R_70 =>
      _R_70 ??= GeneratedColumn<double>('r_70', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_105Meta = const VerificationMeta('R_105');
  GeneratedColumn<double> _R_105;
  @override
  GeneratedColumn<double> get R_105 =>
      _R_105 ??= GeneratedColumn<double>('r_105', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_140Meta = const VerificationMeta('R_140');
  GeneratedColumn<double> _R_140;
  @override
  GeneratedColumn<double> get R_140 =>
      _R_140 ??= GeneratedColumn<double>('r_140', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_175Meta = const VerificationMeta('R_175');
  GeneratedColumn<double> _R_175;
  @override
  GeneratedColumn<double> get R_175 =>
      _R_175 ??= GeneratedColumn<double>('r_175', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_210Meta = const VerificationMeta('R_210');
  GeneratedColumn<double> _R_210;
  @override
  GeneratedColumn<double> get R_210 =>
      _R_210 ??= GeneratedColumn<double>('r_210', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_245Meta = const VerificationMeta('R_245');
  GeneratedColumn<double> _R_245;
  @override
  GeneratedColumn<double> get R_245 =>
      _R_245 ??= GeneratedColumn<double>('r_245', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_280Meta = const VerificationMeta('R_280');
  GeneratedColumn<double> _R_280;
  @override
  GeneratedColumn<double> get R_280 =>
      _R_280 ??= GeneratedColumn<double>('r_280', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_315Meta = const VerificationMeta('R_315');
  GeneratedColumn<double> _R_315;
  @override
  GeneratedColumn<double> get R_315 =>
      _R_315 ??= GeneratedColumn<double>('r_315', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_350Meta = const VerificationMeta('R_350');
  GeneratedColumn<double> _R_350;
  @override
  GeneratedColumn<double> get R_350 =>
      _R_350 ??= GeneratedColumn<double>('r_350', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_385Meta = const VerificationMeta('R_385');
  GeneratedColumn<double> _R_385;
  @override
  GeneratedColumn<double> get R_385 =>
      _R_385 ??= GeneratedColumn<double>('r_385', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_35Meta = const VerificationMeta('Y_35');
  GeneratedColumn<double> _Y_35;
  @override
  GeneratedColumn<double> get Y_35 =>
      _Y_35 ??= GeneratedColumn<double>('y_35', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_70Meta = const VerificationMeta('Y_70');
  GeneratedColumn<double> _Y_70;
  @override
  GeneratedColumn<double> get Y_70 =>
      _Y_70 ??= GeneratedColumn<double>('y_70', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_105Meta = const VerificationMeta('Y_105');
  GeneratedColumn<double> _Y_105;
  @override
  GeneratedColumn<double> get Y_105 =>
      _Y_105 ??= GeneratedColumn<double>('y_105', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_140Meta = const VerificationMeta('Y_140');
  GeneratedColumn<double> _Y_140;
  @override
  GeneratedColumn<double> get Y_140 =>
      _Y_140 ??= GeneratedColumn<double>('y_140', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_175Meta = const VerificationMeta('Y_175');
  GeneratedColumn<double> _Y_175;
  @override
  GeneratedColumn<double> get Y_175 =>
      _Y_175 ??= GeneratedColumn<double>('y_175', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_210Meta = const VerificationMeta('Y_210');
  GeneratedColumn<double> _Y_210;
  @override
  GeneratedColumn<double> get Y_210 =>
      _Y_210 ??= GeneratedColumn<double>('y_210', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_245Meta = const VerificationMeta('Y_245');
  GeneratedColumn<double> _Y_245;
  @override
  GeneratedColumn<double> get Y_245 =>
      _Y_245 ??= GeneratedColumn<double>('y_245', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_280Meta = const VerificationMeta('Y_280');
  GeneratedColumn<double> _Y_280;
  @override
  GeneratedColumn<double> get Y_280 =>
      _Y_280 ??= GeneratedColumn<double>('y_280', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_315Meta = const VerificationMeta('Y_315');
  GeneratedColumn<double> _Y_315;
  @override
  GeneratedColumn<double> get Y_315 =>
      _Y_315 ??= GeneratedColumn<double>('y_315', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_350Meta = const VerificationMeta('Y_350');
  GeneratedColumn<double> _Y_350;
  @override
  GeneratedColumn<double> get Y_350 =>
      _Y_350 ??= GeneratedColumn<double>('y_350', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_385Meta = const VerificationMeta('Y_385');
  GeneratedColumn<double> _Y_385;
  @override
  GeneratedColumn<double> get Y_385 =>
      _Y_385 ??= GeneratedColumn<double>('y_385', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_35Meta = const VerificationMeta('B_35');
  GeneratedColumn<double> _B_35;
  @override
  GeneratedColumn<double> get B_35 =>
      _B_35 ??= GeneratedColumn<double>('b_35', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_70Meta = const VerificationMeta('B_70');
  GeneratedColumn<double> _B_70;
  @override
  GeneratedColumn<double> get B_70 =>
      _B_70 ??= GeneratedColumn<double>('b_70', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_105Meta = const VerificationMeta('B_105');
  GeneratedColumn<double> _B_105;
  @override
  GeneratedColumn<double> get B_105 =>
      _B_105 ??= GeneratedColumn<double>('b_105', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_140Meta = const VerificationMeta('B_140');
  GeneratedColumn<double> _B_140;
  @override
  GeneratedColumn<double> get B_140 =>
      _B_140 ??= GeneratedColumn<double>('b_140', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_175Meta = const VerificationMeta('B_175');
  GeneratedColumn<double> _B_175;
  @override
  GeneratedColumn<double> get B_175 =>
      _B_175 ??= GeneratedColumn<double>('b_175', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_210Meta = const VerificationMeta('B_210');
  GeneratedColumn<double> _B_210;
  @override
  GeneratedColumn<double> get B_210 =>
      _B_210 ??= GeneratedColumn<double>('b_210', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_245Meta = const VerificationMeta('B_245');
  GeneratedColumn<double> _B_245;
  @override
  GeneratedColumn<double> get B_245 =>
      _B_245 ??= GeneratedColumn<double>('b_245', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_280Meta = const VerificationMeta('B_280');
  GeneratedColumn<double> _B_280;
  @override
  GeneratedColumn<double> get B_280 =>
      _B_280 ??= GeneratedColumn<double>('b_280', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_315Meta = const VerificationMeta('B_315');
  GeneratedColumn<double> _B_315;
  @override
  GeneratedColumn<double> get B_315 =>
      _B_315 ??= GeneratedColumn<double>('b_315', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_350Meta = const VerificationMeta('B_350');
  GeneratedColumn<double> _B_350;
  @override
  GeneratedColumn<double> get B_350 =>
      _B_350 ??= GeneratedColumn<double>('b_350', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_385Meta = const VerificationMeta('B_385');
  GeneratedColumn<double> _B_385;
  @override
  GeneratedColumn<double> get B_385 =>
      _B_385 ??= GeneratedColumn<double>('b_385', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_35,
        R_70,
        R_105,
        R_140,
        R_175,
        R_210,
        R_245,
        R_280,
        R_315,
        R_350,
        R_385,
        Y_35,
        Y_70,
        Y_105,
        Y_140,
        Y_175,
        Y_210,
        Y_245,
        Y_280,
        Y_315,
        Y_350,
        Y_385,
        B_35,
        B_70,
        B_105,
        B_140,
        B_175,
        B_210,
        B_245,
        B_280,
        B_315,
        B_350,
        B_385
      ];
  @override
  String get aliasedName => _alias ?? 'c_tcore_k_v_p_local_datasource_impl';
  @override
  String get actualTableName => 'c_tcore_k_v_p_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<CTcoreKVPLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('r_35')) {
      context.handle(
          _R_35Meta, R_35.isAcceptableOrUnknown(data['r_35'], _R_35Meta));
    } else if (isInserting) {
      context.missing(_R_35Meta);
    }
    if (data.containsKey('r_70')) {
      context.handle(
          _R_70Meta, R_70.isAcceptableOrUnknown(data['r_70'], _R_70Meta));
    } else if (isInserting) {
      context.missing(_R_70Meta);
    }
    if (data.containsKey('r_105')) {
      context.handle(
          _R_105Meta, R_105.isAcceptableOrUnknown(data['r_105'], _R_105Meta));
    } else if (isInserting) {
      context.missing(_R_105Meta);
    }
    if (data.containsKey('r_140')) {
      context.handle(
          _R_140Meta, R_140.isAcceptableOrUnknown(data['r_140'], _R_140Meta));
    } else if (isInserting) {
      context.missing(_R_140Meta);
    }
    if (data.containsKey('r_175')) {
      context.handle(
          _R_175Meta, R_175.isAcceptableOrUnknown(data['r_175'], _R_175Meta));
    } else if (isInserting) {
      context.missing(_R_175Meta);
    }
    if (data.containsKey('r_210')) {
      context.handle(
          _R_210Meta, R_210.isAcceptableOrUnknown(data['r_210'], _R_210Meta));
    } else if (isInserting) {
      context.missing(_R_210Meta);
    }
    if (data.containsKey('r_245')) {
      context.handle(
          _R_245Meta, R_245.isAcceptableOrUnknown(data['r_245'], _R_245Meta));
    } else if (isInserting) {
      context.missing(_R_245Meta);
    }
    if (data.containsKey('r_280')) {
      context.handle(
          _R_280Meta, R_280.isAcceptableOrUnknown(data['r_280'], _R_280Meta));
    } else if (isInserting) {
      context.missing(_R_280Meta);
    }
    if (data.containsKey('r_315')) {
      context.handle(
          _R_315Meta, R_315.isAcceptableOrUnknown(data['r_315'], _R_315Meta));
    } else if (isInserting) {
      context.missing(_R_315Meta);
    }
    if (data.containsKey('r_350')) {
      context.handle(
          _R_350Meta, R_350.isAcceptableOrUnknown(data['r_350'], _R_350Meta));
    } else if (isInserting) {
      context.missing(_R_350Meta);
    }
    if (data.containsKey('r_385')) {
      context.handle(
          _R_385Meta, R_385.isAcceptableOrUnknown(data['r_385'], _R_385Meta));
    } else if (isInserting) {
      context.missing(_R_385Meta);
    }
    if (data.containsKey('y_35')) {
      context.handle(
          _Y_35Meta, Y_35.isAcceptableOrUnknown(data['y_35'], _Y_35Meta));
    } else if (isInserting) {
      context.missing(_Y_35Meta);
    }
    if (data.containsKey('y_70')) {
      context.handle(
          _Y_70Meta, Y_70.isAcceptableOrUnknown(data['y_70'], _Y_70Meta));
    } else if (isInserting) {
      context.missing(_Y_70Meta);
    }
    if (data.containsKey('y_105')) {
      context.handle(
          _Y_105Meta, Y_105.isAcceptableOrUnknown(data['y_105'], _Y_105Meta));
    } else if (isInserting) {
      context.missing(_Y_105Meta);
    }
    if (data.containsKey('y_140')) {
      context.handle(
          _Y_140Meta, Y_140.isAcceptableOrUnknown(data['y_140'], _Y_140Meta));
    } else if (isInserting) {
      context.missing(_Y_140Meta);
    }
    if (data.containsKey('y_175')) {
      context.handle(
          _Y_175Meta, Y_175.isAcceptableOrUnknown(data['y_175'], _Y_175Meta));
    } else if (isInserting) {
      context.missing(_Y_175Meta);
    }
    if (data.containsKey('y_210')) {
      context.handle(
          _Y_210Meta, Y_210.isAcceptableOrUnknown(data['y_210'], _Y_210Meta));
    } else if (isInserting) {
      context.missing(_Y_210Meta);
    }
    if (data.containsKey('y_245')) {
      context.handle(
          _Y_245Meta, Y_245.isAcceptableOrUnknown(data['y_245'], _Y_245Meta));
    } else if (isInserting) {
      context.missing(_Y_245Meta);
    }
    if (data.containsKey('y_280')) {
      context.handle(
          _Y_280Meta, Y_280.isAcceptableOrUnknown(data['y_280'], _Y_280Meta));
    } else if (isInserting) {
      context.missing(_Y_280Meta);
    }
    if (data.containsKey('y_315')) {
      context.handle(
          _Y_315Meta, Y_315.isAcceptableOrUnknown(data['y_315'], _Y_315Meta));
    } else if (isInserting) {
      context.missing(_Y_315Meta);
    }
    if (data.containsKey('y_350')) {
      context.handle(
          _Y_350Meta, Y_350.isAcceptableOrUnknown(data['y_350'], _Y_350Meta));
    } else if (isInserting) {
      context.missing(_Y_350Meta);
    }
    if (data.containsKey('y_385')) {
      context.handle(
          _Y_385Meta, Y_385.isAcceptableOrUnknown(data['y_385'], _Y_385Meta));
    } else if (isInserting) {
      context.missing(_Y_385Meta);
    }
    if (data.containsKey('b_35')) {
      context.handle(
          _B_35Meta, B_35.isAcceptableOrUnknown(data['b_35'], _B_35Meta));
    } else if (isInserting) {
      context.missing(_B_35Meta);
    }
    if (data.containsKey('b_70')) {
      context.handle(
          _B_70Meta, B_70.isAcceptableOrUnknown(data['b_70'], _B_70Meta));
    } else if (isInserting) {
      context.missing(_B_70Meta);
    }
    if (data.containsKey('b_105')) {
      context.handle(
          _B_105Meta, B_105.isAcceptableOrUnknown(data['b_105'], _B_105Meta));
    } else if (isInserting) {
      context.missing(_B_105Meta);
    }
    if (data.containsKey('b_140')) {
      context.handle(
          _B_140Meta, B_140.isAcceptableOrUnknown(data['b_140'], _B_140Meta));
    } else if (isInserting) {
      context.missing(_B_140Meta);
    }
    if (data.containsKey('b_175')) {
      context.handle(
          _B_175Meta, B_175.isAcceptableOrUnknown(data['b_175'], _B_175Meta));
    } else if (isInserting) {
      context.missing(_B_175Meta);
    }
    if (data.containsKey('b_210')) {
      context.handle(
          _B_210Meta, B_210.isAcceptableOrUnknown(data['b_210'], _B_210Meta));
    } else if (isInserting) {
      context.missing(_B_210Meta);
    }
    if (data.containsKey('b_245')) {
      context.handle(
          _B_245Meta, B_245.isAcceptableOrUnknown(data['b_245'], _B_245Meta));
    } else if (isInserting) {
      context.missing(_B_245Meta);
    }
    if (data.containsKey('b_280')) {
      context.handle(
          _B_280Meta, B_280.isAcceptableOrUnknown(data['b_280'], _B_280Meta));
    } else if (isInserting) {
      context.missing(_B_280Meta);
    }
    if (data.containsKey('b_315')) {
      context.handle(
          _B_315Meta, B_315.isAcceptableOrUnknown(data['b_315'], _B_315Meta));
    } else if (isInserting) {
      context.missing(_B_315Meta);
    }
    if (data.containsKey('b_350')) {
      context.handle(
          _B_350Meta, B_350.isAcceptableOrUnknown(data['b_350'], _B_350Meta));
    } else if (isInserting) {
      context.missing(_B_350Meta);
    }
    if (data.containsKey('b_385')) {
      context.handle(
          _B_385Meta, B_385.isAcceptableOrUnknown(data['b_385'], _B_385Meta));
    } else if (isInserting) {
      context.missing(_B_385Meta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CTcoreKVPLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return CTcoreKVPLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CTcoreKVPLocalDatasourceImplTable createAlias(String alias) {
    return $CTcoreKVPLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class CTtapLocalData extends DataClass implements Insertable<CTtapLocalData> {
  final int databaseID;
  final int id;
  final String tapName;
  final int ratio;
  final int kneePointVoltage;
  final int leakageCurrent;
  final int coreRef;
  final DateTime updateDate;
  CTtapLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.tapName,
      @required this.ratio,
      @required this.kneePointVoltage,
      @required this.leakageCurrent,
      @required this.coreRef,
      @required this.updateDate});
  factory CTtapLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return CTtapLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      tapName: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_name']),
      ratio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ratio']),
      kneePointVoltage: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}knee_point_voltage']),
      leakageCurrent: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}leakage_current']),
      coreRef: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}core_ref']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || tapName != null) {
      map['tap_name'] = Variable<String>(tapName);
    }
    if (!nullToAbsent || ratio != null) {
      map['ratio'] = Variable<int>(ratio);
    }
    if (!nullToAbsent || kneePointVoltage != null) {
      map['knee_point_voltage'] = Variable<int>(kneePointVoltage);
    }
    if (!nullToAbsent || leakageCurrent != null) {
      map['leakage_current'] = Variable<int>(leakageCurrent);
    }
    if (!nullToAbsent || coreRef != null) {
      map['core_ref'] = Variable<int>(coreRef);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  CT_tap_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return CT_tap_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      tapName: tapName == null && nullToAbsent
          ? const Value.absent()
          : Value(tapName),
      ratio:
          ratio == null && nullToAbsent ? const Value.absent() : Value(ratio),
      kneePointVoltage: kneePointVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(kneePointVoltage),
      leakageCurrent: leakageCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(leakageCurrent),
      coreRef: coreRef == null && nullToAbsent
          ? const Value.absent()
          : Value(coreRef),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory CTtapLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CTtapLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      tapName: serializer.fromJson<String>(json['tapName']),
      ratio: serializer.fromJson<int>(json['ratio']),
      kneePointVoltage: serializer.fromJson<int>(json['kneePointVoltage']),
      leakageCurrent: serializer.fromJson<int>(json['leakageCurrent']),
      coreRef: serializer.fromJson<int>(json['coreRef']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'tapName': serializer.toJson<String>(tapName),
      'ratio': serializer.toJson<int>(ratio),
      'kneePointVoltage': serializer.toJson<int>(kneePointVoltage),
      'leakageCurrent': serializer.toJson<int>(leakageCurrent),
      'coreRef': serializer.toJson<int>(coreRef),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  CTtapLocalData copyWith(
          {int databaseID,
          int id,
          String tapName,
          int ratio,
          int kneePointVoltage,
          int leakageCurrent,
          int coreRef,
          DateTime updateDate}) =>
      CTtapLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        tapName: tapName ?? this.tapName,
        ratio: ratio ?? this.ratio,
        kneePointVoltage: kneePointVoltage ?? this.kneePointVoltage,
        leakageCurrent: leakageCurrent ?? this.leakageCurrent,
        coreRef: coreRef ?? this.coreRef,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('CTtapLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('tapName: $tapName, ')
          ..write('ratio: $ratio, ')
          ..write('kneePointVoltage: $kneePointVoltage, ')
          ..write('leakageCurrent: $leakageCurrent, ')
          ..write('coreRef: $coreRef, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, tapName, ratio,
      kneePointVoltage, leakageCurrent, coreRef, updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CTtapLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.tapName == this.tapName &&
          other.ratio == this.ratio &&
          other.kneePointVoltage == this.kneePointVoltage &&
          other.leakageCurrent == this.leakageCurrent &&
          other.coreRef == this.coreRef &&
          other.updateDate == this.updateDate);
}

class CT_tap_LocalDatasourceImplCompanion
    extends UpdateCompanion<CTtapLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> tapName;
  final Value<int> ratio;
  final Value<int> kneePointVoltage;
  final Value<int> leakageCurrent;
  final Value<int> coreRef;
  final Value<DateTime> updateDate;
  const CT_tap_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.tapName = const Value.absent(),
    this.ratio = const Value.absent(),
    this.kneePointVoltage = const Value.absent(),
    this.leakageCurrent = const Value.absent(),
    this.coreRef = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  CT_tap_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String tapName,
    @required int ratio,
    @required int kneePointVoltage,
    @required int leakageCurrent,
    @required int coreRef,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        tapName = Value(tapName),
        ratio = Value(ratio),
        kneePointVoltage = Value(kneePointVoltage),
        leakageCurrent = Value(leakageCurrent),
        coreRef = Value(coreRef);
  static Insertable<CTtapLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> tapName,
    Expression<int> ratio,
    Expression<int> kneePointVoltage,
    Expression<int> leakageCurrent,
    Expression<int> coreRef,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (tapName != null) 'tap_name': tapName,
      if (ratio != null) 'ratio': ratio,
      if (kneePointVoltage != null) 'knee_point_voltage': kneePointVoltage,
      if (leakageCurrent != null) 'leakage_current': leakageCurrent,
      if (coreRef != null) 'core_ref': coreRef,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  CT_tap_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> tapName,
      Value<int> ratio,
      Value<int> kneePointVoltage,
      Value<int> leakageCurrent,
      Value<int> coreRef,
      Value<DateTime> updateDate}) {
    return CT_tap_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      tapName: tapName ?? this.tapName,
      ratio: ratio ?? this.ratio,
      kneePointVoltage: kneePointVoltage ?? this.kneePointVoltage,
      leakageCurrent: leakageCurrent ?? this.leakageCurrent,
      coreRef: coreRef ?? this.coreRef,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (tapName.present) {
      map['tap_name'] = Variable<String>(tapName.value);
    }
    if (ratio.present) {
      map['ratio'] = Variable<int>(ratio.value);
    }
    if (kneePointVoltage.present) {
      map['knee_point_voltage'] = Variable<int>(kneePointVoltage.value);
    }
    if (leakageCurrent.present) {
      map['leakage_current'] = Variable<int>(leakageCurrent.value);
    }
    if (coreRef.present) {
      map['core_ref'] = Variable<int>(coreRef.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CT_tap_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('tapName: $tapName, ')
          ..write('ratio: $ratio, ')
          ..write('kneePointVoltage: $kneePointVoltage, ')
          ..write('leakageCurrent: $leakageCurrent, ')
          ..write('coreRef: $coreRef, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $CT_tap_LocalDatasourceImplTable extends CT_tap_LocalDatasourceImpl
    with TableInfo<$CT_tap_LocalDatasourceImplTable, CTtapLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $CT_tap_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _tapNameMeta = const VerificationMeta('tapName');
  GeneratedColumn<String> _tapName;
  @override
  GeneratedColumn<String> get tapName => _tapName ??= GeneratedColumn<String>(
      'tap_name', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratioMeta = const VerificationMeta('ratio');
  GeneratedColumn<int> _ratio;
  @override
  GeneratedColumn<int> get ratio =>
      _ratio ??= GeneratedColumn<int>('ratio', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _kneePointVoltageMeta =
      const VerificationMeta('kneePointVoltage');
  GeneratedColumn<int> _kneePointVoltage;
  @override
  GeneratedColumn<int> get kneePointVoltage => _kneePointVoltage ??=
      GeneratedColumn<int>('knee_point_voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _leakageCurrentMeta =
      const VerificationMeta('leakageCurrent');
  GeneratedColumn<int> _leakageCurrent;
  @override
  GeneratedColumn<int> get leakageCurrent => _leakageCurrent ??=
      GeneratedColumn<int>('leakage_current', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _coreRefMeta = const VerificationMeta('coreRef');
  GeneratedColumn<int> _coreRef;
  @override
  GeneratedColumn<int> get coreRef =>
      _coreRef ??= GeneratedColumn<int>('core_ref', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        tapName,
        ratio,
        kneePointVoltage,
        leakageCurrent,
        coreRef,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'c_t_tap_local_datasource_impl';
  @override
  String get actualTableName => 'c_t_tap_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<CTtapLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tap_name')) {
      context.handle(_tapNameMeta,
          tapName.isAcceptableOrUnknown(data['tap_name'], _tapNameMeta));
    } else if (isInserting) {
      context.missing(_tapNameMeta);
    }
    if (data.containsKey('ratio')) {
      context.handle(
          _ratioMeta, ratio.isAcceptableOrUnknown(data['ratio'], _ratioMeta));
    } else if (isInserting) {
      context.missing(_ratioMeta);
    }
    if (data.containsKey('knee_point_voltage')) {
      context.handle(
          _kneePointVoltageMeta,
          kneePointVoltage.isAcceptableOrUnknown(
              data['knee_point_voltage'], _kneePointVoltageMeta));
    } else if (isInserting) {
      context.missing(_kneePointVoltageMeta);
    }
    if (data.containsKey('leakage_current')) {
      context.handle(
          _leakageCurrentMeta,
          leakageCurrent.isAcceptableOrUnknown(
              data['leakage_current'], _leakageCurrentMeta));
    } else if (isInserting) {
      context.missing(_leakageCurrentMeta);
    }
    if (data.containsKey('core_ref')) {
      context.handle(_coreRefMeta,
          coreRef.isAcceptableOrUnknown(data['core_ref'], _coreRefMeta));
    } else if (isInserting) {
      context.missing(_coreRefMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CTtapLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return CTtapLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CT_tap_LocalDatasourceImplTable createAlias(String alias) {
    return $CT_tap_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PTLocalData extends DataClass implements Insertable<PTLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String make;
  final String panel;
  final String serialNo_Rph;
  final String serialNo_Yph;
  final String serialNo_Bph;
  final int pRatio;
  final int sRatio;
  final int ratedVoltage;
  final int noOfCores;
  final int yom;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  PTLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.make,
      @required this.panel,
      @required this.serialNo_Rph,
      @required this.serialNo_Yph,
      @required this.serialNo_Bph,
      @required this.pRatio,
      @required this.sRatio,
      @required this.ratedVoltage,
      @required this.noOfCores,
      @required this.yom,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory PTLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PTLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      serialNo_Rph: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no_rph']),
      serialNo_Yph: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no_yph']),
      serialNo_Bph: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no_bph']),
      pRatio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}p_ratio']),
      sRatio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}s_ratio']),
      ratedVoltage: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage']),
      noOfCores: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_cores']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || serialNo_Rph != null) {
      map['serial_no_rph'] = Variable<String>(serialNo_Rph);
    }
    if (!nullToAbsent || serialNo_Yph != null) {
      map['serial_no_yph'] = Variable<String>(serialNo_Yph);
    }
    if (!nullToAbsent || serialNo_Bph != null) {
      map['serial_no_bph'] = Variable<String>(serialNo_Bph);
    }
    if (!nullToAbsent || pRatio != null) {
      map['p_ratio'] = Variable<int>(pRatio);
    }
    if (!nullToAbsent || sRatio != null) {
      map['s_ratio'] = Variable<int>(sRatio);
    }
    if (!nullToAbsent || ratedVoltage != null) {
      map['rated_voltage'] = Variable<int>(ratedVoltage);
    }
    if (!nullToAbsent || noOfCores != null) {
      map['no_of_cores'] = Variable<int>(noOfCores);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  PTLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PTLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      serialNo_Rph: serialNo_Rph == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo_Rph),
      serialNo_Yph: serialNo_Yph == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo_Yph),
      serialNo_Bph: serialNo_Bph == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo_Bph),
      pRatio:
          pRatio == null && nullToAbsent ? const Value.absent() : Value(pRatio),
      sRatio:
          sRatio == null && nullToAbsent ? const Value.absent() : Value(sRatio),
      ratedVoltage: ratedVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage),
      noOfCores: noOfCores == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfCores),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory PTLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PTLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      make: serializer.fromJson<String>(json['make']),
      panel: serializer.fromJson<String>(json['panel']),
      serialNo_Rph: serializer.fromJson<String>(json['serialNo_Rph']),
      serialNo_Yph: serializer.fromJson<String>(json['serialNo_Yph']),
      serialNo_Bph: serializer.fromJson<String>(json['serialNo_Bph']),
      pRatio: serializer.fromJson<int>(json['pRatio']),
      sRatio: serializer.fromJson<int>(json['sRatio']),
      ratedVoltage: serializer.fromJson<int>(json['ratedVoltage']),
      noOfCores: serializer.fromJson<int>(json['noOfCores']),
      yom: serializer.fromJson<int>(json['yom']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'make': serializer.toJson<String>(make),
      'panel': serializer.toJson<String>(panel),
      'serialNo_Rph': serializer.toJson<String>(serialNo_Rph),
      'serialNo_Yph': serializer.toJson<String>(serialNo_Yph),
      'serialNo_Bph': serializer.toJson<String>(serialNo_Bph),
      'pRatio': serializer.toJson<int>(pRatio),
      'sRatio': serializer.toJson<int>(sRatio),
      'ratedVoltage': serializer.toJson<int>(ratedVoltage),
      'noOfCores': serializer.toJson<int>(noOfCores),
      'yom': serializer.toJson<int>(yom),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  PTLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String make,
          String panel,
          String serialNo_Rph,
          String serialNo_Yph,
          String serialNo_Bph,
          int pRatio,
          int sRatio,
          int ratedVoltage,
          int noOfCores,
          int yom,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      PTLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        make: make ?? this.make,
        panel: panel ?? this.panel,
        serialNo_Rph: serialNo_Rph ?? this.serialNo_Rph,
        serialNo_Yph: serialNo_Yph ?? this.serialNo_Yph,
        serialNo_Bph: serialNo_Bph ?? this.serialNo_Bph,
        pRatio: pRatio ?? this.pRatio,
        sRatio: sRatio ?? this.sRatio,
        ratedVoltage: ratedVoltage ?? this.ratedVoltage,
        noOfCores: noOfCores ?? this.noOfCores,
        yom: yom ?? this.yom,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('PTLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('make: $make, ')
          ..write('panel: $panel, ')
          ..write('serialNo_Rph: $serialNo_Rph, ')
          ..write('serialNo_Yph: $serialNo_Yph, ')
          ..write('serialNo_Bph: $serialNo_Bph, ')
          ..write('pRatio: $pRatio, ')
          ..write('sRatio: $sRatio, ')
          ..write('ratedVoltage: $ratedVoltage, ')
          ..write('noOfCores: $noOfCores, ')
          ..write('yom: $yom, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        make,
        panel,
        serialNo_Rph,
        serialNo_Yph,
        serialNo_Bph,
        pRatio,
        sRatio,
        ratedVoltage,
        noOfCores,
        yom,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PTLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.make == this.make &&
          other.panel == this.panel &&
          other.serialNo_Rph == this.serialNo_Rph &&
          other.serialNo_Yph == this.serialNo_Yph &&
          other.serialNo_Bph == this.serialNo_Bph &&
          other.pRatio == this.pRatio &&
          other.sRatio == this.sRatio &&
          other.ratedVoltage == this.ratedVoltage &&
          other.noOfCores == this.noOfCores &&
          other.yom == this.yom &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class PTLocalDatasourceImplCompanion extends UpdateCompanion<PTLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> make;
  final Value<String> panel;
  final Value<String> serialNo_Rph;
  final Value<String> serialNo_Yph;
  final Value<String> serialNo_Bph;
  final Value<int> pRatio;
  final Value<int> sRatio;
  final Value<int> ratedVoltage;
  final Value<int> noOfCores;
  final Value<int> yom;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const PTLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.make = const Value.absent(),
    this.panel = const Value.absent(),
    this.serialNo_Rph = const Value.absent(),
    this.serialNo_Yph = const Value.absent(),
    this.serialNo_Bph = const Value.absent(),
    this.pRatio = const Value.absent(),
    this.sRatio = const Value.absent(),
    this.ratedVoltage = const Value.absent(),
    this.noOfCores = const Value.absent(),
    this.yom = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  PTLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String make,
    @required String panel,
    @required String serialNo_Rph,
    @required String serialNo_Yph,
    @required String serialNo_Bph,
    @required int pRatio,
    @required int sRatio,
    @required int ratedVoltage,
    @required int noOfCores,
    @required int yom,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        make = Value(make),
        panel = Value(panel),
        serialNo_Rph = Value(serialNo_Rph),
        serialNo_Yph = Value(serialNo_Yph),
        serialNo_Bph = Value(serialNo_Bph),
        pRatio = Value(pRatio),
        sRatio = Value(sRatio),
        ratedVoltage = Value(ratedVoltage),
        noOfCores = Value(noOfCores),
        yom = Value(yom),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<PTLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> make,
    Expression<String> panel,
    Expression<String> serialNo_Rph,
    Expression<String> serialNo_Yph,
    Expression<String> serialNo_Bph,
    Expression<int> pRatio,
    Expression<int> sRatio,
    Expression<int> ratedVoltage,
    Expression<int> noOfCores,
    Expression<int> yom,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (make != null) 'make': make,
      if (panel != null) 'panel': panel,
      if (serialNo_Rph != null) 'serial_no_rph': serialNo_Rph,
      if (serialNo_Yph != null) 'serial_no_yph': serialNo_Yph,
      if (serialNo_Bph != null) 'serial_no_bph': serialNo_Bph,
      if (pRatio != null) 'p_ratio': pRatio,
      if (sRatio != null) 's_ratio': sRatio,
      if (ratedVoltage != null) 'rated_voltage': ratedVoltage,
      if (noOfCores != null) 'no_of_cores': noOfCores,
      if (yom != null) 'yom': yom,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  PTLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> make,
      Value<String> panel,
      Value<String> serialNo_Rph,
      Value<String> serialNo_Yph,
      Value<String> serialNo_Bph,
      Value<int> pRatio,
      Value<int> sRatio,
      Value<int> ratedVoltage,
      Value<int> noOfCores,
      Value<int> yom,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return PTLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      make: make ?? this.make,
      panel: panel ?? this.panel,
      serialNo_Rph: serialNo_Rph ?? this.serialNo_Rph,
      serialNo_Yph: serialNo_Yph ?? this.serialNo_Yph,
      serialNo_Bph: serialNo_Bph ?? this.serialNo_Bph,
      pRatio: pRatio ?? this.pRatio,
      sRatio: sRatio ?? this.sRatio,
      ratedVoltage: ratedVoltage ?? this.ratedVoltage,
      noOfCores: noOfCores ?? this.noOfCores,
      yom: yom ?? this.yom,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (serialNo_Rph.present) {
      map['serial_no_rph'] = Variable<String>(serialNo_Rph.value);
    }
    if (serialNo_Yph.present) {
      map['serial_no_yph'] = Variable<String>(serialNo_Yph.value);
    }
    if (serialNo_Bph.present) {
      map['serial_no_bph'] = Variable<String>(serialNo_Bph.value);
    }
    if (pRatio.present) {
      map['p_ratio'] = Variable<int>(pRatio.value);
    }
    if (sRatio.present) {
      map['s_ratio'] = Variable<int>(sRatio.value);
    }
    if (ratedVoltage.present) {
      map['rated_voltage'] = Variable<int>(ratedVoltage.value);
    }
    if (noOfCores.present) {
      map['no_of_cores'] = Variable<int>(noOfCores.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PTLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('make: $make, ')
          ..write('panel: $panel, ')
          ..write('serialNo_Rph: $serialNo_Rph, ')
          ..write('serialNo_Yph: $serialNo_Yph, ')
          ..write('serialNo_Bph: $serialNo_Bph, ')
          ..write('pRatio: $pRatio, ')
          ..write('sRatio: $sRatio, ')
          ..write('ratedVoltage: $ratedVoltage, ')
          ..write('noOfCores: $noOfCores, ')
          ..write('yom: $yom, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $PTLocalDatasourceImplTable extends PTLocalDatasourceImpl
    with TableInfo<$PTLocalDatasourceImplTable, PTLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PTLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNo_RphMeta =
      const VerificationMeta('serialNo_Rph');
  GeneratedColumn<String> _serialNo_Rph;
  @override
  GeneratedColumn<String> get serialNo_Rph => _serialNo_Rph ??=
      GeneratedColumn<String>('serial_no_rph', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _serialNo_YphMeta =
      const VerificationMeta('serialNo_Yph');
  GeneratedColumn<String> _serialNo_Yph;
  @override
  GeneratedColumn<String> get serialNo_Yph => _serialNo_Yph ??=
      GeneratedColumn<String>('serial_no_yph', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _serialNo_BphMeta =
      const VerificationMeta('serialNo_Bph');
  GeneratedColumn<String> _serialNo_Bph;
  @override
  GeneratedColumn<String> get serialNo_Bph => _serialNo_Bph ??=
      GeneratedColumn<String>('serial_no_bph', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _pRatioMeta = const VerificationMeta('pRatio');
  GeneratedColumn<int> _pRatio;
  @override
  GeneratedColumn<int> get pRatio =>
      _pRatio ??= GeneratedColumn<int>('p_ratio', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _sRatioMeta = const VerificationMeta('sRatio');
  GeneratedColumn<int> _sRatio;
  @override
  GeneratedColumn<int> get sRatio =>
      _sRatio ??= GeneratedColumn<int>('s_ratio', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedVoltageMeta =
      const VerificationMeta('ratedVoltage');
  GeneratedColumn<int> _ratedVoltage;
  @override
  GeneratedColumn<int> get ratedVoltage => _ratedVoltage ??=
      GeneratedColumn<int>('rated_voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _noOfCoresMeta = const VerificationMeta('noOfCores');
  GeneratedColumn<int> _noOfCores;
  @override
  GeneratedColumn<int> get noOfCores =>
      _noOfCores ??= GeneratedColumn<int>('no_of_cores', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        make,
        panel,
        serialNo_Rph,
        serialNo_Yph,
        serialNo_Bph,
        pRatio,
        sRatio,
        ratedVoltage,
        noOfCores,
        yom,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'p_t_local_datasource_impl';
  @override
  String get actualTableName => 'p_t_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PTLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('serial_no_rph')) {
      context.handle(
          _serialNo_RphMeta,
          serialNo_Rph.isAcceptableOrUnknown(
              data['serial_no_rph'], _serialNo_RphMeta));
    } else if (isInserting) {
      context.missing(_serialNo_RphMeta);
    }
    if (data.containsKey('serial_no_yph')) {
      context.handle(
          _serialNo_YphMeta,
          serialNo_Yph.isAcceptableOrUnknown(
              data['serial_no_yph'], _serialNo_YphMeta));
    } else if (isInserting) {
      context.missing(_serialNo_YphMeta);
    }
    if (data.containsKey('serial_no_bph')) {
      context.handle(
          _serialNo_BphMeta,
          serialNo_Bph.isAcceptableOrUnknown(
              data['serial_no_bph'], _serialNo_BphMeta));
    } else if (isInserting) {
      context.missing(_serialNo_BphMeta);
    }
    if (data.containsKey('p_ratio')) {
      context.handle(_pRatioMeta,
          pRatio.isAcceptableOrUnknown(data['p_ratio'], _pRatioMeta));
    } else if (isInserting) {
      context.missing(_pRatioMeta);
    }
    if (data.containsKey('s_ratio')) {
      context.handle(_sRatioMeta,
          sRatio.isAcceptableOrUnknown(data['s_ratio'], _sRatioMeta));
    } else if (isInserting) {
      context.missing(_sRatioMeta);
    }
    if (data.containsKey('rated_voltage')) {
      context.handle(
          _ratedVoltageMeta,
          ratedVoltage.isAcceptableOrUnknown(
              data['rated_voltage'], _ratedVoltageMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltageMeta);
    }
    if (data.containsKey('no_of_cores')) {
      context.handle(_noOfCoresMeta,
          noOfCores.isAcceptableOrUnknown(data['no_of_cores'], _noOfCoresMeta));
    } else if (isInserting) {
      context.missing(_noOfCoresMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PTLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PTLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PTLocalDatasourceImplTable createAlias(String alias) {
    return $PTLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PTcoreLocalData extends DataClass implements Insertable<PTcoreLocalData> {
  final int databaseID;
  final int id;
  final int coreNo;
  final String coreName;
  final int ratio;
  final String coreClass;
  final int burden;
  final int ptNo;
  final DateTime updateDate;
  PTcoreLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.coreNo,
      @required this.coreName,
      @required this.ratio,
      @required this.coreClass,
      @required this.burden,
      @required this.ptNo,
      @required this.updateDate});
  factory PTcoreLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PTcoreLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      coreNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}core_no']),
      coreName: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}core_name']),
      ratio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ratio']),
      coreClass: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}core_class']),
      burden: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}burden']),
      ptNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pt_no']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || coreNo != null) {
      map['core_no'] = Variable<int>(coreNo);
    }
    if (!nullToAbsent || coreName != null) {
      map['core_name'] = Variable<String>(coreName);
    }
    if (!nullToAbsent || ratio != null) {
      map['ratio'] = Variable<int>(ratio);
    }
    if (!nullToAbsent || coreClass != null) {
      map['core_class'] = Variable<String>(coreClass);
    }
    if (!nullToAbsent || burden != null) {
      map['burden'] = Variable<int>(burden);
    }
    if (!nullToAbsent || ptNo != null) {
      map['pt_no'] = Variable<int>(ptNo);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  PT_core_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PT_core_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      coreNo:
          coreNo == null && nullToAbsent ? const Value.absent() : Value(coreNo),
      coreName: coreName == null && nullToAbsent
          ? const Value.absent()
          : Value(coreName),
      ratio:
          ratio == null && nullToAbsent ? const Value.absent() : Value(ratio),
      coreClass: coreClass == null && nullToAbsent
          ? const Value.absent()
          : Value(coreClass),
      burden:
          burden == null && nullToAbsent ? const Value.absent() : Value(burden),
      ptNo: ptNo == null && nullToAbsent ? const Value.absent() : Value(ptNo),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory PTcoreLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PTcoreLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      coreNo: serializer.fromJson<int>(json['coreNo']),
      coreName: serializer.fromJson<String>(json['coreName']),
      ratio: serializer.fromJson<int>(json['ratio']),
      coreClass: serializer.fromJson<String>(json['coreClass']),
      burden: serializer.fromJson<int>(json['burden']),
      ptNo: serializer.fromJson<int>(json['ptNo']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'coreNo': serializer.toJson<int>(coreNo),
      'coreName': serializer.toJson<String>(coreName),
      'ratio': serializer.toJson<int>(ratio),
      'coreClass': serializer.toJson<String>(coreClass),
      'burden': serializer.toJson<int>(burden),
      'ptNo': serializer.toJson<int>(ptNo),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  PTcoreLocalData copyWith(
          {int databaseID,
          int id,
          int coreNo,
          String coreName,
          int ratio,
          String coreClass,
          int burden,
          int ptNo,
          DateTime updateDate}) =>
      PTcoreLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        coreNo: coreNo ?? this.coreNo,
        coreName: coreName ?? this.coreName,
        ratio: ratio ?? this.ratio,
        coreClass: coreClass ?? this.coreClass,
        burden: burden ?? this.burden,
        ptNo: ptNo ?? this.ptNo,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('PTcoreLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('coreNo: $coreNo, ')
          ..write('coreName: $coreName, ')
          ..write('ratio: $ratio, ')
          ..write('coreClass: $coreClass, ')
          ..write('burden: $burden, ')
          ..write('ptNo: $ptNo, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, coreNo, coreName, ratio,
      coreClass, burden, ptNo, updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PTcoreLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.coreNo == this.coreNo &&
          other.coreName == this.coreName &&
          other.ratio == this.ratio &&
          other.coreClass == this.coreClass &&
          other.burden == this.burden &&
          other.ptNo == this.ptNo &&
          other.updateDate == this.updateDate);
}

class PT_core_LocalDatasourceImplCompanion
    extends UpdateCompanion<PTcoreLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> coreNo;
  final Value<String> coreName;
  final Value<int> ratio;
  final Value<String> coreClass;
  final Value<int> burden;
  final Value<int> ptNo;
  final Value<DateTime> updateDate;
  const PT_core_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.coreNo = const Value.absent(),
    this.coreName = const Value.absent(),
    this.ratio = const Value.absent(),
    this.coreClass = const Value.absent(),
    this.burden = const Value.absent(),
    this.ptNo = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  PT_core_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int coreNo,
    @required String coreName,
    @required int ratio,
    @required String coreClass,
    @required int burden,
    @required int ptNo,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        coreNo = Value(coreNo),
        coreName = Value(coreName),
        ratio = Value(ratio),
        coreClass = Value(coreClass),
        burden = Value(burden),
        ptNo = Value(ptNo);
  static Insertable<PTcoreLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> coreNo,
    Expression<String> coreName,
    Expression<int> ratio,
    Expression<String> coreClass,
    Expression<int> burden,
    Expression<int> ptNo,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (coreNo != null) 'core_no': coreNo,
      if (coreName != null) 'core_name': coreName,
      if (ratio != null) 'ratio': ratio,
      if (coreClass != null) 'core_class': coreClass,
      if (burden != null) 'burden': burden,
      if (ptNo != null) 'pt_no': ptNo,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  PT_core_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> coreNo,
      Value<String> coreName,
      Value<int> ratio,
      Value<String> coreClass,
      Value<int> burden,
      Value<int> ptNo,
      Value<DateTime> updateDate}) {
    return PT_core_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      coreNo: coreNo ?? this.coreNo,
      coreName: coreName ?? this.coreName,
      ratio: ratio ?? this.ratio,
      coreClass: coreClass ?? this.coreClass,
      burden: burden ?? this.burden,
      ptNo: ptNo ?? this.ptNo,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (coreNo.present) {
      map['core_no'] = Variable<int>(coreNo.value);
    }
    if (coreName.present) {
      map['core_name'] = Variable<String>(coreName.value);
    }
    if (ratio.present) {
      map['ratio'] = Variable<int>(ratio.value);
    }
    if (coreClass.present) {
      map['core_class'] = Variable<String>(coreClass.value);
    }
    if (burden.present) {
      map['burden'] = Variable<int>(burden.value);
    }
    if (ptNo.present) {
      map['pt_no'] = Variable<int>(ptNo.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PT_core_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('coreNo: $coreNo, ')
          ..write('coreName: $coreName, ')
          ..write('ratio: $ratio, ')
          ..write('coreClass: $coreClass, ')
          ..write('burden: $burden, ')
          ..write('ptNo: $ptNo, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $PT_core_LocalDatasourceImplTable extends PT_core_LocalDatasourceImpl
    with TableInfo<$PT_core_LocalDatasourceImplTable, PTcoreLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PT_core_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _coreNoMeta = const VerificationMeta('coreNo');
  GeneratedColumn<int> _coreNo;
  @override
  GeneratedColumn<int> get coreNo =>
      _coreNo ??= GeneratedColumn<int>('core_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _coreNameMeta = const VerificationMeta('coreName');
  GeneratedColumn<String> _coreName;
  @override
  GeneratedColumn<String> get coreName => _coreName ??= GeneratedColumn<String>(
      'core_name', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratioMeta = const VerificationMeta('ratio');
  GeneratedColumn<int> _ratio;
  @override
  GeneratedColumn<int> get ratio =>
      _ratio ??= GeneratedColumn<int>('ratio', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _coreClassMeta = const VerificationMeta('coreClass');
  GeneratedColumn<String> _coreClass;
  @override
  GeneratedColumn<String> get coreClass =>
      _coreClass ??= GeneratedColumn<String>('core_class', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _burdenMeta = const VerificationMeta('burden');
  GeneratedColumn<int> _burden;
  @override
  GeneratedColumn<int> get burden =>
      _burden ??= GeneratedColumn<int>('burden', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ptNoMeta = const VerificationMeta('ptNo');
  GeneratedColumn<int> _ptNo;
  @override
  GeneratedColumn<int> get ptNo =>
      _ptNo ??= GeneratedColumn<int>('pt_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        coreNo,
        coreName,
        ratio,
        coreClass,
        burden,
        ptNo,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'p_t_core_local_datasource_impl';
  @override
  String get actualTableName => 'p_t_core_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PTcoreLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('core_no')) {
      context.handle(_coreNoMeta,
          coreNo.isAcceptableOrUnknown(data['core_no'], _coreNoMeta));
    } else if (isInserting) {
      context.missing(_coreNoMeta);
    }
    if (data.containsKey('core_name')) {
      context.handle(_coreNameMeta,
          coreName.isAcceptableOrUnknown(data['core_name'], _coreNameMeta));
    } else if (isInserting) {
      context.missing(_coreNameMeta);
    }
    if (data.containsKey('ratio')) {
      context.handle(
          _ratioMeta, ratio.isAcceptableOrUnknown(data['ratio'], _ratioMeta));
    } else if (isInserting) {
      context.missing(_ratioMeta);
    }
    if (data.containsKey('core_class')) {
      context.handle(_coreClassMeta,
          coreClass.isAcceptableOrUnknown(data['core_class'], _coreClassMeta));
    } else if (isInserting) {
      context.missing(_coreClassMeta);
    }
    if (data.containsKey('burden')) {
      context.handle(_burdenMeta,
          burden.isAcceptableOrUnknown(data['burden'], _burdenMeta));
    } else if (isInserting) {
      context.missing(_burdenMeta);
    }
    if (data.containsKey('pt_no')) {
      context.handle(
          _ptNoMeta, ptNo.isAcceptableOrUnknown(data['pt_no'], _ptNoMeta));
    } else if (isInserting) {
      context.missing(_ptNoMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PTcoreLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PTcoreLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PT_core_LocalDatasourceImplTable createAlias(String alias) {
    return $PT_core_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PTcoreIRLocalData extends DataClass
    implements Insertable<PTcoreIRLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double peR;
  final double peY;
  final double peB;
///////////////////////////////
  final double pc1R;
  final double pc2R;
  final double pc3R;
  final double pc1Y;
  final double pc2Y;
  final double pc3Y;
  final double pc1B;
  final double pc2B;
  final double pc3B;
///////////////////////////////
  final double c1eR;
  final double c2eR;
  final double c3eR;
  final double c1eY;
  final double c2eY;
  final double c3eY;
  final double c1eB;
  final double c2eB;
  final double c3eB;
////////////////////////////////
  final double c1c2R;
  final double c1c2Y;
  final double c1c2B;
  final double c2c3R;
  final double c2c3Y;
  final double c2c3B;
////////////////////////////////
  final double clc1R;
  final double clc1Y;
  final double clc1B;
  PTcoreIRLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.peR,
      @required this.peY,
      @required this.peB,
      @required this.pc1R,
      @required this.pc2R,
      @required this.pc3R,
      @required this.pc1Y,
      @required this.pc2Y,
      @required this.pc3Y,
      @required this.pc1B,
      @required this.pc2B,
      @required this.pc3B,
      @required this.c1eR,
      @required this.c2eR,
      @required this.c3eR,
      @required this.c1eY,
      @required this.c2eY,
      @required this.c3eY,
      @required this.c1eB,
      @required this.c2eB,
      @required this.c3eB,
      @required this.c1c2R,
      @required this.c1c2Y,
      @required this.c1c2B,
      @required this.c2c3R,
      @required this.c2c3Y,
      @required this.c2c3B,
      @required this.clc1R,
      @required this.clc1Y,
      @required this.clc1B});
  factory PTcoreIRLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PTcoreIRLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      peR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pe_r']),
      peY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pe_y']),
      peB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pe_b']),
      pc1R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc1_r']),
      pc2R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc2_r']),
      pc3R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc3_r']),
      pc1Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc1_y']),
      pc2Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc2_y']),
      pc3Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc3_y']),
      pc1B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc1_b']),
      pc2B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc2_b']),
      pc3B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc3_b']),
      c1eR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1e_r']),
      c2eR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2e_r']),
      c3eR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c3e_r']),
      c1eY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1e_y']),
      c2eY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2e_y']),
      c3eY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c3e_y']),
      c1eB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1e_b']),
      c2eB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2e_b']),
      c3eB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c3e_b']),
      c1c2R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1c2_r']),
      c1c2Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1c2_y']),
      c1c2B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c1c2_b']),
      c2c3R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2c3_r']),
      c2c3Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2c3_y']),
      c2c3B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c2c3_b']),
      clc1R: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}clc1_r']),
      clc1Y: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}clc1_y']),
      clc1B: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}clc1_b']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || peR != null) {
      map['pe_r'] = Variable<double>(peR);
    }
    if (!nullToAbsent || peY != null) {
      map['pe_y'] = Variable<double>(peY);
    }
    if (!nullToAbsent || peB != null) {
      map['pe_b'] = Variable<double>(peB);
    }
    if (!nullToAbsent || pc1R != null) {
      map['pc1_r'] = Variable<double>(pc1R);
    }
    if (!nullToAbsent || pc2R != null) {
      map['pc2_r'] = Variable<double>(pc2R);
    }
    if (!nullToAbsent || pc3R != null) {
      map['pc3_r'] = Variable<double>(pc3R);
    }
    if (!nullToAbsent || pc1Y != null) {
      map['pc1_y'] = Variable<double>(pc1Y);
    }
    if (!nullToAbsent || pc2Y != null) {
      map['pc2_y'] = Variable<double>(pc2Y);
    }
    if (!nullToAbsent || pc3Y != null) {
      map['pc3_y'] = Variable<double>(pc3Y);
    }
    if (!nullToAbsent || pc1B != null) {
      map['pc1_b'] = Variable<double>(pc1B);
    }
    if (!nullToAbsent || pc2B != null) {
      map['pc2_b'] = Variable<double>(pc2B);
    }
    if (!nullToAbsent || pc3B != null) {
      map['pc3_b'] = Variable<double>(pc3B);
    }
    if (!nullToAbsent || c1eR != null) {
      map['c1e_r'] = Variable<double>(c1eR);
    }
    if (!nullToAbsent || c2eR != null) {
      map['c2e_r'] = Variable<double>(c2eR);
    }
    if (!nullToAbsent || c3eR != null) {
      map['c3e_r'] = Variable<double>(c3eR);
    }
    if (!nullToAbsent || c1eY != null) {
      map['c1e_y'] = Variable<double>(c1eY);
    }
    if (!nullToAbsent || c2eY != null) {
      map['c2e_y'] = Variable<double>(c2eY);
    }
    if (!nullToAbsent || c3eY != null) {
      map['c3e_y'] = Variable<double>(c3eY);
    }
    if (!nullToAbsent || c1eB != null) {
      map['c1e_b'] = Variable<double>(c1eB);
    }
    if (!nullToAbsent || c2eB != null) {
      map['c2e_b'] = Variable<double>(c2eB);
    }
    if (!nullToAbsent || c3eB != null) {
      map['c3e_b'] = Variable<double>(c3eB);
    }
    if (!nullToAbsent || c1c2R != null) {
      map['c1c2_r'] = Variable<double>(c1c2R);
    }
    if (!nullToAbsent || c1c2Y != null) {
      map['c1c2_y'] = Variable<double>(c1c2Y);
    }
    if (!nullToAbsent || c1c2B != null) {
      map['c1c2_b'] = Variable<double>(c1c2B);
    }
    if (!nullToAbsent || c2c3R != null) {
      map['c2c3_r'] = Variable<double>(c2c3R);
    }
    if (!nullToAbsent || c2c3Y != null) {
      map['c2c3_y'] = Variable<double>(c2c3Y);
    }
    if (!nullToAbsent || c2c3B != null) {
      map['c2c3_b'] = Variable<double>(c2c3B);
    }
    if (!nullToAbsent || clc1R != null) {
      map['clc1_r'] = Variable<double>(clc1R);
    }
    if (!nullToAbsent || clc1Y != null) {
      map['clc1_y'] = Variable<double>(clc1Y);
    }
    if (!nullToAbsent || clc1B != null) {
      map['clc1_b'] = Variable<double>(clc1B);
    }
    return map;
  }

  PTcoreIRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PTcoreIRLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      peR: peR == null && nullToAbsent ? const Value.absent() : Value(peR),
      peY: peY == null && nullToAbsent ? const Value.absent() : Value(peY),
      peB: peB == null && nullToAbsent ? const Value.absent() : Value(peB),
      pc1R: pc1R == null && nullToAbsent ? const Value.absent() : Value(pc1R),
      pc2R: pc2R == null && nullToAbsent ? const Value.absent() : Value(pc2R),
      pc3R: pc3R == null && nullToAbsent ? const Value.absent() : Value(pc3R),
      pc1Y: pc1Y == null && nullToAbsent ? const Value.absent() : Value(pc1Y),
      pc2Y: pc2Y == null && nullToAbsent ? const Value.absent() : Value(pc2Y),
      pc3Y: pc3Y == null && nullToAbsent ? const Value.absent() : Value(pc3Y),
      pc1B: pc1B == null && nullToAbsent ? const Value.absent() : Value(pc1B),
      pc2B: pc2B == null && nullToAbsent ? const Value.absent() : Value(pc2B),
      pc3B: pc3B == null && nullToAbsent ? const Value.absent() : Value(pc3B),
      c1eR: c1eR == null && nullToAbsent ? const Value.absent() : Value(c1eR),
      c2eR: c2eR == null && nullToAbsent ? const Value.absent() : Value(c2eR),
      c3eR: c3eR == null && nullToAbsent ? const Value.absent() : Value(c3eR),
      c1eY: c1eY == null && nullToAbsent ? const Value.absent() : Value(c1eY),
      c2eY: c2eY == null && nullToAbsent ? const Value.absent() : Value(c2eY),
      c3eY: c3eY == null && nullToAbsent ? const Value.absent() : Value(c3eY),
      c1eB: c1eB == null && nullToAbsent ? const Value.absent() : Value(c1eB),
      c2eB: c2eB == null && nullToAbsent ? const Value.absent() : Value(c2eB),
      c3eB: c3eB == null && nullToAbsent ? const Value.absent() : Value(c3eB),
      c1c2R:
          c1c2R == null && nullToAbsent ? const Value.absent() : Value(c1c2R),
      c1c2Y:
          c1c2Y == null && nullToAbsent ? const Value.absent() : Value(c1c2Y),
      c1c2B:
          c1c2B == null && nullToAbsent ? const Value.absent() : Value(c1c2B),
      c2c3R:
          c2c3R == null && nullToAbsent ? const Value.absent() : Value(c2c3R),
      c2c3Y:
          c2c3Y == null && nullToAbsent ? const Value.absent() : Value(c2c3Y),
      c2c3B:
          c2c3B == null && nullToAbsent ? const Value.absent() : Value(c2c3B),
      clc1R:
          clc1R == null && nullToAbsent ? const Value.absent() : Value(clc1R),
      clc1Y:
          clc1Y == null && nullToAbsent ? const Value.absent() : Value(clc1Y),
      clc1B:
          clc1B == null && nullToAbsent ? const Value.absent() : Value(clc1B),
    );
  }

  factory PTcoreIRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PTcoreIRLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      peR: serializer.fromJson<double>(json['peR']),
      peY: serializer.fromJson<double>(json['peY']),
      peB: serializer.fromJson<double>(json['peB']),
      pc1R: serializer.fromJson<double>(json['pc1R']),
      pc2R: serializer.fromJson<double>(json['pc2R']),
      pc3R: serializer.fromJson<double>(json['pc3R']),
      pc1Y: serializer.fromJson<double>(json['pc1Y']),
      pc2Y: serializer.fromJson<double>(json['pc2Y']),
      pc3Y: serializer.fromJson<double>(json['pc3Y']),
      pc1B: serializer.fromJson<double>(json['pc1B']),
      pc2B: serializer.fromJson<double>(json['pc2B']),
      pc3B: serializer.fromJson<double>(json['pc3B']),
      c1eR: serializer.fromJson<double>(json['c1eR']),
      c2eR: serializer.fromJson<double>(json['c2eR']),
      c3eR: serializer.fromJson<double>(json['c3eR']),
      c1eY: serializer.fromJson<double>(json['c1eY']),
      c2eY: serializer.fromJson<double>(json['c2eY']),
      c3eY: serializer.fromJson<double>(json['c3eY']),
      c1eB: serializer.fromJson<double>(json['c1eB']),
      c2eB: serializer.fromJson<double>(json['c2eB']),
      c3eB: serializer.fromJson<double>(json['c3eB']),
      c1c2R: serializer.fromJson<double>(json['c1c2R']),
      c1c2Y: serializer.fromJson<double>(json['c1c2Y']),
      c1c2B: serializer.fromJson<double>(json['c1c2B']),
      c2c3R: serializer.fromJson<double>(json['c2c3R']),
      c2c3Y: serializer.fromJson<double>(json['c2c3Y']),
      c2c3B: serializer.fromJson<double>(json['c2c3B']),
      clc1R: serializer.fromJson<double>(json['clc1R']),
      clc1Y: serializer.fromJson<double>(json['clc1Y']),
      clc1B: serializer.fromJson<double>(json['clc1B']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'peR': serializer.toJson<double>(peR),
      'peY': serializer.toJson<double>(peY),
      'peB': serializer.toJson<double>(peB),
      'pc1R': serializer.toJson<double>(pc1R),
      'pc2R': serializer.toJson<double>(pc2R),
      'pc3R': serializer.toJson<double>(pc3R),
      'pc1Y': serializer.toJson<double>(pc1Y),
      'pc2Y': serializer.toJson<double>(pc2Y),
      'pc3Y': serializer.toJson<double>(pc3Y),
      'pc1B': serializer.toJson<double>(pc1B),
      'pc2B': serializer.toJson<double>(pc2B),
      'pc3B': serializer.toJson<double>(pc3B),
      'c1eR': serializer.toJson<double>(c1eR),
      'c2eR': serializer.toJson<double>(c2eR),
      'c3eR': serializer.toJson<double>(c3eR),
      'c1eY': serializer.toJson<double>(c1eY),
      'c2eY': serializer.toJson<double>(c2eY),
      'c3eY': serializer.toJson<double>(c3eY),
      'c1eB': serializer.toJson<double>(c1eB),
      'c2eB': serializer.toJson<double>(c2eB),
      'c3eB': serializer.toJson<double>(c3eB),
      'c1c2R': serializer.toJson<double>(c1c2R),
      'c1c2Y': serializer.toJson<double>(c1c2Y),
      'c1c2B': serializer.toJson<double>(c1c2B),
      'c2c3R': serializer.toJson<double>(c2c3R),
      'c2c3Y': serializer.toJson<double>(c2c3Y),
      'c2c3B': serializer.toJson<double>(c2c3B),
      'clc1R': serializer.toJson<double>(clc1R),
      'clc1Y': serializer.toJson<double>(clc1Y),
      'clc1B': serializer.toJson<double>(clc1B),
    };
  }

  PTcoreIRLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double peR,
          double peY,
          double peB,
          double pc1R,
          double pc2R,
          double pc3R,
          double pc1Y,
          double pc2Y,
          double pc3Y,
          double pc1B,
          double pc2B,
          double pc3B,
          double c1eR,
          double c2eR,
          double c3eR,
          double c1eY,
          double c2eY,
          double c3eY,
          double c1eB,
          double c2eB,
          double c3eB,
          double c1c2R,
          double c1c2Y,
          double c1c2B,
          double c2c3R,
          double c2c3Y,
          double c2c3B,
          double clc1R,
          double clc1Y,
          double clc1B}) =>
      PTcoreIRLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        peR: peR ?? this.peR,
        peY: peY ?? this.peY,
        peB: peB ?? this.peB,
        pc1R: pc1R ?? this.pc1R,
        pc2R: pc2R ?? this.pc2R,
        pc3R: pc3R ?? this.pc3R,
        pc1Y: pc1Y ?? this.pc1Y,
        pc2Y: pc2Y ?? this.pc2Y,
        pc3Y: pc3Y ?? this.pc3Y,
        pc1B: pc1B ?? this.pc1B,
        pc2B: pc2B ?? this.pc2B,
        pc3B: pc3B ?? this.pc3B,
        c1eR: c1eR ?? this.c1eR,
        c2eR: c2eR ?? this.c2eR,
        c3eR: c3eR ?? this.c3eR,
        c1eY: c1eY ?? this.c1eY,
        c2eY: c2eY ?? this.c2eY,
        c3eY: c3eY ?? this.c3eY,
        c1eB: c1eB ?? this.c1eB,
        c2eB: c2eB ?? this.c2eB,
        c3eB: c3eB ?? this.c3eB,
        c1c2R: c1c2R ?? this.c1c2R,
        c1c2Y: c1c2Y ?? this.c1c2Y,
        c1c2B: c1c2B ?? this.c1c2B,
        c2c3R: c2c3R ?? this.c2c3R,
        c2c3Y: c2c3Y ?? this.c2c3Y,
        c2c3B: c2c3B ?? this.c2c3B,
        clc1R: clc1R ?? this.clc1R,
        clc1Y: clc1Y ?? this.clc1Y,
        clc1B: clc1B ?? this.clc1B,
      );
  @override
  String toString() {
    return (StringBuffer('PTcoreIRLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('peR: $peR, ')
          ..write('peY: $peY, ')
          ..write('peB: $peB, ')
          ..write('pc1R: $pc1R, ')
          ..write('pc2R: $pc2R, ')
          ..write('pc3R: $pc3R, ')
          ..write('pc1Y: $pc1Y, ')
          ..write('pc2Y: $pc2Y, ')
          ..write('pc3Y: $pc3Y, ')
          ..write('pc1B: $pc1B, ')
          ..write('pc2B: $pc2B, ')
          ..write('pc3B: $pc3B, ')
          ..write('c1eR: $c1eR, ')
          ..write('c2eR: $c2eR, ')
          ..write('c3eR: $c3eR, ')
          ..write('c1eY: $c1eY, ')
          ..write('c2eY: $c2eY, ')
          ..write('c3eY: $c3eY, ')
          ..write('c1eB: $c1eB, ')
          ..write('c2eB: $c2eB, ')
          ..write('c3eB: $c3eB, ')
          ..write('c1c2R: $c1c2R, ')
          ..write('c1c2Y: $c1c2Y, ')
          ..write('c1c2B: $c1c2B, ')
          ..write('c2c3R: $c2c3R, ')
          ..write('c2c3Y: $c2c3Y, ')
          ..write('c2c3B: $c2c3B, ')
          ..write('clc1R: $clc1R, ')
          ..write('clc1Y: $clc1Y, ')
          ..write('clc1B: $clc1B')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        peR,
        peY,
        peB,
        pc1R,
        pc2R,
        pc3R,
        pc1Y,
        pc2Y,
        pc3Y,
        pc1B,
        pc2B,
        pc3B,
        c1eR,
        c2eR,
        c3eR,
        c1eY,
        c2eY,
        c3eY,
        c1eB,
        c2eB,
        c3eB,
        c1c2R,
        c1c2Y,
        c1c2B,
        c2c3R,
        c2c3Y,
        c2c3B,
        clc1R,
        clc1Y,
        clc1B
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PTcoreIRLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.peR == this.peR &&
          other.peY == this.peY &&
          other.peB == this.peB &&
          other.pc1R == this.pc1R &&
          other.pc2R == this.pc2R &&
          other.pc3R == this.pc3R &&
          other.pc1Y == this.pc1Y &&
          other.pc2Y == this.pc2Y &&
          other.pc3Y == this.pc3Y &&
          other.pc1B == this.pc1B &&
          other.pc2B == this.pc2B &&
          other.pc3B == this.pc3B &&
          other.c1eR == this.c1eR &&
          other.c2eR == this.c2eR &&
          other.c3eR == this.c3eR &&
          other.c1eY == this.c1eY &&
          other.c2eY == this.c2eY &&
          other.c3eY == this.c3eY &&
          other.c1eB == this.c1eB &&
          other.c2eB == this.c2eB &&
          other.c3eB == this.c3eB &&
          other.c1c2R == this.c1c2R &&
          other.c1c2Y == this.c1c2Y &&
          other.c1c2B == this.c1c2B &&
          other.c2c3R == this.c2c3R &&
          other.c2c3Y == this.c2c3Y &&
          other.c2c3B == this.c2c3B &&
          other.clc1R == this.clc1R &&
          other.clc1Y == this.clc1Y &&
          other.clc1B == this.clc1B);
}

class PTcoreIRLocalDatasourceImplCompanion
    extends UpdateCompanion<PTcoreIRLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> peR;
  final Value<double> peY;
  final Value<double> peB;
  final Value<double> pc1R;
  final Value<double> pc2R;
  final Value<double> pc3R;
  final Value<double> pc1Y;
  final Value<double> pc2Y;
  final Value<double> pc3Y;
  final Value<double> pc1B;
  final Value<double> pc2B;
  final Value<double> pc3B;
  final Value<double> c1eR;
  final Value<double> c2eR;
  final Value<double> c3eR;
  final Value<double> c1eY;
  final Value<double> c2eY;
  final Value<double> c3eY;
  final Value<double> c1eB;
  final Value<double> c2eB;
  final Value<double> c3eB;
  final Value<double> c1c2R;
  final Value<double> c1c2Y;
  final Value<double> c1c2B;
  final Value<double> c2c3R;
  final Value<double> c2c3Y;
  final Value<double> c2c3B;
  final Value<double> clc1R;
  final Value<double> clc1Y;
  final Value<double> clc1B;
  const PTcoreIRLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.peR = const Value.absent(),
    this.peY = const Value.absent(),
    this.peB = const Value.absent(),
    this.pc1R = const Value.absent(),
    this.pc2R = const Value.absent(),
    this.pc3R = const Value.absent(),
    this.pc1Y = const Value.absent(),
    this.pc2Y = const Value.absent(),
    this.pc3Y = const Value.absent(),
    this.pc1B = const Value.absent(),
    this.pc2B = const Value.absent(),
    this.pc3B = const Value.absent(),
    this.c1eR = const Value.absent(),
    this.c2eR = const Value.absent(),
    this.c3eR = const Value.absent(),
    this.c1eY = const Value.absent(),
    this.c2eY = const Value.absent(),
    this.c3eY = const Value.absent(),
    this.c1eB = const Value.absent(),
    this.c2eB = const Value.absent(),
    this.c3eB = const Value.absent(),
    this.c1c2R = const Value.absent(),
    this.c1c2Y = const Value.absent(),
    this.c1c2B = const Value.absent(),
    this.c2c3R = const Value.absent(),
    this.c2c3Y = const Value.absent(),
    this.c2c3B = const Value.absent(),
    this.clc1R = const Value.absent(),
    this.clc1Y = const Value.absent(),
    this.clc1B = const Value.absent(),
  });
  PTcoreIRLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double peR,
    @required double peY,
    @required double peB,
    @required double pc1R,
    @required double pc2R,
    @required double pc3R,
    @required double pc1Y,
    @required double pc2Y,
    @required double pc3Y,
    @required double pc1B,
    @required double pc2B,
    @required double pc3B,
    @required double c1eR,
    @required double c2eR,
    @required double c3eR,
    @required double c1eY,
    @required double c2eY,
    @required double c3eY,
    @required double c1eB,
    @required double c2eB,
    @required double c3eB,
    @required double c1c2R,
    @required double c1c2Y,
    @required double c1c2B,
    @required double c2c3R,
    @required double c2c3Y,
    @required double c2c3B,
    @required double clc1R,
    @required double clc1Y,
    @required double clc1B,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        peR = Value(peR),
        peY = Value(peY),
        peB = Value(peB),
        pc1R = Value(pc1R),
        pc2R = Value(pc2R),
        pc3R = Value(pc3R),
        pc1Y = Value(pc1Y),
        pc2Y = Value(pc2Y),
        pc3Y = Value(pc3Y),
        pc1B = Value(pc1B),
        pc2B = Value(pc2B),
        pc3B = Value(pc3B),
        c1eR = Value(c1eR),
        c2eR = Value(c2eR),
        c3eR = Value(c3eR),
        c1eY = Value(c1eY),
        c2eY = Value(c2eY),
        c3eY = Value(c3eY),
        c1eB = Value(c1eB),
        c2eB = Value(c2eB),
        c3eB = Value(c3eB),
        c1c2R = Value(c1c2R),
        c1c2Y = Value(c1c2Y),
        c1c2B = Value(c1c2B),
        c2c3R = Value(c2c3R),
        c2c3Y = Value(c2c3Y),
        c2c3B = Value(c2c3B),
        clc1R = Value(clc1R),
        clc1Y = Value(clc1Y),
        clc1B = Value(clc1B);
  static Insertable<PTcoreIRLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> peR,
    Expression<double> peY,
    Expression<double> peB,
    Expression<double> pc1R,
    Expression<double> pc2R,
    Expression<double> pc3R,
    Expression<double> pc1Y,
    Expression<double> pc2Y,
    Expression<double> pc3Y,
    Expression<double> pc1B,
    Expression<double> pc2B,
    Expression<double> pc3B,
    Expression<double> c1eR,
    Expression<double> c2eR,
    Expression<double> c3eR,
    Expression<double> c1eY,
    Expression<double> c2eY,
    Expression<double> c3eY,
    Expression<double> c1eB,
    Expression<double> c2eB,
    Expression<double> c3eB,
    Expression<double> c1c2R,
    Expression<double> c1c2Y,
    Expression<double> c1c2B,
    Expression<double> c2c3R,
    Expression<double> c2c3Y,
    Expression<double> c2c3B,
    Expression<double> clc1R,
    Expression<double> clc1Y,
    Expression<double> clc1B,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (peR != null) 'pe_r': peR,
      if (peY != null) 'pe_y': peY,
      if (peB != null) 'pe_b': peB,
      if (pc1R != null) 'pc1_r': pc1R,
      if (pc2R != null) 'pc2_r': pc2R,
      if (pc3R != null) 'pc3_r': pc3R,
      if (pc1Y != null) 'pc1_y': pc1Y,
      if (pc2Y != null) 'pc2_y': pc2Y,
      if (pc3Y != null) 'pc3_y': pc3Y,
      if (pc1B != null) 'pc1_b': pc1B,
      if (pc2B != null) 'pc2_b': pc2B,
      if (pc3B != null) 'pc3_b': pc3B,
      if (c1eR != null) 'c1e_r': c1eR,
      if (c2eR != null) 'c2e_r': c2eR,
      if (c3eR != null) 'c3e_r': c3eR,
      if (c1eY != null) 'c1e_y': c1eY,
      if (c2eY != null) 'c2e_y': c2eY,
      if (c3eY != null) 'c3e_y': c3eY,
      if (c1eB != null) 'c1e_b': c1eB,
      if (c2eB != null) 'c2e_b': c2eB,
      if (c3eB != null) 'c3e_b': c3eB,
      if (c1c2R != null) 'c1c2_r': c1c2R,
      if (c1c2Y != null) 'c1c2_y': c1c2Y,
      if (c1c2B != null) 'c1c2_b': c1c2B,
      if (c2c3R != null) 'c2c3_r': c2c3R,
      if (c2c3Y != null) 'c2c3_y': c2c3Y,
      if (c2c3B != null) 'c2c3_b': c2c3B,
      if (clc1R != null) 'clc1_r': clc1R,
      if (clc1Y != null) 'clc1_y': clc1Y,
      if (clc1B != null) 'clc1_b': clc1B,
    });
  }

  PTcoreIRLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> peR,
      Value<double> peY,
      Value<double> peB,
      Value<double> pc1R,
      Value<double> pc2R,
      Value<double> pc3R,
      Value<double> pc1Y,
      Value<double> pc2Y,
      Value<double> pc3Y,
      Value<double> pc1B,
      Value<double> pc2B,
      Value<double> pc3B,
      Value<double> c1eR,
      Value<double> c2eR,
      Value<double> c3eR,
      Value<double> c1eY,
      Value<double> c2eY,
      Value<double> c3eY,
      Value<double> c1eB,
      Value<double> c2eB,
      Value<double> c3eB,
      Value<double> c1c2R,
      Value<double> c1c2Y,
      Value<double> c1c2B,
      Value<double> c2c3R,
      Value<double> c2c3Y,
      Value<double> c2c3B,
      Value<double> clc1R,
      Value<double> clc1Y,
      Value<double> clc1B}) {
    return PTcoreIRLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      peR: peR ?? this.peR,
      peY: peY ?? this.peY,
      peB: peB ?? this.peB,
      pc1R: pc1R ?? this.pc1R,
      pc2R: pc2R ?? this.pc2R,
      pc3R: pc3R ?? this.pc3R,
      pc1Y: pc1Y ?? this.pc1Y,
      pc2Y: pc2Y ?? this.pc2Y,
      pc3Y: pc3Y ?? this.pc3Y,
      pc1B: pc1B ?? this.pc1B,
      pc2B: pc2B ?? this.pc2B,
      pc3B: pc3B ?? this.pc3B,
      c1eR: c1eR ?? this.c1eR,
      c2eR: c2eR ?? this.c2eR,
      c3eR: c3eR ?? this.c3eR,
      c1eY: c1eY ?? this.c1eY,
      c2eY: c2eY ?? this.c2eY,
      c3eY: c3eY ?? this.c3eY,
      c1eB: c1eB ?? this.c1eB,
      c2eB: c2eB ?? this.c2eB,
      c3eB: c3eB ?? this.c3eB,
      c1c2R: c1c2R ?? this.c1c2R,
      c1c2Y: c1c2Y ?? this.c1c2Y,
      c1c2B: c1c2B ?? this.c1c2B,
      c2c3R: c2c3R ?? this.c2c3R,
      c2c3Y: c2c3Y ?? this.c2c3Y,
      c2c3B: c2c3B ?? this.c2c3B,
      clc1R: clc1R ?? this.clc1R,
      clc1Y: clc1Y ?? this.clc1Y,
      clc1B: clc1B ?? this.clc1B,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (peR.present) {
      map['pe_r'] = Variable<double>(peR.value);
    }
    if (peY.present) {
      map['pe_y'] = Variable<double>(peY.value);
    }
    if (peB.present) {
      map['pe_b'] = Variable<double>(peB.value);
    }
    if (pc1R.present) {
      map['pc1_r'] = Variable<double>(pc1R.value);
    }
    if (pc2R.present) {
      map['pc2_r'] = Variable<double>(pc2R.value);
    }
    if (pc3R.present) {
      map['pc3_r'] = Variable<double>(pc3R.value);
    }
    if (pc1Y.present) {
      map['pc1_y'] = Variable<double>(pc1Y.value);
    }
    if (pc2Y.present) {
      map['pc2_y'] = Variable<double>(pc2Y.value);
    }
    if (pc3Y.present) {
      map['pc3_y'] = Variable<double>(pc3Y.value);
    }
    if (pc1B.present) {
      map['pc1_b'] = Variable<double>(pc1B.value);
    }
    if (pc2B.present) {
      map['pc2_b'] = Variable<double>(pc2B.value);
    }
    if (pc3B.present) {
      map['pc3_b'] = Variable<double>(pc3B.value);
    }
    if (c1eR.present) {
      map['c1e_r'] = Variable<double>(c1eR.value);
    }
    if (c2eR.present) {
      map['c2e_r'] = Variable<double>(c2eR.value);
    }
    if (c3eR.present) {
      map['c3e_r'] = Variable<double>(c3eR.value);
    }
    if (c1eY.present) {
      map['c1e_y'] = Variable<double>(c1eY.value);
    }
    if (c2eY.present) {
      map['c2e_y'] = Variable<double>(c2eY.value);
    }
    if (c3eY.present) {
      map['c3e_y'] = Variable<double>(c3eY.value);
    }
    if (c1eB.present) {
      map['c1e_b'] = Variable<double>(c1eB.value);
    }
    if (c2eB.present) {
      map['c2e_b'] = Variable<double>(c2eB.value);
    }
    if (c3eB.present) {
      map['c3e_b'] = Variable<double>(c3eB.value);
    }
    if (c1c2R.present) {
      map['c1c2_r'] = Variable<double>(c1c2R.value);
    }
    if (c1c2Y.present) {
      map['c1c2_y'] = Variable<double>(c1c2Y.value);
    }
    if (c1c2B.present) {
      map['c1c2_b'] = Variable<double>(c1c2B.value);
    }
    if (c2c3R.present) {
      map['c2c3_r'] = Variable<double>(c2c3R.value);
    }
    if (c2c3Y.present) {
      map['c2c3_y'] = Variable<double>(c2c3Y.value);
    }
    if (c2c3B.present) {
      map['c2c3_b'] = Variable<double>(c2c3B.value);
    }
    if (clc1R.present) {
      map['clc1_r'] = Variable<double>(clc1R.value);
    }
    if (clc1Y.present) {
      map['clc1_y'] = Variable<double>(clc1Y.value);
    }
    if (clc1B.present) {
      map['clc1_b'] = Variable<double>(clc1B.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PTcoreIRLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('peR: $peR, ')
          ..write('peY: $peY, ')
          ..write('peB: $peB, ')
          ..write('pc1R: $pc1R, ')
          ..write('pc2R: $pc2R, ')
          ..write('pc3R: $pc3R, ')
          ..write('pc1Y: $pc1Y, ')
          ..write('pc2Y: $pc2Y, ')
          ..write('pc3Y: $pc3Y, ')
          ..write('pc1B: $pc1B, ')
          ..write('pc2B: $pc2B, ')
          ..write('pc3B: $pc3B, ')
          ..write('c1eR: $c1eR, ')
          ..write('c2eR: $c2eR, ')
          ..write('c3eR: $c3eR, ')
          ..write('c1eY: $c1eY, ')
          ..write('c2eY: $c2eY, ')
          ..write('c3eY: $c3eY, ')
          ..write('c1eB: $c1eB, ')
          ..write('c2eB: $c2eB, ')
          ..write('c3eB: $c3eB, ')
          ..write('c1c2R: $c1c2R, ')
          ..write('c1c2Y: $c1c2Y, ')
          ..write('c1c2B: $c1c2B, ')
          ..write('c2c3R: $c2c3R, ')
          ..write('c2c3Y: $c2c3Y, ')
          ..write('c2c3B: $c2c3B, ')
          ..write('clc1R: $clc1R, ')
          ..write('clc1Y: $clc1Y, ')
          ..write('clc1B: $clc1B')
          ..write(')'))
        .toString();
  }
}

class $PTcoreIRLocalDatasourceImplTable extends PTcoreIRLocalDatasourceImpl
    with TableInfo<$PTcoreIRLocalDatasourceImplTable, PTcoreIRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PTcoreIRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _peRMeta = const VerificationMeta('peR');
  GeneratedColumn<double> _peR;
  @override
  GeneratedColumn<double> get peR =>
      _peR ??= GeneratedColumn<double>('pe_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _peYMeta = const VerificationMeta('peY');
  GeneratedColumn<double> _peY;
  @override
  GeneratedColumn<double> get peY =>
      _peY ??= GeneratedColumn<double>('pe_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _peBMeta = const VerificationMeta('peB');
  GeneratedColumn<double> _peB;
  @override
  GeneratedColumn<double> get peB =>
      _peB ??= GeneratedColumn<double>('pe_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc1RMeta = const VerificationMeta('pc1R');
  GeneratedColumn<double> _pc1R;
  @override
  GeneratedColumn<double> get pc1R =>
      _pc1R ??= GeneratedColumn<double>('pc1_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc2RMeta = const VerificationMeta('pc2R');
  GeneratedColumn<double> _pc2R;
  @override
  GeneratedColumn<double> get pc2R =>
      _pc2R ??= GeneratedColumn<double>('pc2_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc3RMeta = const VerificationMeta('pc3R');
  GeneratedColumn<double> _pc3R;
  @override
  GeneratedColumn<double> get pc3R =>
      _pc3R ??= GeneratedColumn<double>('pc3_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc1YMeta = const VerificationMeta('pc1Y');
  GeneratedColumn<double> _pc1Y;
  @override
  GeneratedColumn<double> get pc1Y =>
      _pc1Y ??= GeneratedColumn<double>('pc1_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc2YMeta = const VerificationMeta('pc2Y');
  GeneratedColumn<double> _pc2Y;
  @override
  GeneratedColumn<double> get pc2Y =>
      _pc2Y ??= GeneratedColumn<double>('pc2_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc3YMeta = const VerificationMeta('pc3Y');
  GeneratedColumn<double> _pc3Y;
  @override
  GeneratedColumn<double> get pc3Y =>
      _pc3Y ??= GeneratedColumn<double>('pc3_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc1BMeta = const VerificationMeta('pc1B');
  GeneratedColumn<double> _pc1B;
  @override
  GeneratedColumn<double> get pc1B =>
      _pc1B ??= GeneratedColumn<double>('pc1_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc2BMeta = const VerificationMeta('pc2B');
  GeneratedColumn<double> _pc2B;
  @override
  GeneratedColumn<double> get pc2B =>
      _pc2B ??= GeneratedColumn<double>('pc2_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pc3BMeta = const VerificationMeta('pc3B');
  GeneratedColumn<double> _pc3B;
  @override
  GeneratedColumn<double> get pc3B =>
      _pc3B ??= GeneratedColumn<double>('pc3_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1eRMeta = const VerificationMeta('c1eR');
  GeneratedColumn<double> _c1eR;
  @override
  GeneratedColumn<double> get c1eR =>
      _c1eR ??= GeneratedColumn<double>('c1e_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2eRMeta = const VerificationMeta('c2eR');
  GeneratedColumn<double> _c2eR;
  @override
  GeneratedColumn<double> get c2eR =>
      _c2eR ??= GeneratedColumn<double>('c2e_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c3eRMeta = const VerificationMeta('c3eR');
  GeneratedColumn<double> _c3eR;
  @override
  GeneratedColumn<double> get c3eR =>
      _c3eR ??= GeneratedColumn<double>('c3e_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1eYMeta = const VerificationMeta('c1eY');
  GeneratedColumn<double> _c1eY;
  @override
  GeneratedColumn<double> get c1eY =>
      _c1eY ??= GeneratedColumn<double>('c1e_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2eYMeta = const VerificationMeta('c2eY');
  GeneratedColumn<double> _c2eY;
  @override
  GeneratedColumn<double> get c2eY =>
      _c2eY ??= GeneratedColumn<double>('c2e_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c3eYMeta = const VerificationMeta('c3eY');
  GeneratedColumn<double> _c3eY;
  @override
  GeneratedColumn<double> get c3eY =>
      _c3eY ??= GeneratedColumn<double>('c3e_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1eBMeta = const VerificationMeta('c1eB');
  GeneratedColumn<double> _c1eB;
  @override
  GeneratedColumn<double> get c1eB =>
      _c1eB ??= GeneratedColumn<double>('c1e_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2eBMeta = const VerificationMeta('c2eB');
  GeneratedColumn<double> _c2eB;
  @override
  GeneratedColumn<double> get c2eB =>
      _c2eB ??= GeneratedColumn<double>('c2e_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c3eBMeta = const VerificationMeta('c3eB');
  GeneratedColumn<double> _c3eB;
  @override
  GeneratedColumn<double> get c3eB =>
      _c3eB ??= GeneratedColumn<double>('c3e_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1c2RMeta = const VerificationMeta('c1c2R');
  GeneratedColumn<double> _c1c2R;
  @override
  GeneratedColumn<double> get c1c2R =>
      _c1c2R ??= GeneratedColumn<double>('c1c2_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1c2YMeta = const VerificationMeta('c1c2Y');
  GeneratedColumn<double> _c1c2Y;
  @override
  GeneratedColumn<double> get c1c2Y =>
      _c1c2Y ??= GeneratedColumn<double>('c1c2_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c1c2BMeta = const VerificationMeta('c1c2B');
  GeneratedColumn<double> _c1c2B;
  @override
  GeneratedColumn<double> get c1c2B =>
      _c1c2B ??= GeneratedColumn<double>('c1c2_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2c3RMeta = const VerificationMeta('c2c3R');
  GeneratedColumn<double> _c2c3R;
  @override
  GeneratedColumn<double> get c2c3R =>
      _c2c3R ??= GeneratedColumn<double>('c2c3_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2c3YMeta = const VerificationMeta('c2c3Y');
  GeneratedColumn<double> _c2c3Y;
  @override
  GeneratedColumn<double> get c2c3Y =>
      _c2c3Y ??= GeneratedColumn<double>('c2c3_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _c2c3BMeta = const VerificationMeta('c2c3B');
  GeneratedColumn<double> _c2c3B;
  @override
  GeneratedColumn<double> get c2c3B =>
      _c2c3B ??= GeneratedColumn<double>('c2c3_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _clc1RMeta = const VerificationMeta('clc1R');
  GeneratedColumn<double> _clc1R;
  @override
  GeneratedColumn<double> get clc1R =>
      _clc1R ??= GeneratedColumn<double>('clc1_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _clc1YMeta = const VerificationMeta('clc1Y');
  GeneratedColumn<double> _clc1Y;
  @override
  GeneratedColumn<double> get clc1Y =>
      _clc1Y ??= GeneratedColumn<double>('clc1_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _clc1BMeta = const VerificationMeta('clc1B');
  GeneratedColumn<double> _clc1B;
  @override
  GeneratedColumn<double> get clc1B =>
      _clc1B ??= GeneratedColumn<double>('clc1_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        peR,
        peY,
        peB,
        pc1R,
        pc2R,
        pc3R,
        pc1Y,
        pc2Y,
        pc3Y,
        pc1B,
        pc2B,
        pc3B,
        c1eR,
        c2eR,
        c3eR,
        c1eY,
        c2eY,
        c3eY,
        c1eB,
        c2eB,
        c3eB,
        c1c2R,
        c1c2Y,
        c1c2B,
        c2c3R,
        c2c3Y,
        c2c3B,
        clc1R,
        clc1Y,
        clc1B
      ];
  @override
  String get aliasedName => _alias ?? 'p_tcore_i_r_local_datasource_impl';
  @override
  String get actualTableName => 'p_tcore_i_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PTcoreIRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('pe_r')) {
      context.handle(
          _peRMeta, peR.isAcceptableOrUnknown(data['pe_r'], _peRMeta));
    } else if (isInserting) {
      context.missing(_peRMeta);
    }
    if (data.containsKey('pe_y')) {
      context.handle(
          _peYMeta, peY.isAcceptableOrUnknown(data['pe_y'], _peYMeta));
    } else if (isInserting) {
      context.missing(_peYMeta);
    }
    if (data.containsKey('pe_b')) {
      context.handle(
          _peBMeta, peB.isAcceptableOrUnknown(data['pe_b'], _peBMeta));
    } else if (isInserting) {
      context.missing(_peBMeta);
    }
    if (data.containsKey('pc1_r')) {
      context.handle(
          _pc1RMeta, pc1R.isAcceptableOrUnknown(data['pc1_r'], _pc1RMeta));
    } else if (isInserting) {
      context.missing(_pc1RMeta);
    }
    if (data.containsKey('pc2_r')) {
      context.handle(
          _pc2RMeta, pc2R.isAcceptableOrUnknown(data['pc2_r'], _pc2RMeta));
    } else if (isInserting) {
      context.missing(_pc2RMeta);
    }
    if (data.containsKey('pc3_r')) {
      context.handle(
          _pc3RMeta, pc3R.isAcceptableOrUnknown(data['pc3_r'], _pc3RMeta));
    } else if (isInserting) {
      context.missing(_pc3RMeta);
    }
    if (data.containsKey('pc1_y')) {
      context.handle(
          _pc1YMeta, pc1Y.isAcceptableOrUnknown(data['pc1_y'], _pc1YMeta));
    } else if (isInserting) {
      context.missing(_pc1YMeta);
    }
    if (data.containsKey('pc2_y')) {
      context.handle(
          _pc2YMeta, pc2Y.isAcceptableOrUnknown(data['pc2_y'], _pc2YMeta));
    } else if (isInserting) {
      context.missing(_pc2YMeta);
    }
    if (data.containsKey('pc3_y')) {
      context.handle(
          _pc3YMeta, pc3Y.isAcceptableOrUnknown(data['pc3_y'], _pc3YMeta));
    } else if (isInserting) {
      context.missing(_pc3YMeta);
    }
    if (data.containsKey('pc1_b')) {
      context.handle(
          _pc1BMeta, pc1B.isAcceptableOrUnknown(data['pc1_b'], _pc1BMeta));
    } else if (isInserting) {
      context.missing(_pc1BMeta);
    }
    if (data.containsKey('pc2_b')) {
      context.handle(
          _pc2BMeta, pc2B.isAcceptableOrUnknown(data['pc2_b'], _pc2BMeta));
    } else if (isInserting) {
      context.missing(_pc2BMeta);
    }
    if (data.containsKey('pc3_b')) {
      context.handle(
          _pc3BMeta, pc3B.isAcceptableOrUnknown(data['pc3_b'], _pc3BMeta));
    } else if (isInserting) {
      context.missing(_pc3BMeta);
    }
    if (data.containsKey('c1e_r')) {
      context.handle(
          _c1eRMeta, c1eR.isAcceptableOrUnknown(data['c1e_r'], _c1eRMeta));
    } else if (isInserting) {
      context.missing(_c1eRMeta);
    }
    if (data.containsKey('c2e_r')) {
      context.handle(
          _c2eRMeta, c2eR.isAcceptableOrUnknown(data['c2e_r'], _c2eRMeta));
    } else if (isInserting) {
      context.missing(_c2eRMeta);
    }
    if (data.containsKey('c3e_r')) {
      context.handle(
          _c3eRMeta, c3eR.isAcceptableOrUnknown(data['c3e_r'], _c3eRMeta));
    } else if (isInserting) {
      context.missing(_c3eRMeta);
    }
    if (data.containsKey('c1e_y')) {
      context.handle(
          _c1eYMeta, c1eY.isAcceptableOrUnknown(data['c1e_y'], _c1eYMeta));
    } else if (isInserting) {
      context.missing(_c1eYMeta);
    }
    if (data.containsKey('c2e_y')) {
      context.handle(
          _c2eYMeta, c2eY.isAcceptableOrUnknown(data['c2e_y'], _c2eYMeta));
    } else if (isInserting) {
      context.missing(_c2eYMeta);
    }
    if (data.containsKey('c3e_y')) {
      context.handle(
          _c3eYMeta, c3eY.isAcceptableOrUnknown(data['c3e_y'], _c3eYMeta));
    } else if (isInserting) {
      context.missing(_c3eYMeta);
    }
    if (data.containsKey('c1e_b')) {
      context.handle(
          _c1eBMeta, c1eB.isAcceptableOrUnknown(data['c1e_b'], _c1eBMeta));
    } else if (isInserting) {
      context.missing(_c1eBMeta);
    }
    if (data.containsKey('c2e_b')) {
      context.handle(
          _c2eBMeta, c2eB.isAcceptableOrUnknown(data['c2e_b'], _c2eBMeta));
    } else if (isInserting) {
      context.missing(_c2eBMeta);
    }
    if (data.containsKey('c3e_b')) {
      context.handle(
          _c3eBMeta, c3eB.isAcceptableOrUnknown(data['c3e_b'], _c3eBMeta));
    } else if (isInserting) {
      context.missing(_c3eBMeta);
    }
    if (data.containsKey('c1c2_r')) {
      context.handle(
          _c1c2RMeta, c1c2R.isAcceptableOrUnknown(data['c1c2_r'], _c1c2RMeta));
    } else if (isInserting) {
      context.missing(_c1c2RMeta);
    }
    if (data.containsKey('c1c2_y')) {
      context.handle(
          _c1c2YMeta, c1c2Y.isAcceptableOrUnknown(data['c1c2_y'], _c1c2YMeta));
    } else if (isInserting) {
      context.missing(_c1c2YMeta);
    }
    if (data.containsKey('c1c2_b')) {
      context.handle(
          _c1c2BMeta, c1c2B.isAcceptableOrUnknown(data['c1c2_b'], _c1c2BMeta));
    } else if (isInserting) {
      context.missing(_c1c2BMeta);
    }
    if (data.containsKey('c2c3_r')) {
      context.handle(
          _c2c3RMeta, c2c3R.isAcceptableOrUnknown(data['c2c3_r'], _c2c3RMeta));
    } else if (isInserting) {
      context.missing(_c2c3RMeta);
    }
    if (data.containsKey('c2c3_y')) {
      context.handle(
          _c2c3YMeta, c2c3Y.isAcceptableOrUnknown(data['c2c3_y'], _c2c3YMeta));
    } else if (isInserting) {
      context.missing(_c2c3YMeta);
    }
    if (data.containsKey('c2c3_b')) {
      context.handle(
          _c2c3BMeta, c2c3B.isAcceptableOrUnknown(data['c2c3_b'], _c2c3BMeta));
    } else if (isInserting) {
      context.missing(_c2c3BMeta);
    }
    if (data.containsKey('clc1_r')) {
      context.handle(
          _clc1RMeta, clc1R.isAcceptableOrUnknown(data['clc1_r'], _clc1RMeta));
    } else if (isInserting) {
      context.missing(_clc1RMeta);
    }
    if (data.containsKey('clc1_y')) {
      context.handle(
          _clc1YMeta, clc1Y.isAcceptableOrUnknown(data['clc1_y'], _clc1YMeta));
    } else if (isInserting) {
      context.missing(_clc1YMeta);
    }
    if (data.containsKey('clc1_b')) {
      context.handle(
          _clc1BMeta, clc1B.isAcceptableOrUnknown(data['clc1_b'], _clc1BMeta));
    } else if (isInserting) {
      context.missing(_clc1BMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PTcoreIRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PTcoreIRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PTcoreIRLocalDatasourceImplTable createAlias(String alias) {
    return $PTcoreIRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PTcoreWRLocalData extends DataClass
    implements Insertable<PTcoreWRLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double R_1a_1n;
  final double R_2a_2n;
  final double R_3a_3n;
  final double Y_1a_1n;
  final double Y_2a_2n;
  final double Y_3a_3n;
  final double B_1a_1n;
  final double B_2a_2n;
  final double B_3a_3n;
  PTcoreWRLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.R_1a_1n,
      @required this.R_2a_2n,
      @required this.R_3a_3n,
      @required this.Y_1a_1n,
      @required this.Y_2a_2n,
      @required this.Y_3a_3n,
      @required this.B_1a_1n,
      @required this.B_2a_2n,
      @required this.B_3a_3n});
  factory PTcoreWRLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PTcoreWRLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      R_1a_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1a_1n']),
      R_2a_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2a_2n']),
      R_3a_3n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3a_3n']),
      Y_1a_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1a_1n']),
      Y_2a_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2a_2n']),
      Y_3a_3n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3a_3n']),
      B_1a_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1a_1n']),
      B_2a_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2a_2n']),
      B_3a_3n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3a_3n']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || R_1a_1n != null) {
      map['r_1a_1n'] = Variable<double>(R_1a_1n);
    }
    if (!nullToAbsent || R_2a_2n != null) {
      map['r_2a_2n'] = Variable<double>(R_2a_2n);
    }
    if (!nullToAbsent || R_3a_3n != null) {
      map['r_3a_3n'] = Variable<double>(R_3a_3n);
    }
    if (!nullToAbsent || Y_1a_1n != null) {
      map['y_1a_1n'] = Variable<double>(Y_1a_1n);
    }
    if (!nullToAbsent || Y_2a_2n != null) {
      map['y_2a_2n'] = Variable<double>(Y_2a_2n);
    }
    if (!nullToAbsent || Y_3a_3n != null) {
      map['y_3a_3n'] = Variable<double>(Y_3a_3n);
    }
    if (!nullToAbsent || B_1a_1n != null) {
      map['b_1a_1n'] = Variable<double>(B_1a_1n);
    }
    if (!nullToAbsent || B_2a_2n != null) {
      map['b_2a_2n'] = Variable<double>(B_2a_2n);
    }
    if (!nullToAbsent || B_3a_3n != null) {
      map['b_3a_3n'] = Variable<double>(B_3a_3n);
    }
    return map;
  }

  PTcoreWRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PTcoreWRLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      R_1a_1n: R_1a_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1a_1n),
      R_2a_2n: R_2a_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2a_2n),
      R_3a_3n: R_3a_3n == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3a_3n),
      Y_1a_1n: Y_1a_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1a_1n),
      Y_2a_2n: Y_2a_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2a_2n),
      Y_3a_3n: Y_3a_3n == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3a_3n),
      B_1a_1n: B_1a_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1a_1n),
      B_2a_2n: B_2a_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2a_2n),
      B_3a_3n: B_3a_3n == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3a_3n),
    );
  }

  factory PTcoreWRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PTcoreWRLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      R_1a_1n: serializer.fromJson<double>(json['R_1a_1n']),
      R_2a_2n: serializer.fromJson<double>(json['R_2a_2n']),
      R_3a_3n: serializer.fromJson<double>(json['R_3a_3n']),
      Y_1a_1n: serializer.fromJson<double>(json['Y_1a_1n']),
      Y_2a_2n: serializer.fromJson<double>(json['Y_2a_2n']),
      Y_3a_3n: serializer.fromJson<double>(json['Y_3a_3n']),
      B_1a_1n: serializer.fromJson<double>(json['B_1a_1n']),
      B_2a_2n: serializer.fromJson<double>(json['B_2a_2n']),
      B_3a_3n: serializer.fromJson<double>(json['B_3a_3n']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'R_1a_1n': serializer.toJson<double>(R_1a_1n),
      'R_2a_2n': serializer.toJson<double>(R_2a_2n),
      'R_3a_3n': serializer.toJson<double>(R_3a_3n),
      'Y_1a_1n': serializer.toJson<double>(Y_1a_1n),
      'Y_2a_2n': serializer.toJson<double>(Y_2a_2n),
      'Y_3a_3n': serializer.toJson<double>(Y_3a_3n),
      'B_1a_1n': serializer.toJson<double>(B_1a_1n),
      'B_2a_2n': serializer.toJson<double>(B_2a_2n),
      'B_3a_3n': serializer.toJson<double>(B_3a_3n),
    };
  }

  PTcoreWRLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double R_1a_1n,
          double R_2a_2n,
          double R_3a_3n,
          double Y_1a_1n,
          double Y_2a_2n,
          double Y_3a_3n,
          double B_1a_1n,
          double B_2a_2n,
          double B_3a_3n}) =>
      PTcoreWRLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        R_1a_1n: R_1a_1n ?? this.R_1a_1n,
        R_2a_2n: R_2a_2n ?? this.R_2a_2n,
        R_3a_3n: R_3a_3n ?? this.R_3a_3n,
        Y_1a_1n: Y_1a_1n ?? this.Y_1a_1n,
        Y_2a_2n: Y_2a_2n ?? this.Y_2a_2n,
        Y_3a_3n: Y_3a_3n ?? this.Y_3a_3n,
        B_1a_1n: B_1a_1n ?? this.B_1a_1n,
        B_2a_2n: B_2a_2n ?? this.B_2a_2n,
        B_3a_3n: B_3a_3n ?? this.B_3a_3n,
      );
  @override
  String toString() {
    return (StringBuffer('PTcoreWRLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_1a_1n: $R_1a_1n, ')
          ..write('R_2a_2n: $R_2a_2n, ')
          ..write('R_3a_3n: $R_3a_3n, ')
          ..write('Y_1a_1n: $Y_1a_1n, ')
          ..write('Y_2a_2n: $Y_2a_2n, ')
          ..write('Y_3a_3n: $Y_3a_3n, ')
          ..write('B_1a_1n: $B_1a_1n, ')
          ..write('B_2a_2n: $B_2a_2n, ')
          ..write('B_3a_3n: $B_3a_3n')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      equipmentUsed,
      updateDate,
      R_1a_1n,
      R_2a_2n,
      R_3a_3n,
      Y_1a_1n,
      Y_2a_2n,
      Y_3a_3n,
      B_1a_1n,
      B_2a_2n,
      B_3a_3n);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PTcoreWRLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.R_1a_1n == this.R_1a_1n &&
          other.R_2a_2n == this.R_2a_2n &&
          other.R_3a_3n == this.R_3a_3n &&
          other.Y_1a_1n == this.Y_1a_1n &&
          other.Y_2a_2n == this.Y_2a_2n &&
          other.Y_3a_3n == this.Y_3a_3n &&
          other.B_1a_1n == this.B_1a_1n &&
          other.B_2a_2n == this.B_2a_2n &&
          other.B_3a_3n == this.B_3a_3n);
}

class PTcoreWRLocalDatasourceImplCompanion
    extends UpdateCompanion<PTcoreWRLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> R_1a_1n;
  final Value<double> R_2a_2n;
  final Value<double> R_3a_3n;
  final Value<double> Y_1a_1n;
  final Value<double> Y_2a_2n;
  final Value<double> Y_3a_3n;
  final Value<double> B_1a_1n;
  final Value<double> B_2a_2n;
  final Value<double> B_3a_3n;
  const PTcoreWRLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.R_1a_1n = const Value.absent(),
    this.R_2a_2n = const Value.absent(),
    this.R_3a_3n = const Value.absent(),
    this.Y_1a_1n = const Value.absent(),
    this.Y_2a_2n = const Value.absent(),
    this.Y_3a_3n = const Value.absent(),
    this.B_1a_1n = const Value.absent(),
    this.B_2a_2n = const Value.absent(),
    this.B_3a_3n = const Value.absent(),
  });
  PTcoreWRLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double R_1a_1n,
    @required double R_2a_2n,
    @required double R_3a_3n,
    @required double Y_1a_1n,
    @required double Y_2a_2n,
    @required double Y_3a_3n,
    @required double B_1a_1n,
    @required double B_2a_2n,
    @required double B_3a_3n,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        R_1a_1n = Value(R_1a_1n),
        R_2a_2n = Value(R_2a_2n),
        R_3a_3n = Value(R_3a_3n),
        Y_1a_1n = Value(Y_1a_1n),
        Y_2a_2n = Value(Y_2a_2n),
        Y_3a_3n = Value(Y_3a_3n),
        B_1a_1n = Value(B_1a_1n),
        B_2a_2n = Value(B_2a_2n),
        B_3a_3n = Value(B_3a_3n);
  static Insertable<PTcoreWRLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> R_1a_1n,
    Expression<double> R_2a_2n,
    Expression<double> R_3a_3n,
    Expression<double> Y_1a_1n,
    Expression<double> Y_2a_2n,
    Expression<double> Y_3a_3n,
    Expression<double> B_1a_1n,
    Expression<double> B_2a_2n,
    Expression<double> B_3a_3n,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (R_1a_1n != null) 'r_1a_1n': R_1a_1n,
      if (R_2a_2n != null) 'r_2a_2n': R_2a_2n,
      if (R_3a_3n != null) 'r_3a_3n': R_3a_3n,
      if (Y_1a_1n != null) 'y_1a_1n': Y_1a_1n,
      if (Y_2a_2n != null) 'y_2a_2n': Y_2a_2n,
      if (Y_3a_3n != null) 'y_3a_3n': Y_3a_3n,
      if (B_1a_1n != null) 'b_1a_1n': B_1a_1n,
      if (B_2a_2n != null) 'b_2a_2n': B_2a_2n,
      if (B_3a_3n != null) 'b_3a_3n': B_3a_3n,
    });
  }

  PTcoreWRLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> R_1a_1n,
      Value<double> R_2a_2n,
      Value<double> R_3a_3n,
      Value<double> Y_1a_1n,
      Value<double> Y_2a_2n,
      Value<double> Y_3a_3n,
      Value<double> B_1a_1n,
      Value<double> B_2a_2n,
      Value<double> B_3a_3n}) {
    return PTcoreWRLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      R_1a_1n: R_1a_1n ?? this.R_1a_1n,
      R_2a_2n: R_2a_2n ?? this.R_2a_2n,
      R_3a_3n: R_3a_3n ?? this.R_3a_3n,
      Y_1a_1n: Y_1a_1n ?? this.Y_1a_1n,
      Y_2a_2n: Y_2a_2n ?? this.Y_2a_2n,
      Y_3a_3n: Y_3a_3n ?? this.Y_3a_3n,
      B_1a_1n: B_1a_1n ?? this.B_1a_1n,
      B_2a_2n: B_2a_2n ?? this.B_2a_2n,
      B_3a_3n: B_3a_3n ?? this.B_3a_3n,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (R_1a_1n.present) {
      map['r_1a_1n'] = Variable<double>(R_1a_1n.value);
    }
    if (R_2a_2n.present) {
      map['r_2a_2n'] = Variable<double>(R_2a_2n.value);
    }
    if (R_3a_3n.present) {
      map['r_3a_3n'] = Variable<double>(R_3a_3n.value);
    }
    if (Y_1a_1n.present) {
      map['y_1a_1n'] = Variable<double>(Y_1a_1n.value);
    }
    if (Y_2a_2n.present) {
      map['y_2a_2n'] = Variable<double>(Y_2a_2n.value);
    }
    if (Y_3a_3n.present) {
      map['y_3a_3n'] = Variable<double>(Y_3a_3n.value);
    }
    if (B_1a_1n.present) {
      map['b_1a_1n'] = Variable<double>(B_1a_1n.value);
    }
    if (B_2a_2n.present) {
      map['b_2a_2n'] = Variable<double>(B_2a_2n.value);
    }
    if (B_3a_3n.present) {
      map['b_3a_3n'] = Variable<double>(B_3a_3n.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PTcoreWRLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_1a_1n: $R_1a_1n, ')
          ..write('R_2a_2n: $R_2a_2n, ')
          ..write('R_3a_3n: $R_3a_3n, ')
          ..write('Y_1a_1n: $Y_1a_1n, ')
          ..write('Y_2a_2n: $Y_2a_2n, ')
          ..write('Y_3a_3n: $Y_3a_3n, ')
          ..write('B_1a_1n: $B_1a_1n, ')
          ..write('B_2a_2n: $B_2a_2n, ')
          ..write('B_3a_3n: $B_3a_3n')
          ..write(')'))
        .toString();
  }
}

class $PTcoreWRLocalDatasourceImplTable extends PTcoreWRLocalDatasourceImpl
    with TableInfo<$PTcoreWRLocalDatasourceImplTable, PTcoreWRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PTcoreWRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _R_1a_1nMeta = const VerificationMeta('R_1a_1n');
  GeneratedColumn<double> _R_1a_1n;
  @override
  GeneratedColumn<double> get R_1a_1n =>
      _R_1a_1n ??= GeneratedColumn<double>('r_1a_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_2a_2nMeta = const VerificationMeta('R_2a_2n');
  GeneratedColumn<double> _R_2a_2n;
  @override
  GeneratedColumn<double> get R_2a_2n =>
      _R_2a_2n ??= GeneratedColumn<double>('r_2a_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_3a_3nMeta = const VerificationMeta('R_3a_3n');
  GeneratedColumn<double> _R_3a_3n;
  @override
  GeneratedColumn<double> get R_3a_3n =>
      _R_3a_3n ??= GeneratedColumn<double>('r_3a_3n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_1a_1nMeta = const VerificationMeta('Y_1a_1n');
  GeneratedColumn<double> _Y_1a_1n;
  @override
  GeneratedColumn<double> get Y_1a_1n =>
      _Y_1a_1n ??= GeneratedColumn<double>('y_1a_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_2a_2nMeta = const VerificationMeta('Y_2a_2n');
  GeneratedColumn<double> _Y_2a_2n;
  @override
  GeneratedColumn<double> get Y_2a_2n =>
      _Y_2a_2n ??= GeneratedColumn<double>('y_2a_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_3a_3nMeta = const VerificationMeta('Y_3a_3n');
  GeneratedColumn<double> _Y_3a_3n;
  @override
  GeneratedColumn<double> get Y_3a_3n =>
      _Y_3a_3n ??= GeneratedColumn<double>('y_3a_3n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_1a_1nMeta = const VerificationMeta('B_1a_1n');
  GeneratedColumn<double> _B_1a_1n;
  @override
  GeneratedColumn<double> get B_1a_1n =>
      _B_1a_1n ??= GeneratedColumn<double>('b_1a_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_2a_2nMeta = const VerificationMeta('B_2a_2n');
  GeneratedColumn<double> _B_2a_2n;
  @override
  GeneratedColumn<double> get B_2a_2n =>
      _B_2a_2n ??= GeneratedColumn<double>('b_2a_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_3a_3nMeta = const VerificationMeta('B_3a_3n');
  GeneratedColumn<double> _B_3a_3n;
  @override
  GeneratedColumn<double> get B_3a_3n =>
      _B_3a_3n ??= GeneratedColumn<double>('b_3a_3n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_1a_1n,
        R_2a_2n,
        R_3a_3n,
        Y_1a_1n,
        Y_2a_2n,
        Y_3a_3n,
        B_1a_1n,
        B_2a_2n,
        B_3a_3n
      ];
  @override
  String get aliasedName => _alias ?? 'p_tcore_w_r_local_datasource_impl';
  @override
  String get actualTableName => 'p_tcore_w_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PTcoreWRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('r_1a_1n')) {
      context.handle(_R_1a_1nMeta,
          R_1a_1n.isAcceptableOrUnknown(data['r_1a_1n'], _R_1a_1nMeta));
    } else if (isInserting) {
      context.missing(_R_1a_1nMeta);
    }
    if (data.containsKey('r_2a_2n')) {
      context.handle(_R_2a_2nMeta,
          R_2a_2n.isAcceptableOrUnknown(data['r_2a_2n'], _R_2a_2nMeta));
    } else if (isInserting) {
      context.missing(_R_2a_2nMeta);
    }
    if (data.containsKey('r_3a_3n')) {
      context.handle(_R_3a_3nMeta,
          R_3a_3n.isAcceptableOrUnknown(data['r_3a_3n'], _R_3a_3nMeta));
    } else if (isInserting) {
      context.missing(_R_3a_3nMeta);
    }
    if (data.containsKey('y_1a_1n')) {
      context.handle(_Y_1a_1nMeta,
          Y_1a_1n.isAcceptableOrUnknown(data['y_1a_1n'], _Y_1a_1nMeta));
    } else if (isInserting) {
      context.missing(_Y_1a_1nMeta);
    }
    if (data.containsKey('y_2a_2n')) {
      context.handle(_Y_2a_2nMeta,
          Y_2a_2n.isAcceptableOrUnknown(data['y_2a_2n'], _Y_2a_2nMeta));
    } else if (isInserting) {
      context.missing(_Y_2a_2nMeta);
    }
    if (data.containsKey('y_3a_3n')) {
      context.handle(_Y_3a_3nMeta,
          Y_3a_3n.isAcceptableOrUnknown(data['y_3a_3n'], _Y_3a_3nMeta));
    } else if (isInserting) {
      context.missing(_Y_3a_3nMeta);
    }
    if (data.containsKey('b_1a_1n')) {
      context.handle(_B_1a_1nMeta,
          B_1a_1n.isAcceptableOrUnknown(data['b_1a_1n'], _B_1a_1nMeta));
    } else if (isInserting) {
      context.missing(_B_1a_1nMeta);
    }
    if (data.containsKey('b_2a_2n')) {
      context.handle(_B_2a_2nMeta,
          B_2a_2n.isAcceptableOrUnknown(data['b_2a_2n'], _B_2a_2nMeta));
    } else if (isInserting) {
      context.missing(_B_2a_2nMeta);
    }
    if (data.containsKey('b_3a_3n')) {
      context.handle(_B_3a_3nMeta,
          B_3a_3n.isAcceptableOrUnknown(data['b_3a_3n'], _B_3a_3nMeta));
    } else if (isInserting) {
      context.missing(_B_3a_3nMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PTcoreWRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PTcoreWRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PTcoreWRLocalDatasourceImplTable createAlias(String alias) {
    return $PTcoreWRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PTcoreRLocalData extends DataClass
    implements Insertable<PTcoreRLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double R_1a_1n_1000;
  final double R_2a_2n_1000;
  final double R_3a_3n_1000;
  final double Y_1a_1n_1000;
  final double Y_2a_2n_1000;
  final double Y_3a_3n_1000;
  final double B_1a_1n_1000;
  final double B_2a_2n_1000;
  final double B_3a_3n_1000;
  final double R_1a_1n_2000;
  final double R_2a_2n_2000;
  final double R_3a_3n_2000;
  final double Y_1a_1n_2000;
  final double Y_2a_2n_2000;
  final double Y_3a_3n_2000;
  final double B_1a_1n_2000;
  final double B_2a_2n_2000;
  final double B_3a_3n_2000;
  final double R_1a_1n_3000;
  final double R_2a_2n_3000;
  final double R_3a_3n_3000;
  final double Y_1a_1n_3000;
  final double Y_2a_2n_3000;
  final double Y_3a_3n_3000;
  final double B_1a_1n_3000;
  final double B_2a_2n_3000;
  final double B_3a_3n_3000;
  final double R_1a_1n_4000;
  final double R_2a_2n_4000;
  final double R_3a_3n_4000;
  final double Y_1a_1n_4000;
  final double Y_2a_2n_4000;
  final double Y_3a_3n_4000;
  final double B_1a_1n_4000;
  final double B_2a_2n_4000;
  final double B_3a_3n_4000;
  PTcoreRLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.R_1a_1n_1000,
      @required this.R_2a_2n_1000,
      @required this.R_3a_3n_1000,
      @required this.Y_1a_1n_1000,
      @required this.Y_2a_2n_1000,
      @required this.Y_3a_3n_1000,
      @required this.B_1a_1n_1000,
      @required this.B_2a_2n_1000,
      @required this.B_3a_3n_1000,
      @required this.R_1a_1n_2000,
      @required this.R_2a_2n_2000,
      @required this.R_3a_3n_2000,
      @required this.Y_1a_1n_2000,
      @required this.Y_2a_2n_2000,
      @required this.Y_3a_3n_2000,
      @required this.B_1a_1n_2000,
      @required this.B_2a_2n_2000,
      @required this.B_3a_3n_2000,
      @required this.R_1a_1n_3000,
      @required this.R_2a_2n_3000,
      @required this.R_3a_3n_3000,
      @required this.Y_1a_1n_3000,
      @required this.Y_2a_2n_3000,
      @required this.Y_3a_3n_3000,
      @required this.B_1a_1n_3000,
      @required this.B_2a_2n_3000,
      @required this.B_3a_3n_3000,
      @required this.R_1a_1n_4000,
      @required this.R_2a_2n_4000,
      @required this.R_3a_3n_4000,
      @required this.Y_1a_1n_4000,
      @required this.Y_2a_2n_4000,
      @required this.Y_3a_3n_4000,
      @required this.B_1a_1n_4000,
      @required this.B_2a_2n_4000,
      @required this.B_3a_3n_4000});
  factory PTcoreRLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PTcoreRLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      R_1a_1n_1000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1a_1n_1000']),
      R_2a_2n_1000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2a_2n_1000']),
      R_3a_3n_1000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3a_3n_1000']),
      Y_1a_1n_1000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1a_1n_1000']),
      Y_2a_2n_1000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2a_2n_1000']),
      Y_3a_3n_1000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3a_3n_1000']),
      B_1a_1n_1000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1a_1n_1000']),
      B_2a_2n_1000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2a_2n_1000']),
      B_3a_3n_1000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3a_3n_1000']),
      R_1a_1n_2000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1a_1n_2000']),
      R_2a_2n_2000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2a_2n_2000']),
      R_3a_3n_2000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3a_3n_2000']),
      Y_1a_1n_2000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1a_1n_2000']),
      Y_2a_2n_2000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2a_2n_2000']),
      Y_3a_3n_2000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3a_3n_2000']),
      B_1a_1n_2000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1a_1n_2000']),
      B_2a_2n_2000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2a_2n_2000']),
      B_3a_3n_2000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3a_3n_2000']),
      R_1a_1n_3000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1a_1n_3000']),
      R_2a_2n_3000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2a_2n_3000']),
      R_3a_3n_3000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3a_3n_3000']),
      Y_1a_1n_3000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1a_1n_3000']),
      Y_2a_2n_3000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2a_2n_3000']),
      Y_3a_3n_3000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3a_3n_3000']),
      B_1a_1n_3000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1a_1n_3000']),
      B_2a_2n_3000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2a_2n_3000']),
      B_3a_3n_3000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3a_3n_3000']),
      R_1a_1n_4000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_1a_1n_4000']),
      R_2a_2n_4000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_2a_2n_4000']),
      R_3a_3n_4000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_3a_3n_4000']),
      Y_1a_1n_4000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_1a_1n_4000']),
      Y_2a_2n_4000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_2a_2n_4000']),
      Y_3a_3n_4000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_3a_3n_4000']),
      B_1a_1n_4000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_1a_1n_4000']),
      B_2a_2n_4000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_2a_2n_4000']),
      B_3a_3n_4000: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_3a_3n_4000']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || R_1a_1n_1000 != null) {
      map['r_1a_1n_1000'] = Variable<double>(R_1a_1n_1000);
    }
    if (!nullToAbsent || R_2a_2n_1000 != null) {
      map['r_2a_2n_1000'] = Variable<double>(R_2a_2n_1000);
    }
    if (!nullToAbsent || R_3a_3n_1000 != null) {
      map['r_3a_3n_1000'] = Variable<double>(R_3a_3n_1000);
    }
    if (!nullToAbsent || Y_1a_1n_1000 != null) {
      map['y_1a_1n_1000'] = Variable<double>(Y_1a_1n_1000);
    }
    if (!nullToAbsent || Y_2a_2n_1000 != null) {
      map['y_2a_2n_1000'] = Variable<double>(Y_2a_2n_1000);
    }
    if (!nullToAbsent || Y_3a_3n_1000 != null) {
      map['y_3a_3n_1000'] = Variable<double>(Y_3a_3n_1000);
    }
    if (!nullToAbsent || B_1a_1n_1000 != null) {
      map['b_1a_1n_1000'] = Variable<double>(B_1a_1n_1000);
    }
    if (!nullToAbsent || B_2a_2n_1000 != null) {
      map['b_2a_2n_1000'] = Variable<double>(B_2a_2n_1000);
    }
    if (!nullToAbsent || B_3a_3n_1000 != null) {
      map['b_3a_3n_1000'] = Variable<double>(B_3a_3n_1000);
    }
    if (!nullToAbsent || R_1a_1n_2000 != null) {
      map['r_1a_1n_2000'] = Variable<double>(R_1a_1n_2000);
    }
    if (!nullToAbsent || R_2a_2n_2000 != null) {
      map['r_2a_2n_2000'] = Variable<double>(R_2a_2n_2000);
    }
    if (!nullToAbsent || R_3a_3n_2000 != null) {
      map['r_3a_3n_2000'] = Variable<double>(R_3a_3n_2000);
    }
    if (!nullToAbsent || Y_1a_1n_2000 != null) {
      map['y_1a_1n_2000'] = Variable<double>(Y_1a_1n_2000);
    }
    if (!nullToAbsent || Y_2a_2n_2000 != null) {
      map['y_2a_2n_2000'] = Variable<double>(Y_2a_2n_2000);
    }
    if (!nullToAbsent || Y_3a_3n_2000 != null) {
      map['y_3a_3n_2000'] = Variable<double>(Y_3a_3n_2000);
    }
    if (!nullToAbsent || B_1a_1n_2000 != null) {
      map['b_1a_1n_2000'] = Variable<double>(B_1a_1n_2000);
    }
    if (!nullToAbsent || B_2a_2n_2000 != null) {
      map['b_2a_2n_2000'] = Variable<double>(B_2a_2n_2000);
    }
    if (!nullToAbsent || B_3a_3n_2000 != null) {
      map['b_3a_3n_2000'] = Variable<double>(B_3a_3n_2000);
    }
    if (!nullToAbsent || R_1a_1n_3000 != null) {
      map['r_1a_1n_3000'] = Variable<double>(R_1a_1n_3000);
    }
    if (!nullToAbsent || R_2a_2n_3000 != null) {
      map['r_2a_2n_3000'] = Variable<double>(R_2a_2n_3000);
    }
    if (!nullToAbsent || R_3a_3n_3000 != null) {
      map['r_3a_3n_3000'] = Variable<double>(R_3a_3n_3000);
    }
    if (!nullToAbsent || Y_1a_1n_3000 != null) {
      map['y_1a_1n_3000'] = Variable<double>(Y_1a_1n_3000);
    }
    if (!nullToAbsent || Y_2a_2n_3000 != null) {
      map['y_2a_2n_3000'] = Variable<double>(Y_2a_2n_3000);
    }
    if (!nullToAbsent || Y_3a_3n_3000 != null) {
      map['y_3a_3n_3000'] = Variable<double>(Y_3a_3n_3000);
    }
    if (!nullToAbsent || B_1a_1n_3000 != null) {
      map['b_1a_1n_3000'] = Variable<double>(B_1a_1n_3000);
    }
    if (!nullToAbsent || B_2a_2n_3000 != null) {
      map['b_2a_2n_3000'] = Variable<double>(B_2a_2n_3000);
    }
    if (!nullToAbsent || B_3a_3n_3000 != null) {
      map['b_3a_3n_3000'] = Variable<double>(B_3a_3n_3000);
    }
    if (!nullToAbsent || R_1a_1n_4000 != null) {
      map['r_1a_1n_4000'] = Variable<double>(R_1a_1n_4000);
    }
    if (!nullToAbsent || R_2a_2n_4000 != null) {
      map['r_2a_2n_4000'] = Variable<double>(R_2a_2n_4000);
    }
    if (!nullToAbsent || R_3a_3n_4000 != null) {
      map['r_3a_3n_4000'] = Variable<double>(R_3a_3n_4000);
    }
    if (!nullToAbsent || Y_1a_1n_4000 != null) {
      map['y_1a_1n_4000'] = Variable<double>(Y_1a_1n_4000);
    }
    if (!nullToAbsent || Y_2a_2n_4000 != null) {
      map['y_2a_2n_4000'] = Variable<double>(Y_2a_2n_4000);
    }
    if (!nullToAbsent || Y_3a_3n_4000 != null) {
      map['y_3a_3n_4000'] = Variable<double>(Y_3a_3n_4000);
    }
    if (!nullToAbsent || B_1a_1n_4000 != null) {
      map['b_1a_1n_4000'] = Variable<double>(B_1a_1n_4000);
    }
    if (!nullToAbsent || B_2a_2n_4000 != null) {
      map['b_2a_2n_4000'] = Variable<double>(B_2a_2n_4000);
    }
    if (!nullToAbsent || B_3a_3n_4000 != null) {
      map['b_3a_3n_4000'] = Variable<double>(B_3a_3n_4000);
    }
    return map;
  }

  PTcoreRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PTcoreRLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      R_1a_1n_1000: R_1a_1n_1000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1a_1n_1000),
      R_2a_2n_1000: R_2a_2n_1000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2a_2n_1000),
      R_3a_3n_1000: R_3a_3n_1000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3a_3n_1000),
      Y_1a_1n_1000: Y_1a_1n_1000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1a_1n_1000),
      Y_2a_2n_1000: Y_2a_2n_1000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2a_2n_1000),
      Y_3a_3n_1000: Y_3a_3n_1000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3a_3n_1000),
      B_1a_1n_1000: B_1a_1n_1000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1a_1n_1000),
      B_2a_2n_1000: B_2a_2n_1000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2a_2n_1000),
      B_3a_3n_1000: B_3a_3n_1000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3a_3n_1000),
      R_1a_1n_2000: R_1a_1n_2000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1a_1n_2000),
      R_2a_2n_2000: R_2a_2n_2000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2a_2n_2000),
      R_3a_3n_2000: R_3a_3n_2000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3a_3n_2000),
      Y_1a_1n_2000: Y_1a_1n_2000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1a_1n_2000),
      Y_2a_2n_2000: Y_2a_2n_2000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2a_2n_2000),
      Y_3a_3n_2000: Y_3a_3n_2000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3a_3n_2000),
      B_1a_1n_2000: B_1a_1n_2000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1a_1n_2000),
      B_2a_2n_2000: B_2a_2n_2000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2a_2n_2000),
      B_3a_3n_2000: B_3a_3n_2000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3a_3n_2000),
      R_1a_1n_3000: R_1a_1n_3000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1a_1n_3000),
      R_2a_2n_3000: R_2a_2n_3000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2a_2n_3000),
      R_3a_3n_3000: R_3a_3n_3000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3a_3n_3000),
      Y_1a_1n_3000: Y_1a_1n_3000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1a_1n_3000),
      Y_2a_2n_3000: Y_2a_2n_3000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2a_2n_3000),
      Y_3a_3n_3000: Y_3a_3n_3000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3a_3n_3000),
      B_1a_1n_3000: B_1a_1n_3000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1a_1n_3000),
      B_2a_2n_3000: B_2a_2n_3000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2a_2n_3000),
      B_3a_3n_3000: B_3a_3n_3000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3a_3n_3000),
      R_1a_1n_4000: R_1a_1n_4000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_1a_1n_4000),
      R_2a_2n_4000: R_2a_2n_4000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_2a_2n_4000),
      R_3a_3n_4000: R_3a_3n_4000 == null && nullToAbsent
          ? const Value.absent()
          : Value(R_3a_3n_4000),
      Y_1a_1n_4000: Y_1a_1n_4000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_1a_1n_4000),
      Y_2a_2n_4000: Y_2a_2n_4000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_2a_2n_4000),
      Y_3a_3n_4000: Y_3a_3n_4000 == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_3a_3n_4000),
      B_1a_1n_4000: B_1a_1n_4000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_1a_1n_4000),
      B_2a_2n_4000: B_2a_2n_4000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_2a_2n_4000),
      B_3a_3n_4000: B_3a_3n_4000 == null && nullToAbsent
          ? const Value.absent()
          : Value(B_3a_3n_4000),
    );
  }

  factory PTcoreRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PTcoreRLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      R_1a_1n_1000: serializer.fromJson<double>(json['R_1a_1n_1000']),
      R_2a_2n_1000: serializer.fromJson<double>(json['R_2a_2n_1000']),
      R_3a_3n_1000: serializer.fromJson<double>(json['R_3a_3n_1000']),
      Y_1a_1n_1000: serializer.fromJson<double>(json['Y_1a_1n_1000']),
      Y_2a_2n_1000: serializer.fromJson<double>(json['Y_2a_2n_1000']),
      Y_3a_3n_1000: serializer.fromJson<double>(json['Y_3a_3n_1000']),
      B_1a_1n_1000: serializer.fromJson<double>(json['B_1a_1n_1000']),
      B_2a_2n_1000: serializer.fromJson<double>(json['B_2a_2n_1000']),
      B_3a_3n_1000: serializer.fromJson<double>(json['B_3a_3n_1000']),
      R_1a_1n_2000: serializer.fromJson<double>(json['R_1a_1n_2000']),
      R_2a_2n_2000: serializer.fromJson<double>(json['R_2a_2n_2000']),
      R_3a_3n_2000: serializer.fromJson<double>(json['R_3a_3n_2000']),
      Y_1a_1n_2000: serializer.fromJson<double>(json['Y_1a_1n_2000']),
      Y_2a_2n_2000: serializer.fromJson<double>(json['Y_2a_2n_2000']),
      Y_3a_3n_2000: serializer.fromJson<double>(json['Y_3a_3n_2000']),
      B_1a_1n_2000: serializer.fromJson<double>(json['B_1a_1n_2000']),
      B_2a_2n_2000: serializer.fromJson<double>(json['B_2a_2n_2000']),
      B_3a_3n_2000: serializer.fromJson<double>(json['B_3a_3n_2000']),
      R_1a_1n_3000: serializer.fromJson<double>(json['R_1a_1n_3000']),
      R_2a_2n_3000: serializer.fromJson<double>(json['R_2a_2n_3000']),
      R_3a_3n_3000: serializer.fromJson<double>(json['R_3a_3n_3000']),
      Y_1a_1n_3000: serializer.fromJson<double>(json['Y_1a_1n_3000']),
      Y_2a_2n_3000: serializer.fromJson<double>(json['Y_2a_2n_3000']),
      Y_3a_3n_3000: serializer.fromJson<double>(json['Y_3a_3n_3000']),
      B_1a_1n_3000: serializer.fromJson<double>(json['B_1a_1n_3000']),
      B_2a_2n_3000: serializer.fromJson<double>(json['B_2a_2n_3000']),
      B_3a_3n_3000: serializer.fromJson<double>(json['B_3a_3n_3000']),
      R_1a_1n_4000: serializer.fromJson<double>(json['R_1a_1n_4000']),
      R_2a_2n_4000: serializer.fromJson<double>(json['R_2a_2n_4000']),
      R_3a_3n_4000: serializer.fromJson<double>(json['R_3a_3n_4000']),
      Y_1a_1n_4000: serializer.fromJson<double>(json['Y_1a_1n_4000']),
      Y_2a_2n_4000: serializer.fromJson<double>(json['Y_2a_2n_4000']),
      Y_3a_3n_4000: serializer.fromJson<double>(json['Y_3a_3n_4000']),
      B_1a_1n_4000: serializer.fromJson<double>(json['B_1a_1n_4000']),
      B_2a_2n_4000: serializer.fromJson<double>(json['B_2a_2n_4000']),
      B_3a_3n_4000: serializer.fromJson<double>(json['B_3a_3n_4000']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'R_1a_1n_1000': serializer.toJson<double>(R_1a_1n_1000),
      'R_2a_2n_1000': serializer.toJson<double>(R_2a_2n_1000),
      'R_3a_3n_1000': serializer.toJson<double>(R_3a_3n_1000),
      'Y_1a_1n_1000': serializer.toJson<double>(Y_1a_1n_1000),
      'Y_2a_2n_1000': serializer.toJson<double>(Y_2a_2n_1000),
      'Y_3a_3n_1000': serializer.toJson<double>(Y_3a_3n_1000),
      'B_1a_1n_1000': serializer.toJson<double>(B_1a_1n_1000),
      'B_2a_2n_1000': serializer.toJson<double>(B_2a_2n_1000),
      'B_3a_3n_1000': serializer.toJson<double>(B_3a_3n_1000),
      'R_1a_1n_2000': serializer.toJson<double>(R_1a_1n_2000),
      'R_2a_2n_2000': serializer.toJson<double>(R_2a_2n_2000),
      'R_3a_3n_2000': serializer.toJson<double>(R_3a_3n_2000),
      'Y_1a_1n_2000': serializer.toJson<double>(Y_1a_1n_2000),
      'Y_2a_2n_2000': serializer.toJson<double>(Y_2a_2n_2000),
      'Y_3a_3n_2000': serializer.toJson<double>(Y_3a_3n_2000),
      'B_1a_1n_2000': serializer.toJson<double>(B_1a_1n_2000),
      'B_2a_2n_2000': serializer.toJson<double>(B_2a_2n_2000),
      'B_3a_3n_2000': serializer.toJson<double>(B_3a_3n_2000),
      'R_1a_1n_3000': serializer.toJson<double>(R_1a_1n_3000),
      'R_2a_2n_3000': serializer.toJson<double>(R_2a_2n_3000),
      'R_3a_3n_3000': serializer.toJson<double>(R_3a_3n_3000),
      'Y_1a_1n_3000': serializer.toJson<double>(Y_1a_1n_3000),
      'Y_2a_2n_3000': serializer.toJson<double>(Y_2a_2n_3000),
      'Y_3a_3n_3000': serializer.toJson<double>(Y_3a_3n_3000),
      'B_1a_1n_3000': serializer.toJson<double>(B_1a_1n_3000),
      'B_2a_2n_3000': serializer.toJson<double>(B_2a_2n_3000),
      'B_3a_3n_3000': serializer.toJson<double>(B_3a_3n_3000),
      'R_1a_1n_4000': serializer.toJson<double>(R_1a_1n_4000),
      'R_2a_2n_4000': serializer.toJson<double>(R_2a_2n_4000),
      'R_3a_3n_4000': serializer.toJson<double>(R_3a_3n_4000),
      'Y_1a_1n_4000': serializer.toJson<double>(Y_1a_1n_4000),
      'Y_2a_2n_4000': serializer.toJson<double>(Y_2a_2n_4000),
      'Y_3a_3n_4000': serializer.toJson<double>(Y_3a_3n_4000),
      'B_1a_1n_4000': serializer.toJson<double>(B_1a_1n_4000),
      'B_2a_2n_4000': serializer.toJson<double>(B_2a_2n_4000),
      'B_3a_3n_4000': serializer.toJson<double>(B_3a_3n_4000),
    };
  }

  PTcoreRLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double R_1a_1n_1000,
          double R_2a_2n_1000,
          double R_3a_3n_1000,
          double Y_1a_1n_1000,
          double Y_2a_2n_1000,
          double Y_3a_3n_1000,
          double B_1a_1n_1000,
          double B_2a_2n_1000,
          double B_3a_3n_1000,
          double R_1a_1n_2000,
          double R_2a_2n_2000,
          double R_3a_3n_2000,
          double Y_1a_1n_2000,
          double Y_2a_2n_2000,
          double Y_3a_3n_2000,
          double B_1a_1n_2000,
          double B_2a_2n_2000,
          double B_3a_3n_2000,
          double R_1a_1n_3000,
          double R_2a_2n_3000,
          double R_3a_3n_3000,
          double Y_1a_1n_3000,
          double Y_2a_2n_3000,
          double Y_3a_3n_3000,
          double B_1a_1n_3000,
          double B_2a_2n_3000,
          double B_3a_3n_3000,
          double R_1a_1n_4000,
          double R_2a_2n_4000,
          double R_3a_3n_4000,
          double Y_1a_1n_4000,
          double Y_2a_2n_4000,
          double Y_3a_3n_4000,
          double B_1a_1n_4000,
          double B_2a_2n_4000,
          double B_3a_3n_4000}) =>
      PTcoreRLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        R_1a_1n_1000: R_1a_1n_1000 ?? this.R_1a_1n_1000,
        R_2a_2n_1000: R_2a_2n_1000 ?? this.R_2a_2n_1000,
        R_3a_3n_1000: R_3a_3n_1000 ?? this.R_3a_3n_1000,
        Y_1a_1n_1000: Y_1a_1n_1000 ?? this.Y_1a_1n_1000,
        Y_2a_2n_1000: Y_2a_2n_1000 ?? this.Y_2a_2n_1000,
        Y_3a_3n_1000: Y_3a_3n_1000 ?? this.Y_3a_3n_1000,
        B_1a_1n_1000: B_1a_1n_1000 ?? this.B_1a_1n_1000,
        B_2a_2n_1000: B_2a_2n_1000 ?? this.B_2a_2n_1000,
        B_3a_3n_1000: B_3a_3n_1000 ?? this.B_3a_3n_1000,
        R_1a_1n_2000: R_1a_1n_2000 ?? this.R_1a_1n_2000,
        R_2a_2n_2000: R_2a_2n_2000 ?? this.R_2a_2n_2000,
        R_3a_3n_2000: R_3a_3n_2000 ?? this.R_3a_3n_2000,
        Y_1a_1n_2000: Y_1a_1n_2000 ?? this.Y_1a_1n_2000,
        Y_2a_2n_2000: Y_2a_2n_2000 ?? this.Y_2a_2n_2000,
        Y_3a_3n_2000: Y_3a_3n_2000 ?? this.Y_3a_3n_2000,
        B_1a_1n_2000: B_1a_1n_2000 ?? this.B_1a_1n_2000,
        B_2a_2n_2000: B_2a_2n_2000 ?? this.B_2a_2n_2000,
        B_3a_3n_2000: B_3a_3n_2000 ?? this.B_3a_3n_2000,
        R_1a_1n_3000: R_1a_1n_3000 ?? this.R_1a_1n_3000,
        R_2a_2n_3000: R_2a_2n_3000 ?? this.R_2a_2n_3000,
        R_3a_3n_3000: R_3a_3n_3000 ?? this.R_3a_3n_3000,
        Y_1a_1n_3000: Y_1a_1n_3000 ?? this.Y_1a_1n_3000,
        Y_2a_2n_3000: Y_2a_2n_3000 ?? this.Y_2a_2n_3000,
        Y_3a_3n_3000: Y_3a_3n_3000 ?? this.Y_3a_3n_3000,
        B_1a_1n_3000: B_1a_1n_3000 ?? this.B_1a_1n_3000,
        B_2a_2n_3000: B_2a_2n_3000 ?? this.B_2a_2n_3000,
        B_3a_3n_3000: B_3a_3n_3000 ?? this.B_3a_3n_3000,
        R_1a_1n_4000: R_1a_1n_4000 ?? this.R_1a_1n_4000,
        R_2a_2n_4000: R_2a_2n_4000 ?? this.R_2a_2n_4000,
        R_3a_3n_4000: R_3a_3n_4000 ?? this.R_3a_3n_4000,
        Y_1a_1n_4000: Y_1a_1n_4000 ?? this.Y_1a_1n_4000,
        Y_2a_2n_4000: Y_2a_2n_4000 ?? this.Y_2a_2n_4000,
        Y_3a_3n_4000: Y_3a_3n_4000 ?? this.Y_3a_3n_4000,
        B_1a_1n_4000: B_1a_1n_4000 ?? this.B_1a_1n_4000,
        B_2a_2n_4000: B_2a_2n_4000 ?? this.B_2a_2n_4000,
        B_3a_3n_4000: B_3a_3n_4000 ?? this.B_3a_3n_4000,
      );
  @override
  String toString() {
    return (StringBuffer('PTcoreRLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_1a_1n_1000: $R_1a_1n_1000, ')
          ..write('R_2a_2n_1000: $R_2a_2n_1000, ')
          ..write('R_3a_3n_1000: $R_3a_3n_1000, ')
          ..write('Y_1a_1n_1000: $Y_1a_1n_1000, ')
          ..write('Y_2a_2n_1000: $Y_2a_2n_1000, ')
          ..write('Y_3a_3n_1000: $Y_3a_3n_1000, ')
          ..write('B_1a_1n_1000: $B_1a_1n_1000, ')
          ..write('B_2a_2n_1000: $B_2a_2n_1000, ')
          ..write('B_3a_3n_1000: $B_3a_3n_1000, ')
          ..write('R_1a_1n_2000: $R_1a_1n_2000, ')
          ..write('R_2a_2n_2000: $R_2a_2n_2000, ')
          ..write('R_3a_3n_2000: $R_3a_3n_2000, ')
          ..write('Y_1a_1n_2000: $Y_1a_1n_2000, ')
          ..write('Y_2a_2n_2000: $Y_2a_2n_2000, ')
          ..write('Y_3a_3n_2000: $Y_3a_3n_2000, ')
          ..write('B_1a_1n_2000: $B_1a_1n_2000, ')
          ..write('B_2a_2n_2000: $B_2a_2n_2000, ')
          ..write('B_3a_3n_2000: $B_3a_3n_2000, ')
          ..write('R_1a_1n_3000: $R_1a_1n_3000, ')
          ..write('R_2a_2n_3000: $R_2a_2n_3000, ')
          ..write('R_3a_3n_3000: $R_3a_3n_3000, ')
          ..write('Y_1a_1n_3000: $Y_1a_1n_3000, ')
          ..write('Y_2a_2n_3000: $Y_2a_2n_3000, ')
          ..write('Y_3a_3n_3000: $Y_3a_3n_3000, ')
          ..write('B_1a_1n_3000: $B_1a_1n_3000, ')
          ..write('B_2a_2n_3000: $B_2a_2n_3000, ')
          ..write('B_3a_3n_3000: $B_3a_3n_3000, ')
          ..write('R_1a_1n_4000: $R_1a_1n_4000, ')
          ..write('R_2a_2n_4000: $R_2a_2n_4000, ')
          ..write('R_3a_3n_4000: $R_3a_3n_4000, ')
          ..write('Y_1a_1n_4000: $Y_1a_1n_4000, ')
          ..write('Y_2a_2n_4000: $Y_2a_2n_4000, ')
          ..write('Y_3a_3n_4000: $Y_3a_3n_4000, ')
          ..write('B_1a_1n_4000: $B_1a_1n_4000, ')
          ..write('B_2a_2n_4000: $B_2a_2n_4000, ')
          ..write('B_3a_3n_4000: $B_3a_3n_4000')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_1a_1n_1000,
        R_2a_2n_1000,
        R_3a_3n_1000,
        Y_1a_1n_1000,
        Y_2a_2n_1000,
        Y_3a_3n_1000,
        B_1a_1n_1000,
        B_2a_2n_1000,
        B_3a_3n_1000,
        R_1a_1n_2000,
        R_2a_2n_2000,
        R_3a_3n_2000,
        Y_1a_1n_2000,
        Y_2a_2n_2000,
        Y_3a_3n_2000,
        B_1a_1n_2000,
        B_2a_2n_2000,
        B_3a_3n_2000,
        R_1a_1n_3000,
        R_2a_2n_3000,
        R_3a_3n_3000,
        Y_1a_1n_3000,
        Y_2a_2n_3000,
        Y_3a_3n_3000,
        B_1a_1n_3000,
        B_2a_2n_3000,
        B_3a_3n_3000,
        R_1a_1n_4000,
        R_2a_2n_4000,
        R_3a_3n_4000,
        Y_1a_1n_4000,
        Y_2a_2n_4000,
        Y_3a_3n_4000,
        B_1a_1n_4000,
        B_2a_2n_4000,
        B_3a_3n_4000
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PTcoreRLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.R_1a_1n_1000 == this.R_1a_1n_1000 &&
          other.R_2a_2n_1000 == this.R_2a_2n_1000 &&
          other.R_3a_3n_1000 == this.R_3a_3n_1000 &&
          other.Y_1a_1n_1000 == this.Y_1a_1n_1000 &&
          other.Y_2a_2n_1000 == this.Y_2a_2n_1000 &&
          other.Y_3a_3n_1000 == this.Y_3a_3n_1000 &&
          other.B_1a_1n_1000 == this.B_1a_1n_1000 &&
          other.B_2a_2n_1000 == this.B_2a_2n_1000 &&
          other.B_3a_3n_1000 == this.B_3a_3n_1000 &&
          other.R_1a_1n_2000 == this.R_1a_1n_2000 &&
          other.R_2a_2n_2000 == this.R_2a_2n_2000 &&
          other.R_3a_3n_2000 == this.R_3a_3n_2000 &&
          other.Y_1a_1n_2000 == this.Y_1a_1n_2000 &&
          other.Y_2a_2n_2000 == this.Y_2a_2n_2000 &&
          other.Y_3a_3n_2000 == this.Y_3a_3n_2000 &&
          other.B_1a_1n_2000 == this.B_1a_1n_2000 &&
          other.B_2a_2n_2000 == this.B_2a_2n_2000 &&
          other.B_3a_3n_2000 == this.B_3a_3n_2000 &&
          other.R_1a_1n_3000 == this.R_1a_1n_3000 &&
          other.R_2a_2n_3000 == this.R_2a_2n_3000 &&
          other.R_3a_3n_3000 == this.R_3a_3n_3000 &&
          other.Y_1a_1n_3000 == this.Y_1a_1n_3000 &&
          other.Y_2a_2n_3000 == this.Y_2a_2n_3000 &&
          other.Y_3a_3n_3000 == this.Y_3a_3n_3000 &&
          other.B_1a_1n_3000 == this.B_1a_1n_3000 &&
          other.B_2a_2n_3000 == this.B_2a_2n_3000 &&
          other.B_3a_3n_3000 == this.B_3a_3n_3000 &&
          other.R_1a_1n_4000 == this.R_1a_1n_4000 &&
          other.R_2a_2n_4000 == this.R_2a_2n_4000 &&
          other.R_3a_3n_4000 == this.R_3a_3n_4000 &&
          other.Y_1a_1n_4000 == this.Y_1a_1n_4000 &&
          other.Y_2a_2n_4000 == this.Y_2a_2n_4000 &&
          other.Y_3a_3n_4000 == this.Y_3a_3n_4000 &&
          other.B_1a_1n_4000 == this.B_1a_1n_4000 &&
          other.B_2a_2n_4000 == this.B_2a_2n_4000 &&
          other.B_3a_3n_4000 == this.B_3a_3n_4000);
}

class PTcoreRLocalDatasourceImplCompanion
    extends UpdateCompanion<PTcoreRLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> R_1a_1n_1000;
  final Value<double> R_2a_2n_1000;
  final Value<double> R_3a_3n_1000;
  final Value<double> Y_1a_1n_1000;
  final Value<double> Y_2a_2n_1000;
  final Value<double> Y_3a_3n_1000;
  final Value<double> B_1a_1n_1000;
  final Value<double> B_2a_2n_1000;
  final Value<double> B_3a_3n_1000;
  final Value<double> R_1a_1n_2000;
  final Value<double> R_2a_2n_2000;
  final Value<double> R_3a_3n_2000;
  final Value<double> Y_1a_1n_2000;
  final Value<double> Y_2a_2n_2000;
  final Value<double> Y_3a_3n_2000;
  final Value<double> B_1a_1n_2000;
  final Value<double> B_2a_2n_2000;
  final Value<double> B_3a_3n_2000;
  final Value<double> R_1a_1n_3000;
  final Value<double> R_2a_2n_3000;
  final Value<double> R_3a_3n_3000;
  final Value<double> Y_1a_1n_3000;
  final Value<double> Y_2a_2n_3000;
  final Value<double> Y_3a_3n_3000;
  final Value<double> B_1a_1n_3000;
  final Value<double> B_2a_2n_3000;
  final Value<double> B_3a_3n_3000;
  final Value<double> R_1a_1n_4000;
  final Value<double> R_2a_2n_4000;
  final Value<double> R_3a_3n_4000;
  final Value<double> Y_1a_1n_4000;
  final Value<double> Y_2a_2n_4000;
  final Value<double> Y_3a_3n_4000;
  final Value<double> B_1a_1n_4000;
  final Value<double> B_2a_2n_4000;
  final Value<double> B_3a_3n_4000;
  const PTcoreRLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.R_1a_1n_1000 = const Value.absent(),
    this.R_2a_2n_1000 = const Value.absent(),
    this.R_3a_3n_1000 = const Value.absent(),
    this.Y_1a_1n_1000 = const Value.absent(),
    this.Y_2a_2n_1000 = const Value.absent(),
    this.Y_3a_3n_1000 = const Value.absent(),
    this.B_1a_1n_1000 = const Value.absent(),
    this.B_2a_2n_1000 = const Value.absent(),
    this.B_3a_3n_1000 = const Value.absent(),
    this.R_1a_1n_2000 = const Value.absent(),
    this.R_2a_2n_2000 = const Value.absent(),
    this.R_3a_3n_2000 = const Value.absent(),
    this.Y_1a_1n_2000 = const Value.absent(),
    this.Y_2a_2n_2000 = const Value.absent(),
    this.Y_3a_3n_2000 = const Value.absent(),
    this.B_1a_1n_2000 = const Value.absent(),
    this.B_2a_2n_2000 = const Value.absent(),
    this.B_3a_3n_2000 = const Value.absent(),
    this.R_1a_1n_3000 = const Value.absent(),
    this.R_2a_2n_3000 = const Value.absent(),
    this.R_3a_3n_3000 = const Value.absent(),
    this.Y_1a_1n_3000 = const Value.absent(),
    this.Y_2a_2n_3000 = const Value.absent(),
    this.Y_3a_3n_3000 = const Value.absent(),
    this.B_1a_1n_3000 = const Value.absent(),
    this.B_2a_2n_3000 = const Value.absent(),
    this.B_3a_3n_3000 = const Value.absent(),
    this.R_1a_1n_4000 = const Value.absent(),
    this.R_2a_2n_4000 = const Value.absent(),
    this.R_3a_3n_4000 = const Value.absent(),
    this.Y_1a_1n_4000 = const Value.absent(),
    this.Y_2a_2n_4000 = const Value.absent(),
    this.Y_3a_3n_4000 = const Value.absent(),
    this.B_1a_1n_4000 = const Value.absent(),
    this.B_2a_2n_4000 = const Value.absent(),
    this.B_3a_3n_4000 = const Value.absent(),
  });
  PTcoreRLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double R_1a_1n_1000,
    @required double R_2a_2n_1000,
    @required double R_3a_3n_1000,
    @required double Y_1a_1n_1000,
    @required double Y_2a_2n_1000,
    @required double Y_3a_3n_1000,
    @required double B_1a_1n_1000,
    @required double B_2a_2n_1000,
    @required double B_3a_3n_1000,
    @required double R_1a_1n_2000,
    @required double R_2a_2n_2000,
    @required double R_3a_3n_2000,
    @required double Y_1a_1n_2000,
    @required double Y_2a_2n_2000,
    @required double Y_3a_3n_2000,
    @required double B_1a_1n_2000,
    @required double B_2a_2n_2000,
    @required double B_3a_3n_2000,
    @required double R_1a_1n_3000,
    @required double R_2a_2n_3000,
    @required double R_3a_3n_3000,
    @required double Y_1a_1n_3000,
    @required double Y_2a_2n_3000,
    @required double Y_3a_3n_3000,
    @required double B_1a_1n_3000,
    @required double B_2a_2n_3000,
    @required double B_3a_3n_3000,
    @required double R_1a_1n_4000,
    @required double R_2a_2n_4000,
    @required double R_3a_3n_4000,
    @required double Y_1a_1n_4000,
    @required double Y_2a_2n_4000,
    @required double Y_3a_3n_4000,
    @required double B_1a_1n_4000,
    @required double B_2a_2n_4000,
    @required double B_3a_3n_4000,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        R_1a_1n_1000 = Value(R_1a_1n_1000),
        R_2a_2n_1000 = Value(R_2a_2n_1000),
        R_3a_3n_1000 = Value(R_3a_3n_1000),
        Y_1a_1n_1000 = Value(Y_1a_1n_1000),
        Y_2a_2n_1000 = Value(Y_2a_2n_1000),
        Y_3a_3n_1000 = Value(Y_3a_3n_1000),
        B_1a_1n_1000 = Value(B_1a_1n_1000),
        B_2a_2n_1000 = Value(B_2a_2n_1000),
        B_3a_3n_1000 = Value(B_3a_3n_1000),
        R_1a_1n_2000 = Value(R_1a_1n_2000),
        R_2a_2n_2000 = Value(R_2a_2n_2000),
        R_3a_3n_2000 = Value(R_3a_3n_2000),
        Y_1a_1n_2000 = Value(Y_1a_1n_2000),
        Y_2a_2n_2000 = Value(Y_2a_2n_2000),
        Y_3a_3n_2000 = Value(Y_3a_3n_2000),
        B_1a_1n_2000 = Value(B_1a_1n_2000),
        B_2a_2n_2000 = Value(B_2a_2n_2000),
        B_3a_3n_2000 = Value(B_3a_3n_2000),
        R_1a_1n_3000 = Value(R_1a_1n_3000),
        R_2a_2n_3000 = Value(R_2a_2n_3000),
        R_3a_3n_3000 = Value(R_3a_3n_3000),
        Y_1a_1n_3000 = Value(Y_1a_1n_3000),
        Y_2a_2n_3000 = Value(Y_2a_2n_3000),
        Y_3a_3n_3000 = Value(Y_3a_3n_3000),
        B_1a_1n_3000 = Value(B_1a_1n_3000),
        B_2a_2n_3000 = Value(B_2a_2n_3000),
        B_3a_3n_3000 = Value(B_3a_3n_3000),
        R_1a_1n_4000 = Value(R_1a_1n_4000),
        R_2a_2n_4000 = Value(R_2a_2n_4000),
        R_3a_3n_4000 = Value(R_3a_3n_4000),
        Y_1a_1n_4000 = Value(Y_1a_1n_4000),
        Y_2a_2n_4000 = Value(Y_2a_2n_4000),
        Y_3a_3n_4000 = Value(Y_3a_3n_4000),
        B_1a_1n_4000 = Value(B_1a_1n_4000),
        B_2a_2n_4000 = Value(B_2a_2n_4000),
        B_3a_3n_4000 = Value(B_3a_3n_4000);
  static Insertable<PTcoreRLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> R_1a_1n_1000,
    Expression<double> R_2a_2n_1000,
    Expression<double> R_3a_3n_1000,
    Expression<double> Y_1a_1n_1000,
    Expression<double> Y_2a_2n_1000,
    Expression<double> Y_3a_3n_1000,
    Expression<double> B_1a_1n_1000,
    Expression<double> B_2a_2n_1000,
    Expression<double> B_3a_3n_1000,
    Expression<double> R_1a_1n_2000,
    Expression<double> R_2a_2n_2000,
    Expression<double> R_3a_3n_2000,
    Expression<double> Y_1a_1n_2000,
    Expression<double> Y_2a_2n_2000,
    Expression<double> Y_3a_3n_2000,
    Expression<double> B_1a_1n_2000,
    Expression<double> B_2a_2n_2000,
    Expression<double> B_3a_3n_2000,
    Expression<double> R_1a_1n_3000,
    Expression<double> R_2a_2n_3000,
    Expression<double> R_3a_3n_3000,
    Expression<double> Y_1a_1n_3000,
    Expression<double> Y_2a_2n_3000,
    Expression<double> Y_3a_3n_3000,
    Expression<double> B_1a_1n_3000,
    Expression<double> B_2a_2n_3000,
    Expression<double> B_3a_3n_3000,
    Expression<double> R_1a_1n_4000,
    Expression<double> R_2a_2n_4000,
    Expression<double> R_3a_3n_4000,
    Expression<double> Y_1a_1n_4000,
    Expression<double> Y_2a_2n_4000,
    Expression<double> Y_3a_3n_4000,
    Expression<double> B_1a_1n_4000,
    Expression<double> B_2a_2n_4000,
    Expression<double> B_3a_3n_4000,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (R_1a_1n_1000 != null) 'r_1a_1n_1000': R_1a_1n_1000,
      if (R_2a_2n_1000 != null) 'r_2a_2n_1000': R_2a_2n_1000,
      if (R_3a_3n_1000 != null) 'r_3a_3n_1000': R_3a_3n_1000,
      if (Y_1a_1n_1000 != null) 'y_1a_1n_1000': Y_1a_1n_1000,
      if (Y_2a_2n_1000 != null) 'y_2a_2n_1000': Y_2a_2n_1000,
      if (Y_3a_3n_1000 != null) 'y_3a_3n_1000': Y_3a_3n_1000,
      if (B_1a_1n_1000 != null) 'b_1a_1n_1000': B_1a_1n_1000,
      if (B_2a_2n_1000 != null) 'b_2a_2n_1000': B_2a_2n_1000,
      if (B_3a_3n_1000 != null) 'b_3a_3n_1000': B_3a_3n_1000,
      if (R_1a_1n_2000 != null) 'r_1a_1n_2000': R_1a_1n_2000,
      if (R_2a_2n_2000 != null) 'r_2a_2n_2000': R_2a_2n_2000,
      if (R_3a_3n_2000 != null) 'r_3a_3n_2000': R_3a_3n_2000,
      if (Y_1a_1n_2000 != null) 'y_1a_1n_2000': Y_1a_1n_2000,
      if (Y_2a_2n_2000 != null) 'y_2a_2n_2000': Y_2a_2n_2000,
      if (Y_3a_3n_2000 != null) 'y_3a_3n_2000': Y_3a_3n_2000,
      if (B_1a_1n_2000 != null) 'b_1a_1n_2000': B_1a_1n_2000,
      if (B_2a_2n_2000 != null) 'b_2a_2n_2000': B_2a_2n_2000,
      if (B_3a_3n_2000 != null) 'b_3a_3n_2000': B_3a_3n_2000,
      if (R_1a_1n_3000 != null) 'r_1a_1n_3000': R_1a_1n_3000,
      if (R_2a_2n_3000 != null) 'r_2a_2n_3000': R_2a_2n_3000,
      if (R_3a_3n_3000 != null) 'r_3a_3n_3000': R_3a_3n_3000,
      if (Y_1a_1n_3000 != null) 'y_1a_1n_3000': Y_1a_1n_3000,
      if (Y_2a_2n_3000 != null) 'y_2a_2n_3000': Y_2a_2n_3000,
      if (Y_3a_3n_3000 != null) 'y_3a_3n_3000': Y_3a_3n_3000,
      if (B_1a_1n_3000 != null) 'b_1a_1n_3000': B_1a_1n_3000,
      if (B_2a_2n_3000 != null) 'b_2a_2n_3000': B_2a_2n_3000,
      if (B_3a_3n_3000 != null) 'b_3a_3n_3000': B_3a_3n_3000,
      if (R_1a_1n_4000 != null) 'r_1a_1n_4000': R_1a_1n_4000,
      if (R_2a_2n_4000 != null) 'r_2a_2n_4000': R_2a_2n_4000,
      if (R_3a_3n_4000 != null) 'r_3a_3n_4000': R_3a_3n_4000,
      if (Y_1a_1n_4000 != null) 'y_1a_1n_4000': Y_1a_1n_4000,
      if (Y_2a_2n_4000 != null) 'y_2a_2n_4000': Y_2a_2n_4000,
      if (Y_3a_3n_4000 != null) 'y_3a_3n_4000': Y_3a_3n_4000,
      if (B_1a_1n_4000 != null) 'b_1a_1n_4000': B_1a_1n_4000,
      if (B_2a_2n_4000 != null) 'b_2a_2n_4000': B_2a_2n_4000,
      if (B_3a_3n_4000 != null) 'b_3a_3n_4000': B_3a_3n_4000,
    });
  }

  PTcoreRLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> R_1a_1n_1000,
      Value<double> R_2a_2n_1000,
      Value<double> R_3a_3n_1000,
      Value<double> Y_1a_1n_1000,
      Value<double> Y_2a_2n_1000,
      Value<double> Y_3a_3n_1000,
      Value<double> B_1a_1n_1000,
      Value<double> B_2a_2n_1000,
      Value<double> B_3a_3n_1000,
      Value<double> R_1a_1n_2000,
      Value<double> R_2a_2n_2000,
      Value<double> R_3a_3n_2000,
      Value<double> Y_1a_1n_2000,
      Value<double> Y_2a_2n_2000,
      Value<double> Y_3a_3n_2000,
      Value<double> B_1a_1n_2000,
      Value<double> B_2a_2n_2000,
      Value<double> B_3a_3n_2000,
      Value<double> R_1a_1n_3000,
      Value<double> R_2a_2n_3000,
      Value<double> R_3a_3n_3000,
      Value<double> Y_1a_1n_3000,
      Value<double> Y_2a_2n_3000,
      Value<double> Y_3a_3n_3000,
      Value<double> B_1a_1n_3000,
      Value<double> B_2a_2n_3000,
      Value<double> B_3a_3n_3000,
      Value<double> R_1a_1n_4000,
      Value<double> R_2a_2n_4000,
      Value<double> R_3a_3n_4000,
      Value<double> Y_1a_1n_4000,
      Value<double> Y_2a_2n_4000,
      Value<double> Y_3a_3n_4000,
      Value<double> B_1a_1n_4000,
      Value<double> B_2a_2n_4000,
      Value<double> B_3a_3n_4000}) {
    return PTcoreRLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      R_1a_1n_1000: R_1a_1n_1000 ?? this.R_1a_1n_1000,
      R_2a_2n_1000: R_2a_2n_1000 ?? this.R_2a_2n_1000,
      R_3a_3n_1000: R_3a_3n_1000 ?? this.R_3a_3n_1000,
      Y_1a_1n_1000: Y_1a_1n_1000 ?? this.Y_1a_1n_1000,
      Y_2a_2n_1000: Y_2a_2n_1000 ?? this.Y_2a_2n_1000,
      Y_3a_3n_1000: Y_3a_3n_1000 ?? this.Y_3a_3n_1000,
      B_1a_1n_1000: B_1a_1n_1000 ?? this.B_1a_1n_1000,
      B_2a_2n_1000: B_2a_2n_1000 ?? this.B_2a_2n_1000,
      B_3a_3n_1000: B_3a_3n_1000 ?? this.B_3a_3n_1000,
      R_1a_1n_2000: R_1a_1n_2000 ?? this.R_1a_1n_2000,
      R_2a_2n_2000: R_2a_2n_2000 ?? this.R_2a_2n_2000,
      R_3a_3n_2000: R_3a_3n_2000 ?? this.R_3a_3n_2000,
      Y_1a_1n_2000: Y_1a_1n_2000 ?? this.Y_1a_1n_2000,
      Y_2a_2n_2000: Y_2a_2n_2000 ?? this.Y_2a_2n_2000,
      Y_3a_3n_2000: Y_3a_3n_2000 ?? this.Y_3a_3n_2000,
      B_1a_1n_2000: B_1a_1n_2000 ?? this.B_1a_1n_2000,
      B_2a_2n_2000: B_2a_2n_2000 ?? this.B_2a_2n_2000,
      B_3a_3n_2000: B_3a_3n_2000 ?? this.B_3a_3n_2000,
      R_1a_1n_3000: R_1a_1n_3000 ?? this.R_1a_1n_3000,
      R_2a_2n_3000: R_2a_2n_3000 ?? this.R_2a_2n_3000,
      R_3a_3n_3000: R_3a_3n_3000 ?? this.R_3a_3n_3000,
      Y_1a_1n_3000: Y_1a_1n_3000 ?? this.Y_1a_1n_3000,
      Y_2a_2n_3000: Y_2a_2n_3000 ?? this.Y_2a_2n_3000,
      Y_3a_3n_3000: Y_3a_3n_3000 ?? this.Y_3a_3n_3000,
      B_1a_1n_3000: B_1a_1n_3000 ?? this.B_1a_1n_3000,
      B_2a_2n_3000: B_2a_2n_3000 ?? this.B_2a_2n_3000,
      B_3a_3n_3000: B_3a_3n_3000 ?? this.B_3a_3n_3000,
      R_1a_1n_4000: R_1a_1n_4000 ?? this.R_1a_1n_4000,
      R_2a_2n_4000: R_2a_2n_4000 ?? this.R_2a_2n_4000,
      R_3a_3n_4000: R_3a_3n_4000 ?? this.R_3a_3n_4000,
      Y_1a_1n_4000: Y_1a_1n_4000 ?? this.Y_1a_1n_4000,
      Y_2a_2n_4000: Y_2a_2n_4000 ?? this.Y_2a_2n_4000,
      Y_3a_3n_4000: Y_3a_3n_4000 ?? this.Y_3a_3n_4000,
      B_1a_1n_4000: B_1a_1n_4000 ?? this.B_1a_1n_4000,
      B_2a_2n_4000: B_2a_2n_4000 ?? this.B_2a_2n_4000,
      B_3a_3n_4000: B_3a_3n_4000 ?? this.B_3a_3n_4000,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (R_1a_1n_1000.present) {
      map['r_1a_1n_1000'] = Variable<double>(R_1a_1n_1000.value);
    }
    if (R_2a_2n_1000.present) {
      map['r_2a_2n_1000'] = Variable<double>(R_2a_2n_1000.value);
    }
    if (R_3a_3n_1000.present) {
      map['r_3a_3n_1000'] = Variable<double>(R_3a_3n_1000.value);
    }
    if (Y_1a_1n_1000.present) {
      map['y_1a_1n_1000'] = Variable<double>(Y_1a_1n_1000.value);
    }
    if (Y_2a_2n_1000.present) {
      map['y_2a_2n_1000'] = Variable<double>(Y_2a_2n_1000.value);
    }
    if (Y_3a_3n_1000.present) {
      map['y_3a_3n_1000'] = Variable<double>(Y_3a_3n_1000.value);
    }
    if (B_1a_1n_1000.present) {
      map['b_1a_1n_1000'] = Variable<double>(B_1a_1n_1000.value);
    }
    if (B_2a_2n_1000.present) {
      map['b_2a_2n_1000'] = Variable<double>(B_2a_2n_1000.value);
    }
    if (B_3a_3n_1000.present) {
      map['b_3a_3n_1000'] = Variable<double>(B_3a_3n_1000.value);
    }
    if (R_1a_1n_2000.present) {
      map['r_1a_1n_2000'] = Variable<double>(R_1a_1n_2000.value);
    }
    if (R_2a_2n_2000.present) {
      map['r_2a_2n_2000'] = Variable<double>(R_2a_2n_2000.value);
    }
    if (R_3a_3n_2000.present) {
      map['r_3a_3n_2000'] = Variable<double>(R_3a_3n_2000.value);
    }
    if (Y_1a_1n_2000.present) {
      map['y_1a_1n_2000'] = Variable<double>(Y_1a_1n_2000.value);
    }
    if (Y_2a_2n_2000.present) {
      map['y_2a_2n_2000'] = Variable<double>(Y_2a_2n_2000.value);
    }
    if (Y_3a_3n_2000.present) {
      map['y_3a_3n_2000'] = Variable<double>(Y_3a_3n_2000.value);
    }
    if (B_1a_1n_2000.present) {
      map['b_1a_1n_2000'] = Variable<double>(B_1a_1n_2000.value);
    }
    if (B_2a_2n_2000.present) {
      map['b_2a_2n_2000'] = Variable<double>(B_2a_2n_2000.value);
    }
    if (B_3a_3n_2000.present) {
      map['b_3a_3n_2000'] = Variable<double>(B_3a_3n_2000.value);
    }
    if (R_1a_1n_3000.present) {
      map['r_1a_1n_3000'] = Variable<double>(R_1a_1n_3000.value);
    }
    if (R_2a_2n_3000.present) {
      map['r_2a_2n_3000'] = Variable<double>(R_2a_2n_3000.value);
    }
    if (R_3a_3n_3000.present) {
      map['r_3a_3n_3000'] = Variable<double>(R_3a_3n_3000.value);
    }
    if (Y_1a_1n_3000.present) {
      map['y_1a_1n_3000'] = Variable<double>(Y_1a_1n_3000.value);
    }
    if (Y_2a_2n_3000.present) {
      map['y_2a_2n_3000'] = Variable<double>(Y_2a_2n_3000.value);
    }
    if (Y_3a_3n_3000.present) {
      map['y_3a_3n_3000'] = Variable<double>(Y_3a_3n_3000.value);
    }
    if (B_1a_1n_3000.present) {
      map['b_1a_1n_3000'] = Variable<double>(B_1a_1n_3000.value);
    }
    if (B_2a_2n_3000.present) {
      map['b_2a_2n_3000'] = Variable<double>(B_2a_2n_3000.value);
    }
    if (B_3a_3n_3000.present) {
      map['b_3a_3n_3000'] = Variable<double>(B_3a_3n_3000.value);
    }
    if (R_1a_1n_4000.present) {
      map['r_1a_1n_4000'] = Variable<double>(R_1a_1n_4000.value);
    }
    if (R_2a_2n_4000.present) {
      map['r_2a_2n_4000'] = Variable<double>(R_2a_2n_4000.value);
    }
    if (R_3a_3n_4000.present) {
      map['r_3a_3n_4000'] = Variable<double>(R_3a_3n_4000.value);
    }
    if (Y_1a_1n_4000.present) {
      map['y_1a_1n_4000'] = Variable<double>(Y_1a_1n_4000.value);
    }
    if (Y_2a_2n_4000.present) {
      map['y_2a_2n_4000'] = Variable<double>(Y_2a_2n_4000.value);
    }
    if (Y_3a_3n_4000.present) {
      map['y_3a_3n_4000'] = Variable<double>(Y_3a_3n_4000.value);
    }
    if (B_1a_1n_4000.present) {
      map['b_1a_1n_4000'] = Variable<double>(B_1a_1n_4000.value);
    }
    if (B_2a_2n_4000.present) {
      map['b_2a_2n_4000'] = Variable<double>(B_2a_2n_4000.value);
    }
    if (B_3a_3n_4000.present) {
      map['b_3a_3n_4000'] = Variable<double>(B_3a_3n_4000.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PTcoreRLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('R_1a_1n_1000: $R_1a_1n_1000, ')
          ..write('R_2a_2n_1000: $R_2a_2n_1000, ')
          ..write('R_3a_3n_1000: $R_3a_3n_1000, ')
          ..write('Y_1a_1n_1000: $Y_1a_1n_1000, ')
          ..write('Y_2a_2n_1000: $Y_2a_2n_1000, ')
          ..write('Y_3a_3n_1000: $Y_3a_3n_1000, ')
          ..write('B_1a_1n_1000: $B_1a_1n_1000, ')
          ..write('B_2a_2n_1000: $B_2a_2n_1000, ')
          ..write('B_3a_3n_1000: $B_3a_3n_1000, ')
          ..write('R_1a_1n_2000: $R_1a_1n_2000, ')
          ..write('R_2a_2n_2000: $R_2a_2n_2000, ')
          ..write('R_3a_3n_2000: $R_3a_3n_2000, ')
          ..write('Y_1a_1n_2000: $Y_1a_1n_2000, ')
          ..write('Y_2a_2n_2000: $Y_2a_2n_2000, ')
          ..write('Y_3a_3n_2000: $Y_3a_3n_2000, ')
          ..write('B_1a_1n_2000: $B_1a_1n_2000, ')
          ..write('B_2a_2n_2000: $B_2a_2n_2000, ')
          ..write('B_3a_3n_2000: $B_3a_3n_2000, ')
          ..write('R_1a_1n_3000: $R_1a_1n_3000, ')
          ..write('R_2a_2n_3000: $R_2a_2n_3000, ')
          ..write('R_3a_3n_3000: $R_3a_3n_3000, ')
          ..write('Y_1a_1n_3000: $Y_1a_1n_3000, ')
          ..write('Y_2a_2n_3000: $Y_2a_2n_3000, ')
          ..write('Y_3a_3n_3000: $Y_3a_3n_3000, ')
          ..write('B_1a_1n_3000: $B_1a_1n_3000, ')
          ..write('B_2a_2n_3000: $B_2a_2n_3000, ')
          ..write('B_3a_3n_3000: $B_3a_3n_3000, ')
          ..write('R_1a_1n_4000: $R_1a_1n_4000, ')
          ..write('R_2a_2n_4000: $R_2a_2n_4000, ')
          ..write('R_3a_3n_4000: $R_3a_3n_4000, ')
          ..write('Y_1a_1n_4000: $Y_1a_1n_4000, ')
          ..write('Y_2a_2n_4000: $Y_2a_2n_4000, ')
          ..write('Y_3a_3n_4000: $Y_3a_3n_4000, ')
          ..write('B_1a_1n_4000: $B_1a_1n_4000, ')
          ..write('B_2a_2n_4000: $B_2a_2n_4000, ')
          ..write('B_3a_3n_4000: $B_3a_3n_4000')
          ..write(')'))
        .toString();
  }
}

class $PTcoreRLocalDatasourceImplTable extends PTcoreRLocalDatasourceImpl
    with TableInfo<$PTcoreRLocalDatasourceImplTable, PTcoreRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PTcoreRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _R_1a_1n_1000Meta =
      const VerificationMeta('R_1a_1n_1000');
  GeneratedColumn<double> _R_1a_1n_1000;
  @override
  GeneratedColumn<double> get R_1a_1n_1000 => _R_1a_1n_1000 ??=
      GeneratedColumn<double>('r_1a_1n_1000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_2a_2n_1000Meta =
      const VerificationMeta('R_2a_2n_1000');
  GeneratedColumn<double> _R_2a_2n_1000;
  @override
  GeneratedColumn<double> get R_2a_2n_1000 => _R_2a_2n_1000 ??=
      GeneratedColumn<double>('r_2a_2n_1000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_3a_3n_1000Meta =
      const VerificationMeta('R_3a_3n_1000');
  GeneratedColumn<double> _R_3a_3n_1000;
  @override
  GeneratedColumn<double> get R_3a_3n_1000 => _R_3a_3n_1000 ??=
      GeneratedColumn<double>('r_3a_3n_1000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_1a_1n_1000Meta =
      const VerificationMeta('Y_1a_1n_1000');
  GeneratedColumn<double> _Y_1a_1n_1000;
  @override
  GeneratedColumn<double> get Y_1a_1n_1000 => _Y_1a_1n_1000 ??=
      GeneratedColumn<double>('y_1a_1n_1000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_2a_2n_1000Meta =
      const VerificationMeta('Y_2a_2n_1000');
  GeneratedColumn<double> _Y_2a_2n_1000;
  @override
  GeneratedColumn<double> get Y_2a_2n_1000 => _Y_2a_2n_1000 ??=
      GeneratedColumn<double>('y_2a_2n_1000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_3a_3n_1000Meta =
      const VerificationMeta('Y_3a_3n_1000');
  GeneratedColumn<double> _Y_3a_3n_1000;
  @override
  GeneratedColumn<double> get Y_3a_3n_1000 => _Y_3a_3n_1000 ??=
      GeneratedColumn<double>('y_3a_3n_1000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_1a_1n_1000Meta =
      const VerificationMeta('B_1a_1n_1000');
  GeneratedColumn<double> _B_1a_1n_1000;
  @override
  GeneratedColumn<double> get B_1a_1n_1000 => _B_1a_1n_1000 ??=
      GeneratedColumn<double>('b_1a_1n_1000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_2a_2n_1000Meta =
      const VerificationMeta('B_2a_2n_1000');
  GeneratedColumn<double> _B_2a_2n_1000;
  @override
  GeneratedColumn<double> get B_2a_2n_1000 => _B_2a_2n_1000 ??=
      GeneratedColumn<double>('b_2a_2n_1000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_3a_3n_1000Meta =
      const VerificationMeta('B_3a_3n_1000');
  GeneratedColumn<double> _B_3a_3n_1000;
  @override
  GeneratedColumn<double> get B_3a_3n_1000 => _B_3a_3n_1000 ??=
      GeneratedColumn<double>('b_3a_3n_1000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_1a_1n_2000Meta =
      const VerificationMeta('R_1a_1n_2000');
  GeneratedColumn<double> _R_1a_1n_2000;
  @override
  GeneratedColumn<double> get R_1a_1n_2000 => _R_1a_1n_2000 ??=
      GeneratedColumn<double>('r_1a_1n_2000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_2a_2n_2000Meta =
      const VerificationMeta('R_2a_2n_2000');
  GeneratedColumn<double> _R_2a_2n_2000;
  @override
  GeneratedColumn<double> get R_2a_2n_2000 => _R_2a_2n_2000 ??=
      GeneratedColumn<double>('r_2a_2n_2000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_3a_3n_2000Meta =
      const VerificationMeta('R_3a_3n_2000');
  GeneratedColumn<double> _R_3a_3n_2000;
  @override
  GeneratedColumn<double> get R_3a_3n_2000 => _R_3a_3n_2000 ??=
      GeneratedColumn<double>('r_3a_3n_2000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_1a_1n_2000Meta =
      const VerificationMeta('Y_1a_1n_2000');
  GeneratedColumn<double> _Y_1a_1n_2000;
  @override
  GeneratedColumn<double> get Y_1a_1n_2000 => _Y_1a_1n_2000 ??=
      GeneratedColumn<double>('y_1a_1n_2000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_2a_2n_2000Meta =
      const VerificationMeta('Y_2a_2n_2000');
  GeneratedColumn<double> _Y_2a_2n_2000;
  @override
  GeneratedColumn<double> get Y_2a_2n_2000 => _Y_2a_2n_2000 ??=
      GeneratedColumn<double>('y_2a_2n_2000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_3a_3n_2000Meta =
      const VerificationMeta('Y_3a_3n_2000');
  GeneratedColumn<double> _Y_3a_3n_2000;
  @override
  GeneratedColumn<double> get Y_3a_3n_2000 => _Y_3a_3n_2000 ??=
      GeneratedColumn<double>('y_3a_3n_2000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_1a_1n_2000Meta =
      const VerificationMeta('B_1a_1n_2000');
  GeneratedColumn<double> _B_1a_1n_2000;
  @override
  GeneratedColumn<double> get B_1a_1n_2000 => _B_1a_1n_2000 ??=
      GeneratedColumn<double>('b_1a_1n_2000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_2a_2n_2000Meta =
      const VerificationMeta('B_2a_2n_2000');
  GeneratedColumn<double> _B_2a_2n_2000;
  @override
  GeneratedColumn<double> get B_2a_2n_2000 => _B_2a_2n_2000 ??=
      GeneratedColumn<double>('b_2a_2n_2000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_3a_3n_2000Meta =
      const VerificationMeta('B_3a_3n_2000');
  GeneratedColumn<double> _B_3a_3n_2000;
  @override
  GeneratedColumn<double> get B_3a_3n_2000 => _B_3a_3n_2000 ??=
      GeneratedColumn<double>('b_3a_3n_2000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_1a_1n_3000Meta =
      const VerificationMeta('R_1a_1n_3000');
  GeneratedColumn<double> _R_1a_1n_3000;
  @override
  GeneratedColumn<double> get R_1a_1n_3000 => _R_1a_1n_3000 ??=
      GeneratedColumn<double>('r_1a_1n_3000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_2a_2n_3000Meta =
      const VerificationMeta('R_2a_2n_3000');
  GeneratedColumn<double> _R_2a_2n_3000;
  @override
  GeneratedColumn<double> get R_2a_2n_3000 => _R_2a_2n_3000 ??=
      GeneratedColumn<double>('r_2a_2n_3000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_3a_3n_3000Meta =
      const VerificationMeta('R_3a_3n_3000');
  GeneratedColumn<double> _R_3a_3n_3000;
  @override
  GeneratedColumn<double> get R_3a_3n_3000 => _R_3a_3n_3000 ??=
      GeneratedColumn<double>('r_3a_3n_3000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_1a_1n_3000Meta =
      const VerificationMeta('Y_1a_1n_3000');
  GeneratedColumn<double> _Y_1a_1n_3000;
  @override
  GeneratedColumn<double> get Y_1a_1n_3000 => _Y_1a_1n_3000 ??=
      GeneratedColumn<double>('y_1a_1n_3000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_2a_2n_3000Meta =
      const VerificationMeta('Y_2a_2n_3000');
  GeneratedColumn<double> _Y_2a_2n_3000;
  @override
  GeneratedColumn<double> get Y_2a_2n_3000 => _Y_2a_2n_3000 ??=
      GeneratedColumn<double>('y_2a_2n_3000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_3a_3n_3000Meta =
      const VerificationMeta('Y_3a_3n_3000');
  GeneratedColumn<double> _Y_3a_3n_3000;
  @override
  GeneratedColumn<double> get Y_3a_3n_3000 => _Y_3a_3n_3000 ??=
      GeneratedColumn<double>('y_3a_3n_3000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_1a_1n_3000Meta =
      const VerificationMeta('B_1a_1n_3000');
  GeneratedColumn<double> _B_1a_1n_3000;
  @override
  GeneratedColumn<double> get B_1a_1n_3000 => _B_1a_1n_3000 ??=
      GeneratedColumn<double>('b_1a_1n_3000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_2a_2n_3000Meta =
      const VerificationMeta('B_2a_2n_3000');
  GeneratedColumn<double> _B_2a_2n_3000;
  @override
  GeneratedColumn<double> get B_2a_2n_3000 => _B_2a_2n_3000 ??=
      GeneratedColumn<double>('b_2a_2n_3000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_3a_3n_3000Meta =
      const VerificationMeta('B_3a_3n_3000');
  GeneratedColumn<double> _B_3a_3n_3000;
  @override
  GeneratedColumn<double> get B_3a_3n_3000 => _B_3a_3n_3000 ??=
      GeneratedColumn<double>('b_3a_3n_3000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_1a_1n_4000Meta =
      const VerificationMeta('R_1a_1n_4000');
  GeneratedColumn<double> _R_1a_1n_4000;
  @override
  GeneratedColumn<double> get R_1a_1n_4000 => _R_1a_1n_4000 ??=
      GeneratedColumn<double>('r_1a_1n_4000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_2a_2n_4000Meta =
      const VerificationMeta('R_2a_2n_4000');
  GeneratedColumn<double> _R_2a_2n_4000;
  @override
  GeneratedColumn<double> get R_2a_2n_4000 => _R_2a_2n_4000 ??=
      GeneratedColumn<double>('r_2a_2n_4000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _R_3a_3n_4000Meta =
      const VerificationMeta('R_3a_3n_4000');
  GeneratedColumn<double> _R_3a_3n_4000;
  @override
  GeneratedColumn<double> get R_3a_3n_4000 => _R_3a_3n_4000 ??=
      GeneratedColumn<double>('r_3a_3n_4000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_1a_1n_4000Meta =
      const VerificationMeta('Y_1a_1n_4000');
  GeneratedColumn<double> _Y_1a_1n_4000;
  @override
  GeneratedColumn<double> get Y_1a_1n_4000 => _Y_1a_1n_4000 ??=
      GeneratedColumn<double>('y_1a_1n_4000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_2a_2n_4000Meta =
      const VerificationMeta('Y_2a_2n_4000');
  GeneratedColumn<double> _Y_2a_2n_4000;
  @override
  GeneratedColumn<double> get Y_2a_2n_4000 => _Y_2a_2n_4000 ??=
      GeneratedColumn<double>('y_2a_2n_4000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _Y_3a_3n_4000Meta =
      const VerificationMeta('Y_3a_3n_4000');
  GeneratedColumn<double> _Y_3a_3n_4000;
  @override
  GeneratedColumn<double> get Y_3a_3n_4000 => _Y_3a_3n_4000 ??=
      GeneratedColumn<double>('y_3a_3n_4000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_1a_1n_4000Meta =
      const VerificationMeta('B_1a_1n_4000');
  GeneratedColumn<double> _B_1a_1n_4000;
  @override
  GeneratedColumn<double> get B_1a_1n_4000 => _B_1a_1n_4000 ??=
      GeneratedColumn<double>('b_1a_1n_4000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_2a_2n_4000Meta =
      const VerificationMeta('B_2a_2n_4000');
  GeneratedColumn<double> _B_2a_2n_4000;
  @override
  GeneratedColumn<double> get B_2a_2n_4000 => _B_2a_2n_4000 ??=
      GeneratedColumn<double>('b_2a_2n_4000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _B_3a_3n_4000Meta =
      const VerificationMeta('B_3a_3n_4000');
  GeneratedColumn<double> _B_3a_3n_4000;
  @override
  GeneratedColumn<double> get B_3a_3n_4000 => _B_3a_3n_4000 ??=
      GeneratedColumn<double>('b_3a_3n_4000', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        R_1a_1n_1000,
        R_2a_2n_1000,
        R_3a_3n_1000,
        Y_1a_1n_1000,
        Y_2a_2n_1000,
        Y_3a_3n_1000,
        B_1a_1n_1000,
        B_2a_2n_1000,
        B_3a_3n_1000,
        R_1a_1n_2000,
        R_2a_2n_2000,
        R_3a_3n_2000,
        Y_1a_1n_2000,
        Y_2a_2n_2000,
        Y_3a_3n_2000,
        B_1a_1n_2000,
        B_2a_2n_2000,
        B_3a_3n_2000,
        R_1a_1n_3000,
        R_2a_2n_3000,
        R_3a_3n_3000,
        Y_1a_1n_3000,
        Y_2a_2n_3000,
        Y_3a_3n_3000,
        B_1a_1n_3000,
        B_2a_2n_3000,
        B_3a_3n_3000,
        R_1a_1n_4000,
        R_2a_2n_4000,
        R_3a_3n_4000,
        Y_1a_1n_4000,
        Y_2a_2n_4000,
        Y_3a_3n_4000,
        B_1a_1n_4000,
        B_2a_2n_4000,
        B_3a_3n_4000
      ];
  @override
  String get aliasedName => _alias ?? 'p_tcore_r_local_datasource_impl';
  @override
  String get actualTableName => 'p_tcore_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PTcoreRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('r_1a_1n_1000')) {
      context.handle(
          _R_1a_1n_1000Meta,
          R_1a_1n_1000.isAcceptableOrUnknown(
              data['r_1a_1n_1000'], _R_1a_1n_1000Meta));
    } else if (isInserting) {
      context.missing(_R_1a_1n_1000Meta);
    }
    if (data.containsKey('r_2a_2n_1000')) {
      context.handle(
          _R_2a_2n_1000Meta,
          R_2a_2n_1000.isAcceptableOrUnknown(
              data['r_2a_2n_1000'], _R_2a_2n_1000Meta));
    } else if (isInserting) {
      context.missing(_R_2a_2n_1000Meta);
    }
    if (data.containsKey('r_3a_3n_1000')) {
      context.handle(
          _R_3a_3n_1000Meta,
          R_3a_3n_1000.isAcceptableOrUnknown(
              data['r_3a_3n_1000'], _R_3a_3n_1000Meta));
    } else if (isInserting) {
      context.missing(_R_3a_3n_1000Meta);
    }
    if (data.containsKey('y_1a_1n_1000')) {
      context.handle(
          _Y_1a_1n_1000Meta,
          Y_1a_1n_1000.isAcceptableOrUnknown(
              data['y_1a_1n_1000'], _Y_1a_1n_1000Meta));
    } else if (isInserting) {
      context.missing(_Y_1a_1n_1000Meta);
    }
    if (data.containsKey('y_2a_2n_1000')) {
      context.handle(
          _Y_2a_2n_1000Meta,
          Y_2a_2n_1000.isAcceptableOrUnknown(
              data['y_2a_2n_1000'], _Y_2a_2n_1000Meta));
    } else if (isInserting) {
      context.missing(_Y_2a_2n_1000Meta);
    }
    if (data.containsKey('y_3a_3n_1000')) {
      context.handle(
          _Y_3a_3n_1000Meta,
          Y_3a_3n_1000.isAcceptableOrUnknown(
              data['y_3a_3n_1000'], _Y_3a_3n_1000Meta));
    } else if (isInserting) {
      context.missing(_Y_3a_3n_1000Meta);
    }
    if (data.containsKey('b_1a_1n_1000')) {
      context.handle(
          _B_1a_1n_1000Meta,
          B_1a_1n_1000.isAcceptableOrUnknown(
              data['b_1a_1n_1000'], _B_1a_1n_1000Meta));
    } else if (isInserting) {
      context.missing(_B_1a_1n_1000Meta);
    }
    if (data.containsKey('b_2a_2n_1000')) {
      context.handle(
          _B_2a_2n_1000Meta,
          B_2a_2n_1000.isAcceptableOrUnknown(
              data['b_2a_2n_1000'], _B_2a_2n_1000Meta));
    } else if (isInserting) {
      context.missing(_B_2a_2n_1000Meta);
    }
    if (data.containsKey('b_3a_3n_1000')) {
      context.handle(
          _B_3a_3n_1000Meta,
          B_3a_3n_1000.isAcceptableOrUnknown(
              data['b_3a_3n_1000'], _B_3a_3n_1000Meta));
    } else if (isInserting) {
      context.missing(_B_3a_3n_1000Meta);
    }
    if (data.containsKey('r_1a_1n_2000')) {
      context.handle(
          _R_1a_1n_2000Meta,
          R_1a_1n_2000.isAcceptableOrUnknown(
              data['r_1a_1n_2000'], _R_1a_1n_2000Meta));
    } else if (isInserting) {
      context.missing(_R_1a_1n_2000Meta);
    }
    if (data.containsKey('r_2a_2n_2000')) {
      context.handle(
          _R_2a_2n_2000Meta,
          R_2a_2n_2000.isAcceptableOrUnknown(
              data['r_2a_2n_2000'], _R_2a_2n_2000Meta));
    } else if (isInserting) {
      context.missing(_R_2a_2n_2000Meta);
    }
    if (data.containsKey('r_3a_3n_2000')) {
      context.handle(
          _R_3a_3n_2000Meta,
          R_3a_3n_2000.isAcceptableOrUnknown(
              data['r_3a_3n_2000'], _R_3a_3n_2000Meta));
    } else if (isInserting) {
      context.missing(_R_3a_3n_2000Meta);
    }
    if (data.containsKey('y_1a_1n_2000')) {
      context.handle(
          _Y_1a_1n_2000Meta,
          Y_1a_1n_2000.isAcceptableOrUnknown(
              data['y_1a_1n_2000'], _Y_1a_1n_2000Meta));
    } else if (isInserting) {
      context.missing(_Y_1a_1n_2000Meta);
    }
    if (data.containsKey('y_2a_2n_2000')) {
      context.handle(
          _Y_2a_2n_2000Meta,
          Y_2a_2n_2000.isAcceptableOrUnknown(
              data['y_2a_2n_2000'], _Y_2a_2n_2000Meta));
    } else if (isInserting) {
      context.missing(_Y_2a_2n_2000Meta);
    }
    if (data.containsKey('y_3a_3n_2000')) {
      context.handle(
          _Y_3a_3n_2000Meta,
          Y_3a_3n_2000.isAcceptableOrUnknown(
              data['y_3a_3n_2000'], _Y_3a_3n_2000Meta));
    } else if (isInserting) {
      context.missing(_Y_3a_3n_2000Meta);
    }
    if (data.containsKey('b_1a_1n_2000')) {
      context.handle(
          _B_1a_1n_2000Meta,
          B_1a_1n_2000.isAcceptableOrUnknown(
              data['b_1a_1n_2000'], _B_1a_1n_2000Meta));
    } else if (isInserting) {
      context.missing(_B_1a_1n_2000Meta);
    }
    if (data.containsKey('b_2a_2n_2000')) {
      context.handle(
          _B_2a_2n_2000Meta,
          B_2a_2n_2000.isAcceptableOrUnknown(
              data['b_2a_2n_2000'], _B_2a_2n_2000Meta));
    } else if (isInserting) {
      context.missing(_B_2a_2n_2000Meta);
    }
    if (data.containsKey('b_3a_3n_2000')) {
      context.handle(
          _B_3a_3n_2000Meta,
          B_3a_3n_2000.isAcceptableOrUnknown(
              data['b_3a_3n_2000'], _B_3a_3n_2000Meta));
    } else if (isInserting) {
      context.missing(_B_3a_3n_2000Meta);
    }
    if (data.containsKey('r_1a_1n_3000')) {
      context.handle(
          _R_1a_1n_3000Meta,
          R_1a_1n_3000.isAcceptableOrUnknown(
              data['r_1a_1n_3000'], _R_1a_1n_3000Meta));
    } else if (isInserting) {
      context.missing(_R_1a_1n_3000Meta);
    }
    if (data.containsKey('r_2a_2n_3000')) {
      context.handle(
          _R_2a_2n_3000Meta,
          R_2a_2n_3000.isAcceptableOrUnknown(
              data['r_2a_2n_3000'], _R_2a_2n_3000Meta));
    } else if (isInserting) {
      context.missing(_R_2a_2n_3000Meta);
    }
    if (data.containsKey('r_3a_3n_3000')) {
      context.handle(
          _R_3a_3n_3000Meta,
          R_3a_3n_3000.isAcceptableOrUnknown(
              data['r_3a_3n_3000'], _R_3a_3n_3000Meta));
    } else if (isInserting) {
      context.missing(_R_3a_3n_3000Meta);
    }
    if (data.containsKey('y_1a_1n_3000')) {
      context.handle(
          _Y_1a_1n_3000Meta,
          Y_1a_1n_3000.isAcceptableOrUnknown(
              data['y_1a_1n_3000'], _Y_1a_1n_3000Meta));
    } else if (isInserting) {
      context.missing(_Y_1a_1n_3000Meta);
    }
    if (data.containsKey('y_2a_2n_3000')) {
      context.handle(
          _Y_2a_2n_3000Meta,
          Y_2a_2n_3000.isAcceptableOrUnknown(
              data['y_2a_2n_3000'], _Y_2a_2n_3000Meta));
    } else if (isInserting) {
      context.missing(_Y_2a_2n_3000Meta);
    }
    if (data.containsKey('y_3a_3n_3000')) {
      context.handle(
          _Y_3a_3n_3000Meta,
          Y_3a_3n_3000.isAcceptableOrUnknown(
              data['y_3a_3n_3000'], _Y_3a_3n_3000Meta));
    } else if (isInserting) {
      context.missing(_Y_3a_3n_3000Meta);
    }
    if (data.containsKey('b_1a_1n_3000')) {
      context.handle(
          _B_1a_1n_3000Meta,
          B_1a_1n_3000.isAcceptableOrUnknown(
              data['b_1a_1n_3000'], _B_1a_1n_3000Meta));
    } else if (isInserting) {
      context.missing(_B_1a_1n_3000Meta);
    }
    if (data.containsKey('b_2a_2n_3000')) {
      context.handle(
          _B_2a_2n_3000Meta,
          B_2a_2n_3000.isAcceptableOrUnknown(
              data['b_2a_2n_3000'], _B_2a_2n_3000Meta));
    } else if (isInserting) {
      context.missing(_B_2a_2n_3000Meta);
    }
    if (data.containsKey('b_3a_3n_3000')) {
      context.handle(
          _B_3a_3n_3000Meta,
          B_3a_3n_3000.isAcceptableOrUnknown(
              data['b_3a_3n_3000'], _B_3a_3n_3000Meta));
    } else if (isInserting) {
      context.missing(_B_3a_3n_3000Meta);
    }
    if (data.containsKey('r_1a_1n_4000')) {
      context.handle(
          _R_1a_1n_4000Meta,
          R_1a_1n_4000.isAcceptableOrUnknown(
              data['r_1a_1n_4000'], _R_1a_1n_4000Meta));
    } else if (isInserting) {
      context.missing(_R_1a_1n_4000Meta);
    }
    if (data.containsKey('r_2a_2n_4000')) {
      context.handle(
          _R_2a_2n_4000Meta,
          R_2a_2n_4000.isAcceptableOrUnknown(
              data['r_2a_2n_4000'], _R_2a_2n_4000Meta));
    } else if (isInserting) {
      context.missing(_R_2a_2n_4000Meta);
    }
    if (data.containsKey('r_3a_3n_4000')) {
      context.handle(
          _R_3a_3n_4000Meta,
          R_3a_3n_4000.isAcceptableOrUnknown(
              data['r_3a_3n_4000'], _R_3a_3n_4000Meta));
    } else if (isInserting) {
      context.missing(_R_3a_3n_4000Meta);
    }
    if (data.containsKey('y_1a_1n_4000')) {
      context.handle(
          _Y_1a_1n_4000Meta,
          Y_1a_1n_4000.isAcceptableOrUnknown(
              data['y_1a_1n_4000'], _Y_1a_1n_4000Meta));
    } else if (isInserting) {
      context.missing(_Y_1a_1n_4000Meta);
    }
    if (data.containsKey('y_2a_2n_4000')) {
      context.handle(
          _Y_2a_2n_4000Meta,
          Y_2a_2n_4000.isAcceptableOrUnknown(
              data['y_2a_2n_4000'], _Y_2a_2n_4000Meta));
    } else if (isInserting) {
      context.missing(_Y_2a_2n_4000Meta);
    }
    if (data.containsKey('y_3a_3n_4000')) {
      context.handle(
          _Y_3a_3n_4000Meta,
          Y_3a_3n_4000.isAcceptableOrUnknown(
              data['y_3a_3n_4000'], _Y_3a_3n_4000Meta));
    } else if (isInserting) {
      context.missing(_Y_3a_3n_4000Meta);
    }
    if (data.containsKey('b_1a_1n_4000')) {
      context.handle(
          _B_1a_1n_4000Meta,
          B_1a_1n_4000.isAcceptableOrUnknown(
              data['b_1a_1n_4000'], _B_1a_1n_4000Meta));
    } else if (isInserting) {
      context.missing(_B_1a_1n_4000Meta);
    }
    if (data.containsKey('b_2a_2n_4000')) {
      context.handle(
          _B_2a_2n_4000Meta,
          B_2a_2n_4000.isAcceptableOrUnknown(
              data['b_2a_2n_4000'], _B_2a_2n_4000Meta));
    } else if (isInserting) {
      context.missing(_B_2a_2n_4000Meta);
    }
    if (data.containsKey('b_3a_3n_4000')) {
      context.handle(
          _B_3a_3n_4000Meta,
          B_3a_3n_4000.isAcceptableOrUnknown(
              data['b_3a_3n_4000'], _B_3a_3n_4000Meta));
    } else if (isInserting) {
      context.missing(_B_3a_3n_4000Meta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PTcoreRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PTcoreRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PTcoreRLocalDatasourceImplTable createAlias(String alias) {
    return $PTcoreRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ATLocalData extends DataClass implements Insertable<ATLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String serialNo;
  final int rating;
  final int ratedVoltage_HV;
  final int ratedVoltage_LV;
  final double ratedCurrent_HV;
  final double ratedCurrent_LV;
  final String vectorGroup;
  final double impedanceVoltage;
  final int frequency;
  final String typeOfCooling;
  final int noOfPhases;
  final int noOfTaps;
  final int onOfNominalTaps;
  final int yom;
  final String make;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  ATLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.serialNo,
      @required this.rating,
      @required this.ratedVoltage_HV,
      @required this.ratedVoltage_LV,
      @required this.ratedCurrent_HV,
      @required this.ratedCurrent_LV,
      @required this.vectorGroup,
      @required this.impedanceVoltage,
      @required this.frequency,
      @required this.typeOfCooling,
      @required this.noOfPhases,
      @required this.noOfTaps,
      @required this.onOfNominalTaps,
      @required this.yom,
      @required this.make,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory ATLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ATLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      rating: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rating']),
      ratedVoltage_HV: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage_h_v']),
      ratedVoltage_LV: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage_l_v']),
      ratedCurrent_HV: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_current_h_v']),
      ratedCurrent_LV: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_current_l_v']),
      vectorGroup: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}vector_group']),
      impedanceVoltage: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}impedance_voltage']),
      frequency: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency']),
      typeOfCooling: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}type_of_cooling']),
      noOfPhases: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_phases']),
      noOfTaps: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_taps']),
      onOfNominalTaps: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}on_of_nominal_taps']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || rating != null) {
      map['rating'] = Variable<int>(rating);
    }
    if (!nullToAbsent || ratedVoltage_HV != null) {
      map['rated_voltage_h_v'] = Variable<int>(ratedVoltage_HV);
    }
    if (!nullToAbsent || ratedVoltage_LV != null) {
      map['rated_voltage_l_v'] = Variable<int>(ratedVoltage_LV);
    }
    if (!nullToAbsent || ratedCurrent_HV != null) {
      map['rated_current_h_v'] = Variable<double>(ratedCurrent_HV);
    }
    if (!nullToAbsent || ratedCurrent_LV != null) {
      map['rated_current_l_v'] = Variable<double>(ratedCurrent_LV);
    }
    if (!nullToAbsent || vectorGroup != null) {
      map['vector_group'] = Variable<String>(vectorGroup);
    }
    if (!nullToAbsent || impedanceVoltage != null) {
      map['impedance_voltage'] = Variable<double>(impedanceVoltage);
    }
    if (!nullToAbsent || frequency != null) {
      map['frequency'] = Variable<int>(frequency);
    }
    if (!nullToAbsent || typeOfCooling != null) {
      map['type_of_cooling'] = Variable<String>(typeOfCooling);
    }
    if (!nullToAbsent || noOfPhases != null) {
      map['no_of_phases'] = Variable<int>(noOfPhases);
    }
    if (!nullToAbsent || noOfTaps != null) {
      map['no_of_taps'] = Variable<int>(noOfTaps);
    }
    if (!nullToAbsent || onOfNominalTaps != null) {
      map['on_of_nominal_taps'] = Variable<int>(onOfNominalTaps);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  ATLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ATLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      rating:
          rating == null && nullToAbsent ? const Value.absent() : Value(rating),
      ratedVoltage_HV: ratedVoltage_HV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage_HV),
      ratedVoltage_LV: ratedVoltage_LV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage_LV),
      ratedCurrent_HV: ratedCurrent_HV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedCurrent_HV),
      ratedCurrent_LV: ratedCurrent_LV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedCurrent_LV),
      vectorGroup: vectorGroup == null && nullToAbsent
          ? const Value.absent()
          : Value(vectorGroup),
      impedanceVoltage: impedanceVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltage),
      frequency: frequency == null && nullToAbsent
          ? const Value.absent()
          : Value(frequency),
      typeOfCooling: typeOfCooling == null && nullToAbsent
          ? const Value.absent()
          : Value(typeOfCooling),
      noOfPhases: noOfPhases == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfPhases),
      noOfTaps: noOfTaps == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfTaps),
      onOfNominalTaps: onOfNominalTaps == null && nullToAbsent
          ? const Value.absent()
          : Value(onOfNominalTaps),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory ATLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ATLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      rating: serializer.fromJson<int>(json['rating']),
      ratedVoltage_HV: serializer.fromJson<int>(json['ratedVoltage_HV']),
      ratedVoltage_LV: serializer.fromJson<int>(json['ratedVoltage_LV']),
      ratedCurrent_HV: serializer.fromJson<double>(json['ratedCurrent_HV']),
      ratedCurrent_LV: serializer.fromJson<double>(json['ratedCurrent_LV']),
      vectorGroup: serializer.fromJson<String>(json['vectorGroup']),
      impedanceVoltage: serializer.fromJson<double>(json['impedanceVoltage']),
      frequency: serializer.fromJson<int>(json['frequency']),
      typeOfCooling: serializer.fromJson<String>(json['typeOfCooling']),
      noOfPhases: serializer.fromJson<int>(json['noOfPhases']),
      noOfTaps: serializer.fromJson<int>(json['noOfTaps']),
      onOfNominalTaps: serializer.fromJson<int>(json['onOfNominalTaps']),
      yom: serializer.fromJson<int>(json['yom']),
      make: serializer.fromJson<String>(json['make']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'serialNo': serializer.toJson<String>(serialNo),
      'rating': serializer.toJson<int>(rating),
      'ratedVoltage_HV': serializer.toJson<int>(ratedVoltage_HV),
      'ratedVoltage_LV': serializer.toJson<int>(ratedVoltage_LV),
      'ratedCurrent_HV': serializer.toJson<double>(ratedCurrent_HV),
      'ratedCurrent_LV': serializer.toJson<double>(ratedCurrent_LV),
      'vectorGroup': serializer.toJson<String>(vectorGroup),
      'impedanceVoltage': serializer.toJson<double>(impedanceVoltage),
      'frequency': serializer.toJson<int>(frequency),
      'typeOfCooling': serializer.toJson<String>(typeOfCooling),
      'noOfPhases': serializer.toJson<int>(noOfPhases),
      'noOfTaps': serializer.toJson<int>(noOfTaps),
      'onOfNominalTaps': serializer.toJson<int>(onOfNominalTaps),
      'yom': serializer.toJson<int>(yom),
      'make': serializer.toJson<String>(make),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  ATLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String serialNo,
          int rating,
          int ratedVoltage_HV,
          int ratedVoltage_LV,
          double ratedCurrent_HV,
          double ratedCurrent_LV,
          String vectorGroup,
          double impedanceVoltage,
          int frequency,
          String typeOfCooling,
          int noOfPhases,
          int noOfTaps,
          int onOfNominalTaps,
          int yom,
          String make,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      ATLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        serialNo: serialNo ?? this.serialNo,
        rating: rating ?? this.rating,
        ratedVoltage_HV: ratedVoltage_HV ?? this.ratedVoltage_HV,
        ratedVoltage_LV: ratedVoltage_LV ?? this.ratedVoltage_LV,
        ratedCurrent_HV: ratedCurrent_HV ?? this.ratedCurrent_HV,
        ratedCurrent_LV: ratedCurrent_LV ?? this.ratedCurrent_LV,
        vectorGroup: vectorGroup ?? this.vectorGroup,
        impedanceVoltage: impedanceVoltage ?? this.impedanceVoltage,
        frequency: frequency ?? this.frequency,
        typeOfCooling: typeOfCooling ?? this.typeOfCooling,
        noOfPhases: noOfPhases ?? this.noOfPhases,
        noOfTaps: noOfTaps ?? this.noOfTaps,
        onOfNominalTaps: onOfNominalTaps ?? this.onOfNominalTaps,
        yom: yom ?? this.yom,
        make: make ?? this.make,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('ATLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('rating: $rating, ')
          ..write('ratedVoltage_HV: $ratedVoltage_HV, ')
          ..write('ratedVoltage_LV: $ratedVoltage_LV, ')
          ..write('ratedCurrent_HV: $ratedCurrent_HV, ')
          ..write('ratedCurrent_LV: $ratedCurrent_LV, ')
          ..write('vectorGroup: $vectorGroup, ')
          ..write('impedanceVoltage: $impedanceVoltage, ')
          ..write('frequency: $frequency, ')
          ..write('typeOfCooling: $typeOfCooling, ')
          ..write('noOfPhases: $noOfPhases, ')
          ..write('noOfTaps: $noOfTaps, ')
          ..write('onOfNominalTaps: $onOfNominalTaps, ')
          ..write('yom: $yom, ')
          ..write('make: $make, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        rating,
        ratedVoltage_HV,
        ratedVoltage_LV,
        ratedCurrent_HV,
        ratedCurrent_LV,
        vectorGroup,
        impedanceVoltage,
        frequency,
        typeOfCooling,
        noOfPhases,
        noOfTaps,
        onOfNominalTaps,
        yom,
        make,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ATLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.serialNo == this.serialNo &&
          other.rating == this.rating &&
          other.ratedVoltage_HV == this.ratedVoltage_HV &&
          other.ratedVoltage_LV == this.ratedVoltage_LV &&
          other.ratedCurrent_HV == this.ratedCurrent_HV &&
          other.ratedCurrent_LV == this.ratedCurrent_LV &&
          other.vectorGroup == this.vectorGroup &&
          other.impedanceVoltage == this.impedanceVoltage &&
          other.frequency == this.frequency &&
          other.typeOfCooling == this.typeOfCooling &&
          other.noOfPhases == this.noOfPhases &&
          other.noOfTaps == this.noOfTaps &&
          other.onOfNominalTaps == this.onOfNominalTaps &&
          other.yom == this.yom &&
          other.make == this.make &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class ATLocalDatasourceImplCompanion extends UpdateCompanion<ATLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> serialNo;
  final Value<int> rating;
  final Value<int> ratedVoltage_HV;
  final Value<int> ratedVoltage_LV;
  final Value<double> ratedCurrent_HV;
  final Value<double> ratedCurrent_LV;
  final Value<String> vectorGroup;
  final Value<double> impedanceVoltage;
  final Value<int> frequency;
  final Value<String> typeOfCooling;
  final Value<int> noOfPhases;
  final Value<int> noOfTaps;
  final Value<int> onOfNominalTaps;
  final Value<int> yom;
  final Value<String> make;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const ATLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.rating = const Value.absent(),
    this.ratedVoltage_HV = const Value.absent(),
    this.ratedVoltage_LV = const Value.absent(),
    this.ratedCurrent_HV = const Value.absent(),
    this.ratedCurrent_LV = const Value.absent(),
    this.vectorGroup = const Value.absent(),
    this.impedanceVoltage = const Value.absent(),
    this.frequency = const Value.absent(),
    this.typeOfCooling = const Value.absent(),
    this.noOfPhases = const Value.absent(),
    this.noOfTaps = const Value.absent(),
    this.onOfNominalTaps = const Value.absent(),
    this.yom = const Value.absent(),
    this.make = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  ATLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String serialNo,
    @required int rating,
    @required int ratedVoltage_HV,
    @required int ratedVoltage_LV,
    @required double ratedCurrent_HV,
    @required double ratedCurrent_LV,
    @required String vectorGroup,
    @required double impedanceVoltage,
    @required int frequency,
    @required String typeOfCooling,
    @required int noOfPhases,
    @required int noOfTaps,
    @required int onOfNominalTaps,
    @required int yom,
    @required String make,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        serialNo = Value(serialNo),
        rating = Value(rating),
        ratedVoltage_HV = Value(ratedVoltage_HV),
        ratedVoltage_LV = Value(ratedVoltage_LV),
        ratedCurrent_HV = Value(ratedCurrent_HV),
        ratedCurrent_LV = Value(ratedCurrent_LV),
        vectorGroup = Value(vectorGroup),
        impedanceVoltage = Value(impedanceVoltage),
        frequency = Value(frequency),
        typeOfCooling = Value(typeOfCooling),
        noOfPhases = Value(noOfPhases),
        noOfTaps = Value(noOfTaps),
        onOfNominalTaps = Value(onOfNominalTaps),
        yom = Value(yom),
        make = Value(make),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<ATLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> serialNo,
    Expression<int> rating,
    Expression<int> ratedVoltage_HV,
    Expression<int> ratedVoltage_LV,
    Expression<double> ratedCurrent_HV,
    Expression<double> ratedCurrent_LV,
    Expression<String> vectorGroup,
    Expression<double> impedanceVoltage,
    Expression<int> frequency,
    Expression<String> typeOfCooling,
    Expression<int> noOfPhases,
    Expression<int> noOfTaps,
    Expression<int> onOfNominalTaps,
    Expression<int> yom,
    Expression<String> make,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (serialNo != null) 'serial_no': serialNo,
      if (rating != null) 'rating': rating,
      if (ratedVoltage_HV != null) 'rated_voltage_h_v': ratedVoltage_HV,
      if (ratedVoltage_LV != null) 'rated_voltage_l_v': ratedVoltage_LV,
      if (ratedCurrent_HV != null) 'rated_current_h_v': ratedCurrent_HV,
      if (ratedCurrent_LV != null) 'rated_current_l_v': ratedCurrent_LV,
      if (vectorGroup != null) 'vector_group': vectorGroup,
      if (impedanceVoltage != null) 'impedance_voltage': impedanceVoltage,
      if (frequency != null) 'frequency': frequency,
      if (typeOfCooling != null) 'type_of_cooling': typeOfCooling,
      if (noOfPhases != null) 'no_of_phases': noOfPhases,
      if (noOfTaps != null) 'no_of_taps': noOfTaps,
      if (onOfNominalTaps != null) 'on_of_nominal_taps': onOfNominalTaps,
      if (yom != null) 'yom': yom,
      if (make != null) 'make': make,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  ATLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> serialNo,
      Value<int> rating,
      Value<int> ratedVoltage_HV,
      Value<int> ratedVoltage_LV,
      Value<double> ratedCurrent_HV,
      Value<double> ratedCurrent_LV,
      Value<String> vectorGroup,
      Value<double> impedanceVoltage,
      Value<int> frequency,
      Value<String> typeOfCooling,
      Value<int> noOfPhases,
      Value<int> noOfTaps,
      Value<int> onOfNominalTaps,
      Value<int> yom,
      Value<String> make,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return ATLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      serialNo: serialNo ?? this.serialNo,
      rating: rating ?? this.rating,
      ratedVoltage_HV: ratedVoltage_HV ?? this.ratedVoltage_HV,
      ratedVoltage_LV: ratedVoltage_LV ?? this.ratedVoltage_LV,
      ratedCurrent_HV: ratedCurrent_HV ?? this.ratedCurrent_HV,
      ratedCurrent_LV: ratedCurrent_LV ?? this.ratedCurrent_LV,
      vectorGroup: vectorGroup ?? this.vectorGroup,
      impedanceVoltage: impedanceVoltage ?? this.impedanceVoltage,
      frequency: frequency ?? this.frequency,
      typeOfCooling: typeOfCooling ?? this.typeOfCooling,
      noOfPhases: noOfPhases ?? this.noOfPhases,
      noOfTaps: noOfTaps ?? this.noOfTaps,
      onOfNominalTaps: onOfNominalTaps ?? this.onOfNominalTaps,
      yom: yom ?? this.yom,
      make: make ?? this.make,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (rating.present) {
      map['rating'] = Variable<int>(rating.value);
    }
    if (ratedVoltage_HV.present) {
      map['rated_voltage_h_v'] = Variable<int>(ratedVoltage_HV.value);
    }
    if (ratedVoltage_LV.present) {
      map['rated_voltage_l_v'] = Variable<int>(ratedVoltage_LV.value);
    }
    if (ratedCurrent_HV.present) {
      map['rated_current_h_v'] = Variable<double>(ratedCurrent_HV.value);
    }
    if (ratedCurrent_LV.present) {
      map['rated_current_l_v'] = Variable<double>(ratedCurrent_LV.value);
    }
    if (vectorGroup.present) {
      map['vector_group'] = Variable<String>(vectorGroup.value);
    }
    if (impedanceVoltage.present) {
      map['impedance_voltage'] = Variable<double>(impedanceVoltage.value);
    }
    if (frequency.present) {
      map['frequency'] = Variable<int>(frequency.value);
    }
    if (typeOfCooling.present) {
      map['type_of_cooling'] = Variable<String>(typeOfCooling.value);
    }
    if (noOfPhases.present) {
      map['no_of_phases'] = Variable<int>(noOfPhases.value);
    }
    if (noOfTaps.present) {
      map['no_of_taps'] = Variable<int>(noOfTaps.value);
    }
    if (onOfNominalTaps.present) {
      map['on_of_nominal_taps'] = Variable<int>(onOfNominalTaps.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ATLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('rating: $rating, ')
          ..write('ratedVoltage_HV: $ratedVoltage_HV, ')
          ..write('ratedVoltage_LV: $ratedVoltage_LV, ')
          ..write('ratedCurrent_HV: $ratedCurrent_HV, ')
          ..write('ratedCurrent_LV: $ratedCurrent_LV, ')
          ..write('vectorGroup: $vectorGroup, ')
          ..write('impedanceVoltage: $impedanceVoltage, ')
          ..write('frequency: $frequency, ')
          ..write('typeOfCooling: $typeOfCooling, ')
          ..write('noOfPhases: $noOfPhases, ')
          ..write('noOfTaps: $noOfTaps, ')
          ..write('onOfNominalTaps: $onOfNominalTaps, ')
          ..write('yom: $yom, ')
          ..write('make: $make, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $ATLocalDatasourceImplTable extends ATLocalDatasourceImpl
    with TableInfo<$ATLocalDatasourceImplTable, ATLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ATLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratingMeta = const VerificationMeta('rating');
  GeneratedColumn<int> _rating;
  @override
  GeneratedColumn<int> get rating =>
      _rating ??= GeneratedColumn<int>('rating', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedVoltage_HVMeta =
      const VerificationMeta('ratedVoltage_HV');
  GeneratedColumn<int> _ratedVoltage_HV;
  @override
  GeneratedColumn<int> get ratedVoltage_HV => _ratedVoltage_HV ??=
      GeneratedColumn<int>('rated_voltage_h_v', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedVoltage_LVMeta =
      const VerificationMeta('ratedVoltage_LV');
  GeneratedColumn<int> _ratedVoltage_LV;
  @override
  GeneratedColumn<int> get ratedVoltage_LV => _ratedVoltage_LV ??=
      GeneratedColumn<int>('rated_voltage_l_v', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedCurrent_HVMeta =
      const VerificationMeta('ratedCurrent_HV');
  GeneratedColumn<double> _ratedCurrent_HV;
  @override
  GeneratedColumn<double> get ratedCurrent_HV => _ratedCurrent_HV ??=
      GeneratedColumn<double>('rated_current_h_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ratedCurrent_LVMeta =
      const VerificationMeta('ratedCurrent_LV');
  GeneratedColumn<double> _ratedCurrent_LV;
  @override
  GeneratedColumn<double> get ratedCurrent_LV => _ratedCurrent_LV ??=
      GeneratedColumn<double>('rated_current_l_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _vectorGroupMeta =
      const VerificationMeta('vectorGroup');
  GeneratedColumn<String> _vectorGroup;
  @override
  GeneratedColumn<String> get vectorGroup => _vectorGroup ??=
      GeneratedColumn<String>('vector_group', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltageMeta =
      const VerificationMeta('impedanceVoltage');
  GeneratedColumn<double> _impedanceVoltage;
  @override
  GeneratedColumn<double> get impedanceVoltage => _impedanceVoltage ??=
      GeneratedColumn<double>('impedance_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _frequencyMeta = const VerificationMeta('frequency');
  GeneratedColumn<int> _frequency;
  @override
  GeneratedColumn<int> get frequency =>
      _frequency ??= GeneratedColumn<int>('frequency', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _typeOfCoolingMeta =
      const VerificationMeta('typeOfCooling');
  GeneratedColumn<String> _typeOfCooling;
  @override
  GeneratedColumn<String> get typeOfCooling => _typeOfCooling ??=
      GeneratedColumn<String>('type_of_cooling', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _noOfPhasesMeta = const VerificationMeta('noOfPhases');
  GeneratedColumn<int> _noOfPhases;
  @override
  GeneratedColumn<int> get noOfPhases =>
      _noOfPhases ??= GeneratedColumn<int>('no_of_phases', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _noOfTapsMeta = const VerificationMeta('noOfTaps');
  GeneratedColumn<int> _noOfTaps;
  @override
  GeneratedColumn<int> get noOfTaps =>
      _noOfTaps ??= GeneratedColumn<int>('no_of_taps', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _onOfNominalTapsMeta =
      const VerificationMeta('onOfNominalTaps');
  GeneratedColumn<int> _onOfNominalTaps;
  @override
  GeneratedColumn<int> get onOfNominalTaps => _onOfNominalTaps ??=
      GeneratedColumn<int>('on_of_nominal_taps', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        rating,
        ratedVoltage_HV,
        ratedVoltage_LV,
        ratedCurrent_HV,
        ratedCurrent_LV,
        vectorGroup,
        impedanceVoltage,
        frequency,
        typeOfCooling,
        noOfPhases,
        noOfTaps,
        onOfNominalTaps,
        yom,
        make,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'a_t_local_datasource_impl';
  @override
  String get actualTableName => 'a_t_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ATLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('rating')) {
      context.handle(_ratingMeta,
          rating.isAcceptableOrUnknown(data['rating'], _ratingMeta));
    } else if (isInserting) {
      context.missing(_ratingMeta);
    }
    if (data.containsKey('rated_voltage_h_v')) {
      context.handle(
          _ratedVoltage_HVMeta,
          ratedVoltage_HV.isAcceptableOrUnknown(
              data['rated_voltage_h_v'], _ratedVoltage_HVMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltage_HVMeta);
    }
    if (data.containsKey('rated_voltage_l_v')) {
      context.handle(
          _ratedVoltage_LVMeta,
          ratedVoltage_LV.isAcceptableOrUnknown(
              data['rated_voltage_l_v'], _ratedVoltage_LVMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltage_LVMeta);
    }
    if (data.containsKey('rated_current_h_v')) {
      context.handle(
          _ratedCurrent_HVMeta,
          ratedCurrent_HV.isAcceptableOrUnknown(
              data['rated_current_h_v'], _ratedCurrent_HVMeta));
    } else if (isInserting) {
      context.missing(_ratedCurrent_HVMeta);
    }
    if (data.containsKey('rated_current_l_v')) {
      context.handle(
          _ratedCurrent_LVMeta,
          ratedCurrent_LV.isAcceptableOrUnknown(
              data['rated_current_l_v'], _ratedCurrent_LVMeta));
    } else if (isInserting) {
      context.missing(_ratedCurrent_LVMeta);
    }
    if (data.containsKey('vector_group')) {
      context.handle(
          _vectorGroupMeta,
          vectorGroup.isAcceptableOrUnknown(
              data['vector_group'], _vectorGroupMeta));
    } else if (isInserting) {
      context.missing(_vectorGroupMeta);
    }
    if (data.containsKey('impedance_voltage')) {
      context.handle(
          _impedanceVoltageMeta,
          impedanceVoltage.isAcceptableOrUnknown(
              data['impedance_voltage'], _impedanceVoltageMeta));
    } else if (isInserting) {
      context.missing(_impedanceVoltageMeta);
    }
    if (data.containsKey('frequency')) {
      context.handle(_frequencyMeta,
          frequency.isAcceptableOrUnknown(data['frequency'], _frequencyMeta));
    } else if (isInserting) {
      context.missing(_frequencyMeta);
    }
    if (data.containsKey('type_of_cooling')) {
      context.handle(
          _typeOfCoolingMeta,
          typeOfCooling.isAcceptableOrUnknown(
              data['type_of_cooling'], _typeOfCoolingMeta));
    } else if (isInserting) {
      context.missing(_typeOfCoolingMeta);
    }
    if (data.containsKey('no_of_phases')) {
      context.handle(
          _noOfPhasesMeta,
          noOfPhases.isAcceptableOrUnknown(
              data['no_of_phases'], _noOfPhasesMeta));
    } else if (isInserting) {
      context.missing(_noOfPhasesMeta);
    }
    if (data.containsKey('no_of_taps')) {
      context.handle(_noOfTapsMeta,
          noOfTaps.isAcceptableOrUnknown(data['no_of_taps'], _noOfTapsMeta));
    } else if (isInserting) {
      context.missing(_noOfTapsMeta);
    }
    if (data.containsKey('on_of_nominal_taps')) {
      context.handle(
          _onOfNominalTapsMeta,
          onOfNominalTaps.isAcceptableOrUnknown(
              data['on_of_nominal_taps'], _onOfNominalTapsMeta));
    } else if (isInserting) {
      context.missing(_onOfNominalTapsMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ATLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ATLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ATLocalDatasourceImplTable createAlias(String alias) {
    return $ATLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ATcoreIRLocalData extends DataClass
    implements Insertable<ATcoreIRLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double hvE_1min;
  final double hvE_10min;
  final double hvE_PImin;
  final double hvLV_1min;
  final double hvLV_10min;
  final double hvLV_PImin;
  final double lvE_1min;
  final double lvE_10min;
  final double lvE_PImin;
  ATcoreIRLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.hvE_1min,
      @required this.hvE_10min,
      @required this.hvE_PImin,
      @required this.hvLV_1min,
      @required this.hvLV_10min,
      @required this.hvLV_PImin,
      @required this.lvE_1min,
      @required this.lvE_10min,
      @required this.lvE_PImin});
  factory ATcoreIRLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ATcoreIRLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      hvE_1min: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_1min']),
      hvE_10min: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_10min']),
      hvE_PImin: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_p_imin']),
      hvLV_1min: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_l_v_1min']),
      hvLV_10min: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_l_v_10min']),
      hvLV_PImin: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_l_v_p_imin']),
      lvE_1min: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_1min']),
      lvE_10min: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_10min']),
      lvE_PImin: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_p_imin']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || hvE_1min != null) {
      map['hv_e_1min'] = Variable<double>(hvE_1min);
    }
    if (!nullToAbsent || hvE_10min != null) {
      map['hv_e_10min'] = Variable<double>(hvE_10min);
    }
    if (!nullToAbsent || hvE_PImin != null) {
      map['hv_e_p_imin'] = Variable<double>(hvE_PImin);
    }
    if (!nullToAbsent || hvLV_1min != null) {
      map['hv_l_v_1min'] = Variable<double>(hvLV_1min);
    }
    if (!nullToAbsent || hvLV_10min != null) {
      map['hv_l_v_10min'] = Variable<double>(hvLV_10min);
    }
    if (!nullToAbsent || hvLV_PImin != null) {
      map['hv_l_v_p_imin'] = Variable<double>(hvLV_PImin);
    }
    if (!nullToAbsent || lvE_1min != null) {
      map['lv_e_1min'] = Variable<double>(lvE_1min);
    }
    if (!nullToAbsent || lvE_10min != null) {
      map['lv_e_10min'] = Variable<double>(lvE_10min);
    }
    if (!nullToAbsent || lvE_PImin != null) {
      map['lv_e_p_imin'] = Variable<double>(lvE_PImin);
    }
    return map;
  }

  ATcoreIRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ATcoreIRLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      hvE_1min: hvE_1min == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_1min),
      hvE_10min: hvE_10min == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_10min),
      hvE_PImin: hvE_PImin == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_PImin),
      hvLV_1min: hvLV_1min == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLV_1min),
      hvLV_10min: hvLV_10min == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLV_10min),
      hvLV_PImin: hvLV_PImin == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLV_PImin),
      lvE_1min: lvE_1min == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_1min),
      lvE_10min: lvE_10min == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_10min),
      lvE_PImin: lvE_PImin == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_PImin),
    );
  }

  factory ATcoreIRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ATcoreIRLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      hvE_1min: serializer.fromJson<double>(json['hvE_1min']),
      hvE_10min: serializer.fromJson<double>(json['hvE_10min']),
      hvE_PImin: serializer.fromJson<double>(json['hvE_PImin']),
      hvLV_1min: serializer.fromJson<double>(json['hvLV_1min']),
      hvLV_10min: serializer.fromJson<double>(json['hvLV_10min']),
      hvLV_PImin: serializer.fromJson<double>(json['hvLV_PImin']),
      lvE_1min: serializer.fromJson<double>(json['lvE_1min']),
      lvE_10min: serializer.fromJson<double>(json['lvE_10min']),
      lvE_PImin: serializer.fromJson<double>(json['lvE_PImin']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'hvE_1min': serializer.toJson<double>(hvE_1min),
      'hvE_10min': serializer.toJson<double>(hvE_10min),
      'hvE_PImin': serializer.toJson<double>(hvE_PImin),
      'hvLV_1min': serializer.toJson<double>(hvLV_1min),
      'hvLV_10min': serializer.toJson<double>(hvLV_10min),
      'hvLV_PImin': serializer.toJson<double>(hvLV_PImin),
      'lvE_1min': serializer.toJson<double>(lvE_1min),
      'lvE_10min': serializer.toJson<double>(lvE_10min),
      'lvE_PImin': serializer.toJson<double>(lvE_PImin),
    };
  }

  ATcoreIRLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double hvE_1min,
          double hvE_10min,
          double hvE_PImin,
          double hvLV_1min,
          double hvLV_10min,
          double hvLV_PImin,
          double lvE_1min,
          double lvE_10min,
          double lvE_PImin}) =>
      ATcoreIRLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        hvE_1min: hvE_1min ?? this.hvE_1min,
        hvE_10min: hvE_10min ?? this.hvE_10min,
        hvE_PImin: hvE_PImin ?? this.hvE_PImin,
        hvLV_1min: hvLV_1min ?? this.hvLV_1min,
        hvLV_10min: hvLV_10min ?? this.hvLV_10min,
        hvLV_PImin: hvLV_PImin ?? this.hvLV_PImin,
        lvE_1min: lvE_1min ?? this.lvE_1min,
        lvE_10min: lvE_10min ?? this.lvE_10min,
        lvE_PImin: lvE_PImin ?? this.lvE_PImin,
      );
  @override
  String toString() {
    return (StringBuffer('ATcoreIRLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('hvE_1min: $hvE_1min, ')
          ..write('hvE_10min: $hvE_10min, ')
          ..write('hvE_PImin: $hvE_PImin, ')
          ..write('hvLV_1min: $hvLV_1min, ')
          ..write('hvLV_10min: $hvLV_10min, ')
          ..write('hvLV_PImin: $hvLV_PImin, ')
          ..write('lvE_1min: $lvE_1min, ')
          ..write('lvE_10min: $lvE_10min, ')
          ..write('lvE_PImin: $lvE_PImin')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      equipmentUsed,
      updateDate,
      hvE_1min,
      hvE_10min,
      hvE_PImin,
      hvLV_1min,
      hvLV_10min,
      hvLV_PImin,
      lvE_1min,
      lvE_10min,
      lvE_PImin);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ATcoreIRLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.hvE_1min == this.hvE_1min &&
          other.hvE_10min == this.hvE_10min &&
          other.hvE_PImin == this.hvE_PImin &&
          other.hvLV_1min == this.hvLV_1min &&
          other.hvLV_10min == this.hvLV_10min &&
          other.hvLV_PImin == this.hvLV_PImin &&
          other.lvE_1min == this.lvE_1min &&
          other.lvE_10min == this.lvE_10min &&
          other.lvE_PImin == this.lvE_PImin);
}

class ATcoreIRLocalDatasourceImplCompanion
    extends UpdateCompanion<ATcoreIRLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> hvE_1min;
  final Value<double> hvE_10min;
  final Value<double> hvE_PImin;
  final Value<double> hvLV_1min;
  final Value<double> hvLV_10min;
  final Value<double> hvLV_PImin;
  final Value<double> lvE_1min;
  final Value<double> lvE_10min;
  final Value<double> lvE_PImin;
  const ATcoreIRLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.hvE_1min = const Value.absent(),
    this.hvE_10min = const Value.absent(),
    this.hvE_PImin = const Value.absent(),
    this.hvLV_1min = const Value.absent(),
    this.hvLV_10min = const Value.absent(),
    this.hvLV_PImin = const Value.absent(),
    this.lvE_1min = const Value.absent(),
    this.lvE_10min = const Value.absent(),
    this.lvE_PImin = const Value.absent(),
  });
  ATcoreIRLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double hvE_1min,
    @required double hvE_10min,
    @required double hvE_PImin,
    @required double hvLV_1min,
    @required double hvLV_10min,
    @required double hvLV_PImin,
    @required double lvE_1min,
    @required double lvE_10min,
    @required double lvE_PImin,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        hvE_1min = Value(hvE_1min),
        hvE_10min = Value(hvE_10min),
        hvE_PImin = Value(hvE_PImin),
        hvLV_1min = Value(hvLV_1min),
        hvLV_10min = Value(hvLV_10min),
        hvLV_PImin = Value(hvLV_PImin),
        lvE_1min = Value(lvE_1min),
        lvE_10min = Value(lvE_10min),
        lvE_PImin = Value(lvE_PImin);
  static Insertable<ATcoreIRLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> hvE_1min,
    Expression<double> hvE_10min,
    Expression<double> hvE_PImin,
    Expression<double> hvLV_1min,
    Expression<double> hvLV_10min,
    Expression<double> hvLV_PImin,
    Expression<double> lvE_1min,
    Expression<double> lvE_10min,
    Expression<double> lvE_PImin,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (hvE_1min != null) 'hv_e_1min': hvE_1min,
      if (hvE_10min != null) 'hv_e_10min': hvE_10min,
      if (hvE_PImin != null) 'hv_e_p_imin': hvE_PImin,
      if (hvLV_1min != null) 'hv_l_v_1min': hvLV_1min,
      if (hvLV_10min != null) 'hv_l_v_10min': hvLV_10min,
      if (hvLV_PImin != null) 'hv_l_v_p_imin': hvLV_PImin,
      if (lvE_1min != null) 'lv_e_1min': lvE_1min,
      if (lvE_10min != null) 'lv_e_10min': lvE_10min,
      if (lvE_PImin != null) 'lv_e_p_imin': lvE_PImin,
    });
  }

  ATcoreIRLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> hvE_1min,
      Value<double> hvE_10min,
      Value<double> hvE_PImin,
      Value<double> hvLV_1min,
      Value<double> hvLV_10min,
      Value<double> hvLV_PImin,
      Value<double> lvE_1min,
      Value<double> lvE_10min,
      Value<double> lvE_PImin}) {
    return ATcoreIRLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      hvE_1min: hvE_1min ?? this.hvE_1min,
      hvE_10min: hvE_10min ?? this.hvE_10min,
      hvE_PImin: hvE_PImin ?? this.hvE_PImin,
      hvLV_1min: hvLV_1min ?? this.hvLV_1min,
      hvLV_10min: hvLV_10min ?? this.hvLV_10min,
      hvLV_PImin: hvLV_PImin ?? this.hvLV_PImin,
      lvE_1min: lvE_1min ?? this.lvE_1min,
      lvE_10min: lvE_10min ?? this.lvE_10min,
      lvE_PImin: lvE_PImin ?? this.lvE_PImin,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (hvE_1min.present) {
      map['hv_e_1min'] = Variable<double>(hvE_1min.value);
    }
    if (hvE_10min.present) {
      map['hv_e_10min'] = Variable<double>(hvE_10min.value);
    }
    if (hvE_PImin.present) {
      map['hv_e_p_imin'] = Variable<double>(hvE_PImin.value);
    }
    if (hvLV_1min.present) {
      map['hv_l_v_1min'] = Variable<double>(hvLV_1min.value);
    }
    if (hvLV_10min.present) {
      map['hv_l_v_10min'] = Variable<double>(hvLV_10min.value);
    }
    if (hvLV_PImin.present) {
      map['hv_l_v_p_imin'] = Variable<double>(hvLV_PImin.value);
    }
    if (lvE_1min.present) {
      map['lv_e_1min'] = Variable<double>(lvE_1min.value);
    }
    if (lvE_10min.present) {
      map['lv_e_10min'] = Variable<double>(lvE_10min.value);
    }
    if (lvE_PImin.present) {
      map['lv_e_p_imin'] = Variable<double>(lvE_PImin.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ATcoreIRLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('hvE_1min: $hvE_1min, ')
          ..write('hvE_10min: $hvE_10min, ')
          ..write('hvE_PImin: $hvE_PImin, ')
          ..write('hvLV_1min: $hvLV_1min, ')
          ..write('hvLV_10min: $hvLV_10min, ')
          ..write('hvLV_PImin: $hvLV_PImin, ')
          ..write('lvE_1min: $lvE_1min, ')
          ..write('lvE_10min: $lvE_10min, ')
          ..write('lvE_PImin: $lvE_PImin')
          ..write(')'))
        .toString();
  }
}

class $ATcoreIRLocalDatasourceImplTable extends ATcoreIRLocalDatasourceImpl
    with TableInfo<$ATcoreIRLocalDatasourceImplTable, ATcoreIRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ATcoreIRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _hvE_1minMeta = const VerificationMeta('hvE_1min');
  GeneratedColumn<double> _hvE_1min;
  @override
  GeneratedColumn<double> get hvE_1min =>
      _hvE_1min ??= GeneratedColumn<double>('hv_e_1min', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_10minMeta = const VerificationMeta('hvE_10min');
  GeneratedColumn<double> _hvE_10min;
  @override
  GeneratedColumn<double> get hvE_10min =>
      _hvE_10min ??= GeneratedColumn<double>('hv_e_10min', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_PIminMeta = const VerificationMeta('hvE_PImin');
  GeneratedColumn<double> _hvE_PImin;
  @override
  GeneratedColumn<double> get hvE_PImin =>
      _hvE_PImin ??= GeneratedColumn<double>('hv_e_p_imin', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLV_1minMeta = const VerificationMeta('hvLV_1min');
  GeneratedColumn<double> _hvLV_1min;
  @override
  GeneratedColumn<double> get hvLV_1min =>
      _hvLV_1min ??= GeneratedColumn<double>('hv_l_v_1min', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLV_10minMeta = const VerificationMeta('hvLV_10min');
  GeneratedColumn<double> _hvLV_10min;
  @override
  GeneratedColumn<double> get hvLV_10min => _hvLV_10min ??=
      GeneratedColumn<double>('hv_l_v_10min', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLV_PIminMeta = const VerificationMeta('hvLV_PImin');
  GeneratedColumn<double> _hvLV_PImin;
  @override
  GeneratedColumn<double> get hvLV_PImin => _hvLV_PImin ??=
      GeneratedColumn<double>('hv_l_v_p_imin', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_1minMeta = const VerificationMeta('lvE_1min');
  GeneratedColumn<double> _lvE_1min;
  @override
  GeneratedColumn<double> get lvE_1min =>
      _lvE_1min ??= GeneratedColumn<double>('lv_e_1min', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_10minMeta = const VerificationMeta('lvE_10min');
  GeneratedColumn<double> _lvE_10min;
  @override
  GeneratedColumn<double> get lvE_10min =>
      _lvE_10min ??= GeneratedColumn<double>('lv_e_10min', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_PIminMeta = const VerificationMeta('lvE_PImin');
  GeneratedColumn<double> _lvE_PImin;
  @override
  GeneratedColumn<double> get lvE_PImin =>
      _lvE_PImin ??= GeneratedColumn<double>('lv_e_p_imin', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        hvE_1min,
        hvE_10min,
        hvE_PImin,
        hvLV_1min,
        hvLV_10min,
        hvLV_PImin,
        lvE_1min,
        lvE_10min,
        lvE_PImin
      ];
  @override
  String get aliasedName => _alias ?? 'a_tcore_i_r_local_datasource_impl';
  @override
  String get actualTableName => 'a_tcore_i_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ATcoreIRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('hv_e_1min')) {
      context.handle(_hvE_1minMeta,
          hvE_1min.isAcceptableOrUnknown(data['hv_e_1min'], _hvE_1minMeta));
    } else if (isInserting) {
      context.missing(_hvE_1minMeta);
    }
    if (data.containsKey('hv_e_10min')) {
      context.handle(_hvE_10minMeta,
          hvE_10min.isAcceptableOrUnknown(data['hv_e_10min'], _hvE_10minMeta));
    } else if (isInserting) {
      context.missing(_hvE_10minMeta);
    }
    if (data.containsKey('hv_e_p_imin')) {
      context.handle(_hvE_PIminMeta,
          hvE_PImin.isAcceptableOrUnknown(data['hv_e_p_imin'], _hvE_PIminMeta));
    } else if (isInserting) {
      context.missing(_hvE_PIminMeta);
    }
    if (data.containsKey('hv_l_v_1min')) {
      context.handle(_hvLV_1minMeta,
          hvLV_1min.isAcceptableOrUnknown(data['hv_l_v_1min'], _hvLV_1minMeta));
    } else if (isInserting) {
      context.missing(_hvLV_1minMeta);
    }
    if (data.containsKey('hv_l_v_10min')) {
      context.handle(
          _hvLV_10minMeta,
          hvLV_10min.isAcceptableOrUnknown(
              data['hv_l_v_10min'], _hvLV_10minMeta));
    } else if (isInserting) {
      context.missing(_hvLV_10minMeta);
    }
    if (data.containsKey('hv_l_v_p_imin')) {
      context.handle(
          _hvLV_PIminMeta,
          hvLV_PImin.isAcceptableOrUnknown(
              data['hv_l_v_p_imin'], _hvLV_PIminMeta));
    } else if (isInserting) {
      context.missing(_hvLV_PIminMeta);
    }
    if (data.containsKey('lv_e_1min')) {
      context.handle(_lvE_1minMeta,
          lvE_1min.isAcceptableOrUnknown(data['lv_e_1min'], _lvE_1minMeta));
    } else if (isInserting) {
      context.missing(_lvE_1minMeta);
    }
    if (data.containsKey('lv_e_10min')) {
      context.handle(_lvE_10minMeta,
          lvE_10min.isAcceptableOrUnknown(data['lv_e_10min'], _lvE_10minMeta));
    } else if (isInserting) {
      context.missing(_lvE_10minMeta);
    }
    if (data.containsKey('lv_e_p_imin')) {
      context.handle(_lvE_PIminMeta,
          lvE_PImin.isAcceptableOrUnknown(data['lv_e_p_imin'], _lvE_PIminMeta));
    } else if (isInserting) {
      context.missing(_lvE_PIminMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ATcoreIRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ATcoreIRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ATcoreIRLocalDatasourceImplTable createAlias(String alias) {
    return $ATcoreIRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ATwrHvLocalData extends DataClass implements Insertable<ATwrHvLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_1u_1n;
  final double hv_1v_1n;
  final double hv_1w_1n;
  ATwrHvLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_1u_1n,
      @required this.hv_1v_1n,
      @required this.hv_1w_1n});
  factory ATwrHvLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ATwrHvLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u_1n']),
      hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v_1n']),
      hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w_1n']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_1u_1n != null) {
      map['hv_1u_1n'] = Variable<double>(hv_1u_1n);
    }
    if (!nullToAbsent || hv_1v_1n != null) {
      map['hv_1v_1n'] = Variable<double>(hv_1v_1n);
    }
    if (!nullToAbsent || hv_1w_1n != null) {
      map['hv_1w_1n'] = Variable<double>(hv_1w_1n);
    }
    return map;
  }

  ATwrHv_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ATwrHv_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_1u_1n: hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1u_1n),
      hv_1v_1n: hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1v_1n),
      hv_1w_1n: hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1w_1n),
    );
  }

  factory ATwrHvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ATwrHvLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_1u_1n: serializer.fromJson<double>(json['hv_1u_1n']),
      hv_1v_1n: serializer.fromJson<double>(json['hv_1v_1n']),
      hv_1w_1n: serializer.fromJson<double>(json['hv_1w_1n']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_1u_1n': serializer.toJson<double>(hv_1u_1n),
      'hv_1v_1n': serializer.toJson<double>(hv_1v_1n),
      'hv_1w_1n': serializer.toJson<double>(hv_1w_1n),
    };
  }

  ATwrHvLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_1u_1n,
          double hv_1v_1n,
          double hv_1w_1n}) =>
      ATwrHvLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_1u_1n: hv_1u_1n ?? this.hv_1u_1n,
        hv_1v_1n: hv_1v_1n ?? this.hv_1v_1n,
        hv_1w_1n: hv_1w_1n ?? this.hv_1w_1n,
      );
  @override
  String toString() {
    return (StringBuffer('ATwrHvLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1n: $hv_1u_1n, ')
          ..write('hv_1v_1n: $hv_1v_1n, ')
          ..write('hv_1w_1n: $hv_1w_1n')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      hv_1u_1n, hv_1v_1n, hv_1w_1n);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ATwrHvLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_1u_1n == this.hv_1u_1n &&
          other.hv_1v_1n == this.hv_1v_1n &&
          other.hv_1w_1n == this.hv_1w_1n);
}

class ATwrHv_LocalDatasourceImplCompanion
    extends UpdateCompanion<ATwrHvLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_1u_1n;
  final Value<double> hv_1v_1n;
  final Value<double> hv_1w_1n;
  const ATwrHv_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_1u_1n = const Value.absent(),
    this.hv_1v_1n = const Value.absent(),
    this.hv_1w_1n = const Value.absent(),
  });
  ATwrHv_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_1u_1n,
    @required double hv_1v_1n,
    @required double hv_1w_1n,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_1u_1n = Value(hv_1u_1n),
        hv_1v_1n = Value(hv_1v_1n),
        hv_1w_1n = Value(hv_1w_1n);
  static Insertable<ATwrHvLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_1u_1n,
    Expression<double> hv_1v_1n,
    Expression<double> hv_1w_1n,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_1u_1n != null) 'hv_1u_1n': hv_1u_1n,
      if (hv_1v_1n != null) 'hv_1v_1n': hv_1v_1n,
      if (hv_1w_1n != null) 'hv_1w_1n': hv_1w_1n,
    });
  }

  ATwrHv_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_1u_1n,
      Value<double> hv_1v_1n,
      Value<double> hv_1w_1n}) {
    return ATwrHv_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_1u_1n: hv_1u_1n ?? this.hv_1u_1n,
      hv_1v_1n: hv_1v_1n ?? this.hv_1v_1n,
      hv_1w_1n: hv_1w_1n ?? this.hv_1w_1n,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_1u_1n.present) {
      map['hv_1u_1n'] = Variable<double>(hv_1u_1n.value);
    }
    if (hv_1v_1n.present) {
      map['hv_1v_1n'] = Variable<double>(hv_1v_1n.value);
    }
    if (hv_1w_1n.present) {
      map['hv_1w_1n'] = Variable<double>(hv_1w_1n.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ATwrHv_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1n: $hv_1u_1n, ')
          ..write('hv_1v_1n: $hv_1v_1n, ')
          ..write('hv_1w_1n: $hv_1w_1n')
          ..write(')'))
        .toString();
  }
}

class $ATwrHv_LocalDatasourceImplTable extends ATwrHv_LocalDatasourceImpl
    with TableInfo<$ATwrHv_LocalDatasourceImplTable, ATwrHvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ATwrHv_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1u_1nMeta = const VerificationMeta('hv_1u_1n');
  GeneratedColumn<double> _hv_1u_1n;
  @override
  GeneratedColumn<double> get hv_1u_1n =>
      _hv_1u_1n ??= GeneratedColumn<double>('hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1v_1nMeta = const VerificationMeta('hv_1v_1n');
  GeneratedColumn<double> _hv_1v_1n;
  @override
  GeneratedColumn<double> get hv_1v_1n =>
      _hv_1v_1n ??= GeneratedColumn<double>('hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1w_1nMeta = const VerificationMeta('hv_1w_1n');
  GeneratedColumn<double> _hv_1w_1n;
  @override
  GeneratedColumn<double> get hv_1w_1n =>
      _hv_1w_1n ??= GeneratedColumn<double>('hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_1u_1n,
        hv_1v_1n,
        hv_1w_1n
      ];
  @override
  String get aliasedName => _alias ?? 'a_twr_hv_local_datasource_impl';
  @override
  String get actualTableName => 'a_twr_hv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ATwrHvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_1u_1n')) {
      context.handle(_hv_1u_1nMeta,
          hv_1u_1n.isAcceptableOrUnknown(data['hv_1u_1n'], _hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1u_1nMeta);
    }
    if (data.containsKey('hv_1v_1n')) {
      context.handle(_hv_1v_1nMeta,
          hv_1v_1n.isAcceptableOrUnknown(data['hv_1v_1n'], _hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1v_1nMeta);
    }
    if (data.containsKey('hv_1w_1n')) {
      context.handle(_hv_1w_1nMeta,
          hv_1w_1n.isAcceptableOrUnknown(data['hv_1w_1n'], _hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1w_1nMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ATwrHvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ATwrHvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ATwrHv_LocalDatasourceImplTable createAlias(String alias) {
    return $ATwrHv_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ATwrLvLocalData extends DataClass implements Insertable<ATwrLvLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double lv_2u_2v;
  final double lv_2v_2w;
  final double lv_2w_2u;
  final String equipmentUsed;
  final DateTime updateDate;
  ATwrLvLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.lv_2u_2v,
      @required this.lv_2v_2w,
      @required this.lv_2w_2u,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory ATwrLvLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ATwrLvLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      lv_2u_2v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2u_2v']),
      lv_2v_2w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2v_2w']),
      lv_2w_2u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2w_2u']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || lv_2u_2v != null) {
      map['lv_2u_2v'] = Variable<double>(lv_2u_2v);
    }
    if (!nullToAbsent || lv_2v_2w != null) {
      map['lv_2v_2w'] = Variable<double>(lv_2v_2w);
    }
    if (!nullToAbsent || lv_2w_2u != null) {
      map['lv_2w_2u'] = Variable<double>(lv_2w_2u);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  ATwrLv_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ATwrLv_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      lv_2u_2v: lv_2u_2v == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2u_2v),
      lv_2v_2w: lv_2v_2w == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2v_2w),
      lv_2w_2u: lv_2w_2u == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2w_2u),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory ATwrLvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ATwrLvLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      lv_2u_2v: serializer.fromJson<double>(json['lv_2u_2v']),
      lv_2v_2w: serializer.fromJson<double>(json['lv_2v_2w']),
      lv_2w_2u: serializer.fromJson<double>(json['lv_2w_2u']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'lv_2u_2v': serializer.toJson<double>(lv_2u_2v),
      'lv_2v_2w': serializer.toJson<double>(lv_2v_2w),
      'lv_2w_2u': serializer.toJson<double>(lv_2w_2u),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  ATwrLvLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double lv_2u_2v,
          double lv_2v_2w,
          double lv_2w_2u,
          String equipmentUsed,
          DateTime updateDate}) =>
      ATwrLvLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        lv_2u_2v: lv_2u_2v ?? this.lv_2u_2v,
        lv_2v_2w: lv_2v_2w ?? this.lv_2v_2w,
        lv_2w_2u: lv_2w_2u ?? this.lv_2w_2u,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('ATwrLvLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('lv_2u_2v: $lv_2u_2v, ')
          ..write('lv_2v_2w: $lv_2v_2w, ')
          ..write('lv_2w_2u: $lv_2w_2u, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      lv_2u_2v, lv_2v_2w, lv_2w_2u, equipmentUsed, updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ATwrLvLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.lv_2u_2v == this.lv_2u_2v &&
          other.lv_2v_2w == this.lv_2v_2w &&
          other.lv_2w_2u == this.lv_2w_2u &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class ATwrLv_LocalDatasourceImplCompanion
    extends UpdateCompanion<ATwrLvLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> lv_2u_2v;
  final Value<double> lv_2v_2w;
  final Value<double> lv_2w_2u;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const ATwrLv_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.lv_2u_2v = const Value.absent(),
    this.lv_2v_2w = const Value.absent(),
    this.lv_2w_2u = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  ATwrLv_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double lv_2u_2v,
    @required double lv_2v_2w,
    @required double lv_2w_2u,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        lv_2u_2v = Value(lv_2u_2v),
        lv_2v_2w = Value(lv_2v_2w),
        lv_2w_2u = Value(lv_2w_2u),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<ATwrLvLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> lv_2u_2v,
    Expression<double> lv_2v_2w,
    Expression<double> lv_2w_2u,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (lv_2u_2v != null) 'lv_2u_2v': lv_2u_2v,
      if (lv_2v_2w != null) 'lv_2v_2w': lv_2v_2w,
      if (lv_2w_2u != null) 'lv_2w_2u': lv_2w_2u,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  ATwrLv_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> lv_2u_2v,
      Value<double> lv_2v_2w,
      Value<double> lv_2w_2u,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return ATwrLv_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      lv_2u_2v: lv_2u_2v ?? this.lv_2u_2v,
      lv_2v_2w: lv_2v_2w ?? this.lv_2v_2w,
      lv_2w_2u: lv_2w_2u ?? this.lv_2w_2u,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (lv_2u_2v.present) {
      map['lv_2u_2v'] = Variable<double>(lv_2u_2v.value);
    }
    if (lv_2v_2w.present) {
      map['lv_2v_2w'] = Variable<double>(lv_2v_2w.value);
    }
    if (lv_2w_2u.present) {
      map['lv_2w_2u'] = Variable<double>(lv_2w_2u.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ATwrLv_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('lv_2u_2v: $lv_2u_2v, ')
          ..write('lv_2v_2w: $lv_2v_2w, ')
          ..write('lv_2w_2u: $lv_2w_2u, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $ATwrLv_LocalDatasourceImplTable extends ATwrLv_LocalDatasourceImpl
    with TableInfo<$ATwrLv_LocalDatasourceImplTable, ATwrLvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ATwrLv_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2u_2vMeta = const VerificationMeta('lv_2u_2v');
  GeneratedColumn<double> _lv_2u_2v;
  @override
  GeneratedColumn<double> get lv_2u_2v =>
      _lv_2u_2v ??= GeneratedColumn<double>('lv_2u_2v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2v_2wMeta = const VerificationMeta('lv_2v_2w');
  GeneratedColumn<double> _lv_2v_2w;
  @override
  GeneratedColumn<double> get lv_2v_2w =>
      _lv_2v_2w ??= GeneratedColumn<double>('lv_2v_2w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2w_2uMeta = const VerificationMeta('lv_2w_2u');
  GeneratedColumn<double> _lv_2w_2u;
  @override
  GeneratedColumn<double> get lv_2w_2u =>
      _lv_2w_2u ??= GeneratedColumn<double>('lv_2w_2u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        lv_2u_2v,
        lv_2v_2w,
        lv_2w_2u,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'a_twr_lv_local_datasource_impl';
  @override
  String get actualTableName => 'a_twr_lv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ATwrLvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('lv_2u_2v')) {
      context.handle(_lv_2u_2vMeta,
          lv_2u_2v.isAcceptableOrUnknown(data['lv_2u_2v'], _lv_2u_2vMeta));
    } else if (isInserting) {
      context.missing(_lv_2u_2vMeta);
    }
    if (data.containsKey('lv_2v_2w')) {
      context.handle(_lv_2v_2wMeta,
          lv_2v_2w.isAcceptableOrUnknown(data['lv_2v_2w'], _lv_2v_2wMeta));
    } else if (isInserting) {
      context.missing(_lv_2v_2wMeta);
    }
    if (data.containsKey('lv_2w_2u')) {
      context.handle(_lv_2w_2uMeta,
          lv_2w_2u.isAcceptableOrUnknown(data['lv_2w_2u'], _lv_2w_2uMeta));
    } else if (isInserting) {
      context.missing(_lv_2w_2uMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ATwrLvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ATwrLvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ATwrLv_LocalDatasourceImplTable createAlias(String alias) {
    return $ATwrLv_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ATrLocalData extends DataClass implements Insertable<ATrLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_1u_1v;
  final double hv_1v_1w;
  final double hv_1w_1u;
  final double hv_1u_1n;
  final double hv_1v_1n;
  final double hv_1w_1n;
  final double lv_2u_2v;
  final double lv_2v_2w;
  final double lv_2w_2u;
  final double lv_2u_2n;
  final double lv_2v_2n;
  final double lv_2w_2n;
  final String equipmentUsed;
  final DateTime updateDate;
  ATrLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_1u_1v,
      @required this.hv_1v_1w,
      @required this.hv_1w_1u,
      @required this.hv_1u_1n,
      @required this.hv_1v_1n,
      @required this.hv_1w_1n,
      @required this.lv_2u_2v,
      @required this.lv_2v_2w,
      @required this.lv_2w_2u,
      @required this.lv_2u_2n,
      @required this.lv_2v_2n,
      @required this.lv_2w_2n,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory ATrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ATrLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_1u_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u_1v']),
      hv_1v_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v_1w']),
      hv_1w_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w_1u']),
      hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u_1n']),
      hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v_1n']),
      hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w_1n']),
      lv_2u_2v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2u_2v']),
      lv_2v_2w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2v_2w']),
      lv_2w_2u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2w_2u']),
      lv_2u_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2u_2n']),
      lv_2v_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2v_2n']),
      lv_2w_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2w_2n']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_1u_1v != null) {
      map['hv_1u_1v'] = Variable<double>(hv_1u_1v);
    }
    if (!nullToAbsent || hv_1v_1w != null) {
      map['hv_1v_1w'] = Variable<double>(hv_1v_1w);
    }
    if (!nullToAbsent || hv_1w_1u != null) {
      map['hv_1w_1u'] = Variable<double>(hv_1w_1u);
    }
    if (!nullToAbsent || hv_1u_1n != null) {
      map['hv_1u_1n'] = Variable<double>(hv_1u_1n);
    }
    if (!nullToAbsent || hv_1v_1n != null) {
      map['hv_1v_1n'] = Variable<double>(hv_1v_1n);
    }
    if (!nullToAbsent || hv_1w_1n != null) {
      map['hv_1w_1n'] = Variable<double>(hv_1w_1n);
    }
    if (!nullToAbsent || lv_2u_2v != null) {
      map['lv_2u_2v'] = Variable<double>(lv_2u_2v);
    }
    if (!nullToAbsent || lv_2v_2w != null) {
      map['lv_2v_2w'] = Variable<double>(lv_2v_2w);
    }
    if (!nullToAbsent || lv_2w_2u != null) {
      map['lv_2w_2u'] = Variable<double>(lv_2w_2u);
    }
    if (!nullToAbsent || lv_2u_2n != null) {
      map['lv_2u_2n'] = Variable<double>(lv_2u_2n);
    }
    if (!nullToAbsent || lv_2v_2n != null) {
      map['lv_2v_2n'] = Variable<double>(lv_2v_2n);
    }
    if (!nullToAbsent || lv_2w_2n != null) {
      map['lv_2w_2n'] = Variable<double>(lv_2w_2n);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  AT_R_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return AT_R_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_1u_1v: hv_1u_1v == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1u_1v),
      hv_1v_1w: hv_1v_1w == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1v_1w),
      hv_1w_1u: hv_1w_1u == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1w_1u),
      hv_1u_1n: hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1u_1n),
      hv_1v_1n: hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1v_1n),
      hv_1w_1n: hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1w_1n),
      lv_2u_2v: lv_2u_2v == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2u_2v),
      lv_2v_2w: lv_2v_2w == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2v_2w),
      lv_2w_2u: lv_2w_2u == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2w_2u),
      lv_2u_2n: lv_2u_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2u_2n),
      lv_2v_2n: lv_2v_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2v_2n),
      lv_2w_2n: lv_2w_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2w_2n),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory ATrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ATrLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_1u_1v: serializer.fromJson<double>(json['hv_1u_1v']),
      hv_1v_1w: serializer.fromJson<double>(json['hv_1v_1w']),
      hv_1w_1u: serializer.fromJson<double>(json['hv_1w_1u']),
      hv_1u_1n: serializer.fromJson<double>(json['hv_1u_1n']),
      hv_1v_1n: serializer.fromJson<double>(json['hv_1v_1n']),
      hv_1w_1n: serializer.fromJson<double>(json['hv_1w_1n']),
      lv_2u_2v: serializer.fromJson<double>(json['lv_2u_2v']),
      lv_2v_2w: serializer.fromJson<double>(json['lv_2v_2w']),
      lv_2w_2u: serializer.fromJson<double>(json['lv_2w_2u']),
      lv_2u_2n: serializer.fromJson<double>(json['lv_2u_2n']),
      lv_2v_2n: serializer.fromJson<double>(json['lv_2v_2n']),
      lv_2w_2n: serializer.fromJson<double>(json['lv_2w_2n']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_1u_1v': serializer.toJson<double>(hv_1u_1v),
      'hv_1v_1w': serializer.toJson<double>(hv_1v_1w),
      'hv_1w_1u': serializer.toJson<double>(hv_1w_1u),
      'hv_1u_1n': serializer.toJson<double>(hv_1u_1n),
      'hv_1v_1n': serializer.toJson<double>(hv_1v_1n),
      'hv_1w_1n': serializer.toJson<double>(hv_1w_1n),
      'lv_2u_2v': serializer.toJson<double>(lv_2u_2v),
      'lv_2v_2w': serializer.toJson<double>(lv_2v_2w),
      'lv_2w_2u': serializer.toJson<double>(lv_2w_2u),
      'lv_2u_2n': serializer.toJson<double>(lv_2u_2n),
      'lv_2v_2n': serializer.toJson<double>(lv_2v_2n),
      'lv_2w_2n': serializer.toJson<double>(lv_2w_2n),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  ATrLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_1u_1v,
          double hv_1v_1w,
          double hv_1w_1u,
          double hv_1u_1n,
          double hv_1v_1n,
          double hv_1w_1n,
          double lv_2u_2v,
          double lv_2v_2w,
          double lv_2w_2u,
          double lv_2u_2n,
          double lv_2v_2n,
          double lv_2w_2n,
          String equipmentUsed,
          DateTime updateDate}) =>
      ATrLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_1u_1v: hv_1u_1v ?? this.hv_1u_1v,
        hv_1v_1w: hv_1v_1w ?? this.hv_1v_1w,
        hv_1w_1u: hv_1w_1u ?? this.hv_1w_1u,
        hv_1u_1n: hv_1u_1n ?? this.hv_1u_1n,
        hv_1v_1n: hv_1v_1n ?? this.hv_1v_1n,
        hv_1w_1n: hv_1w_1n ?? this.hv_1w_1n,
        lv_2u_2v: lv_2u_2v ?? this.lv_2u_2v,
        lv_2v_2w: lv_2v_2w ?? this.lv_2v_2w,
        lv_2w_2u: lv_2w_2u ?? this.lv_2w_2u,
        lv_2u_2n: lv_2u_2n ?? this.lv_2u_2n,
        lv_2v_2n: lv_2v_2n ?? this.lv_2v_2n,
        lv_2w_2n: lv_2w_2n ?? this.lv_2w_2n,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('ATrLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1v: $hv_1u_1v, ')
          ..write('hv_1v_1w: $hv_1v_1w, ')
          ..write('hv_1w_1u: $hv_1w_1u, ')
          ..write('hv_1u_1n: $hv_1u_1n, ')
          ..write('hv_1v_1n: $hv_1v_1n, ')
          ..write('hv_1w_1n: $hv_1w_1n, ')
          ..write('lv_2u_2v: $lv_2u_2v, ')
          ..write('lv_2v_2w: $lv_2v_2w, ')
          ..write('lv_2w_2u: $lv_2w_2u, ')
          ..write('lv_2u_2n: $lv_2u_2n, ')
          ..write('lv_2v_2n: $lv_2v_2n, ')
          ..write('lv_2w_2n: $lv_2w_2n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      tapPosition,
      hv_1u_1v,
      hv_1v_1w,
      hv_1w_1u,
      hv_1u_1n,
      hv_1v_1n,
      hv_1w_1n,
      lv_2u_2v,
      lv_2v_2w,
      lv_2w_2u,
      lv_2u_2n,
      lv_2v_2n,
      lv_2w_2n,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ATrLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_1u_1v == this.hv_1u_1v &&
          other.hv_1v_1w == this.hv_1v_1w &&
          other.hv_1w_1u == this.hv_1w_1u &&
          other.hv_1u_1n == this.hv_1u_1n &&
          other.hv_1v_1n == this.hv_1v_1n &&
          other.hv_1w_1n == this.hv_1w_1n &&
          other.lv_2u_2v == this.lv_2u_2v &&
          other.lv_2v_2w == this.lv_2v_2w &&
          other.lv_2w_2u == this.lv_2w_2u &&
          other.lv_2u_2n == this.lv_2u_2n &&
          other.lv_2v_2n == this.lv_2v_2n &&
          other.lv_2w_2n == this.lv_2w_2n &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class AT_R_LocalDatasourceImplCompanion extends UpdateCompanion<ATrLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_1u_1v;
  final Value<double> hv_1v_1w;
  final Value<double> hv_1w_1u;
  final Value<double> hv_1u_1n;
  final Value<double> hv_1v_1n;
  final Value<double> hv_1w_1n;
  final Value<double> lv_2u_2v;
  final Value<double> lv_2v_2w;
  final Value<double> lv_2w_2u;
  final Value<double> lv_2u_2n;
  final Value<double> lv_2v_2n;
  final Value<double> lv_2w_2n;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const AT_R_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_1u_1v = const Value.absent(),
    this.hv_1v_1w = const Value.absent(),
    this.hv_1w_1u = const Value.absent(),
    this.hv_1u_1n = const Value.absent(),
    this.hv_1v_1n = const Value.absent(),
    this.hv_1w_1n = const Value.absent(),
    this.lv_2u_2v = const Value.absent(),
    this.lv_2v_2w = const Value.absent(),
    this.lv_2w_2u = const Value.absent(),
    this.lv_2u_2n = const Value.absent(),
    this.lv_2v_2n = const Value.absent(),
    this.lv_2w_2n = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  AT_R_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_1u_1v,
    @required double hv_1v_1w,
    @required double hv_1w_1u,
    @required double hv_1u_1n,
    @required double hv_1v_1n,
    @required double hv_1w_1n,
    @required double lv_2u_2v,
    @required double lv_2v_2w,
    @required double lv_2w_2u,
    @required double lv_2u_2n,
    @required double lv_2v_2n,
    @required double lv_2w_2n,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_1u_1v = Value(hv_1u_1v),
        hv_1v_1w = Value(hv_1v_1w),
        hv_1w_1u = Value(hv_1w_1u),
        hv_1u_1n = Value(hv_1u_1n),
        hv_1v_1n = Value(hv_1v_1n),
        hv_1w_1n = Value(hv_1w_1n),
        lv_2u_2v = Value(lv_2u_2v),
        lv_2v_2w = Value(lv_2v_2w),
        lv_2w_2u = Value(lv_2w_2u),
        lv_2u_2n = Value(lv_2u_2n),
        lv_2v_2n = Value(lv_2v_2n),
        lv_2w_2n = Value(lv_2w_2n),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<ATrLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_1u_1v,
    Expression<double> hv_1v_1w,
    Expression<double> hv_1w_1u,
    Expression<double> hv_1u_1n,
    Expression<double> hv_1v_1n,
    Expression<double> hv_1w_1n,
    Expression<double> lv_2u_2v,
    Expression<double> lv_2v_2w,
    Expression<double> lv_2w_2u,
    Expression<double> lv_2u_2n,
    Expression<double> lv_2v_2n,
    Expression<double> lv_2w_2n,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_1u_1v != null) 'hv_1u_1v': hv_1u_1v,
      if (hv_1v_1w != null) 'hv_1v_1w': hv_1v_1w,
      if (hv_1w_1u != null) 'hv_1w_1u': hv_1w_1u,
      if (hv_1u_1n != null) 'hv_1u_1n': hv_1u_1n,
      if (hv_1v_1n != null) 'hv_1v_1n': hv_1v_1n,
      if (hv_1w_1n != null) 'hv_1w_1n': hv_1w_1n,
      if (lv_2u_2v != null) 'lv_2u_2v': lv_2u_2v,
      if (lv_2v_2w != null) 'lv_2v_2w': lv_2v_2w,
      if (lv_2w_2u != null) 'lv_2w_2u': lv_2w_2u,
      if (lv_2u_2n != null) 'lv_2u_2n': lv_2u_2n,
      if (lv_2v_2n != null) 'lv_2v_2n': lv_2v_2n,
      if (lv_2w_2n != null) 'lv_2w_2n': lv_2w_2n,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  AT_R_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_1u_1v,
      Value<double> hv_1v_1w,
      Value<double> hv_1w_1u,
      Value<double> hv_1u_1n,
      Value<double> hv_1v_1n,
      Value<double> hv_1w_1n,
      Value<double> lv_2u_2v,
      Value<double> lv_2v_2w,
      Value<double> lv_2w_2u,
      Value<double> lv_2u_2n,
      Value<double> lv_2v_2n,
      Value<double> lv_2w_2n,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return AT_R_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_1u_1v: hv_1u_1v ?? this.hv_1u_1v,
      hv_1v_1w: hv_1v_1w ?? this.hv_1v_1w,
      hv_1w_1u: hv_1w_1u ?? this.hv_1w_1u,
      hv_1u_1n: hv_1u_1n ?? this.hv_1u_1n,
      hv_1v_1n: hv_1v_1n ?? this.hv_1v_1n,
      hv_1w_1n: hv_1w_1n ?? this.hv_1w_1n,
      lv_2u_2v: lv_2u_2v ?? this.lv_2u_2v,
      lv_2v_2w: lv_2v_2w ?? this.lv_2v_2w,
      lv_2w_2u: lv_2w_2u ?? this.lv_2w_2u,
      lv_2u_2n: lv_2u_2n ?? this.lv_2u_2n,
      lv_2v_2n: lv_2v_2n ?? this.lv_2v_2n,
      lv_2w_2n: lv_2w_2n ?? this.lv_2w_2n,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_1u_1v.present) {
      map['hv_1u_1v'] = Variable<double>(hv_1u_1v.value);
    }
    if (hv_1v_1w.present) {
      map['hv_1v_1w'] = Variable<double>(hv_1v_1w.value);
    }
    if (hv_1w_1u.present) {
      map['hv_1w_1u'] = Variable<double>(hv_1w_1u.value);
    }
    if (hv_1u_1n.present) {
      map['hv_1u_1n'] = Variable<double>(hv_1u_1n.value);
    }
    if (hv_1v_1n.present) {
      map['hv_1v_1n'] = Variable<double>(hv_1v_1n.value);
    }
    if (hv_1w_1n.present) {
      map['hv_1w_1n'] = Variable<double>(hv_1w_1n.value);
    }
    if (lv_2u_2v.present) {
      map['lv_2u_2v'] = Variable<double>(lv_2u_2v.value);
    }
    if (lv_2v_2w.present) {
      map['lv_2v_2w'] = Variable<double>(lv_2v_2w.value);
    }
    if (lv_2w_2u.present) {
      map['lv_2w_2u'] = Variable<double>(lv_2w_2u.value);
    }
    if (lv_2u_2n.present) {
      map['lv_2u_2n'] = Variable<double>(lv_2u_2n.value);
    }
    if (lv_2v_2n.present) {
      map['lv_2v_2n'] = Variable<double>(lv_2v_2n.value);
    }
    if (lv_2w_2n.present) {
      map['lv_2w_2n'] = Variable<double>(lv_2w_2n.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AT_R_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1v: $hv_1u_1v, ')
          ..write('hv_1v_1w: $hv_1v_1w, ')
          ..write('hv_1w_1u: $hv_1w_1u, ')
          ..write('hv_1u_1n: $hv_1u_1n, ')
          ..write('hv_1v_1n: $hv_1v_1n, ')
          ..write('hv_1w_1n: $hv_1w_1n, ')
          ..write('lv_2u_2v: $lv_2u_2v, ')
          ..write('lv_2v_2w: $lv_2v_2w, ')
          ..write('lv_2w_2u: $lv_2w_2u, ')
          ..write('lv_2u_2n: $lv_2u_2n, ')
          ..write('lv_2v_2n: $lv_2v_2n, ')
          ..write('lv_2w_2n: $lv_2w_2n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $AT_R_LocalDatasourceImplTable extends AT_R_LocalDatasourceImpl
    with TableInfo<$AT_R_LocalDatasourceImplTable, ATrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $AT_R_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1u_1vMeta = const VerificationMeta('hv_1u_1v');
  GeneratedColumn<double> _hv_1u_1v;
  @override
  GeneratedColumn<double> get hv_1u_1v =>
      _hv_1u_1v ??= GeneratedColumn<double>('hv_1u_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1v_1wMeta = const VerificationMeta('hv_1v_1w');
  GeneratedColumn<double> _hv_1v_1w;
  @override
  GeneratedColumn<double> get hv_1v_1w =>
      _hv_1v_1w ??= GeneratedColumn<double>('hv_1v_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1w_1uMeta = const VerificationMeta('hv_1w_1u');
  GeneratedColumn<double> _hv_1w_1u;
  @override
  GeneratedColumn<double> get hv_1w_1u =>
      _hv_1w_1u ??= GeneratedColumn<double>('hv_1w_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1u_1nMeta = const VerificationMeta('hv_1u_1n');
  GeneratedColumn<double> _hv_1u_1n;
  @override
  GeneratedColumn<double> get hv_1u_1n =>
      _hv_1u_1n ??= GeneratedColumn<double>('hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1v_1nMeta = const VerificationMeta('hv_1v_1n');
  GeneratedColumn<double> _hv_1v_1n;
  @override
  GeneratedColumn<double> get hv_1v_1n =>
      _hv_1v_1n ??= GeneratedColumn<double>('hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1w_1nMeta = const VerificationMeta('hv_1w_1n');
  GeneratedColumn<double> _hv_1w_1n;
  @override
  GeneratedColumn<double> get hv_1w_1n =>
      _hv_1w_1n ??= GeneratedColumn<double>('hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2u_2vMeta = const VerificationMeta('lv_2u_2v');
  GeneratedColumn<double> _lv_2u_2v;
  @override
  GeneratedColumn<double> get lv_2u_2v =>
      _lv_2u_2v ??= GeneratedColumn<double>('lv_2u_2v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2v_2wMeta = const VerificationMeta('lv_2v_2w');
  GeneratedColumn<double> _lv_2v_2w;
  @override
  GeneratedColumn<double> get lv_2v_2w =>
      _lv_2v_2w ??= GeneratedColumn<double>('lv_2v_2w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2w_2uMeta = const VerificationMeta('lv_2w_2u');
  GeneratedColumn<double> _lv_2w_2u;
  @override
  GeneratedColumn<double> get lv_2w_2u =>
      _lv_2w_2u ??= GeneratedColumn<double>('lv_2w_2u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2u_2nMeta = const VerificationMeta('lv_2u_2n');
  GeneratedColumn<double> _lv_2u_2n;
  @override
  GeneratedColumn<double> get lv_2u_2n =>
      _lv_2u_2n ??= GeneratedColumn<double>('lv_2u_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2v_2nMeta = const VerificationMeta('lv_2v_2n');
  GeneratedColumn<double> _lv_2v_2n;
  @override
  GeneratedColumn<double> get lv_2v_2n =>
      _lv_2v_2n ??= GeneratedColumn<double>('lv_2v_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2w_2nMeta = const VerificationMeta('lv_2w_2n');
  GeneratedColumn<double> _lv_2w_2n;
  @override
  GeneratedColumn<double> get lv_2w_2n =>
      _lv_2w_2n ??= GeneratedColumn<double>('lv_2w_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_1u_1v,
        hv_1v_1w,
        hv_1w_1u,
        hv_1u_1n,
        hv_1v_1n,
        hv_1w_1n,
        lv_2u_2v,
        lv_2v_2w,
        lv_2w_2u,
        lv_2u_2n,
        lv_2v_2n,
        lv_2w_2n,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'a_t_r_local_datasource_impl';
  @override
  String get actualTableName => 'a_t_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ATrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_1u_1v')) {
      context.handle(_hv_1u_1vMeta,
          hv_1u_1v.isAcceptableOrUnknown(data['hv_1u_1v'], _hv_1u_1vMeta));
    } else if (isInserting) {
      context.missing(_hv_1u_1vMeta);
    }
    if (data.containsKey('hv_1v_1w')) {
      context.handle(_hv_1v_1wMeta,
          hv_1v_1w.isAcceptableOrUnknown(data['hv_1v_1w'], _hv_1v_1wMeta));
    } else if (isInserting) {
      context.missing(_hv_1v_1wMeta);
    }
    if (data.containsKey('hv_1w_1u')) {
      context.handle(_hv_1w_1uMeta,
          hv_1w_1u.isAcceptableOrUnknown(data['hv_1w_1u'], _hv_1w_1uMeta));
    } else if (isInserting) {
      context.missing(_hv_1w_1uMeta);
    }
    if (data.containsKey('hv_1u_1n')) {
      context.handle(_hv_1u_1nMeta,
          hv_1u_1n.isAcceptableOrUnknown(data['hv_1u_1n'], _hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1u_1nMeta);
    }
    if (data.containsKey('hv_1v_1n')) {
      context.handle(_hv_1v_1nMeta,
          hv_1v_1n.isAcceptableOrUnknown(data['hv_1v_1n'], _hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1v_1nMeta);
    }
    if (data.containsKey('hv_1w_1n')) {
      context.handle(_hv_1w_1nMeta,
          hv_1w_1n.isAcceptableOrUnknown(data['hv_1w_1n'], _hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1w_1nMeta);
    }
    if (data.containsKey('lv_2u_2v')) {
      context.handle(_lv_2u_2vMeta,
          lv_2u_2v.isAcceptableOrUnknown(data['lv_2u_2v'], _lv_2u_2vMeta));
    } else if (isInserting) {
      context.missing(_lv_2u_2vMeta);
    }
    if (data.containsKey('lv_2v_2w')) {
      context.handle(_lv_2v_2wMeta,
          lv_2v_2w.isAcceptableOrUnknown(data['lv_2v_2w'], _lv_2v_2wMeta));
    } else if (isInserting) {
      context.missing(_lv_2v_2wMeta);
    }
    if (data.containsKey('lv_2w_2u')) {
      context.handle(_lv_2w_2uMeta,
          lv_2w_2u.isAcceptableOrUnknown(data['lv_2w_2u'], _lv_2w_2uMeta));
    } else if (isInserting) {
      context.missing(_lv_2w_2uMeta);
    }
    if (data.containsKey('lv_2u_2n')) {
      context.handle(_lv_2u_2nMeta,
          lv_2u_2n.isAcceptableOrUnknown(data['lv_2u_2n'], _lv_2u_2nMeta));
    } else if (isInserting) {
      context.missing(_lv_2u_2nMeta);
    }
    if (data.containsKey('lv_2v_2n')) {
      context.handle(_lv_2v_2nMeta,
          lv_2v_2n.isAcceptableOrUnknown(data['lv_2v_2n'], _lv_2v_2nMeta));
    } else if (isInserting) {
      context.missing(_lv_2v_2nMeta);
    }
    if (data.containsKey('lv_2w_2n')) {
      context.handle(_lv_2w_2nMeta,
          lv_2w_2n.isAcceptableOrUnknown(data['lv_2w_2n'], _lv_2w_2nMeta));
    } else if (isInserting) {
      context.missing(_lv_2w_2nMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ATrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ATrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $AT_R_LocalDatasourceImplTable createAlias(String alias) {
    return $AT_R_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ATmcLocalData extends DataClass implements Insertable<ATmcLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_1u_1n;
  final double hv_1v_1n;
  final double hv_1w_1n;
  final double hv_1u;
  final double hv_1v;
  final double hv_1w;
  final double hv_1n;
  final String equipmentUsed;
  final DateTime updateDate;
  ATmcLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_1u_1n,
      @required this.hv_1v_1n,
      @required this.hv_1w_1n,
      @required this.hv_1u,
      @required this.hv_1v,
      @required this.hv_1w,
      @required this.hv_1n,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory ATmcLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ATmcLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u_1n']),
      hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v_1n']),
      hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w_1n']),
      hv_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u']),
      hv_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v']),
      hv_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w']),
      hv_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1n']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_1u_1n != null) {
      map['hv_1u_1n'] = Variable<double>(hv_1u_1n);
    }
    if (!nullToAbsent || hv_1v_1n != null) {
      map['hv_1v_1n'] = Variable<double>(hv_1v_1n);
    }
    if (!nullToAbsent || hv_1w_1n != null) {
      map['hv_1w_1n'] = Variable<double>(hv_1w_1n);
    }
    if (!nullToAbsent || hv_1u != null) {
      map['hv_1u'] = Variable<double>(hv_1u);
    }
    if (!nullToAbsent || hv_1v != null) {
      map['hv_1v'] = Variable<double>(hv_1v);
    }
    if (!nullToAbsent || hv_1w != null) {
      map['hv_1w'] = Variable<double>(hv_1w);
    }
    if (!nullToAbsent || hv_1n != null) {
      map['hv_1n'] = Variable<double>(hv_1n);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  AT_mc_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return AT_mc_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_1u_1n: hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1u_1n),
      hv_1v_1n: hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1v_1n),
      hv_1w_1n: hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1w_1n),
      hv_1u:
          hv_1u == null && nullToAbsent ? const Value.absent() : Value(hv_1u),
      hv_1v:
          hv_1v == null && nullToAbsent ? const Value.absent() : Value(hv_1v),
      hv_1w:
          hv_1w == null && nullToAbsent ? const Value.absent() : Value(hv_1w),
      hv_1n:
          hv_1n == null && nullToAbsent ? const Value.absent() : Value(hv_1n),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory ATmcLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ATmcLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_1u_1n: serializer.fromJson<double>(json['hv_1u_1n']),
      hv_1v_1n: serializer.fromJson<double>(json['hv_1v_1n']),
      hv_1w_1n: serializer.fromJson<double>(json['hv_1w_1n']),
      hv_1u: serializer.fromJson<double>(json['hv_1u']),
      hv_1v: serializer.fromJson<double>(json['hv_1v']),
      hv_1w: serializer.fromJson<double>(json['hv_1w']),
      hv_1n: serializer.fromJson<double>(json['hv_1n']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_1u_1n': serializer.toJson<double>(hv_1u_1n),
      'hv_1v_1n': serializer.toJson<double>(hv_1v_1n),
      'hv_1w_1n': serializer.toJson<double>(hv_1w_1n),
      'hv_1u': serializer.toJson<double>(hv_1u),
      'hv_1v': serializer.toJson<double>(hv_1v),
      'hv_1w': serializer.toJson<double>(hv_1w),
      'hv_1n': serializer.toJson<double>(hv_1n),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  ATmcLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_1u_1n,
          double hv_1v_1n,
          double hv_1w_1n,
          double hv_1u,
          double hv_1v,
          double hv_1w,
          double hv_1n,
          String equipmentUsed,
          DateTime updateDate}) =>
      ATmcLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_1u_1n: hv_1u_1n ?? this.hv_1u_1n,
        hv_1v_1n: hv_1v_1n ?? this.hv_1v_1n,
        hv_1w_1n: hv_1w_1n ?? this.hv_1w_1n,
        hv_1u: hv_1u ?? this.hv_1u,
        hv_1v: hv_1v ?? this.hv_1v,
        hv_1w: hv_1w ?? this.hv_1w,
        hv_1n: hv_1n ?? this.hv_1n,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('ATmcLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1n: $hv_1u_1n, ')
          ..write('hv_1v_1n: $hv_1v_1n, ')
          ..write('hv_1w_1n: $hv_1w_1n, ')
          ..write('hv_1u: $hv_1u, ')
          ..write('hv_1v: $hv_1v, ')
          ..write('hv_1w: $hv_1w, ')
          ..write('hv_1n: $hv_1n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      tapPosition,
      hv_1u_1n,
      hv_1v_1n,
      hv_1w_1n,
      hv_1u,
      hv_1v,
      hv_1w,
      hv_1n,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ATmcLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_1u_1n == this.hv_1u_1n &&
          other.hv_1v_1n == this.hv_1v_1n &&
          other.hv_1w_1n == this.hv_1w_1n &&
          other.hv_1u == this.hv_1u &&
          other.hv_1v == this.hv_1v &&
          other.hv_1w == this.hv_1w &&
          other.hv_1n == this.hv_1n &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class AT_mc_LocalDatasourceImplCompanion
    extends UpdateCompanion<ATmcLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_1u_1n;
  final Value<double> hv_1v_1n;
  final Value<double> hv_1w_1n;
  final Value<double> hv_1u;
  final Value<double> hv_1v;
  final Value<double> hv_1w;
  final Value<double> hv_1n;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const AT_mc_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_1u_1n = const Value.absent(),
    this.hv_1v_1n = const Value.absent(),
    this.hv_1w_1n = const Value.absent(),
    this.hv_1u = const Value.absent(),
    this.hv_1v = const Value.absent(),
    this.hv_1w = const Value.absent(),
    this.hv_1n = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  AT_mc_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_1u_1n,
    @required double hv_1v_1n,
    @required double hv_1w_1n,
    @required double hv_1u,
    @required double hv_1v,
    @required double hv_1w,
    @required double hv_1n,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_1u_1n = Value(hv_1u_1n),
        hv_1v_1n = Value(hv_1v_1n),
        hv_1w_1n = Value(hv_1w_1n),
        hv_1u = Value(hv_1u),
        hv_1v = Value(hv_1v),
        hv_1w = Value(hv_1w),
        hv_1n = Value(hv_1n),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<ATmcLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_1u_1n,
    Expression<double> hv_1v_1n,
    Expression<double> hv_1w_1n,
    Expression<double> hv_1u,
    Expression<double> hv_1v,
    Expression<double> hv_1w,
    Expression<double> hv_1n,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_1u_1n != null) 'hv_1u_1n': hv_1u_1n,
      if (hv_1v_1n != null) 'hv_1v_1n': hv_1v_1n,
      if (hv_1w_1n != null) 'hv_1w_1n': hv_1w_1n,
      if (hv_1u != null) 'hv_1u': hv_1u,
      if (hv_1v != null) 'hv_1v': hv_1v,
      if (hv_1w != null) 'hv_1w': hv_1w,
      if (hv_1n != null) 'hv_1n': hv_1n,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  AT_mc_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_1u_1n,
      Value<double> hv_1v_1n,
      Value<double> hv_1w_1n,
      Value<double> hv_1u,
      Value<double> hv_1v,
      Value<double> hv_1w,
      Value<double> hv_1n,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return AT_mc_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_1u_1n: hv_1u_1n ?? this.hv_1u_1n,
      hv_1v_1n: hv_1v_1n ?? this.hv_1v_1n,
      hv_1w_1n: hv_1w_1n ?? this.hv_1w_1n,
      hv_1u: hv_1u ?? this.hv_1u,
      hv_1v: hv_1v ?? this.hv_1v,
      hv_1w: hv_1w ?? this.hv_1w,
      hv_1n: hv_1n ?? this.hv_1n,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_1u_1n.present) {
      map['hv_1u_1n'] = Variable<double>(hv_1u_1n.value);
    }
    if (hv_1v_1n.present) {
      map['hv_1v_1n'] = Variable<double>(hv_1v_1n.value);
    }
    if (hv_1w_1n.present) {
      map['hv_1w_1n'] = Variable<double>(hv_1w_1n.value);
    }
    if (hv_1u.present) {
      map['hv_1u'] = Variable<double>(hv_1u.value);
    }
    if (hv_1v.present) {
      map['hv_1v'] = Variable<double>(hv_1v.value);
    }
    if (hv_1w.present) {
      map['hv_1w'] = Variable<double>(hv_1w.value);
    }
    if (hv_1n.present) {
      map['hv_1n'] = Variable<double>(hv_1n.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AT_mc_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1n: $hv_1u_1n, ')
          ..write('hv_1v_1n: $hv_1v_1n, ')
          ..write('hv_1w_1n: $hv_1w_1n, ')
          ..write('hv_1u: $hv_1u, ')
          ..write('hv_1v: $hv_1v, ')
          ..write('hv_1w: $hv_1w, ')
          ..write('hv_1n: $hv_1n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $AT_mc_LocalDatasourceImplTable extends AT_mc_LocalDatasourceImpl
    with TableInfo<$AT_mc_LocalDatasourceImplTable, ATmcLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $AT_mc_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1u_1nMeta = const VerificationMeta('hv_1u_1n');
  GeneratedColumn<double> _hv_1u_1n;
  @override
  GeneratedColumn<double> get hv_1u_1n =>
      _hv_1u_1n ??= GeneratedColumn<double>('hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1v_1nMeta = const VerificationMeta('hv_1v_1n');
  GeneratedColumn<double> _hv_1v_1n;
  @override
  GeneratedColumn<double> get hv_1v_1n =>
      _hv_1v_1n ??= GeneratedColumn<double>('hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1w_1nMeta = const VerificationMeta('hv_1w_1n');
  GeneratedColumn<double> _hv_1w_1n;
  @override
  GeneratedColumn<double> get hv_1w_1n =>
      _hv_1w_1n ??= GeneratedColumn<double>('hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1uMeta = const VerificationMeta('hv_1u');
  GeneratedColumn<double> _hv_1u;
  @override
  GeneratedColumn<double> get hv_1u =>
      _hv_1u ??= GeneratedColumn<double>('hv_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1vMeta = const VerificationMeta('hv_1v');
  GeneratedColumn<double> _hv_1v;
  @override
  GeneratedColumn<double> get hv_1v =>
      _hv_1v ??= GeneratedColumn<double>('hv_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1wMeta = const VerificationMeta('hv_1w');
  GeneratedColumn<double> _hv_1w;
  @override
  GeneratedColumn<double> get hv_1w =>
      _hv_1w ??= GeneratedColumn<double>('hv_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1nMeta = const VerificationMeta('hv_1n');
  GeneratedColumn<double> _hv_1n;
  @override
  GeneratedColumn<double> get hv_1n =>
      _hv_1n ??= GeneratedColumn<double>('hv_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_1u_1n,
        hv_1v_1n,
        hv_1w_1n,
        hv_1u,
        hv_1v,
        hv_1w,
        hv_1n,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'a_t_mc_local_datasource_impl';
  @override
  String get actualTableName => 'a_t_mc_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ATmcLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_1u_1n')) {
      context.handle(_hv_1u_1nMeta,
          hv_1u_1n.isAcceptableOrUnknown(data['hv_1u_1n'], _hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1u_1nMeta);
    }
    if (data.containsKey('hv_1v_1n')) {
      context.handle(_hv_1v_1nMeta,
          hv_1v_1n.isAcceptableOrUnknown(data['hv_1v_1n'], _hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1v_1nMeta);
    }
    if (data.containsKey('hv_1w_1n')) {
      context.handle(_hv_1w_1nMeta,
          hv_1w_1n.isAcceptableOrUnknown(data['hv_1w_1n'], _hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1w_1nMeta);
    }
    if (data.containsKey('hv_1u')) {
      context.handle(
          _hv_1uMeta, hv_1u.isAcceptableOrUnknown(data['hv_1u'], _hv_1uMeta));
    } else if (isInserting) {
      context.missing(_hv_1uMeta);
    }
    if (data.containsKey('hv_1v')) {
      context.handle(
          _hv_1vMeta, hv_1v.isAcceptableOrUnknown(data['hv_1v'], _hv_1vMeta));
    } else if (isInserting) {
      context.missing(_hv_1vMeta);
    }
    if (data.containsKey('hv_1w')) {
      context.handle(
          _hv_1wMeta, hv_1w.isAcceptableOrUnknown(data['hv_1w'], _hv_1wMeta));
    } else if (isInserting) {
      context.missing(_hv_1wMeta);
    }
    if (data.containsKey('hv_1n')) {
      context.handle(
          _hv_1nMeta, hv_1n.isAcceptableOrUnknown(data['hv_1n'], _hv_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1nMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ATmcLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ATmcLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $AT_mc_LocalDatasourceImplTable createAlias(String alias) {
    return $AT_mc_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ATmbLocalData extends DataClass implements Insertable<ATmbLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double ry_hv_1u_1v;
  final double ry_hv_1v_1w;
  final double ry_hv_1w_1u;
  final double ry_hv_1u_1n;
  final double ry_hv_1v_1n;
  final double ry_hv_1w_1n;
  final double ry_lv_2u_2v;
  final double ry_lv_2v_2w;
  final double ry_lv_2w_2u;
  final double ry_lv_2u_2n;
  final double ry_lv_2v_2n;
  final double ry_lv_2w_2n;
  final double yb_hv_1u_1v;
  final double yb_hv_1v_1w;
  final double yb_hv_1w_1u;
  final double yb_hv_1u_1n;
  final double yb_hv_1v_1n;
  final double yb_hv_1w_1n;
  final double yb_lv_2u_2v;
  final double yb_lv_2v_2w;
  final double yb_lv_2w_2u;
  final double yb_lv_2u_2n;
  final double yb_lv_2v_2n;
  final double yb_lv_2w_2n;
  final double br_hv_1u_1v;
  final double br_hv_1v_1w;
  final double br_hv_1w_1u;
  final double br_hv_1u_1n;
  final double br_hv_1v_1n;
  final double br_hv_1w_1n;
  final double br_lv_2u_2v;
  final double br_lv_2v_2w;
  final double br_lv_2w_2u;
  final double br_lv_2u_2n;
  final double br_lv_2v_2n;
  final double br_lv_2w_2n;
  final String equipmentUsed;
  final DateTime updateDate;
  ATmbLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.ry_hv_1u_1v,
      @required this.ry_hv_1v_1w,
      @required this.ry_hv_1w_1u,
      @required this.ry_hv_1u_1n,
      @required this.ry_hv_1v_1n,
      @required this.ry_hv_1w_1n,
      @required this.ry_lv_2u_2v,
      @required this.ry_lv_2v_2w,
      @required this.ry_lv_2w_2u,
      @required this.ry_lv_2u_2n,
      @required this.ry_lv_2v_2n,
      @required this.ry_lv_2w_2n,
      @required this.yb_hv_1u_1v,
      @required this.yb_hv_1v_1w,
      @required this.yb_hv_1w_1u,
      @required this.yb_hv_1u_1n,
      @required this.yb_hv_1v_1n,
      @required this.yb_hv_1w_1n,
      @required this.yb_lv_2u_2v,
      @required this.yb_lv_2v_2w,
      @required this.yb_lv_2w_2u,
      @required this.yb_lv_2u_2n,
      @required this.yb_lv_2v_2n,
      @required this.yb_lv_2w_2n,
      @required this.br_hv_1u_1v,
      @required this.br_hv_1v_1w,
      @required this.br_hv_1w_1u,
      @required this.br_hv_1u_1n,
      @required this.br_hv_1v_1n,
      @required this.br_hv_1w_1n,
      @required this.br_lv_2u_2v,
      @required this.br_lv_2v_2w,
      @required this.br_lv_2w_2u,
      @required this.br_lv_2u_2n,
      @required this.br_lv_2v_2n,
      @required this.br_lv_2w_2n,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory ATmbLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ATmbLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      ry_hv_1u_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1u_1v']),
      ry_hv_1v_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1v_1w']),
      ry_hv_1w_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1w_1u']),
      ry_hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1u_1n']),
      ry_hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1v_1n']),
      ry_hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1w_1n']),
      ry_lv_2u_2v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2u_2v']),
      ry_lv_2v_2w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2v_2w']),
      ry_lv_2w_2u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2w_2u']),
      ry_lv_2u_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2u_2n']),
      ry_lv_2v_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2v_2n']),
      ry_lv_2w_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2w_2n']),
      yb_hv_1u_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1u_1v']),
      yb_hv_1v_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1v_1w']),
      yb_hv_1w_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1w_1u']),
      yb_hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1u_1n']),
      yb_hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1v_1n']),
      yb_hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1w_1n']),
      yb_lv_2u_2v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2u_2v']),
      yb_lv_2v_2w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2v_2w']),
      yb_lv_2w_2u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2w_2u']),
      yb_lv_2u_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2u_2n']),
      yb_lv_2v_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2v_2n']),
      yb_lv_2w_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2w_2n']),
      br_hv_1u_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1u_1v']),
      br_hv_1v_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1v_1w']),
      br_hv_1w_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1w_1u']),
      br_hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1u_1n']),
      br_hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1v_1n']),
      br_hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1w_1n']),
      br_lv_2u_2v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2u_2v']),
      br_lv_2v_2w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2v_2w']),
      br_lv_2w_2u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2w_2u']),
      br_lv_2u_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2u_2n']),
      br_lv_2v_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2v_2n']),
      br_lv_2w_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2w_2n']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || ry_hv_1u_1v != null) {
      map['ry_hv_1u_1v'] = Variable<double>(ry_hv_1u_1v);
    }
    if (!nullToAbsent || ry_hv_1v_1w != null) {
      map['ry_hv_1v_1w'] = Variable<double>(ry_hv_1v_1w);
    }
    if (!nullToAbsent || ry_hv_1w_1u != null) {
      map['ry_hv_1w_1u'] = Variable<double>(ry_hv_1w_1u);
    }
    if (!nullToAbsent || ry_hv_1u_1n != null) {
      map['ry_hv_1u_1n'] = Variable<double>(ry_hv_1u_1n);
    }
    if (!nullToAbsent || ry_hv_1v_1n != null) {
      map['ry_hv_1v_1n'] = Variable<double>(ry_hv_1v_1n);
    }
    if (!nullToAbsent || ry_hv_1w_1n != null) {
      map['ry_hv_1w_1n'] = Variable<double>(ry_hv_1w_1n);
    }
    if (!nullToAbsent || ry_lv_2u_2v != null) {
      map['ry_lv_2u_2v'] = Variable<double>(ry_lv_2u_2v);
    }
    if (!nullToAbsent || ry_lv_2v_2w != null) {
      map['ry_lv_2v_2w'] = Variable<double>(ry_lv_2v_2w);
    }
    if (!nullToAbsent || ry_lv_2w_2u != null) {
      map['ry_lv_2w_2u'] = Variable<double>(ry_lv_2w_2u);
    }
    if (!nullToAbsent || ry_lv_2u_2n != null) {
      map['ry_lv_2u_2n'] = Variable<double>(ry_lv_2u_2n);
    }
    if (!nullToAbsent || ry_lv_2v_2n != null) {
      map['ry_lv_2v_2n'] = Variable<double>(ry_lv_2v_2n);
    }
    if (!nullToAbsent || ry_lv_2w_2n != null) {
      map['ry_lv_2w_2n'] = Variable<double>(ry_lv_2w_2n);
    }
    if (!nullToAbsent || yb_hv_1u_1v != null) {
      map['yb_hv_1u_1v'] = Variable<double>(yb_hv_1u_1v);
    }
    if (!nullToAbsent || yb_hv_1v_1w != null) {
      map['yb_hv_1v_1w'] = Variable<double>(yb_hv_1v_1w);
    }
    if (!nullToAbsent || yb_hv_1w_1u != null) {
      map['yb_hv_1w_1u'] = Variable<double>(yb_hv_1w_1u);
    }
    if (!nullToAbsent || yb_hv_1u_1n != null) {
      map['yb_hv_1u_1n'] = Variable<double>(yb_hv_1u_1n);
    }
    if (!nullToAbsent || yb_hv_1v_1n != null) {
      map['yb_hv_1v_1n'] = Variable<double>(yb_hv_1v_1n);
    }
    if (!nullToAbsent || yb_hv_1w_1n != null) {
      map['yb_hv_1w_1n'] = Variable<double>(yb_hv_1w_1n);
    }
    if (!nullToAbsent || yb_lv_2u_2v != null) {
      map['yb_lv_2u_2v'] = Variable<double>(yb_lv_2u_2v);
    }
    if (!nullToAbsent || yb_lv_2v_2w != null) {
      map['yb_lv_2v_2w'] = Variable<double>(yb_lv_2v_2w);
    }
    if (!nullToAbsent || yb_lv_2w_2u != null) {
      map['yb_lv_2w_2u'] = Variable<double>(yb_lv_2w_2u);
    }
    if (!nullToAbsent || yb_lv_2u_2n != null) {
      map['yb_lv_2u_2n'] = Variable<double>(yb_lv_2u_2n);
    }
    if (!nullToAbsent || yb_lv_2v_2n != null) {
      map['yb_lv_2v_2n'] = Variable<double>(yb_lv_2v_2n);
    }
    if (!nullToAbsent || yb_lv_2w_2n != null) {
      map['yb_lv_2w_2n'] = Variable<double>(yb_lv_2w_2n);
    }
    if (!nullToAbsent || br_hv_1u_1v != null) {
      map['br_hv_1u_1v'] = Variable<double>(br_hv_1u_1v);
    }
    if (!nullToAbsent || br_hv_1v_1w != null) {
      map['br_hv_1v_1w'] = Variable<double>(br_hv_1v_1w);
    }
    if (!nullToAbsent || br_hv_1w_1u != null) {
      map['br_hv_1w_1u'] = Variable<double>(br_hv_1w_1u);
    }
    if (!nullToAbsent || br_hv_1u_1n != null) {
      map['br_hv_1u_1n'] = Variable<double>(br_hv_1u_1n);
    }
    if (!nullToAbsent || br_hv_1v_1n != null) {
      map['br_hv_1v_1n'] = Variable<double>(br_hv_1v_1n);
    }
    if (!nullToAbsent || br_hv_1w_1n != null) {
      map['br_hv_1w_1n'] = Variable<double>(br_hv_1w_1n);
    }
    if (!nullToAbsent || br_lv_2u_2v != null) {
      map['br_lv_2u_2v'] = Variable<double>(br_lv_2u_2v);
    }
    if (!nullToAbsent || br_lv_2v_2w != null) {
      map['br_lv_2v_2w'] = Variable<double>(br_lv_2v_2w);
    }
    if (!nullToAbsent || br_lv_2w_2u != null) {
      map['br_lv_2w_2u'] = Variable<double>(br_lv_2w_2u);
    }
    if (!nullToAbsent || br_lv_2u_2n != null) {
      map['br_lv_2u_2n'] = Variable<double>(br_lv_2u_2n);
    }
    if (!nullToAbsent || br_lv_2v_2n != null) {
      map['br_lv_2v_2n'] = Variable<double>(br_lv_2v_2n);
    }
    if (!nullToAbsent || br_lv_2w_2n != null) {
      map['br_lv_2w_2n'] = Variable<double>(br_lv_2w_2n);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  AT_mb_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return AT_mb_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      ry_hv_1u_1v: ry_hv_1u_1v == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1u_1v),
      ry_hv_1v_1w: ry_hv_1v_1w == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1v_1w),
      ry_hv_1w_1u: ry_hv_1w_1u == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1w_1u),
      ry_hv_1u_1n: ry_hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1u_1n),
      ry_hv_1v_1n: ry_hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1v_1n),
      ry_hv_1w_1n: ry_hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1w_1n),
      ry_lv_2u_2v: ry_lv_2u_2v == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2u_2v),
      ry_lv_2v_2w: ry_lv_2v_2w == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2v_2w),
      ry_lv_2w_2u: ry_lv_2w_2u == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2w_2u),
      ry_lv_2u_2n: ry_lv_2u_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2u_2n),
      ry_lv_2v_2n: ry_lv_2v_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2v_2n),
      ry_lv_2w_2n: ry_lv_2w_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2w_2n),
      yb_hv_1u_1v: yb_hv_1u_1v == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1u_1v),
      yb_hv_1v_1w: yb_hv_1v_1w == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1v_1w),
      yb_hv_1w_1u: yb_hv_1w_1u == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1w_1u),
      yb_hv_1u_1n: yb_hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1u_1n),
      yb_hv_1v_1n: yb_hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1v_1n),
      yb_hv_1w_1n: yb_hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1w_1n),
      yb_lv_2u_2v: yb_lv_2u_2v == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2u_2v),
      yb_lv_2v_2w: yb_lv_2v_2w == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2v_2w),
      yb_lv_2w_2u: yb_lv_2w_2u == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2w_2u),
      yb_lv_2u_2n: yb_lv_2u_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2u_2n),
      yb_lv_2v_2n: yb_lv_2v_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2v_2n),
      yb_lv_2w_2n: yb_lv_2w_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2w_2n),
      br_hv_1u_1v: br_hv_1u_1v == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1u_1v),
      br_hv_1v_1w: br_hv_1v_1w == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1v_1w),
      br_hv_1w_1u: br_hv_1w_1u == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1w_1u),
      br_hv_1u_1n: br_hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1u_1n),
      br_hv_1v_1n: br_hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1v_1n),
      br_hv_1w_1n: br_hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1w_1n),
      br_lv_2u_2v: br_lv_2u_2v == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2u_2v),
      br_lv_2v_2w: br_lv_2v_2w == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2v_2w),
      br_lv_2w_2u: br_lv_2w_2u == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2w_2u),
      br_lv_2u_2n: br_lv_2u_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2u_2n),
      br_lv_2v_2n: br_lv_2v_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2v_2n),
      br_lv_2w_2n: br_lv_2w_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2w_2n),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory ATmbLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ATmbLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      ry_hv_1u_1v: serializer.fromJson<double>(json['ry_hv_1u_1v']),
      ry_hv_1v_1w: serializer.fromJson<double>(json['ry_hv_1v_1w']),
      ry_hv_1w_1u: serializer.fromJson<double>(json['ry_hv_1w_1u']),
      ry_hv_1u_1n: serializer.fromJson<double>(json['ry_hv_1u_1n']),
      ry_hv_1v_1n: serializer.fromJson<double>(json['ry_hv_1v_1n']),
      ry_hv_1w_1n: serializer.fromJson<double>(json['ry_hv_1w_1n']),
      ry_lv_2u_2v: serializer.fromJson<double>(json['ry_lv_2u_2v']),
      ry_lv_2v_2w: serializer.fromJson<double>(json['ry_lv_2v_2w']),
      ry_lv_2w_2u: serializer.fromJson<double>(json['ry_lv_2w_2u']),
      ry_lv_2u_2n: serializer.fromJson<double>(json['ry_lv_2u_2n']),
      ry_lv_2v_2n: serializer.fromJson<double>(json['ry_lv_2v_2n']),
      ry_lv_2w_2n: serializer.fromJson<double>(json['ry_lv_2w_2n']),
      yb_hv_1u_1v: serializer.fromJson<double>(json['yb_hv_1u_1v']),
      yb_hv_1v_1w: serializer.fromJson<double>(json['yb_hv_1v_1w']),
      yb_hv_1w_1u: serializer.fromJson<double>(json['yb_hv_1w_1u']),
      yb_hv_1u_1n: serializer.fromJson<double>(json['yb_hv_1u_1n']),
      yb_hv_1v_1n: serializer.fromJson<double>(json['yb_hv_1v_1n']),
      yb_hv_1w_1n: serializer.fromJson<double>(json['yb_hv_1w_1n']),
      yb_lv_2u_2v: serializer.fromJson<double>(json['yb_lv_2u_2v']),
      yb_lv_2v_2w: serializer.fromJson<double>(json['yb_lv_2v_2w']),
      yb_lv_2w_2u: serializer.fromJson<double>(json['yb_lv_2w_2u']),
      yb_lv_2u_2n: serializer.fromJson<double>(json['yb_lv_2u_2n']),
      yb_lv_2v_2n: serializer.fromJson<double>(json['yb_lv_2v_2n']),
      yb_lv_2w_2n: serializer.fromJson<double>(json['yb_lv_2w_2n']),
      br_hv_1u_1v: serializer.fromJson<double>(json['br_hv_1u_1v']),
      br_hv_1v_1w: serializer.fromJson<double>(json['br_hv_1v_1w']),
      br_hv_1w_1u: serializer.fromJson<double>(json['br_hv_1w_1u']),
      br_hv_1u_1n: serializer.fromJson<double>(json['br_hv_1u_1n']),
      br_hv_1v_1n: serializer.fromJson<double>(json['br_hv_1v_1n']),
      br_hv_1w_1n: serializer.fromJson<double>(json['br_hv_1w_1n']),
      br_lv_2u_2v: serializer.fromJson<double>(json['br_lv_2u_2v']),
      br_lv_2v_2w: serializer.fromJson<double>(json['br_lv_2v_2w']),
      br_lv_2w_2u: serializer.fromJson<double>(json['br_lv_2w_2u']),
      br_lv_2u_2n: serializer.fromJson<double>(json['br_lv_2u_2n']),
      br_lv_2v_2n: serializer.fromJson<double>(json['br_lv_2v_2n']),
      br_lv_2w_2n: serializer.fromJson<double>(json['br_lv_2w_2n']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'ry_hv_1u_1v': serializer.toJson<double>(ry_hv_1u_1v),
      'ry_hv_1v_1w': serializer.toJson<double>(ry_hv_1v_1w),
      'ry_hv_1w_1u': serializer.toJson<double>(ry_hv_1w_1u),
      'ry_hv_1u_1n': serializer.toJson<double>(ry_hv_1u_1n),
      'ry_hv_1v_1n': serializer.toJson<double>(ry_hv_1v_1n),
      'ry_hv_1w_1n': serializer.toJson<double>(ry_hv_1w_1n),
      'ry_lv_2u_2v': serializer.toJson<double>(ry_lv_2u_2v),
      'ry_lv_2v_2w': serializer.toJson<double>(ry_lv_2v_2w),
      'ry_lv_2w_2u': serializer.toJson<double>(ry_lv_2w_2u),
      'ry_lv_2u_2n': serializer.toJson<double>(ry_lv_2u_2n),
      'ry_lv_2v_2n': serializer.toJson<double>(ry_lv_2v_2n),
      'ry_lv_2w_2n': serializer.toJson<double>(ry_lv_2w_2n),
      'yb_hv_1u_1v': serializer.toJson<double>(yb_hv_1u_1v),
      'yb_hv_1v_1w': serializer.toJson<double>(yb_hv_1v_1w),
      'yb_hv_1w_1u': serializer.toJson<double>(yb_hv_1w_1u),
      'yb_hv_1u_1n': serializer.toJson<double>(yb_hv_1u_1n),
      'yb_hv_1v_1n': serializer.toJson<double>(yb_hv_1v_1n),
      'yb_hv_1w_1n': serializer.toJson<double>(yb_hv_1w_1n),
      'yb_lv_2u_2v': serializer.toJson<double>(yb_lv_2u_2v),
      'yb_lv_2v_2w': serializer.toJson<double>(yb_lv_2v_2w),
      'yb_lv_2w_2u': serializer.toJson<double>(yb_lv_2w_2u),
      'yb_lv_2u_2n': serializer.toJson<double>(yb_lv_2u_2n),
      'yb_lv_2v_2n': serializer.toJson<double>(yb_lv_2v_2n),
      'yb_lv_2w_2n': serializer.toJson<double>(yb_lv_2w_2n),
      'br_hv_1u_1v': serializer.toJson<double>(br_hv_1u_1v),
      'br_hv_1v_1w': serializer.toJson<double>(br_hv_1v_1w),
      'br_hv_1w_1u': serializer.toJson<double>(br_hv_1w_1u),
      'br_hv_1u_1n': serializer.toJson<double>(br_hv_1u_1n),
      'br_hv_1v_1n': serializer.toJson<double>(br_hv_1v_1n),
      'br_hv_1w_1n': serializer.toJson<double>(br_hv_1w_1n),
      'br_lv_2u_2v': serializer.toJson<double>(br_lv_2u_2v),
      'br_lv_2v_2w': serializer.toJson<double>(br_lv_2v_2w),
      'br_lv_2w_2u': serializer.toJson<double>(br_lv_2w_2u),
      'br_lv_2u_2n': serializer.toJson<double>(br_lv_2u_2n),
      'br_lv_2v_2n': serializer.toJson<double>(br_lv_2v_2n),
      'br_lv_2w_2n': serializer.toJson<double>(br_lv_2w_2n),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  ATmbLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double ry_hv_1u_1v,
          double ry_hv_1v_1w,
          double ry_hv_1w_1u,
          double ry_hv_1u_1n,
          double ry_hv_1v_1n,
          double ry_hv_1w_1n,
          double ry_lv_2u_2v,
          double ry_lv_2v_2w,
          double ry_lv_2w_2u,
          double ry_lv_2u_2n,
          double ry_lv_2v_2n,
          double ry_lv_2w_2n,
          double yb_hv_1u_1v,
          double yb_hv_1v_1w,
          double yb_hv_1w_1u,
          double yb_hv_1u_1n,
          double yb_hv_1v_1n,
          double yb_hv_1w_1n,
          double yb_lv_2u_2v,
          double yb_lv_2v_2w,
          double yb_lv_2w_2u,
          double yb_lv_2u_2n,
          double yb_lv_2v_2n,
          double yb_lv_2w_2n,
          double br_hv_1u_1v,
          double br_hv_1v_1w,
          double br_hv_1w_1u,
          double br_hv_1u_1n,
          double br_hv_1v_1n,
          double br_hv_1w_1n,
          double br_lv_2u_2v,
          double br_lv_2v_2w,
          double br_lv_2w_2u,
          double br_lv_2u_2n,
          double br_lv_2v_2n,
          double br_lv_2w_2n,
          String equipmentUsed,
          DateTime updateDate}) =>
      ATmbLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        ry_hv_1u_1v: ry_hv_1u_1v ?? this.ry_hv_1u_1v,
        ry_hv_1v_1w: ry_hv_1v_1w ?? this.ry_hv_1v_1w,
        ry_hv_1w_1u: ry_hv_1w_1u ?? this.ry_hv_1w_1u,
        ry_hv_1u_1n: ry_hv_1u_1n ?? this.ry_hv_1u_1n,
        ry_hv_1v_1n: ry_hv_1v_1n ?? this.ry_hv_1v_1n,
        ry_hv_1w_1n: ry_hv_1w_1n ?? this.ry_hv_1w_1n,
        ry_lv_2u_2v: ry_lv_2u_2v ?? this.ry_lv_2u_2v,
        ry_lv_2v_2w: ry_lv_2v_2w ?? this.ry_lv_2v_2w,
        ry_lv_2w_2u: ry_lv_2w_2u ?? this.ry_lv_2w_2u,
        ry_lv_2u_2n: ry_lv_2u_2n ?? this.ry_lv_2u_2n,
        ry_lv_2v_2n: ry_lv_2v_2n ?? this.ry_lv_2v_2n,
        ry_lv_2w_2n: ry_lv_2w_2n ?? this.ry_lv_2w_2n,
        yb_hv_1u_1v: yb_hv_1u_1v ?? this.yb_hv_1u_1v,
        yb_hv_1v_1w: yb_hv_1v_1w ?? this.yb_hv_1v_1w,
        yb_hv_1w_1u: yb_hv_1w_1u ?? this.yb_hv_1w_1u,
        yb_hv_1u_1n: yb_hv_1u_1n ?? this.yb_hv_1u_1n,
        yb_hv_1v_1n: yb_hv_1v_1n ?? this.yb_hv_1v_1n,
        yb_hv_1w_1n: yb_hv_1w_1n ?? this.yb_hv_1w_1n,
        yb_lv_2u_2v: yb_lv_2u_2v ?? this.yb_lv_2u_2v,
        yb_lv_2v_2w: yb_lv_2v_2w ?? this.yb_lv_2v_2w,
        yb_lv_2w_2u: yb_lv_2w_2u ?? this.yb_lv_2w_2u,
        yb_lv_2u_2n: yb_lv_2u_2n ?? this.yb_lv_2u_2n,
        yb_lv_2v_2n: yb_lv_2v_2n ?? this.yb_lv_2v_2n,
        yb_lv_2w_2n: yb_lv_2w_2n ?? this.yb_lv_2w_2n,
        br_hv_1u_1v: br_hv_1u_1v ?? this.br_hv_1u_1v,
        br_hv_1v_1w: br_hv_1v_1w ?? this.br_hv_1v_1w,
        br_hv_1w_1u: br_hv_1w_1u ?? this.br_hv_1w_1u,
        br_hv_1u_1n: br_hv_1u_1n ?? this.br_hv_1u_1n,
        br_hv_1v_1n: br_hv_1v_1n ?? this.br_hv_1v_1n,
        br_hv_1w_1n: br_hv_1w_1n ?? this.br_hv_1w_1n,
        br_lv_2u_2v: br_lv_2u_2v ?? this.br_lv_2u_2v,
        br_lv_2v_2w: br_lv_2v_2w ?? this.br_lv_2v_2w,
        br_lv_2w_2u: br_lv_2w_2u ?? this.br_lv_2w_2u,
        br_lv_2u_2n: br_lv_2u_2n ?? this.br_lv_2u_2n,
        br_lv_2v_2n: br_lv_2v_2n ?? this.br_lv_2v_2n,
        br_lv_2w_2n: br_lv_2w_2n ?? this.br_lv_2w_2n,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('ATmbLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('ry_hv_1u_1v: $ry_hv_1u_1v, ')
          ..write('ry_hv_1v_1w: $ry_hv_1v_1w, ')
          ..write('ry_hv_1w_1u: $ry_hv_1w_1u, ')
          ..write('ry_hv_1u_1n: $ry_hv_1u_1n, ')
          ..write('ry_hv_1v_1n: $ry_hv_1v_1n, ')
          ..write('ry_hv_1w_1n: $ry_hv_1w_1n, ')
          ..write('ry_lv_2u_2v: $ry_lv_2u_2v, ')
          ..write('ry_lv_2v_2w: $ry_lv_2v_2w, ')
          ..write('ry_lv_2w_2u: $ry_lv_2w_2u, ')
          ..write('ry_lv_2u_2n: $ry_lv_2u_2n, ')
          ..write('ry_lv_2v_2n: $ry_lv_2v_2n, ')
          ..write('ry_lv_2w_2n: $ry_lv_2w_2n, ')
          ..write('yb_hv_1u_1v: $yb_hv_1u_1v, ')
          ..write('yb_hv_1v_1w: $yb_hv_1v_1w, ')
          ..write('yb_hv_1w_1u: $yb_hv_1w_1u, ')
          ..write('yb_hv_1u_1n: $yb_hv_1u_1n, ')
          ..write('yb_hv_1v_1n: $yb_hv_1v_1n, ')
          ..write('yb_hv_1w_1n: $yb_hv_1w_1n, ')
          ..write('yb_lv_2u_2v: $yb_lv_2u_2v, ')
          ..write('yb_lv_2v_2w: $yb_lv_2v_2w, ')
          ..write('yb_lv_2w_2u: $yb_lv_2w_2u, ')
          ..write('yb_lv_2u_2n: $yb_lv_2u_2n, ')
          ..write('yb_lv_2v_2n: $yb_lv_2v_2n, ')
          ..write('yb_lv_2w_2n: $yb_lv_2w_2n, ')
          ..write('br_hv_1u_1v: $br_hv_1u_1v, ')
          ..write('br_hv_1v_1w: $br_hv_1v_1w, ')
          ..write('br_hv_1w_1u: $br_hv_1w_1u, ')
          ..write('br_hv_1u_1n: $br_hv_1u_1n, ')
          ..write('br_hv_1v_1n: $br_hv_1v_1n, ')
          ..write('br_hv_1w_1n: $br_hv_1w_1n, ')
          ..write('br_lv_2u_2v: $br_lv_2u_2v, ')
          ..write('br_lv_2v_2w: $br_lv_2v_2w, ')
          ..write('br_lv_2w_2u: $br_lv_2w_2u, ')
          ..write('br_lv_2u_2n: $br_lv_2u_2n, ')
          ..write('br_lv_2v_2n: $br_lv_2v_2n, ')
          ..write('br_lv_2w_2n: $br_lv_2w_2n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        ry_hv_1u_1v,
        ry_hv_1v_1w,
        ry_hv_1w_1u,
        ry_hv_1u_1n,
        ry_hv_1v_1n,
        ry_hv_1w_1n,
        ry_lv_2u_2v,
        ry_lv_2v_2w,
        ry_lv_2w_2u,
        ry_lv_2u_2n,
        ry_lv_2v_2n,
        ry_lv_2w_2n,
        yb_hv_1u_1v,
        yb_hv_1v_1w,
        yb_hv_1w_1u,
        yb_hv_1u_1n,
        yb_hv_1v_1n,
        yb_hv_1w_1n,
        yb_lv_2u_2v,
        yb_lv_2v_2w,
        yb_lv_2w_2u,
        yb_lv_2u_2n,
        yb_lv_2v_2n,
        yb_lv_2w_2n,
        br_hv_1u_1v,
        br_hv_1v_1w,
        br_hv_1w_1u,
        br_hv_1u_1n,
        br_hv_1v_1n,
        br_hv_1w_1n,
        br_lv_2u_2v,
        br_lv_2v_2w,
        br_lv_2w_2u,
        br_lv_2u_2n,
        br_lv_2v_2n,
        br_lv_2w_2n,
        equipmentUsed,
        updateDate
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ATmbLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.ry_hv_1u_1v == this.ry_hv_1u_1v &&
          other.ry_hv_1v_1w == this.ry_hv_1v_1w &&
          other.ry_hv_1w_1u == this.ry_hv_1w_1u &&
          other.ry_hv_1u_1n == this.ry_hv_1u_1n &&
          other.ry_hv_1v_1n == this.ry_hv_1v_1n &&
          other.ry_hv_1w_1n == this.ry_hv_1w_1n &&
          other.ry_lv_2u_2v == this.ry_lv_2u_2v &&
          other.ry_lv_2v_2w == this.ry_lv_2v_2w &&
          other.ry_lv_2w_2u == this.ry_lv_2w_2u &&
          other.ry_lv_2u_2n == this.ry_lv_2u_2n &&
          other.ry_lv_2v_2n == this.ry_lv_2v_2n &&
          other.ry_lv_2w_2n == this.ry_lv_2w_2n &&
          other.yb_hv_1u_1v == this.yb_hv_1u_1v &&
          other.yb_hv_1v_1w == this.yb_hv_1v_1w &&
          other.yb_hv_1w_1u == this.yb_hv_1w_1u &&
          other.yb_hv_1u_1n == this.yb_hv_1u_1n &&
          other.yb_hv_1v_1n == this.yb_hv_1v_1n &&
          other.yb_hv_1w_1n == this.yb_hv_1w_1n &&
          other.yb_lv_2u_2v == this.yb_lv_2u_2v &&
          other.yb_lv_2v_2w == this.yb_lv_2v_2w &&
          other.yb_lv_2w_2u == this.yb_lv_2w_2u &&
          other.yb_lv_2u_2n == this.yb_lv_2u_2n &&
          other.yb_lv_2v_2n == this.yb_lv_2v_2n &&
          other.yb_lv_2w_2n == this.yb_lv_2w_2n &&
          other.br_hv_1u_1v == this.br_hv_1u_1v &&
          other.br_hv_1v_1w == this.br_hv_1v_1w &&
          other.br_hv_1w_1u == this.br_hv_1w_1u &&
          other.br_hv_1u_1n == this.br_hv_1u_1n &&
          other.br_hv_1v_1n == this.br_hv_1v_1n &&
          other.br_hv_1w_1n == this.br_hv_1w_1n &&
          other.br_lv_2u_2v == this.br_lv_2u_2v &&
          other.br_lv_2v_2w == this.br_lv_2v_2w &&
          other.br_lv_2w_2u == this.br_lv_2w_2u &&
          other.br_lv_2u_2n == this.br_lv_2u_2n &&
          other.br_lv_2v_2n == this.br_lv_2v_2n &&
          other.br_lv_2w_2n == this.br_lv_2w_2n &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class AT_mb_LocalDatasourceImplCompanion
    extends UpdateCompanion<ATmbLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> ry_hv_1u_1v;
  final Value<double> ry_hv_1v_1w;
  final Value<double> ry_hv_1w_1u;
  final Value<double> ry_hv_1u_1n;
  final Value<double> ry_hv_1v_1n;
  final Value<double> ry_hv_1w_1n;
  final Value<double> ry_lv_2u_2v;
  final Value<double> ry_lv_2v_2w;
  final Value<double> ry_lv_2w_2u;
  final Value<double> ry_lv_2u_2n;
  final Value<double> ry_lv_2v_2n;
  final Value<double> ry_lv_2w_2n;
  final Value<double> yb_hv_1u_1v;
  final Value<double> yb_hv_1v_1w;
  final Value<double> yb_hv_1w_1u;
  final Value<double> yb_hv_1u_1n;
  final Value<double> yb_hv_1v_1n;
  final Value<double> yb_hv_1w_1n;
  final Value<double> yb_lv_2u_2v;
  final Value<double> yb_lv_2v_2w;
  final Value<double> yb_lv_2w_2u;
  final Value<double> yb_lv_2u_2n;
  final Value<double> yb_lv_2v_2n;
  final Value<double> yb_lv_2w_2n;
  final Value<double> br_hv_1u_1v;
  final Value<double> br_hv_1v_1w;
  final Value<double> br_hv_1w_1u;
  final Value<double> br_hv_1u_1n;
  final Value<double> br_hv_1v_1n;
  final Value<double> br_hv_1w_1n;
  final Value<double> br_lv_2u_2v;
  final Value<double> br_lv_2v_2w;
  final Value<double> br_lv_2w_2u;
  final Value<double> br_lv_2u_2n;
  final Value<double> br_lv_2v_2n;
  final Value<double> br_lv_2w_2n;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const AT_mb_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.ry_hv_1u_1v = const Value.absent(),
    this.ry_hv_1v_1w = const Value.absent(),
    this.ry_hv_1w_1u = const Value.absent(),
    this.ry_hv_1u_1n = const Value.absent(),
    this.ry_hv_1v_1n = const Value.absent(),
    this.ry_hv_1w_1n = const Value.absent(),
    this.ry_lv_2u_2v = const Value.absent(),
    this.ry_lv_2v_2w = const Value.absent(),
    this.ry_lv_2w_2u = const Value.absent(),
    this.ry_lv_2u_2n = const Value.absent(),
    this.ry_lv_2v_2n = const Value.absent(),
    this.ry_lv_2w_2n = const Value.absent(),
    this.yb_hv_1u_1v = const Value.absent(),
    this.yb_hv_1v_1w = const Value.absent(),
    this.yb_hv_1w_1u = const Value.absent(),
    this.yb_hv_1u_1n = const Value.absent(),
    this.yb_hv_1v_1n = const Value.absent(),
    this.yb_hv_1w_1n = const Value.absent(),
    this.yb_lv_2u_2v = const Value.absent(),
    this.yb_lv_2v_2w = const Value.absent(),
    this.yb_lv_2w_2u = const Value.absent(),
    this.yb_lv_2u_2n = const Value.absent(),
    this.yb_lv_2v_2n = const Value.absent(),
    this.yb_lv_2w_2n = const Value.absent(),
    this.br_hv_1u_1v = const Value.absent(),
    this.br_hv_1v_1w = const Value.absent(),
    this.br_hv_1w_1u = const Value.absent(),
    this.br_hv_1u_1n = const Value.absent(),
    this.br_hv_1v_1n = const Value.absent(),
    this.br_hv_1w_1n = const Value.absent(),
    this.br_lv_2u_2v = const Value.absent(),
    this.br_lv_2v_2w = const Value.absent(),
    this.br_lv_2w_2u = const Value.absent(),
    this.br_lv_2u_2n = const Value.absent(),
    this.br_lv_2v_2n = const Value.absent(),
    this.br_lv_2w_2n = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  AT_mb_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double ry_hv_1u_1v,
    @required double ry_hv_1v_1w,
    @required double ry_hv_1w_1u,
    @required double ry_hv_1u_1n,
    @required double ry_hv_1v_1n,
    @required double ry_hv_1w_1n,
    @required double ry_lv_2u_2v,
    @required double ry_lv_2v_2w,
    @required double ry_lv_2w_2u,
    @required double ry_lv_2u_2n,
    @required double ry_lv_2v_2n,
    @required double ry_lv_2w_2n,
    @required double yb_hv_1u_1v,
    @required double yb_hv_1v_1w,
    @required double yb_hv_1w_1u,
    @required double yb_hv_1u_1n,
    @required double yb_hv_1v_1n,
    @required double yb_hv_1w_1n,
    @required double yb_lv_2u_2v,
    @required double yb_lv_2v_2w,
    @required double yb_lv_2w_2u,
    @required double yb_lv_2u_2n,
    @required double yb_lv_2v_2n,
    @required double yb_lv_2w_2n,
    @required double br_hv_1u_1v,
    @required double br_hv_1v_1w,
    @required double br_hv_1w_1u,
    @required double br_hv_1u_1n,
    @required double br_hv_1v_1n,
    @required double br_hv_1w_1n,
    @required double br_lv_2u_2v,
    @required double br_lv_2v_2w,
    @required double br_lv_2w_2u,
    @required double br_lv_2u_2n,
    @required double br_lv_2v_2n,
    @required double br_lv_2w_2n,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        ry_hv_1u_1v = Value(ry_hv_1u_1v),
        ry_hv_1v_1w = Value(ry_hv_1v_1w),
        ry_hv_1w_1u = Value(ry_hv_1w_1u),
        ry_hv_1u_1n = Value(ry_hv_1u_1n),
        ry_hv_1v_1n = Value(ry_hv_1v_1n),
        ry_hv_1w_1n = Value(ry_hv_1w_1n),
        ry_lv_2u_2v = Value(ry_lv_2u_2v),
        ry_lv_2v_2w = Value(ry_lv_2v_2w),
        ry_lv_2w_2u = Value(ry_lv_2w_2u),
        ry_lv_2u_2n = Value(ry_lv_2u_2n),
        ry_lv_2v_2n = Value(ry_lv_2v_2n),
        ry_lv_2w_2n = Value(ry_lv_2w_2n),
        yb_hv_1u_1v = Value(yb_hv_1u_1v),
        yb_hv_1v_1w = Value(yb_hv_1v_1w),
        yb_hv_1w_1u = Value(yb_hv_1w_1u),
        yb_hv_1u_1n = Value(yb_hv_1u_1n),
        yb_hv_1v_1n = Value(yb_hv_1v_1n),
        yb_hv_1w_1n = Value(yb_hv_1w_1n),
        yb_lv_2u_2v = Value(yb_lv_2u_2v),
        yb_lv_2v_2w = Value(yb_lv_2v_2w),
        yb_lv_2w_2u = Value(yb_lv_2w_2u),
        yb_lv_2u_2n = Value(yb_lv_2u_2n),
        yb_lv_2v_2n = Value(yb_lv_2v_2n),
        yb_lv_2w_2n = Value(yb_lv_2w_2n),
        br_hv_1u_1v = Value(br_hv_1u_1v),
        br_hv_1v_1w = Value(br_hv_1v_1w),
        br_hv_1w_1u = Value(br_hv_1w_1u),
        br_hv_1u_1n = Value(br_hv_1u_1n),
        br_hv_1v_1n = Value(br_hv_1v_1n),
        br_hv_1w_1n = Value(br_hv_1w_1n),
        br_lv_2u_2v = Value(br_lv_2u_2v),
        br_lv_2v_2w = Value(br_lv_2v_2w),
        br_lv_2w_2u = Value(br_lv_2w_2u),
        br_lv_2u_2n = Value(br_lv_2u_2n),
        br_lv_2v_2n = Value(br_lv_2v_2n),
        br_lv_2w_2n = Value(br_lv_2w_2n),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<ATmbLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> ry_hv_1u_1v,
    Expression<double> ry_hv_1v_1w,
    Expression<double> ry_hv_1w_1u,
    Expression<double> ry_hv_1u_1n,
    Expression<double> ry_hv_1v_1n,
    Expression<double> ry_hv_1w_1n,
    Expression<double> ry_lv_2u_2v,
    Expression<double> ry_lv_2v_2w,
    Expression<double> ry_lv_2w_2u,
    Expression<double> ry_lv_2u_2n,
    Expression<double> ry_lv_2v_2n,
    Expression<double> ry_lv_2w_2n,
    Expression<double> yb_hv_1u_1v,
    Expression<double> yb_hv_1v_1w,
    Expression<double> yb_hv_1w_1u,
    Expression<double> yb_hv_1u_1n,
    Expression<double> yb_hv_1v_1n,
    Expression<double> yb_hv_1w_1n,
    Expression<double> yb_lv_2u_2v,
    Expression<double> yb_lv_2v_2w,
    Expression<double> yb_lv_2w_2u,
    Expression<double> yb_lv_2u_2n,
    Expression<double> yb_lv_2v_2n,
    Expression<double> yb_lv_2w_2n,
    Expression<double> br_hv_1u_1v,
    Expression<double> br_hv_1v_1w,
    Expression<double> br_hv_1w_1u,
    Expression<double> br_hv_1u_1n,
    Expression<double> br_hv_1v_1n,
    Expression<double> br_hv_1w_1n,
    Expression<double> br_lv_2u_2v,
    Expression<double> br_lv_2v_2w,
    Expression<double> br_lv_2w_2u,
    Expression<double> br_lv_2u_2n,
    Expression<double> br_lv_2v_2n,
    Expression<double> br_lv_2w_2n,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (ry_hv_1u_1v != null) 'ry_hv_1u_1v': ry_hv_1u_1v,
      if (ry_hv_1v_1w != null) 'ry_hv_1v_1w': ry_hv_1v_1w,
      if (ry_hv_1w_1u != null) 'ry_hv_1w_1u': ry_hv_1w_1u,
      if (ry_hv_1u_1n != null) 'ry_hv_1u_1n': ry_hv_1u_1n,
      if (ry_hv_1v_1n != null) 'ry_hv_1v_1n': ry_hv_1v_1n,
      if (ry_hv_1w_1n != null) 'ry_hv_1w_1n': ry_hv_1w_1n,
      if (ry_lv_2u_2v != null) 'ry_lv_2u_2v': ry_lv_2u_2v,
      if (ry_lv_2v_2w != null) 'ry_lv_2v_2w': ry_lv_2v_2w,
      if (ry_lv_2w_2u != null) 'ry_lv_2w_2u': ry_lv_2w_2u,
      if (ry_lv_2u_2n != null) 'ry_lv_2u_2n': ry_lv_2u_2n,
      if (ry_lv_2v_2n != null) 'ry_lv_2v_2n': ry_lv_2v_2n,
      if (ry_lv_2w_2n != null) 'ry_lv_2w_2n': ry_lv_2w_2n,
      if (yb_hv_1u_1v != null) 'yb_hv_1u_1v': yb_hv_1u_1v,
      if (yb_hv_1v_1w != null) 'yb_hv_1v_1w': yb_hv_1v_1w,
      if (yb_hv_1w_1u != null) 'yb_hv_1w_1u': yb_hv_1w_1u,
      if (yb_hv_1u_1n != null) 'yb_hv_1u_1n': yb_hv_1u_1n,
      if (yb_hv_1v_1n != null) 'yb_hv_1v_1n': yb_hv_1v_1n,
      if (yb_hv_1w_1n != null) 'yb_hv_1w_1n': yb_hv_1w_1n,
      if (yb_lv_2u_2v != null) 'yb_lv_2u_2v': yb_lv_2u_2v,
      if (yb_lv_2v_2w != null) 'yb_lv_2v_2w': yb_lv_2v_2w,
      if (yb_lv_2w_2u != null) 'yb_lv_2w_2u': yb_lv_2w_2u,
      if (yb_lv_2u_2n != null) 'yb_lv_2u_2n': yb_lv_2u_2n,
      if (yb_lv_2v_2n != null) 'yb_lv_2v_2n': yb_lv_2v_2n,
      if (yb_lv_2w_2n != null) 'yb_lv_2w_2n': yb_lv_2w_2n,
      if (br_hv_1u_1v != null) 'br_hv_1u_1v': br_hv_1u_1v,
      if (br_hv_1v_1w != null) 'br_hv_1v_1w': br_hv_1v_1w,
      if (br_hv_1w_1u != null) 'br_hv_1w_1u': br_hv_1w_1u,
      if (br_hv_1u_1n != null) 'br_hv_1u_1n': br_hv_1u_1n,
      if (br_hv_1v_1n != null) 'br_hv_1v_1n': br_hv_1v_1n,
      if (br_hv_1w_1n != null) 'br_hv_1w_1n': br_hv_1w_1n,
      if (br_lv_2u_2v != null) 'br_lv_2u_2v': br_lv_2u_2v,
      if (br_lv_2v_2w != null) 'br_lv_2v_2w': br_lv_2v_2w,
      if (br_lv_2w_2u != null) 'br_lv_2w_2u': br_lv_2w_2u,
      if (br_lv_2u_2n != null) 'br_lv_2u_2n': br_lv_2u_2n,
      if (br_lv_2v_2n != null) 'br_lv_2v_2n': br_lv_2v_2n,
      if (br_lv_2w_2n != null) 'br_lv_2w_2n': br_lv_2w_2n,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  AT_mb_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> ry_hv_1u_1v,
      Value<double> ry_hv_1v_1w,
      Value<double> ry_hv_1w_1u,
      Value<double> ry_hv_1u_1n,
      Value<double> ry_hv_1v_1n,
      Value<double> ry_hv_1w_1n,
      Value<double> ry_lv_2u_2v,
      Value<double> ry_lv_2v_2w,
      Value<double> ry_lv_2w_2u,
      Value<double> ry_lv_2u_2n,
      Value<double> ry_lv_2v_2n,
      Value<double> ry_lv_2w_2n,
      Value<double> yb_hv_1u_1v,
      Value<double> yb_hv_1v_1w,
      Value<double> yb_hv_1w_1u,
      Value<double> yb_hv_1u_1n,
      Value<double> yb_hv_1v_1n,
      Value<double> yb_hv_1w_1n,
      Value<double> yb_lv_2u_2v,
      Value<double> yb_lv_2v_2w,
      Value<double> yb_lv_2w_2u,
      Value<double> yb_lv_2u_2n,
      Value<double> yb_lv_2v_2n,
      Value<double> yb_lv_2w_2n,
      Value<double> br_hv_1u_1v,
      Value<double> br_hv_1v_1w,
      Value<double> br_hv_1w_1u,
      Value<double> br_hv_1u_1n,
      Value<double> br_hv_1v_1n,
      Value<double> br_hv_1w_1n,
      Value<double> br_lv_2u_2v,
      Value<double> br_lv_2v_2w,
      Value<double> br_lv_2w_2u,
      Value<double> br_lv_2u_2n,
      Value<double> br_lv_2v_2n,
      Value<double> br_lv_2w_2n,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return AT_mb_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      ry_hv_1u_1v: ry_hv_1u_1v ?? this.ry_hv_1u_1v,
      ry_hv_1v_1w: ry_hv_1v_1w ?? this.ry_hv_1v_1w,
      ry_hv_1w_1u: ry_hv_1w_1u ?? this.ry_hv_1w_1u,
      ry_hv_1u_1n: ry_hv_1u_1n ?? this.ry_hv_1u_1n,
      ry_hv_1v_1n: ry_hv_1v_1n ?? this.ry_hv_1v_1n,
      ry_hv_1w_1n: ry_hv_1w_1n ?? this.ry_hv_1w_1n,
      ry_lv_2u_2v: ry_lv_2u_2v ?? this.ry_lv_2u_2v,
      ry_lv_2v_2w: ry_lv_2v_2w ?? this.ry_lv_2v_2w,
      ry_lv_2w_2u: ry_lv_2w_2u ?? this.ry_lv_2w_2u,
      ry_lv_2u_2n: ry_lv_2u_2n ?? this.ry_lv_2u_2n,
      ry_lv_2v_2n: ry_lv_2v_2n ?? this.ry_lv_2v_2n,
      ry_lv_2w_2n: ry_lv_2w_2n ?? this.ry_lv_2w_2n,
      yb_hv_1u_1v: yb_hv_1u_1v ?? this.yb_hv_1u_1v,
      yb_hv_1v_1w: yb_hv_1v_1w ?? this.yb_hv_1v_1w,
      yb_hv_1w_1u: yb_hv_1w_1u ?? this.yb_hv_1w_1u,
      yb_hv_1u_1n: yb_hv_1u_1n ?? this.yb_hv_1u_1n,
      yb_hv_1v_1n: yb_hv_1v_1n ?? this.yb_hv_1v_1n,
      yb_hv_1w_1n: yb_hv_1w_1n ?? this.yb_hv_1w_1n,
      yb_lv_2u_2v: yb_lv_2u_2v ?? this.yb_lv_2u_2v,
      yb_lv_2v_2w: yb_lv_2v_2w ?? this.yb_lv_2v_2w,
      yb_lv_2w_2u: yb_lv_2w_2u ?? this.yb_lv_2w_2u,
      yb_lv_2u_2n: yb_lv_2u_2n ?? this.yb_lv_2u_2n,
      yb_lv_2v_2n: yb_lv_2v_2n ?? this.yb_lv_2v_2n,
      yb_lv_2w_2n: yb_lv_2w_2n ?? this.yb_lv_2w_2n,
      br_hv_1u_1v: br_hv_1u_1v ?? this.br_hv_1u_1v,
      br_hv_1v_1w: br_hv_1v_1w ?? this.br_hv_1v_1w,
      br_hv_1w_1u: br_hv_1w_1u ?? this.br_hv_1w_1u,
      br_hv_1u_1n: br_hv_1u_1n ?? this.br_hv_1u_1n,
      br_hv_1v_1n: br_hv_1v_1n ?? this.br_hv_1v_1n,
      br_hv_1w_1n: br_hv_1w_1n ?? this.br_hv_1w_1n,
      br_lv_2u_2v: br_lv_2u_2v ?? this.br_lv_2u_2v,
      br_lv_2v_2w: br_lv_2v_2w ?? this.br_lv_2v_2w,
      br_lv_2w_2u: br_lv_2w_2u ?? this.br_lv_2w_2u,
      br_lv_2u_2n: br_lv_2u_2n ?? this.br_lv_2u_2n,
      br_lv_2v_2n: br_lv_2v_2n ?? this.br_lv_2v_2n,
      br_lv_2w_2n: br_lv_2w_2n ?? this.br_lv_2w_2n,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (ry_hv_1u_1v.present) {
      map['ry_hv_1u_1v'] = Variable<double>(ry_hv_1u_1v.value);
    }
    if (ry_hv_1v_1w.present) {
      map['ry_hv_1v_1w'] = Variable<double>(ry_hv_1v_1w.value);
    }
    if (ry_hv_1w_1u.present) {
      map['ry_hv_1w_1u'] = Variable<double>(ry_hv_1w_1u.value);
    }
    if (ry_hv_1u_1n.present) {
      map['ry_hv_1u_1n'] = Variable<double>(ry_hv_1u_1n.value);
    }
    if (ry_hv_1v_1n.present) {
      map['ry_hv_1v_1n'] = Variable<double>(ry_hv_1v_1n.value);
    }
    if (ry_hv_1w_1n.present) {
      map['ry_hv_1w_1n'] = Variable<double>(ry_hv_1w_1n.value);
    }
    if (ry_lv_2u_2v.present) {
      map['ry_lv_2u_2v'] = Variable<double>(ry_lv_2u_2v.value);
    }
    if (ry_lv_2v_2w.present) {
      map['ry_lv_2v_2w'] = Variable<double>(ry_lv_2v_2w.value);
    }
    if (ry_lv_2w_2u.present) {
      map['ry_lv_2w_2u'] = Variable<double>(ry_lv_2w_2u.value);
    }
    if (ry_lv_2u_2n.present) {
      map['ry_lv_2u_2n'] = Variable<double>(ry_lv_2u_2n.value);
    }
    if (ry_lv_2v_2n.present) {
      map['ry_lv_2v_2n'] = Variable<double>(ry_lv_2v_2n.value);
    }
    if (ry_lv_2w_2n.present) {
      map['ry_lv_2w_2n'] = Variable<double>(ry_lv_2w_2n.value);
    }
    if (yb_hv_1u_1v.present) {
      map['yb_hv_1u_1v'] = Variable<double>(yb_hv_1u_1v.value);
    }
    if (yb_hv_1v_1w.present) {
      map['yb_hv_1v_1w'] = Variable<double>(yb_hv_1v_1w.value);
    }
    if (yb_hv_1w_1u.present) {
      map['yb_hv_1w_1u'] = Variable<double>(yb_hv_1w_1u.value);
    }
    if (yb_hv_1u_1n.present) {
      map['yb_hv_1u_1n'] = Variable<double>(yb_hv_1u_1n.value);
    }
    if (yb_hv_1v_1n.present) {
      map['yb_hv_1v_1n'] = Variable<double>(yb_hv_1v_1n.value);
    }
    if (yb_hv_1w_1n.present) {
      map['yb_hv_1w_1n'] = Variable<double>(yb_hv_1w_1n.value);
    }
    if (yb_lv_2u_2v.present) {
      map['yb_lv_2u_2v'] = Variable<double>(yb_lv_2u_2v.value);
    }
    if (yb_lv_2v_2w.present) {
      map['yb_lv_2v_2w'] = Variable<double>(yb_lv_2v_2w.value);
    }
    if (yb_lv_2w_2u.present) {
      map['yb_lv_2w_2u'] = Variable<double>(yb_lv_2w_2u.value);
    }
    if (yb_lv_2u_2n.present) {
      map['yb_lv_2u_2n'] = Variable<double>(yb_lv_2u_2n.value);
    }
    if (yb_lv_2v_2n.present) {
      map['yb_lv_2v_2n'] = Variable<double>(yb_lv_2v_2n.value);
    }
    if (yb_lv_2w_2n.present) {
      map['yb_lv_2w_2n'] = Variable<double>(yb_lv_2w_2n.value);
    }
    if (br_hv_1u_1v.present) {
      map['br_hv_1u_1v'] = Variable<double>(br_hv_1u_1v.value);
    }
    if (br_hv_1v_1w.present) {
      map['br_hv_1v_1w'] = Variable<double>(br_hv_1v_1w.value);
    }
    if (br_hv_1w_1u.present) {
      map['br_hv_1w_1u'] = Variable<double>(br_hv_1w_1u.value);
    }
    if (br_hv_1u_1n.present) {
      map['br_hv_1u_1n'] = Variable<double>(br_hv_1u_1n.value);
    }
    if (br_hv_1v_1n.present) {
      map['br_hv_1v_1n'] = Variable<double>(br_hv_1v_1n.value);
    }
    if (br_hv_1w_1n.present) {
      map['br_hv_1w_1n'] = Variable<double>(br_hv_1w_1n.value);
    }
    if (br_lv_2u_2v.present) {
      map['br_lv_2u_2v'] = Variable<double>(br_lv_2u_2v.value);
    }
    if (br_lv_2v_2w.present) {
      map['br_lv_2v_2w'] = Variable<double>(br_lv_2v_2w.value);
    }
    if (br_lv_2w_2u.present) {
      map['br_lv_2w_2u'] = Variable<double>(br_lv_2w_2u.value);
    }
    if (br_lv_2u_2n.present) {
      map['br_lv_2u_2n'] = Variable<double>(br_lv_2u_2n.value);
    }
    if (br_lv_2v_2n.present) {
      map['br_lv_2v_2n'] = Variable<double>(br_lv_2v_2n.value);
    }
    if (br_lv_2w_2n.present) {
      map['br_lv_2w_2n'] = Variable<double>(br_lv_2w_2n.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AT_mb_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('ry_hv_1u_1v: $ry_hv_1u_1v, ')
          ..write('ry_hv_1v_1w: $ry_hv_1v_1w, ')
          ..write('ry_hv_1w_1u: $ry_hv_1w_1u, ')
          ..write('ry_hv_1u_1n: $ry_hv_1u_1n, ')
          ..write('ry_hv_1v_1n: $ry_hv_1v_1n, ')
          ..write('ry_hv_1w_1n: $ry_hv_1w_1n, ')
          ..write('ry_lv_2u_2v: $ry_lv_2u_2v, ')
          ..write('ry_lv_2v_2w: $ry_lv_2v_2w, ')
          ..write('ry_lv_2w_2u: $ry_lv_2w_2u, ')
          ..write('ry_lv_2u_2n: $ry_lv_2u_2n, ')
          ..write('ry_lv_2v_2n: $ry_lv_2v_2n, ')
          ..write('ry_lv_2w_2n: $ry_lv_2w_2n, ')
          ..write('yb_hv_1u_1v: $yb_hv_1u_1v, ')
          ..write('yb_hv_1v_1w: $yb_hv_1v_1w, ')
          ..write('yb_hv_1w_1u: $yb_hv_1w_1u, ')
          ..write('yb_hv_1u_1n: $yb_hv_1u_1n, ')
          ..write('yb_hv_1v_1n: $yb_hv_1v_1n, ')
          ..write('yb_hv_1w_1n: $yb_hv_1w_1n, ')
          ..write('yb_lv_2u_2v: $yb_lv_2u_2v, ')
          ..write('yb_lv_2v_2w: $yb_lv_2v_2w, ')
          ..write('yb_lv_2w_2u: $yb_lv_2w_2u, ')
          ..write('yb_lv_2u_2n: $yb_lv_2u_2n, ')
          ..write('yb_lv_2v_2n: $yb_lv_2v_2n, ')
          ..write('yb_lv_2w_2n: $yb_lv_2w_2n, ')
          ..write('br_hv_1u_1v: $br_hv_1u_1v, ')
          ..write('br_hv_1v_1w: $br_hv_1v_1w, ')
          ..write('br_hv_1w_1u: $br_hv_1w_1u, ')
          ..write('br_hv_1u_1n: $br_hv_1u_1n, ')
          ..write('br_hv_1v_1n: $br_hv_1v_1n, ')
          ..write('br_hv_1w_1n: $br_hv_1w_1n, ')
          ..write('br_lv_2u_2v: $br_lv_2u_2v, ')
          ..write('br_lv_2v_2w: $br_lv_2v_2w, ')
          ..write('br_lv_2w_2u: $br_lv_2w_2u, ')
          ..write('br_lv_2u_2n: $br_lv_2u_2n, ')
          ..write('br_lv_2v_2n: $br_lv_2v_2n, ')
          ..write('br_lv_2w_2n: $br_lv_2w_2n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $AT_mb_LocalDatasourceImplTable extends AT_mb_LocalDatasourceImpl
    with TableInfo<$AT_mb_LocalDatasourceImplTable, ATmbLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $AT_mb_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1u_1vMeta =
      const VerificationMeta('ry_hv_1u_1v');
  GeneratedColumn<double> _ry_hv_1u_1v;
  @override
  GeneratedColumn<double> get ry_hv_1u_1v => _ry_hv_1u_1v ??=
      GeneratedColumn<double>('ry_hv_1u_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1v_1wMeta =
      const VerificationMeta('ry_hv_1v_1w');
  GeneratedColumn<double> _ry_hv_1v_1w;
  @override
  GeneratedColumn<double> get ry_hv_1v_1w => _ry_hv_1v_1w ??=
      GeneratedColumn<double>('ry_hv_1v_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1w_1uMeta =
      const VerificationMeta('ry_hv_1w_1u');
  GeneratedColumn<double> _ry_hv_1w_1u;
  @override
  GeneratedColumn<double> get ry_hv_1w_1u => _ry_hv_1w_1u ??=
      GeneratedColumn<double>('ry_hv_1w_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1u_1nMeta =
      const VerificationMeta('ry_hv_1u_1n');
  GeneratedColumn<double> _ry_hv_1u_1n;
  @override
  GeneratedColumn<double> get ry_hv_1u_1n => _ry_hv_1u_1n ??=
      GeneratedColumn<double>('ry_hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1v_1nMeta =
      const VerificationMeta('ry_hv_1v_1n');
  GeneratedColumn<double> _ry_hv_1v_1n;
  @override
  GeneratedColumn<double> get ry_hv_1v_1n => _ry_hv_1v_1n ??=
      GeneratedColumn<double>('ry_hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1w_1nMeta =
      const VerificationMeta('ry_hv_1w_1n');
  GeneratedColumn<double> _ry_hv_1w_1n;
  @override
  GeneratedColumn<double> get ry_hv_1w_1n => _ry_hv_1w_1n ??=
      GeneratedColumn<double>('ry_hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2u_2vMeta =
      const VerificationMeta('ry_lv_2u_2v');
  GeneratedColumn<double> _ry_lv_2u_2v;
  @override
  GeneratedColumn<double> get ry_lv_2u_2v => _ry_lv_2u_2v ??=
      GeneratedColumn<double>('ry_lv_2u_2v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2v_2wMeta =
      const VerificationMeta('ry_lv_2v_2w');
  GeneratedColumn<double> _ry_lv_2v_2w;
  @override
  GeneratedColumn<double> get ry_lv_2v_2w => _ry_lv_2v_2w ??=
      GeneratedColumn<double>('ry_lv_2v_2w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2w_2uMeta =
      const VerificationMeta('ry_lv_2w_2u');
  GeneratedColumn<double> _ry_lv_2w_2u;
  @override
  GeneratedColumn<double> get ry_lv_2w_2u => _ry_lv_2w_2u ??=
      GeneratedColumn<double>('ry_lv_2w_2u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2u_2nMeta =
      const VerificationMeta('ry_lv_2u_2n');
  GeneratedColumn<double> _ry_lv_2u_2n;
  @override
  GeneratedColumn<double> get ry_lv_2u_2n => _ry_lv_2u_2n ??=
      GeneratedColumn<double>('ry_lv_2u_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2v_2nMeta =
      const VerificationMeta('ry_lv_2v_2n');
  GeneratedColumn<double> _ry_lv_2v_2n;
  @override
  GeneratedColumn<double> get ry_lv_2v_2n => _ry_lv_2v_2n ??=
      GeneratedColumn<double>('ry_lv_2v_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2w_2nMeta =
      const VerificationMeta('ry_lv_2w_2n');
  GeneratedColumn<double> _ry_lv_2w_2n;
  @override
  GeneratedColumn<double> get ry_lv_2w_2n => _ry_lv_2w_2n ??=
      GeneratedColumn<double>('ry_lv_2w_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1u_1vMeta =
      const VerificationMeta('yb_hv_1u_1v');
  GeneratedColumn<double> _yb_hv_1u_1v;
  @override
  GeneratedColumn<double> get yb_hv_1u_1v => _yb_hv_1u_1v ??=
      GeneratedColumn<double>('yb_hv_1u_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1v_1wMeta =
      const VerificationMeta('yb_hv_1v_1w');
  GeneratedColumn<double> _yb_hv_1v_1w;
  @override
  GeneratedColumn<double> get yb_hv_1v_1w => _yb_hv_1v_1w ??=
      GeneratedColumn<double>('yb_hv_1v_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1w_1uMeta =
      const VerificationMeta('yb_hv_1w_1u');
  GeneratedColumn<double> _yb_hv_1w_1u;
  @override
  GeneratedColumn<double> get yb_hv_1w_1u => _yb_hv_1w_1u ??=
      GeneratedColumn<double>('yb_hv_1w_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1u_1nMeta =
      const VerificationMeta('yb_hv_1u_1n');
  GeneratedColumn<double> _yb_hv_1u_1n;
  @override
  GeneratedColumn<double> get yb_hv_1u_1n => _yb_hv_1u_1n ??=
      GeneratedColumn<double>('yb_hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1v_1nMeta =
      const VerificationMeta('yb_hv_1v_1n');
  GeneratedColumn<double> _yb_hv_1v_1n;
  @override
  GeneratedColumn<double> get yb_hv_1v_1n => _yb_hv_1v_1n ??=
      GeneratedColumn<double>('yb_hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1w_1nMeta =
      const VerificationMeta('yb_hv_1w_1n');
  GeneratedColumn<double> _yb_hv_1w_1n;
  @override
  GeneratedColumn<double> get yb_hv_1w_1n => _yb_hv_1w_1n ??=
      GeneratedColumn<double>('yb_hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2u_2vMeta =
      const VerificationMeta('yb_lv_2u_2v');
  GeneratedColumn<double> _yb_lv_2u_2v;
  @override
  GeneratedColumn<double> get yb_lv_2u_2v => _yb_lv_2u_2v ??=
      GeneratedColumn<double>('yb_lv_2u_2v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2v_2wMeta =
      const VerificationMeta('yb_lv_2v_2w');
  GeneratedColumn<double> _yb_lv_2v_2w;
  @override
  GeneratedColumn<double> get yb_lv_2v_2w => _yb_lv_2v_2w ??=
      GeneratedColumn<double>('yb_lv_2v_2w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2w_2uMeta =
      const VerificationMeta('yb_lv_2w_2u');
  GeneratedColumn<double> _yb_lv_2w_2u;
  @override
  GeneratedColumn<double> get yb_lv_2w_2u => _yb_lv_2w_2u ??=
      GeneratedColumn<double>('yb_lv_2w_2u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2u_2nMeta =
      const VerificationMeta('yb_lv_2u_2n');
  GeneratedColumn<double> _yb_lv_2u_2n;
  @override
  GeneratedColumn<double> get yb_lv_2u_2n => _yb_lv_2u_2n ??=
      GeneratedColumn<double>('yb_lv_2u_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2v_2nMeta =
      const VerificationMeta('yb_lv_2v_2n');
  GeneratedColumn<double> _yb_lv_2v_2n;
  @override
  GeneratedColumn<double> get yb_lv_2v_2n => _yb_lv_2v_2n ??=
      GeneratedColumn<double>('yb_lv_2v_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2w_2nMeta =
      const VerificationMeta('yb_lv_2w_2n');
  GeneratedColumn<double> _yb_lv_2w_2n;
  @override
  GeneratedColumn<double> get yb_lv_2w_2n => _yb_lv_2w_2n ??=
      GeneratedColumn<double>('yb_lv_2w_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1u_1vMeta =
      const VerificationMeta('br_hv_1u_1v');
  GeneratedColumn<double> _br_hv_1u_1v;
  @override
  GeneratedColumn<double> get br_hv_1u_1v => _br_hv_1u_1v ??=
      GeneratedColumn<double>('br_hv_1u_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1v_1wMeta =
      const VerificationMeta('br_hv_1v_1w');
  GeneratedColumn<double> _br_hv_1v_1w;
  @override
  GeneratedColumn<double> get br_hv_1v_1w => _br_hv_1v_1w ??=
      GeneratedColumn<double>('br_hv_1v_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1w_1uMeta =
      const VerificationMeta('br_hv_1w_1u');
  GeneratedColumn<double> _br_hv_1w_1u;
  @override
  GeneratedColumn<double> get br_hv_1w_1u => _br_hv_1w_1u ??=
      GeneratedColumn<double>('br_hv_1w_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1u_1nMeta =
      const VerificationMeta('br_hv_1u_1n');
  GeneratedColumn<double> _br_hv_1u_1n;
  @override
  GeneratedColumn<double> get br_hv_1u_1n => _br_hv_1u_1n ??=
      GeneratedColumn<double>('br_hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1v_1nMeta =
      const VerificationMeta('br_hv_1v_1n');
  GeneratedColumn<double> _br_hv_1v_1n;
  @override
  GeneratedColumn<double> get br_hv_1v_1n => _br_hv_1v_1n ??=
      GeneratedColumn<double>('br_hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1w_1nMeta =
      const VerificationMeta('br_hv_1w_1n');
  GeneratedColumn<double> _br_hv_1w_1n;
  @override
  GeneratedColumn<double> get br_hv_1w_1n => _br_hv_1w_1n ??=
      GeneratedColumn<double>('br_hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2u_2vMeta =
      const VerificationMeta('br_lv_2u_2v');
  GeneratedColumn<double> _br_lv_2u_2v;
  @override
  GeneratedColumn<double> get br_lv_2u_2v => _br_lv_2u_2v ??=
      GeneratedColumn<double>('br_lv_2u_2v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2v_2wMeta =
      const VerificationMeta('br_lv_2v_2w');
  GeneratedColumn<double> _br_lv_2v_2w;
  @override
  GeneratedColumn<double> get br_lv_2v_2w => _br_lv_2v_2w ??=
      GeneratedColumn<double>('br_lv_2v_2w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2w_2uMeta =
      const VerificationMeta('br_lv_2w_2u');
  GeneratedColumn<double> _br_lv_2w_2u;
  @override
  GeneratedColumn<double> get br_lv_2w_2u => _br_lv_2w_2u ??=
      GeneratedColumn<double>('br_lv_2w_2u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2u_2nMeta =
      const VerificationMeta('br_lv_2u_2n');
  GeneratedColumn<double> _br_lv_2u_2n;
  @override
  GeneratedColumn<double> get br_lv_2u_2n => _br_lv_2u_2n ??=
      GeneratedColumn<double>('br_lv_2u_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2v_2nMeta =
      const VerificationMeta('br_lv_2v_2n');
  GeneratedColumn<double> _br_lv_2v_2n;
  @override
  GeneratedColumn<double> get br_lv_2v_2n => _br_lv_2v_2n ??=
      GeneratedColumn<double>('br_lv_2v_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2w_2nMeta =
      const VerificationMeta('br_lv_2w_2n');
  GeneratedColumn<double> _br_lv_2w_2n;
  @override
  GeneratedColumn<double> get br_lv_2w_2n => _br_lv_2w_2n ??=
      GeneratedColumn<double>('br_lv_2w_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        ry_hv_1u_1v,
        ry_hv_1v_1w,
        ry_hv_1w_1u,
        ry_hv_1u_1n,
        ry_hv_1v_1n,
        ry_hv_1w_1n,
        ry_lv_2u_2v,
        ry_lv_2v_2w,
        ry_lv_2w_2u,
        ry_lv_2u_2n,
        ry_lv_2v_2n,
        ry_lv_2w_2n,
        yb_hv_1u_1v,
        yb_hv_1v_1w,
        yb_hv_1w_1u,
        yb_hv_1u_1n,
        yb_hv_1v_1n,
        yb_hv_1w_1n,
        yb_lv_2u_2v,
        yb_lv_2v_2w,
        yb_lv_2w_2u,
        yb_lv_2u_2n,
        yb_lv_2v_2n,
        yb_lv_2w_2n,
        br_hv_1u_1v,
        br_hv_1v_1w,
        br_hv_1w_1u,
        br_hv_1u_1n,
        br_hv_1v_1n,
        br_hv_1w_1n,
        br_lv_2u_2v,
        br_lv_2v_2w,
        br_lv_2w_2u,
        br_lv_2u_2n,
        br_lv_2v_2n,
        br_lv_2w_2n,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'a_t_mb_local_datasource_impl';
  @override
  String get actualTableName => 'a_t_mb_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ATmbLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('ry_hv_1u_1v')) {
      context.handle(
          _ry_hv_1u_1vMeta,
          ry_hv_1u_1v.isAcceptableOrUnknown(
              data['ry_hv_1u_1v'], _ry_hv_1u_1vMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1u_1vMeta);
    }
    if (data.containsKey('ry_hv_1v_1w')) {
      context.handle(
          _ry_hv_1v_1wMeta,
          ry_hv_1v_1w.isAcceptableOrUnknown(
              data['ry_hv_1v_1w'], _ry_hv_1v_1wMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1v_1wMeta);
    }
    if (data.containsKey('ry_hv_1w_1u')) {
      context.handle(
          _ry_hv_1w_1uMeta,
          ry_hv_1w_1u.isAcceptableOrUnknown(
              data['ry_hv_1w_1u'], _ry_hv_1w_1uMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1w_1uMeta);
    }
    if (data.containsKey('ry_hv_1u_1n')) {
      context.handle(
          _ry_hv_1u_1nMeta,
          ry_hv_1u_1n.isAcceptableOrUnknown(
              data['ry_hv_1u_1n'], _ry_hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1u_1nMeta);
    }
    if (data.containsKey('ry_hv_1v_1n')) {
      context.handle(
          _ry_hv_1v_1nMeta,
          ry_hv_1v_1n.isAcceptableOrUnknown(
              data['ry_hv_1v_1n'], _ry_hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1v_1nMeta);
    }
    if (data.containsKey('ry_hv_1w_1n')) {
      context.handle(
          _ry_hv_1w_1nMeta,
          ry_hv_1w_1n.isAcceptableOrUnknown(
              data['ry_hv_1w_1n'], _ry_hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1w_1nMeta);
    }
    if (data.containsKey('ry_lv_2u_2v')) {
      context.handle(
          _ry_lv_2u_2vMeta,
          ry_lv_2u_2v.isAcceptableOrUnknown(
              data['ry_lv_2u_2v'], _ry_lv_2u_2vMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2u_2vMeta);
    }
    if (data.containsKey('ry_lv_2v_2w')) {
      context.handle(
          _ry_lv_2v_2wMeta,
          ry_lv_2v_2w.isAcceptableOrUnknown(
              data['ry_lv_2v_2w'], _ry_lv_2v_2wMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2v_2wMeta);
    }
    if (data.containsKey('ry_lv_2w_2u')) {
      context.handle(
          _ry_lv_2w_2uMeta,
          ry_lv_2w_2u.isAcceptableOrUnknown(
              data['ry_lv_2w_2u'], _ry_lv_2w_2uMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2w_2uMeta);
    }
    if (data.containsKey('ry_lv_2u_2n')) {
      context.handle(
          _ry_lv_2u_2nMeta,
          ry_lv_2u_2n.isAcceptableOrUnknown(
              data['ry_lv_2u_2n'], _ry_lv_2u_2nMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2u_2nMeta);
    }
    if (data.containsKey('ry_lv_2v_2n')) {
      context.handle(
          _ry_lv_2v_2nMeta,
          ry_lv_2v_2n.isAcceptableOrUnknown(
              data['ry_lv_2v_2n'], _ry_lv_2v_2nMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2v_2nMeta);
    }
    if (data.containsKey('ry_lv_2w_2n')) {
      context.handle(
          _ry_lv_2w_2nMeta,
          ry_lv_2w_2n.isAcceptableOrUnknown(
              data['ry_lv_2w_2n'], _ry_lv_2w_2nMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2w_2nMeta);
    }
    if (data.containsKey('yb_hv_1u_1v')) {
      context.handle(
          _yb_hv_1u_1vMeta,
          yb_hv_1u_1v.isAcceptableOrUnknown(
              data['yb_hv_1u_1v'], _yb_hv_1u_1vMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1u_1vMeta);
    }
    if (data.containsKey('yb_hv_1v_1w')) {
      context.handle(
          _yb_hv_1v_1wMeta,
          yb_hv_1v_1w.isAcceptableOrUnknown(
              data['yb_hv_1v_1w'], _yb_hv_1v_1wMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1v_1wMeta);
    }
    if (data.containsKey('yb_hv_1w_1u')) {
      context.handle(
          _yb_hv_1w_1uMeta,
          yb_hv_1w_1u.isAcceptableOrUnknown(
              data['yb_hv_1w_1u'], _yb_hv_1w_1uMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1w_1uMeta);
    }
    if (data.containsKey('yb_hv_1u_1n')) {
      context.handle(
          _yb_hv_1u_1nMeta,
          yb_hv_1u_1n.isAcceptableOrUnknown(
              data['yb_hv_1u_1n'], _yb_hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1u_1nMeta);
    }
    if (data.containsKey('yb_hv_1v_1n')) {
      context.handle(
          _yb_hv_1v_1nMeta,
          yb_hv_1v_1n.isAcceptableOrUnknown(
              data['yb_hv_1v_1n'], _yb_hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1v_1nMeta);
    }
    if (data.containsKey('yb_hv_1w_1n')) {
      context.handle(
          _yb_hv_1w_1nMeta,
          yb_hv_1w_1n.isAcceptableOrUnknown(
              data['yb_hv_1w_1n'], _yb_hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1w_1nMeta);
    }
    if (data.containsKey('yb_lv_2u_2v')) {
      context.handle(
          _yb_lv_2u_2vMeta,
          yb_lv_2u_2v.isAcceptableOrUnknown(
              data['yb_lv_2u_2v'], _yb_lv_2u_2vMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2u_2vMeta);
    }
    if (data.containsKey('yb_lv_2v_2w')) {
      context.handle(
          _yb_lv_2v_2wMeta,
          yb_lv_2v_2w.isAcceptableOrUnknown(
              data['yb_lv_2v_2w'], _yb_lv_2v_2wMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2v_2wMeta);
    }
    if (data.containsKey('yb_lv_2w_2u')) {
      context.handle(
          _yb_lv_2w_2uMeta,
          yb_lv_2w_2u.isAcceptableOrUnknown(
              data['yb_lv_2w_2u'], _yb_lv_2w_2uMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2w_2uMeta);
    }
    if (data.containsKey('yb_lv_2u_2n')) {
      context.handle(
          _yb_lv_2u_2nMeta,
          yb_lv_2u_2n.isAcceptableOrUnknown(
              data['yb_lv_2u_2n'], _yb_lv_2u_2nMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2u_2nMeta);
    }
    if (data.containsKey('yb_lv_2v_2n')) {
      context.handle(
          _yb_lv_2v_2nMeta,
          yb_lv_2v_2n.isAcceptableOrUnknown(
              data['yb_lv_2v_2n'], _yb_lv_2v_2nMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2v_2nMeta);
    }
    if (data.containsKey('yb_lv_2w_2n')) {
      context.handle(
          _yb_lv_2w_2nMeta,
          yb_lv_2w_2n.isAcceptableOrUnknown(
              data['yb_lv_2w_2n'], _yb_lv_2w_2nMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2w_2nMeta);
    }
    if (data.containsKey('br_hv_1u_1v')) {
      context.handle(
          _br_hv_1u_1vMeta,
          br_hv_1u_1v.isAcceptableOrUnknown(
              data['br_hv_1u_1v'], _br_hv_1u_1vMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1u_1vMeta);
    }
    if (data.containsKey('br_hv_1v_1w')) {
      context.handle(
          _br_hv_1v_1wMeta,
          br_hv_1v_1w.isAcceptableOrUnknown(
              data['br_hv_1v_1w'], _br_hv_1v_1wMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1v_1wMeta);
    }
    if (data.containsKey('br_hv_1w_1u')) {
      context.handle(
          _br_hv_1w_1uMeta,
          br_hv_1w_1u.isAcceptableOrUnknown(
              data['br_hv_1w_1u'], _br_hv_1w_1uMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1w_1uMeta);
    }
    if (data.containsKey('br_hv_1u_1n')) {
      context.handle(
          _br_hv_1u_1nMeta,
          br_hv_1u_1n.isAcceptableOrUnknown(
              data['br_hv_1u_1n'], _br_hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1u_1nMeta);
    }
    if (data.containsKey('br_hv_1v_1n')) {
      context.handle(
          _br_hv_1v_1nMeta,
          br_hv_1v_1n.isAcceptableOrUnknown(
              data['br_hv_1v_1n'], _br_hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1v_1nMeta);
    }
    if (data.containsKey('br_hv_1w_1n')) {
      context.handle(
          _br_hv_1w_1nMeta,
          br_hv_1w_1n.isAcceptableOrUnknown(
              data['br_hv_1w_1n'], _br_hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1w_1nMeta);
    }
    if (data.containsKey('br_lv_2u_2v')) {
      context.handle(
          _br_lv_2u_2vMeta,
          br_lv_2u_2v.isAcceptableOrUnknown(
              data['br_lv_2u_2v'], _br_lv_2u_2vMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2u_2vMeta);
    }
    if (data.containsKey('br_lv_2v_2w')) {
      context.handle(
          _br_lv_2v_2wMeta,
          br_lv_2v_2w.isAcceptableOrUnknown(
              data['br_lv_2v_2w'], _br_lv_2v_2wMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2v_2wMeta);
    }
    if (data.containsKey('br_lv_2w_2u')) {
      context.handle(
          _br_lv_2w_2uMeta,
          br_lv_2w_2u.isAcceptableOrUnknown(
              data['br_lv_2w_2u'], _br_lv_2w_2uMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2w_2uMeta);
    }
    if (data.containsKey('br_lv_2u_2n')) {
      context.handle(
          _br_lv_2u_2nMeta,
          br_lv_2u_2n.isAcceptableOrUnknown(
              data['br_lv_2u_2n'], _br_lv_2u_2nMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2u_2nMeta);
    }
    if (data.containsKey('br_lv_2v_2n')) {
      context.handle(
          _br_lv_2v_2nMeta,
          br_lv_2v_2n.isAcceptableOrUnknown(
              data['br_lv_2v_2n'], _br_lv_2v_2nMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2v_2nMeta);
    }
    if (data.containsKey('br_lv_2w_2n')) {
      context.handle(
          _br_lv_2w_2nMeta,
          br_lv_2w_2n.isAcceptableOrUnknown(
              data['br_lv_2w_2n'], _br_lv_2w_2nMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2w_2nMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ATmbLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ATmbLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $AT_mb_LocalDatasourceImplTable createAlias(String alias) {
    return $AT_mb_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowtLocalData extends DataClass implements Insertable<PowtLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String serialNo;
  final String rating;
  final int ratedVoltage_HV;
  final int ratedVoltage_LV;
  final String ratedCurrent_HV;
  final String ratedCurrent_LV;
  final String vectorGroup;
  final double impedanceVoltageLTap;
  final double impedanceVoltageRTap;
  final double impedanceVoltageHTap;
  final int frequency;
  final String typeOfCooling;
  final int noOfPhases;
  final String make;
  final int yom;
  final int noOfTaps;
  final int onOfNominalTaps;
  final int oilTemp;
  final int windingTemp;
  final int ambientTemp;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  PowtLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.serialNo,
      @required this.rating,
      @required this.ratedVoltage_HV,
      @required this.ratedVoltage_LV,
      @required this.ratedCurrent_HV,
      @required this.ratedCurrent_LV,
      @required this.vectorGroup,
      @required this.impedanceVoltageLTap,
      @required this.impedanceVoltageRTap,
      @required this.impedanceVoltageHTap,
      @required this.frequency,
      @required this.typeOfCooling,
      @required this.noOfPhases,
      @required this.make,
      @required this.yom,
      @required this.noOfTaps,
      @required this.onOfNominalTaps,
      @required this.oilTemp,
      @required this.windingTemp,
      @required this.ambientTemp,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory PowtLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowtLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      rating: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rating']),
      ratedVoltage_HV: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage_h_v']),
      ratedVoltage_LV: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage_l_v']),
      ratedCurrent_HV: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_current_h_v']),
      ratedCurrent_LV: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_current_l_v']),
      vectorGroup: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}vector_group']),
      impedanceVoltageLTap: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_l_tap']),
      impedanceVoltageRTap: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_r_tap']),
      impedanceVoltageHTap: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_h_tap']),
      frequency: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency']),
      typeOfCooling: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}type_of_cooling']),
      noOfPhases: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_phases']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      noOfTaps: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_taps']),
      onOfNominalTaps: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}on_of_nominal_taps']),
      oilTemp: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}oil_temp']),
      windingTemp: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}winding_temp']),
      ambientTemp: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ambient_temp']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || rating != null) {
      map['rating'] = Variable<String>(rating);
    }
    if (!nullToAbsent || ratedVoltage_HV != null) {
      map['rated_voltage_h_v'] = Variable<int>(ratedVoltage_HV);
    }
    if (!nullToAbsent || ratedVoltage_LV != null) {
      map['rated_voltage_l_v'] = Variable<int>(ratedVoltage_LV);
    }
    if (!nullToAbsent || ratedCurrent_HV != null) {
      map['rated_current_h_v'] = Variable<String>(ratedCurrent_HV);
    }
    if (!nullToAbsent || ratedCurrent_LV != null) {
      map['rated_current_l_v'] = Variable<String>(ratedCurrent_LV);
    }
    if (!nullToAbsent || vectorGroup != null) {
      map['vector_group'] = Variable<String>(vectorGroup);
    }
    if (!nullToAbsent || impedanceVoltageLTap != null) {
      map['impedance_voltage_l_tap'] = Variable<double>(impedanceVoltageLTap);
    }
    if (!nullToAbsent || impedanceVoltageRTap != null) {
      map['impedance_voltage_r_tap'] = Variable<double>(impedanceVoltageRTap);
    }
    if (!nullToAbsent || impedanceVoltageHTap != null) {
      map['impedance_voltage_h_tap'] = Variable<double>(impedanceVoltageHTap);
    }
    if (!nullToAbsent || frequency != null) {
      map['frequency'] = Variable<int>(frequency);
    }
    if (!nullToAbsent || typeOfCooling != null) {
      map['type_of_cooling'] = Variable<String>(typeOfCooling);
    }
    if (!nullToAbsent || noOfPhases != null) {
      map['no_of_phases'] = Variable<int>(noOfPhases);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || noOfTaps != null) {
      map['no_of_taps'] = Variable<int>(noOfTaps);
    }
    if (!nullToAbsent || onOfNominalTaps != null) {
      map['on_of_nominal_taps'] = Variable<int>(onOfNominalTaps);
    }
    if (!nullToAbsent || oilTemp != null) {
      map['oil_temp'] = Variable<int>(oilTemp);
    }
    if (!nullToAbsent || windingTemp != null) {
      map['winding_temp'] = Variable<int>(windingTemp);
    }
    if (!nullToAbsent || ambientTemp != null) {
      map['ambient_temp'] = Variable<int>(ambientTemp);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  PowtLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PowtLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      rating:
          rating == null && nullToAbsent ? const Value.absent() : Value(rating),
      ratedVoltage_HV: ratedVoltage_HV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage_HV),
      ratedVoltage_LV: ratedVoltage_LV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage_LV),
      ratedCurrent_HV: ratedCurrent_HV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedCurrent_HV),
      ratedCurrent_LV: ratedCurrent_LV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedCurrent_LV),
      vectorGroup: vectorGroup == null && nullToAbsent
          ? const Value.absent()
          : Value(vectorGroup),
      impedanceVoltageLTap: impedanceVoltageLTap == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltageLTap),
      impedanceVoltageRTap: impedanceVoltageRTap == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltageRTap),
      impedanceVoltageHTap: impedanceVoltageHTap == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltageHTap),
      frequency: frequency == null && nullToAbsent
          ? const Value.absent()
          : Value(frequency),
      typeOfCooling: typeOfCooling == null && nullToAbsent
          ? const Value.absent()
          : Value(typeOfCooling),
      noOfPhases: noOfPhases == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfPhases),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      noOfTaps: noOfTaps == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfTaps),
      onOfNominalTaps: onOfNominalTaps == null && nullToAbsent
          ? const Value.absent()
          : Value(onOfNominalTaps),
      oilTemp: oilTemp == null && nullToAbsent
          ? const Value.absent()
          : Value(oilTemp),
      windingTemp: windingTemp == null && nullToAbsent
          ? const Value.absent()
          : Value(windingTemp),
      ambientTemp: ambientTemp == null && nullToAbsent
          ? const Value.absent()
          : Value(ambientTemp),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory PowtLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowtLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      rating: serializer.fromJson<String>(json['rating']),
      ratedVoltage_HV: serializer.fromJson<int>(json['ratedVoltage_HV']),
      ratedVoltage_LV: serializer.fromJson<int>(json['ratedVoltage_LV']),
      ratedCurrent_HV: serializer.fromJson<String>(json['ratedCurrent_HV']),
      ratedCurrent_LV: serializer.fromJson<String>(json['ratedCurrent_LV']),
      vectorGroup: serializer.fromJson<String>(json['vectorGroup']),
      impedanceVoltageLTap:
          serializer.fromJson<double>(json['impedanceVoltageLTap']),
      impedanceVoltageRTap:
          serializer.fromJson<double>(json['impedanceVoltageRTap']),
      impedanceVoltageHTap:
          serializer.fromJson<double>(json['impedanceVoltageHTap']),
      frequency: serializer.fromJson<int>(json['frequency']),
      typeOfCooling: serializer.fromJson<String>(json['typeOfCooling']),
      noOfPhases: serializer.fromJson<int>(json['noOfPhases']),
      make: serializer.fromJson<String>(json['make']),
      yom: serializer.fromJson<int>(json['yom']),
      noOfTaps: serializer.fromJson<int>(json['noOfTaps']),
      onOfNominalTaps: serializer.fromJson<int>(json['onOfNominalTaps']),
      oilTemp: serializer.fromJson<int>(json['oilTemp']),
      windingTemp: serializer.fromJson<int>(json['windingTemp']),
      ambientTemp: serializer.fromJson<int>(json['ambientTemp']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'serialNo': serializer.toJson<String>(serialNo),
      'rating': serializer.toJson<String>(rating),
      'ratedVoltage_HV': serializer.toJson<int>(ratedVoltage_HV),
      'ratedVoltage_LV': serializer.toJson<int>(ratedVoltage_LV),
      'ratedCurrent_HV': serializer.toJson<String>(ratedCurrent_HV),
      'ratedCurrent_LV': serializer.toJson<String>(ratedCurrent_LV),
      'vectorGroup': serializer.toJson<String>(vectorGroup),
      'impedanceVoltageLTap': serializer.toJson<double>(impedanceVoltageLTap),
      'impedanceVoltageRTap': serializer.toJson<double>(impedanceVoltageRTap),
      'impedanceVoltageHTap': serializer.toJson<double>(impedanceVoltageHTap),
      'frequency': serializer.toJson<int>(frequency),
      'typeOfCooling': serializer.toJson<String>(typeOfCooling),
      'noOfPhases': serializer.toJson<int>(noOfPhases),
      'make': serializer.toJson<String>(make),
      'yom': serializer.toJson<int>(yom),
      'noOfTaps': serializer.toJson<int>(noOfTaps),
      'onOfNominalTaps': serializer.toJson<int>(onOfNominalTaps),
      'oilTemp': serializer.toJson<int>(oilTemp),
      'windingTemp': serializer.toJson<int>(windingTemp),
      'ambientTemp': serializer.toJson<int>(ambientTemp),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  PowtLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String serialNo,
          String rating,
          int ratedVoltage_HV,
          int ratedVoltage_LV,
          String ratedCurrent_HV,
          String ratedCurrent_LV,
          String vectorGroup,
          double impedanceVoltageLTap,
          double impedanceVoltageRTap,
          double impedanceVoltageHTap,
          int frequency,
          String typeOfCooling,
          int noOfPhases,
          String make,
          int yom,
          int noOfTaps,
          int onOfNominalTaps,
          int oilTemp,
          int windingTemp,
          int ambientTemp,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      PowtLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        serialNo: serialNo ?? this.serialNo,
        rating: rating ?? this.rating,
        ratedVoltage_HV: ratedVoltage_HV ?? this.ratedVoltage_HV,
        ratedVoltage_LV: ratedVoltage_LV ?? this.ratedVoltage_LV,
        ratedCurrent_HV: ratedCurrent_HV ?? this.ratedCurrent_HV,
        ratedCurrent_LV: ratedCurrent_LV ?? this.ratedCurrent_LV,
        vectorGroup: vectorGroup ?? this.vectorGroup,
        impedanceVoltageLTap: impedanceVoltageLTap ?? this.impedanceVoltageLTap,
        impedanceVoltageRTap: impedanceVoltageRTap ?? this.impedanceVoltageRTap,
        impedanceVoltageHTap: impedanceVoltageHTap ?? this.impedanceVoltageHTap,
        frequency: frequency ?? this.frequency,
        typeOfCooling: typeOfCooling ?? this.typeOfCooling,
        noOfPhases: noOfPhases ?? this.noOfPhases,
        make: make ?? this.make,
        yom: yom ?? this.yom,
        noOfTaps: noOfTaps ?? this.noOfTaps,
        onOfNominalTaps: onOfNominalTaps ?? this.onOfNominalTaps,
        oilTemp: oilTemp ?? this.oilTemp,
        windingTemp: windingTemp ?? this.windingTemp,
        ambientTemp: ambientTemp ?? this.ambientTemp,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('PowtLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('rating: $rating, ')
          ..write('ratedVoltage_HV: $ratedVoltage_HV, ')
          ..write('ratedVoltage_LV: $ratedVoltage_LV, ')
          ..write('ratedCurrent_HV: $ratedCurrent_HV, ')
          ..write('ratedCurrent_LV: $ratedCurrent_LV, ')
          ..write('vectorGroup: $vectorGroup, ')
          ..write('impedanceVoltageLTap: $impedanceVoltageLTap, ')
          ..write('impedanceVoltageRTap: $impedanceVoltageRTap, ')
          ..write('impedanceVoltageHTap: $impedanceVoltageHTap, ')
          ..write('frequency: $frequency, ')
          ..write('typeOfCooling: $typeOfCooling, ')
          ..write('noOfPhases: $noOfPhases, ')
          ..write('make: $make, ')
          ..write('yom: $yom, ')
          ..write('noOfTaps: $noOfTaps, ')
          ..write('onOfNominalTaps: $onOfNominalTaps, ')
          ..write('oilTemp: $oilTemp, ')
          ..write('windingTemp: $windingTemp, ')
          ..write('ambientTemp: $ambientTemp, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        rating,
        ratedVoltage_HV,
        ratedVoltage_LV,
        ratedCurrent_HV,
        ratedCurrent_LV,
        vectorGroup,
        impedanceVoltageLTap,
        impedanceVoltageRTap,
        impedanceVoltageHTap,
        frequency,
        typeOfCooling,
        noOfPhases,
        make,
        yom,
        noOfTaps,
        onOfNominalTaps,
        oilTemp,
        windingTemp,
        ambientTemp,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowtLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.serialNo == this.serialNo &&
          other.rating == this.rating &&
          other.ratedVoltage_HV == this.ratedVoltage_HV &&
          other.ratedVoltage_LV == this.ratedVoltage_LV &&
          other.ratedCurrent_HV == this.ratedCurrent_HV &&
          other.ratedCurrent_LV == this.ratedCurrent_LV &&
          other.vectorGroup == this.vectorGroup &&
          other.impedanceVoltageLTap == this.impedanceVoltageLTap &&
          other.impedanceVoltageRTap == this.impedanceVoltageRTap &&
          other.impedanceVoltageHTap == this.impedanceVoltageHTap &&
          other.frequency == this.frequency &&
          other.typeOfCooling == this.typeOfCooling &&
          other.noOfPhases == this.noOfPhases &&
          other.make == this.make &&
          other.yom == this.yom &&
          other.noOfTaps == this.noOfTaps &&
          other.onOfNominalTaps == this.onOfNominalTaps &&
          other.oilTemp == this.oilTemp &&
          other.windingTemp == this.windingTemp &&
          other.ambientTemp == this.ambientTemp &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class PowtLocalDatasourceImplCompanion extends UpdateCompanion<PowtLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> serialNo;
  final Value<String> rating;
  final Value<int> ratedVoltage_HV;
  final Value<int> ratedVoltage_LV;
  final Value<String> ratedCurrent_HV;
  final Value<String> ratedCurrent_LV;
  final Value<String> vectorGroup;
  final Value<double> impedanceVoltageLTap;
  final Value<double> impedanceVoltageRTap;
  final Value<double> impedanceVoltageHTap;
  final Value<int> frequency;
  final Value<String> typeOfCooling;
  final Value<int> noOfPhases;
  final Value<String> make;
  final Value<int> yom;
  final Value<int> noOfTaps;
  final Value<int> onOfNominalTaps;
  final Value<int> oilTemp;
  final Value<int> windingTemp;
  final Value<int> ambientTemp;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const PowtLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.rating = const Value.absent(),
    this.ratedVoltage_HV = const Value.absent(),
    this.ratedVoltage_LV = const Value.absent(),
    this.ratedCurrent_HV = const Value.absent(),
    this.ratedCurrent_LV = const Value.absent(),
    this.vectorGroup = const Value.absent(),
    this.impedanceVoltageLTap = const Value.absent(),
    this.impedanceVoltageRTap = const Value.absent(),
    this.impedanceVoltageHTap = const Value.absent(),
    this.frequency = const Value.absent(),
    this.typeOfCooling = const Value.absent(),
    this.noOfPhases = const Value.absent(),
    this.make = const Value.absent(),
    this.yom = const Value.absent(),
    this.noOfTaps = const Value.absent(),
    this.onOfNominalTaps = const Value.absent(),
    this.oilTemp = const Value.absent(),
    this.windingTemp = const Value.absent(),
    this.ambientTemp = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  PowtLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String serialNo,
    @required String rating,
    @required int ratedVoltage_HV,
    @required int ratedVoltage_LV,
    @required String ratedCurrent_HV,
    @required String ratedCurrent_LV,
    @required String vectorGroup,
    @required double impedanceVoltageLTap,
    @required double impedanceVoltageRTap,
    @required double impedanceVoltageHTap,
    @required int frequency,
    @required String typeOfCooling,
    @required int noOfPhases,
    @required String make,
    @required int yom,
    @required int noOfTaps,
    @required int onOfNominalTaps,
    @required int oilTemp,
    @required int windingTemp,
    @required int ambientTemp,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        serialNo = Value(serialNo),
        rating = Value(rating),
        ratedVoltage_HV = Value(ratedVoltage_HV),
        ratedVoltage_LV = Value(ratedVoltage_LV),
        ratedCurrent_HV = Value(ratedCurrent_HV),
        ratedCurrent_LV = Value(ratedCurrent_LV),
        vectorGroup = Value(vectorGroup),
        impedanceVoltageLTap = Value(impedanceVoltageLTap),
        impedanceVoltageRTap = Value(impedanceVoltageRTap),
        impedanceVoltageHTap = Value(impedanceVoltageHTap),
        frequency = Value(frequency),
        typeOfCooling = Value(typeOfCooling),
        noOfPhases = Value(noOfPhases),
        make = Value(make),
        yom = Value(yom),
        noOfTaps = Value(noOfTaps),
        onOfNominalTaps = Value(onOfNominalTaps),
        oilTemp = Value(oilTemp),
        windingTemp = Value(windingTemp),
        ambientTemp = Value(ambientTemp),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<PowtLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> serialNo,
    Expression<String> rating,
    Expression<int> ratedVoltage_HV,
    Expression<int> ratedVoltage_LV,
    Expression<String> ratedCurrent_HV,
    Expression<String> ratedCurrent_LV,
    Expression<String> vectorGroup,
    Expression<double> impedanceVoltageLTap,
    Expression<double> impedanceVoltageRTap,
    Expression<double> impedanceVoltageHTap,
    Expression<int> frequency,
    Expression<String> typeOfCooling,
    Expression<int> noOfPhases,
    Expression<String> make,
    Expression<int> yom,
    Expression<int> noOfTaps,
    Expression<int> onOfNominalTaps,
    Expression<int> oilTemp,
    Expression<int> windingTemp,
    Expression<int> ambientTemp,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (serialNo != null) 'serial_no': serialNo,
      if (rating != null) 'rating': rating,
      if (ratedVoltage_HV != null) 'rated_voltage_h_v': ratedVoltage_HV,
      if (ratedVoltage_LV != null) 'rated_voltage_l_v': ratedVoltage_LV,
      if (ratedCurrent_HV != null) 'rated_current_h_v': ratedCurrent_HV,
      if (ratedCurrent_LV != null) 'rated_current_l_v': ratedCurrent_LV,
      if (vectorGroup != null) 'vector_group': vectorGroup,
      if (impedanceVoltageLTap != null)
        'impedance_voltage_l_tap': impedanceVoltageLTap,
      if (impedanceVoltageRTap != null)
        'impedance_voltage_r_tap': impedanceVoltageRTap,
      if (impedanceVoltageHTap != null)
        'impedance_voltage_h_tap': impedanceVoltageHTap,
      if (frequency != null) 'frequency': frequency,
      if (typeOfCooling != null) 'type_of_cooling': typeOfCooling,
      if (noOfPhases != null) 'no_of_phases': noOfPhases,
      if (make != null) 'make': make,
      if (yom != null) 'yom': yom,
      if (noOfTaps != null) 'no_of_taps': noOfTaps,
      if (onOfNominalTaps != null) 'on_of_nominal_taps': onOfNominalTaps,
      if (oilTemp != null) 'oil_temp': oilTemp,
      if (windingTemp != null) 'winding_temp': windingTemp,
      if (ambientTemp != null) 'ambient_temp': ambientTemp,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  PowtLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> serialNo,
      Value<String> rating,
      Value<int> ratedVoltage_HV,
      Value<int> ratedVoltage_LV,
      Value<String> ratedCurrent_HV,
      Value<String> ratedCurrent_LV,
      Value<String> vectorGroup,
      Value<double> impedanceVoltageLTap,
      Value<double> impedanceVoltageRTap,
      Value<double> impedanceVoltageHTap,
      Value<int> frequency,
      Value<String> typeOfCooling,
      Value<int> noOfPhases,
      Value<String> make,
      Value<int> yom,
      Value<int> noOfTaps,
      Value<int> onOfNominalTaps,
      Value<int> oilTemp,
      Value<int> windingTemp,
      Value<int> ambientTemp,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return PowtLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      serialNo: serialNo ?? this.serialNo,
      rating: rating ?? this.rating,
      ratedVoltage_HV: ratedVoltage_HV ?? this.ratedVoltage_HV,
      ratedVoltage_LV: ratedVoltage_LV ?? this.ratedVoltage_LV,
      ratedCurrent_HV: ratedCurrent_HV ?? this.ratedCurrent_HV,
      ratedCurrent_LV: ratedCurrent_LV ?? this.ratedCurrent_LV,
      vectorGroup: vectorGroup ?? this.vectorGroup,
      impedanceVoltageLTap: impedanceVoltageLTap ?? this.impedanceVoltageLTap,
      impedanceVoltageRTap: impedanceVoltageRTap ?? this.impedanceVoltageRTap,
      impedanceVoltageHTap: impedanceVoltageHTap ?? this.impedanceVoltageHTap,
      frequency: frequency ?? this.frequency,
      typeOfCooling: typeOfCooling ?? this.typeOfCooling,
      noOfPhases: noOfPhases ?? this.noOfPhases,
      make: make ?? this.make,
      yom: yom ?? this.yom,
      noOfTaps: noOfTaps ?? this.noOfTaps,
      onOfNominalTaps: onOfNominalTaps ?? this.onOfNominalTaps,
      oilTemp: oilTemp ?? this.oilTemp,
      windingTemp: windingTemp ?? this.windingTemp,
      ambientTemp: ambientTemp ?? this.ambientTemp,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (rating.present) {
      map['rating'] = Variable<String>(rating.value);
    }
    if (ratedVoltage_HV.present) {
      map['rated_voltage_h_v'] = Variable<int>(ratedVoltage_HV.value);
    }
    if (ratedVoltage_LV.present) {
      map['rated_voltage_l_v'] = Variable<int>(ratedVoltage_LV.value);
    }
    if (ratedCurrent_HV.present) {
      map['rated_current_h_v'] = Variable<String>(ratedCurrent_HV.value);
    }
    if (ratedCurrent_LV.present) {
      map['rated_current_l_v'] = Variable<String>(ratedCurrent_LV.value);
    }
    if (vectorGroup.present) {
      map['vector_group'] = Variable<String>(vectorGroup.value);
    }
    if (impedanceVoltageLTap.present) {
      map['impedance_voltage_l_tap'] =
          Variable<double>(impedanceVoltageLTap.value);
    }
    if (impedanceVoltageRTap.present) {
      map['impedance_voltage_r_tap'] =
          Variable<double>(impedanceVoltageRTap.value);
    }
    if (impedanceVoltageHTap.present) {
      map['impedance_voltage_h_tap'] =
          Variable<double>(impedanceVoltageHTap.value);
    }
    if (frequency.present) {
      map['frequency'] = Variable<int>(frequency.value);
    }
    if (typeOfCooling.present) {
      map['type_of_cooling'] = Variable<String>(typeOfCooling.value);
    }
    if (noOfPhases.present) {
      map['no_of_phases'] = Variable<int>(noOfPhases.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (noOfTaps.present) {
      map['no_of_taps'] = Variable<int>(noOfTaps.value);
    }
    if (onOfNominalTaps.present) {
      map['on_of_nominal_taps'] = Variable<int>(onOfNominalTaps.value);
    }
    if (oilTemp.present) {
      map['oil_temp'] = Variable<int>(oilTemp.value);
    }
    if (windingTemp.present) {
      map['winding_temp'] = Variable<int>(windingTemp.value);
    }
    if (ambientTemp.present) {
      map['ambient_temp'] = Variable<int>(ambientTemp.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PowtLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('rating: $rating, ')
          ..write('ratedVoltage_HV: $ratedVoltage_HV, ')
          ..write('ratedVoltage_LV: $ratedVoltage_LV, ')
          ..write('ratedCurrent_HV: $ratedCurrent_HV, ')
          ..write('ratedCurrent_LV: $ratedCurrent_LV, ')
          ..write('vectorGroup: $vectorGroup, ')
          ..write('impedanceVoltageLTap: $impedanceVoltageLTap, ')
          ..write('impedanceVoltageRTap: $impedanceVoltageRTap, ')
          ..write('impedanceVoltageHTap: $impedanceVoltageHTap, ')
          ..write('frequency: $frequency, ')
          ..write('typeOfCooling: $typeOfCooling, ')
          ..write('noOfPhases: $noOfPhases, ')
          ..write('make: $make, ')
          ..write('yom: $yom, ')
          ..write('noOfTaps: $noOfTaps, ')
          ..write('onOfNominalTaps: $onOfNominalTaps, ')
          ..write('oilTemp: $oilTemp, ')
          ..write('windingTemp: $windingTemp, ')
          ..write('ambientTemp: $ambientTemp, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $PowtLocalDatasourceImplTable extends PowtLocalDatasourceImpl
    with TableInfo<$PowtLocalDatasourceImplTable, PowtLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PowtLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratingMeta = const VerificationMeta('rating');
  GeneratedColumn<String> _rating;
  @override
  GeneratedColumn<String> get rating => _rating ??= GeneratedColumn<String>(
      'rating', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratedVoltage_HVMeta =
      const VerificationMeta('ratedVoltage_HV');
  GeneratedColumn<int> _ratedVoltage_HV;
  @override
  GeneratedColumn<int> get ratedVoltage_HV => _ratedVoltage_HV ??=
      GeneratedColumn<int>('rated_voltage_h_v', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedVoltage_LVMeta =
      const VerificationMeta('ratedVoltage_LV');
  GeneratedColumn<int> _ratedVoltage_LV;
  @override
  GeneratedColumn<int> get ratedVoltage_LV => _ratedVoltage_LV ??=
      GeneratedColumn<int>('rated_voltage_l_v', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedCurrent_HVMeta =
      const VerificationMeta('ratedCurrent_HV');
  GeneratedColumn<String> _ratedCurrent_HV;
  @override
  GeneratedColumn<String> get ratedCurrent_HV => _ratedCurrent_HV ??=
      GeneratedColumn<String>('rated_current_h_v', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _ratedCurrent_LVMeta =
      const VerificationMeta('ratedCurrent_LV');
  GeneratedColumn<String> _ratedCurrent_LV;
  @override
  GeneratedColumn<String> get ratedCurrent_LV => _ratedCurrent_LV ??=
      GeneratedColumn<String>('rated_current_l_v', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _vectorGroupMeta =
      const VerificationMeta('vectorGroup');
  GeneratedColumn<String> _vectorGroup;
  @override
  GeneratedColumn<String> get vectorGroup => _vectorGroup ??=
      GeneratedColumn<String>('vector_group', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltageLTapMeta =
      const VerificationMeta('impedanceVoltageLTap');
  GeneratedColumn<double> _impedanceVoltageLTap;
  @override
  GeneratedColumn<double> get impedanceVoltageLTap => _impedanceVoltageLTap ??=
      GeneratedColumn<double>('impedance_voltage_l_tap', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltageRTapMeta =
      const VerificationMeta('impedanceVoltageRTap');
  GeneratedColumn<double> _impedanceVoltageRTap;
  @override
  GeneratedColumn<double> get impedanceVoltageRTap => _impedanceVoltageRTap ??=
      GeneratedColumn<double>('impedance_voltage_r_tap', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltageHTapMeta =
      const VerificationMeta('impedanceVoltageHTap');
  GeneratedColumn<double> _impedanceVoltageHTap;
  @override
  GeneratedColumn<double> get impedanceVoltageHTap => _impedanceVoltageHTap ??=
      GeneratedColumn<double>('impedance_voltage_h_tap', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _frequencyMeta = const VerificationMeta('frequency');
  GeneratedColumn<int> _frequency;
  @override
  GeneratedColumn<int> get frequency =>
      _frequency ??= GeneratedColumn<int>('frequency', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _typeOfCoolingMeta =
      const VerificationMeta('typeOfCooling');
  GeneratedColumn<String> _typeOfCooling;
  @override
  GeneratedColumn<String> get typeOfCooling => _typeOfCooling ??=
      GeneratedColumn<String>('type_of_cooling', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _noOfPhasesMeta = const VerificationMeta('noOfPhases');
  GeneratedColumn<int> _noOfPhases;
  @override
  GeneratedColumn<int> get noOfPhases =>
      _noOfPhases ??= GeneratedColumn<int>('no_of_phases', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _noOfTapsMeta = const VerificationMeta('noOfTaps');
  GeneratedColumn<int> _noOfTaps;
  @override
  GeneratedColumn<int> get noOfTaps =>
      _noOfTaps ??= GeneratedColumn<int>('no_of_taps', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _onOfNominalTapsMeta =
      const VerificationMeta('onOfNominalTaps');
  GeneratedColumn<int> _onOfNominalTaps;
  @override
  GeneratedColumn<int> get onOfNominalTaps => _onOfNominalTaps ??=
      GeneratedColumn<int>('on_of_nominal_taps', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _oilTempMeta = const VerificationMeta('oilTemp');
  GeneratedColumn<int> _oilTemp;
  @override
  GeneratedColumn<int> get oilTemp =>
      _oilTemp ??= GeneratedColumn<int>('oil_temp', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _windingTempMeta =
      const VerificationMeta('windingTemp');
  GeneratedColumn<int> _windingTemp;
  @override
  GeneratedColumn<int> get windingTemp =>
      _windingTemp ??= GeneratedColumn<int>('winding_temp', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ambientTempMeta =
      const VerificationMeta('ambientTemp');
  GeneratedColumn<int> _ambientTemp;
  @override
  GeneratedColumn<int> get ambientTemp =>
      _ambientTemp ??= GeneratedColumn<int>('ambient_temp', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        rating,
        ratedVoltage_HV,
        ratedVoltage_LV,
        ratedCurrent_HV,
        ratedCurrent_LV,
        vectorGroup,
        impedanceVoltageLTap,
        impedanceVoltageRTap,
        impedanceVoltageHTap,
        frequency,
        typeOfCooling,
        noOfPhases,
        make,
        yom,
        noOfTaps,
        onOfNominalTaps,
        oilTemp,
        windingTemp,
        ambientTemp,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'powt_local_datasource_impl';
  @override
  String get actualTableName => 'powt_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PowtLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('rating')) {
      context.handle(_ratingMeta,
          rating.isAcceptableOrUnknown(data['rating'], _ratingMeta));
    } else if (isInserting) {
      context.missing(_ratingMeta);
    }
    if (data.containsKey('rated_voltage_h_v')) {
      context.handle(
          _ratedVoltage_HVMeta,
          ratedVoltage_HV.isAcceptableOrUnknown(
              data['rated_voltage_h_v'], _ratedVoltage_HVMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltage_HVMeta);
    }
    if (data.containsKey('rated_voltage_l_v')) {
      context.handle(
          _ratedVoltage_LVMeta,
          ratedVoltage_LV.isAcceptableOrUnknown(
              data['rated_voltage_l_v'], _ratedVoltage_LVMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltage_LVMeta);
    }
    if (data.containsKey('rated_current_h_v')) {
      context.handle(
          _ratedCurrent_HVMeta,
          ratedCurrent_HV.isAcceptableOrUnknown(
              data['rated_current_h_v'], _ratedCurrent_HVMeta));
    } else if (isInserting) {
      context.missing(_ratedCurrent_HVMeta);
    }
    if (data.containsKey('rated_current_l_v')) {
      context.handle(
          _ratedCurrent_LVMeta,
          ratedCurrent_LV.isAcceptableOrUnknown(
              data['rated_current_l_v'], _ratedCurrent_LVMeta));
    } else if (isInserting) {
      context.missing(_ratedCurrent_LVMeta);
    }
    if (data.containsKey('vector_group')) {
      context.handle(
          _vectorGroupMeta,
          vectorGroup.isAcceptableOrUnknown(
              data['vector_group'], _vectorGroupMeta));
    } else if (isInserting) {
      context.missing(_vectorGroupMeta);
    }
    if (data.containsKey('impedance_voltage_l_tap')) {
      context.handle(
          _impedanceVoltageLTapMeta,
          impedanceVoltageLTap.isAcceptableOrUnknown(
              data['impedance_voltage_l_tap'], _impedanceVoltageLTapMeta));
    } else if (isInserting) {
      context.missing(_impedanceVoltageLTapMeta);
    }
    if (data.containsKey('impedance_voltage_r_tap')) {
      context.handle(
          _impedanceVoltageRTapMeta,
          impedanceVoltageRTap.isAcceptableOrUnknown(
              data['impedance_voltage_r_tap'], _impedanceVoltageRTapMeta));
    } else if (isInserting) {
      context.missing(_impedanceVoltageRTapMeta);
    }
    if (data.containsKey('impedance_voltage_h_tap')) {
      context.handle(
          _impedanceVoltageHTapMeta,
          impedanceVoltageHTap.isAcceptableOrUnknown(
              data['impedance_voltage_h_tap'], _impedanceVoltageHTapMeta));
    } else if (isInserting) {
      context.missing(_impedanceVoltageHTapMeta);
    }
    if (data.containsKey('frequency')) {
      context.handle(_frequencyMeta,
          frequency.isAcceptableOrUnknown(data['frequency'], _frequencyMeta));
    } else if (isInserting) {
      context.missing(_frequencyMeta);
    }
    if (data.containsKey('type_of_cooling')) {
      context.handle(
          _typeOfCoolingMeta,
          typeOfCooling.isAcceptableOrUnknown(
              data['type_of_cooling'], _typeOfCoolingMeta));
    } else if (isInserting) {
      context.missing(_typeOfCoolingMeta);
    }
    if (data.containsKey('no_of_phases')) {
      context.handle(
          _noOfPhasesMeta,
          noOfPhases.isAcceptableOrUnknown(
              data['no_of_phases'], _noOfPhasesMeta));
    } else if (isInserting) {
      context.missing(_noOfPhasesMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('no_of_taps')) {
      context.handle(_noOfTapsMeta,
          noOfTaps.isAcceptableOrUnknown(data['no_of_taps'], _noOfTapsMeta));
    } else if (isInserting) {
      context.missing(_noOfTapsMeta);
    }
    if (data.containsKey('on_of_nominal_taps')) {
      context.handle(
          _onOfNominalTapsMeta,
          onOfNominalTaps.isAcceptableOrUnknown(
              data['on_of_nominal_taps'], _onOfNominalTapsMeta));
    } else if (isInserting) {
      context.missing(_onOfNominalTapsMeta);
    }
    if (data.containsKey('oil_temp')) {
      context.handle(_oilTempMeta,
          oilTemp.isAcceptableOrUnknown(data['oil_temp'], _oilTempMeta));
    } else if (isInserting) {
      context.missing(_oilTempMeta);
    }
    if (data.containsKey('winding_temp')) {
      context.handle(
          _windingTempMeta,
          windingTemp.isAcceptableOrUnknown(
              data['winding_temp'], _windingTempMeta));
    } else if (isInserting) {
      context.missing(_windingTempMeta);
    }
    if (data.containsKey('ambient_temp')) {
      context.handle(
          _ambientTempMeta,
          ambientTemp.isAcceptableOrUnknown(
              data['ambient_temp'], _ambientTempMeta));
    } else if (isInserting) {
      context.missing(_ambientTempMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowtLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowtLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PowtLocalDatasourceImplTable createAlias(String alias) {
    return $PowtLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowtcoreIRLocalData extends DataClass
    implements Insertable<PowtcoreIRLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double hvE_60;
  final double hvE_600;
  final double hvLV_60;
  final double hvLV_600;
  final double lvE_60;
  final double lvE_600;
  final double cE_60;
  final double cT_60;
  final double tE_60;
  PowtcoreIRLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.hvE_60,
      @required this.hvE_600,
      @required this.hvLV_60,
      @required this.hvLV_600,
      @required this.lvE_60,
      @required this.lvE_600,
      @required this.cE_60,
      @required this.cT_60,
      @required this.tE_60});
  factory PowtcoreIRLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowtcoreIRLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      hvE_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_60']),
      hvE_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_600']),
      hvLV_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_l_v_60']),
      hvLV_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_l_v_600']),
      lvE_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_60']),
      lvE_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_600']),
      cE_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c_e_60']),
      cT_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c_t_60']),
      tE_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}t_e_60']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || hvE_60 != null) {
      map['hv_e_60'] = Variable<double>(hvE_60);
    }
    if (!nullToAbsent || hvE_600 != null) {
      map['hv_e_600'] = Variable<double>(hvE_600);
    }
    if (!nullToAbsent || hvLV_60 != null) {
      map['hv_l_v_60'] = Variable<double>(hvLV_60);
    }
    if (!nullToAbsent || hvLV_600 != null) {
      map['hv_l_v_600'] = Variable<double>(hvLV_600);
    }
    if (!nullToAbsent || lvE_60 != null) {
      map['lv_e_60'] = Variable<double>(lvE_60);
    }
    if (!nullToAbsent || lvE_600 != null) {
      map['lv_e_600'] = Variable<double>(lvE_600);
    }
    if (!nullToAbsent || cE_60 != null) {
      map['c_e_60'] = Variable<double>(cE_60);
    }
    if (!nullToAbsent || cT_60 != null) {
      map['c_t_60'] = Variable<double>(cT_60);
    }
    if (!nullToAbsent || tE_60 != null) {
      map['t_e_60'] = Variable<double>(tE_60);
    }
    return map;
  }

  PowtcoreIRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PowtcoreIRLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      hvE_60:
          hvE_60 == null && nullToAbsent ? const Value.absent() : Value(hvE_60),
      hvE_600: hvE_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_600),
      hvLV_60: hvLV_60 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLV_60),
      hvLV_600: hvLV_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLV_600),
      lvE_60:
          lvE_60 == null && nullToAbsent ? const Value.absent() : Value(lvE_60),
      lvE_600: lvE_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_600),
      cE_60:
          cE_60 == null && nullToAbsent ? const Value.absent() : Value(cE_60),
      cT_60:
          cT_60 == null && nullToAbsent ? const Value.absent() : Value(cT_60),
      tE_60:
          tE_60 == null && nullToAbsent ? const Value.absent() : Value(tE_60),
    );
  }

  factory PowtcoreIRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowtcoreIRLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      hvE_60: serializer.fromJson<double>(json['hvE_60']),
      hvE_600: serializer.fromJson<double>(json['hvE_600']),
      hvLV_60: serializer.fromJson<double>(json['hvLV_60']),
      hvLV_600: serializer.fromJson<double>(json['hvLV_600']),
      lvE_60: serializer.fromJson<double>(json['lvE_60']),
      lvE_600: serializer.fromJson<double>(json['lvE_600']),
      cE_60: serializer.fromJson<double>(json['cE_60']),
      cT_60: serializer.fromJson<double>(json['cT_60']),
      tE_60: serializer.fromJson<double>(json['tE_60']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'hvE_60': serializer.toJson<double>(hvE_60),
      'hvE_600': serializer.toJson<double>(hvE_600),
      'hvLV_60': serializer.toJson<double>(hvLV_60),
      'hvLV_600': serializer.toJson<double>(hvLV_600),
      'lvE_60': serializer.toJson<double>(lvE_60),
      'lvE_600': serializer.toJson<double>(lvE_600),
      'cE_60': serializer.toJson<double>(cE_60),
      'cT_60': serializer.toJson<double>(cT_60),
      'tE_60': serializer.toJson<double>(tE_60),
    };
  }

  PowtcoreIRLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double hvE_60,
          double hvE_600,
          double hvLV_60,
          double hvLV_600,
          double lvE_60,
          double lvE_600,
          double cE_60,
          double cT_60,
          double tE_60}) =>
      PowtcoreIRLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        hvE_60: hvE_60 ?? this.hvE_60,
        hvE_600: hvE_600 ?? this.hvE_600,
        hvLV_60: hvLV_60 ?? this.hvLV_60,
        hvLV_600: hvLV_600 ?? this.hvLV_600,
        lvE_60: lvE_60 ?? this.lvE_60,
        lvE_600: lvE_600 ?? this.lvE_600,
        cE_60: cE_60 ?? this.cE_60,
        cT_60: cT_60 ?? this.cT_60,
        tE_60: tE_60 ?? this.tE_60,
      );
  @override
  String toString() {
    return (StringBuffer('PowtcoreIRLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('hvE_60: $hvE_60, ')
          ..write('hvE_600: $hvE_600, ')
          ..write('hvLV_60: $hvLV_60, ')
          ..write('hvLV_600: $hvLV_600, ')
          ..write('lvE_60: $lvE_60, ')
          ..write('lvE_600: $lvE_600, ')
          ..write('cE_60: $cE_60, ')
          ..write('cT_60: $cT_60, ')
          ..write('tE_60: $tE_60')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      equipmentUsed,
      updateDate,
      hvE_60,
      hvE_600,
      hvLV_60,
      hvLV_600,
      lvE_60,
      lvE_600,
      cE_60,
      cT_60,
      tE_60);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowtcoreIRLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.hvE_60 == this.hvE_60 &&
          other.hvE_600 == this.hvE_600 &&
          other.hvLV_60 == this.hvLV_60 &&
          other.hvLV_600 == this.hvLV_600 &&
          other.lvE_60 == this.lvE_60 &&
          other.lvE_600 == this.lvE_600 &&
          other.cE_60 == this.cE_60 &&
          other.cT_60 == this.cT_60 &&
          other.tE_60 == this.tE_60);
}

class PowtcoreIRLocalDatasourceImplCompanion
    extends UpdateCompanion<PowtcoreIRLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> hvE_60;
  final Value<double> hvE_600;
  final Value<double> hvLV_60;
  final Value<double> hvLV_600;
  final Value<double> lvE_60;
  final Value<double> lvE_600;
  final Value<double> cE_60;
  final Value<double> cT_60;
  final Value<double> tE_60;
  const PowtcoreIRLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.hvE_60 = const Value.absent(),
    this.hvE_600 = const Value.absent(),
    this.hvLV_60 = const Value.absent(),
    this.hvLV_600 = const Value.absent(),
    this.lvE_60 = const Value.absent(),
    this.lvE_600 = const Value.absent(),
    this.cE_60 = const Value.absent(),
    this.cT_60 = const Value.absent(),
    this.tE_60 = const Value.absent(),
  });
  PowtcoreIRLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double hvE_60,
    @required double hvE_600,
    @required double hvLV_60,
    @required double hvLV_600,
    @required double lvE_60,
    @required double lvE_600,
    @required double cE_60,
    @required double cT_60,
    @required double tE_60,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        hvE_60 = Value(hvE_60),
        hvE_600 = Value(hvE_600),
        hvLV_60 = Value(hvLV_60),
        hvLV_600 = Value(hvLV_600),
        lvE_60 = Value(lvE_60),
        lvE_600 = Value(lvE_600),
        cE_60 = Value(cE_60),
        cT_60 = Value(cT_60),
        tE_60 = Value(tE_60);
  static Insertable<PowtcoreIRLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> hvE_60,
    Expression<double> hvE_600,
    Expression<double> hvLV_60,
    Expression<double> hvLV_600,
    Expression<double> lvE_60,
    Expression<double> lvE_600,
    Expression<double> cE_60,
    Expression<double> cT_60,
    Expression<double> tE_60,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (hvE_60 != null) 'hv_e_60': hvE_60,
      if (hvE_600 != null) 'hv_e_600': hvE_600,
      if (hvLV_60 != null) 'hv_l_v_60': hvLV_60,
      if (hvLV_600 != null) 'hv_l_v_600': hvLV_600,
      if (lvE_60 != null) 'lv_e_60': lvE_60,
      if (lvE_600 != null) 'lv_e_600': lvE_600,
      if (cE_60 != null) 'c_e_60': cE_60,
      if (cT_60 != null) 'c_t_60': cT_60,
      if (tE_60 != null) 't_e_60': tE_60,
    });
  }

  PowtcoreIRLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> hvE_60,
      Value<double> hvE_600,
      Value<double> hvLV_60,
      Value<double> hvLV_600,
      Value<double> lvE_60,
      Value<double> lvE_600,
      Value<double> cE_60,
      Value<double> cT_60,
      Value<double> tE_60}) {
    return PowtcoreIRLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      hvE_60: hvE_60 ?? this.hvE_60,
      hvE_600: hvE_600 ?? this.hvE_600,
      hvLV_60: hvLV_60 ?? this.hvLV_60,
      hvLV_600: hvLV_600 ?? this.hvLV_600,
      lvE_60: lvE_60 ?? this.lvE_60,
      lvE_600: lvE_600 ?? this.lvE_600,
      cE_60: cE_60 ?? this.cE_60,
      cT_60: cT_60 ?? this.cT_60,
      tE_60: tE_60 ?? this.tE_60,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (hvE_60.present) {
      map['hv_e_60'] = Variable<double>(hvE_60.value);
    }
    if (hvE_600.present) {
      map['hv_e_600'] = Variable<double>(hvE_600.value);
    }
    if (hvLV_60.present) {
      map['hv_l_v_60'] = Variable<double>(hvLV_60.value);
    }
    if (hvLV_600.present) {
      map['hv_l_v_600'] = Variable<double>(hvLV_600.value);
    }
    if (lvE_60.present) {
      map['lv_e_60'] = Variable<double>(lvE_60.value);
    }
    if (lvE_600.present) {
      map['lv_e_600'] = Variable<double>(lvE_600.value);
    }
    if (cE_60.present) {
      map['c_e_60'] = Variable<double>(cE_60.value);
    }
    if (cT_60.present) {
      map['c_t_60'] = Variable<double>(cT_60.value);
    }
    if (tE_60.present) {
      map['t_e_60'] = Variable<double>(tE_60.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PowtcoreIRLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('hvE_60: $hvE_60, ')
          ..write('hvE_600: $hvE_600, ')
          ..write('hvLV_60: $hvLV_60, ')
          ..write('hvLV_600: $hvLV_600, ')
          ..write('lvE_60: $lvE_60, ')
          ..write('lvE_600: $lvE_600, ')
          ..write('cE_60: $cE_60, ')
          ..write('cT_60: $cT_60, ')
          ..write('tE_60: $tE_60')
          ..write(')'))
        .toString();
  }
}

class $PowtcoreIRLocalDatasourceImplTable extends PowtcoreIRLocalDatasourceImpl
    with TableInfo<$PowtcoreIRLocalDatasourceImplTable, PowtcoreIRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PowtcoreIRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _hvE_60Meta = const VerificationMeta('hvE_60');
  GeneratedColumn<double> _hvE_60;
  @override
  GeneratedColumn<double> get hvE_60 =>
      _hvE_60 ??= GeneratedColumn<double>('hv_e_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_600Meta = const VerificationMeta('hvE_600');
  GeneratedColumn<double> _hvE_600;
  @override
  GeneratedColumn<double> get hvE_600 =>
      _hvE_600 ??= GeneratedColumn<double>('hv_e_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLV_60Meta = const VerificationMeta('hvLV_60');
  GeneratedColumn<double> _hvLV_60;
  @override
  GeneratedColumn<double> get hvLV_60 =>
      _hvLV_60 ??= GeneratedColumn<double>('hv_l_v_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLV_600Meta = const VerificationMeta('hvLV_600');
  GeneratedColumn<double> _hvLV_600;
  @override
  GeneratedColumn<double> get hvLV_600 =>
      _hvLV_600 ??= GeneratedColumn<double>('hv_l_v_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_60Meta = const VerificationMeta('lvE_60');
  GeneratedColumn<double> _lvE_60;
  @override
  GeneratedColumn<double> get lvE_60 =>
      _lvE_60 ??= GeneratedColumn<double>('lv_e_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_600Meta = const VerificationMeta('lvE_600');
  GeneratedColumn<double> _lvE_600;
  @override
  GeneratedColumn<double> get lvE_600 =>
      _lvE_600 ??= GeneratedColumn<double>('lv_e_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _cE_60Meta = const VerificationMeta('cE_60');
  GeneratedColumn<double> _cE_60;
  @override
  GeneratedColumn<double> get cE_60 =>
      _cE_60 ??= GeneratedColumn<double>('c_e_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _cT_60Meta = const VerificationMeta('cT_60');
  GeneratedColumn<double> _cT_60;
  @override
  GeneratedColumn<double> get cT_60 =>
      _cT_60 ??= GeneratedColumn<double>('c_t_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tE_60Meta = const VerificationMeta('tE_60');
  GeneratedColumn<double> _tE_60;
  @override
  GeneratedColumn<double> get tE_60 =>
      _tE_60 ??= GeneratedColumn<double>('t_e_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        hvE_60,
        hvE_600,
        hvLV_60,
        hvLV_600,
        lvE_60,
        lvE_600,
        cE_60,
        cT_60,
        tE_60
      ];
  @override
  String get aliasedName => _alias ?? 'powtcore_i_r_local_datasource_impl';
  @override
  String get actualTableName => 'powtcore_i_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<PowtcoreIRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('hv_e_60')) {
      context.handle(_hvE_60Meta,
          hvE_60.isAcceptableOrUnknown(data['hv_e_60'], _hvE_60Meta));
    } else if (isInserting) {
      context.missing(_hvE_60Meta);
    }
    if (data.containsKey('hv_e_600')) {
      context.handle(_hvE_600Meta,
          hvE_600.isAcceptableOrUnknown(data['hv_e_600'], _hvE_600Meta));
    } else if (isInserting) {
      context.missing(_hvE_600Meta);
    }
    if (data.containsKey('hv_l_v_60')) {
      context.handle(_hvLV_60Meta,
          hvLV_60.isAcceptableOrUnknown(data['hv_l_v_60'], _hvLV_60Meta));
    } else if (isInserting) {
      context.missing(_hvLV_60Meta);
    }
    if (data.containsKey('hv_l_v_600')) {
      context.handle(_hvLV_600Meta,
          hvLV_600.isAcceptableOrUnknown(data['hv_l_v_600'], _hvLV_600Meta));
    } else if (isInserting) {
      context.missing(_hvLV_600Meta);
    }
    if (data.containsKey('lv_e_60')) {
      context.handle(_lvE_60Meta,
          lvE_60.isAcceptableOrUnknown(data['lv_e_60'], _lvE_60Meta));
    } else if (isInserting) {
      context.missing(_lvE_60Meta);
    }
    if (data.containsKey('lv_e_600')) {
      context.handle(_lvE_600Meta,
          lvE_600.isAcceptableOrUnknown(data['lv_e_600'], _lvE_600Meta));
    } else if (isInserting) {
      context.missing(_lvE_600Meta);
    }
    if (data.containsKey('c_e_60')) {
      context.handle(
          _cE_60Meta, cE_60.isAcceptableOrUnknown(data['c_e_60'], _cE_60Meta));
    } else if (isInserting) {
      context.missing(_cE_60Meta);
    }
    if (data.containsKey('c_t_60')) {
      context.handle(
          _cT_60Meta, cT_60.isAcceptableOrUnknown(data['c_t_60'], _cT_60Meta));
    } else if (isInserting) {
      context.missing(_cT_60Meta);
    }
    if (data.containsKey('t_e_60')) {
      context.handle(
          _tE_60Meta, tE_60.isAcceptableOrUnknown(data['t_e_60'], _tE_60Meta));
    } else if (isInserting) {
      context.missing(_tE_60Meta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowtcoreIRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowtcoreIRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PowtcoreIRLocalDatasourceImplTable createAlias(String alias) {
    return $PowtcoreIRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowttscLocalData extends DataClass
    implements Insertable<PowttscLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final int hv_voltage;
  final double hv_current;
  final String equipmentUsed;
  final DateTime updateDate;
  PowttscLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_voltage,
      @required this.hv_current,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory PowttscLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowttscLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_voltage: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_voltage']),
      hv_current: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_current']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_voltage != null) {
      map['hv_voltage'] = Variable<int>(hv_voltage);
    }
    if (!nullToAbsent || hv_current != null) {
      map['hv_current'] = Variable<double>(hv_current);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  PowttscLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PowttscLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_voltage: hv_voltage == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_voltage),
      hv_current: hv_current == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_current),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory PowttscLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowttscLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_voltage: serializer.fromJson<int>(json['hv_voltage']),
      hv_current: serializer.fromJson<double>(json['hv_current']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_voltage': serializer.toJson<int>(hv_voltage),
      'hv_current': serializer.toJson<double>(hv_current),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  PowttscLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          int hv_voltage,
          double hv_current,
          String equipmentUsed,
          DateTime updateDate}) =>
      PowttscLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_voltage: hv_voltage ?? this.hv_voltage,
        hv_current: hv_current ?? this.hv_current,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('PowttscLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_voltage: $hv_voltage, ')
          ..write('hv_current: $hv_current, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      hv_voltage, hv_current, equipmentUsed, updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowttscLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_voltage == this.hv_voltage &&
          other.hv_current == this.hv_current &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class PowttscLocalDatasourceImplCompanion
    extends UpdateCompanion<PowttscLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<int> hv_voltage;
  final Value<double> hv_current;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const PowttscLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_voltage = const Value.absent(),
    this.hv_current = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  PowttscLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required int hv_voltage,
    @required double hv_current,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_voltage = Value(hv_voltage),
        hv_current = Value(hv_current),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<PowttscLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<int> hv_voltage,
    Expression<double> hv_current,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_voltage != null) 'hv_voltage': hv_voltage,
      if (hv_current != null) 'hv_current': hv_current,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  PowttscLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<int> hv_voltage,
      Value<double> hv_current,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return PowttscLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_voltage: hv_voltage ?? this.hv_voltage,
      hv_current: hv_current ?? this.hv_current,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_voltage.present) {
      map['hv_voltage'] = Variable<int>(hv_voltage.value);
    }
    if (hv_current.present) {
      map['hv_current'] = Variable<double>(hv_current.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PowttscLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_voltage: $hv_voltage, ')
          ..write('hv_current: $hv_current, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $PowttscLocalDatasourceImplTable extends PowttscLocalDatasourceImpl
    with TableInfo<$PowttscLocalDatasourceImplTable, PowttscLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PowttscLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_voltageMeta = const VerificationMeta('hv_voltage');
  GeneratedColumn<int> _hv_voltage;
  @override
  GeneratedColumn<int> get hv_voltage =>
      _hv_voltage ??= GeneratedColumn<int>('hv_voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_currentMeta = const VerificationMeta('hv_current');
  GeneratedColumn<double> _hv_current;
  @override
  GeneratedColumn<double> get hv_current =>
      _hv_current ??= GeneratedColumn<double>('hv_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_voltage,
        hv_current,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powttsc_local_datasource_impl';
  @override
  String get actualTableName => 'powttsc_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PowttscLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_voltage')) {
      context.handle(
          _hv_voltageMeta,
          hv_voltage.isAcceptableOrUnknown(
              data['hv_voltage'], _hv_voltageMeta));
    } else if (isInserting) {
      context.missing(_hv_voltageMeta);
    }
    if (data.containsKey('hv_current')) {
      context.handle(
          _hv_currentMeta,
          hv_current.isAcceptableOrUnknown(
              data['hv_current'], _hv_currentMeta));
    } else if (isInserting) {
      context.missing(_hv_currentMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowttscLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowttscLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PowttscLocalDatasourceImplTable createAlias(String alias) {
    return $PowttscLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowtwrHvLocalData extends DataClass
    implements Insertable<PowtwrHvLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_r_1u_1vn;
  final double hv_r_1v_1wn;
  final double hv_r_1w_1un;
  PowtwrHvLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_r_1u_1vn,
      @required this.hv_r_1v_1wn,
      @required this.hv_r_1w_1un});
  factory PowtwrHvLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowtwrHvLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_r_1u_1vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_r_1u_1vn']),
      hv_r_1v_1wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_r_1v_1wn']),
      hv_r_1w_1un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_r_1w_1un']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_r_1u_1vn != null) {
      map['hv_r_1u_1vn'] = Variable<double>(hv_r_1u_1vn);
    }
    if (!nullToAbsent || hv_r_1v_1wn != null) {
      map['hv_r_1v_1wn'] = Variable<double>(hv_r_1v_1wn);
    }
    if (!nullToAbsent || hv_r_1w_1un != null) {
      map['hv_r_1w_1un'] = Variable<double>(hv_r_1w_1un);
    }
    return map;
  }

  PowtwrHvLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PowtwrHvLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_r_1u_1vn: hv_r_1u_1vn == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_r_1u_1vn),
      hv_r_1v_1wn: hv_r_1v_1wn == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_r_1v_1wn),
      hv_r_1w_1un: hv_r_1w_1un == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_r_1w_1un),
    );
  }

  factory PowtwrHvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowtwrHvLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_r_1u_1vn: serializer.fromJson<double>(json['hv_r_1u_1vn']),
      hv_r_1v_1wn: serializer.fromJson<double>(json['hv_r_1v_1wn']),
      hv_r_1w_1un: serializer.fromJson<double>(json['hv_r_1w_1un']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_r_1u_1vn': serializer.toJson<double>(hv_r_1u_1vn),
      'hv_r_1v_1wn': serializer.toJson<double>(hv_r_1v_1wn),
      'hv_r_1w_1un': serializer.toJson<double>(hv_r_1w_1un),
    };
  }

  PowtwrHvLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_r_1u_1vn,
          double hv_r_1v_1wn,
          double hv_r_1w_1un}) =>
      PowtwrHvLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_r_1u_1vn: hv_r_1u_1vn ?? this.hv_r_1u_1vn,
        hv_r_1v_1wn: hv_r_1v_1wn ?? this.hv_r_1v_1wn,
        hv_r_1w_1un: hv_r_1w_1un ?? this.hv_r_1w_1un,
      );
  @override
  String toString() {
    return (StringBuffer('PowtwrHvLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_r_1u_1vn: $hv_r_1u_1vn, ')
          ..write('hv_r_1v_1wn: $hv_r_1v_1wn, ')
          ..write('hv_r_1w_1un: $hv_r_1w_1un')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      hv_r_1u_1vn, hv_r_1v_1wn, hv_r_1w_1un);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowtwrHvLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_r_1u_1vn == this.hv_r_1u_1vn &&
          other.hv_r_1v_1wn == this.hv_r_1v_1wn &&
          other.hv_r_1w_1un == this.hv_r_1w_1un);
}

class PowtwrHvLocalDatasourceImplCompanion
    extends UpdateCompanion<PowtwrHvLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_r_1u_1vn;
  final Value<double> hv_r_1v_1wn;
  final Value<double> hv_r_1w_1un;
  const PowtwrHvLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_r_1u_1vn = const Value.absent(),
    this.hv_r_1v_1wn = const Value.absent(),
    this.hv_r_1w_1un = const Value.absent(),
  });
  PowtwrHvLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_r_1u_1vn,
    @required double hv_r_1v_1wn,
    @required double hv_r_1w_1un,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_r_1u_1vn = Value(hv_r_1u_1vn),
        hv_r_1v_1wn = Value(hv_r_1v_1wn),
        hv_r_1w_1un = Value(hv_r_1w_1un);
  static Insertable<PowtwrHvLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_r_1u_1vn,
    Expression<double> hv_r_1v_1wn,
    Expression<double> hv_r_1w_1un,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_r_1u_1vn != null) 'hv_r_1u_1vn': hv_r_1u_1vn,
      if (hv_r_1v_1wn != null) 'hv_r_1v_1wn': hv_r_1v_1wn,
      if (hv_r_1w_1un != null) 'hv_r_1w_1un': hv_r_1w_1un,
    });
  }

  PowtwrHvLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_r_1u_1vn,
      Value<double> hv_r_1v_1wn,
      Value<double> hv_r_1w_1un}) {
    return PowtwrHvLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_r_1u_1vn: hv_r_1u_1vn ?? this.hv_r_1u_1vn,
      hv_r_1v_1wn: hv_r_1v_1wn ?? this.hv_r_1v_1wn,
      hv_r_1w_1un: hv_r_1w_1un ?? this.hv_r_1w_1un,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_r_1u_1vn.present) {
      map['hv_r_1u_1vn'] = Variable<double>(hv_r_1u_1vn.value);
    }
    if (hv_r_1v_1wn.present) {
      map['hv_r_1v_1wn'] = Variable<double>(hv_r_1v_1wn.value);
    }
    if (hv_r_1w_1un.present) {
      map['hv_r_1w_1un'] = Variable<double>(hv_r_1w_1un.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PowtwrHvLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_r_1u_1vn: $hv_r_1u_1vn, ')
          ..write('hv_r_1v_1wn: $hv_r_1v_1wn, ')
          ..write('hv_r_1w_1un: $hv_r_1w_1un')
          ..write(')'))
        .toString();
  }
}

class $PowtwrHvLocalDatasourceImplTable extends PowtwrHvLocalDatasourceImpl
    with TableInfo<$PowtwrHvLocalDatasourceImplTable, PowtwrHvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PowtwrHvLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_r_1u_1vnMeta =
      const VerificationMeta('hv_r_1u_1vn');
  GeneratedColumn<double> _hv_r_1u_1vn;
  @override
  GeneratedColumn<double> get hv_r_1u_1vn => _hv_r_1u_1vn ??=
      GeneratedColumn<double>('hv_r_1u_1vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_r_1v_1wnMeta =
      const VerificationMeta('hv_r_1v_1wn');
  GeneratedColumn<double> _hv_r_1v_1wn;
  @override
  GeneratedColumn<double> get hv_r_1v_1wn => _hv_r_1v_1wn ??=
      GeneratedColumn<double>('hv_r_1v_1wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_r_1w_1unMeta =
      const VerificationMeta('hv_r_1w_1un');
  GeneratedColumn<double> _hv_r_1w_1un;
  @override
  GeneratedColumn<double> get hv_r_1w_1un => _hv_r_1w_1un ??=
      GeneratedColumn<double>('hv_r_1w_1un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_r_1u_1vn,
        hv_r_1v_1wn,
        hv_r_1w_1un
      ];
  @override
  String get aliasedName => _alias ?? 'powtwr_hv_local_datasource_impl';
  @override
  String get actualTableName => 'powtwr_hv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PowtwrHvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_r_1u_1vn')) {
      context.handle(
          _hv_r_1u_1vnMeta,
          hv_r_1u_1vn.isAcceptableOrUnknown(
              data['hv_r_1u_1vn'], _hv_r_1u_1vnMeta));
    } else if (isInserting) {
      context.missing(_hv_r_1u_1vnMeta);
    }
    if (data.containsKey('hv_r_1v_1wn')) {
      context.handle(
          _hv_r_1v_1wnMeta,
          hv_r_1v_1wn.isAcceptableOrUnknown(
              data['hv_r_1v_1wn'], _hv_r_1v_1wnMeta));
    } else if (isInserting) {
      context.missing(_hv_r_1v_1wnMeta);
    }
    if (data.containsKey('hv_r_1w_1un')) {
      context.handle(
          _hv_r_1w_1unMeta,
          hv_r_1w_1un.isAcceptableOrUnknown(
              data['hv_r_1w_1un'], _hv_r_1w_1unMeta));
    } else if (isInserting) {
      context.missing(_hv_r_1w_1unMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowtwrHvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowtwrHvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PowtwrHvLocalDatasourceImplTable createAlias(String alias) {
    return $PowtwrHvLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowtwrLvLocalData extends DataClass
    implements Insertable<PowtwrLvLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double lv_r_2u_2vn;
  final double lv_r_2v_2wn;
  final double lv_r_2w_2un;
  final String equipmentUsed;
  final DateTime updateDate;
  PowtwrLvLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.lv_r_2u_2vn,
      @required this.lv_r_2v_2wn,
      @required this.lv_r_2w_2un,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory PowtwrLvLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowtwrLvLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      lv_r_2u_2vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_r_2u_2vn']),
      lv_r_2v_2wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_r_2v_2wn']),
      lv_r_2w_2un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_r_2w_2un']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || lv_r_2u_2vn != null) {
      map['lv_r_2u_2vn'] = Variable<double>(lv_r_2u_2vn);
    }
    if (!nullToAbsent || lv_r_2v_2wn != null) {
      map['lv_r_2v_2wn'] = Variable<double>(lv_r_2v_2wn);
    }
    if (!nullToAbsent || lv_r_2w_2un != null) {
      map['lv_r_2w_2un'] = Variable<double>(lv_r_2w_2un);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  PowtwrLvLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PowtwrLvLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      lv_r_2u_2vn: lv_r_2u_2vn == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_r_2u_2vn),
      lv_r_2v_2wn: lv_r_2v_2wn == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_r_2v_2wn),
      lv_r_2w_2un: lv_r_2w_2un == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_r_2w_2un),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory PowtwrLvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowtwrLvLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      lv_r_2u_2vn: serializer.fromJson<double>(json['lv_r_2u_2vn']),
      lv_r_2v_2wn: serializer.fromJson<double>(json['lv_r_2v_2wn']),
      lv_r_2w_2un: serializer.fromJson<double>(json['lv_r_2w_2un']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'lv_r_2u_2vn': serializer.toJson<double>(lv_r_2u_2vn),
      'lv_r_2v_2wn': serializer.toJson<double>(lv_r_2v_2wn),
      'lv_r_2w_2un': serializer.toJson<double>(lv_r_2w_2un),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  PowtwrLvLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double lv_r_2u_2vn,
          double lv_r_2v_2wn,
          double lv_r_2w_2un,
          String equipmentUsed,
          DateTime updateDate}) =>
      PowtwrLvLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        lv_r_2u_2vn: lv_r_2u_2vn ?? this.lv_r_2u_2vn,
        lv_r_2v_2wn: lv_r_2v_2wn ?? this.lv_r_2v_2wn,
        lv_r_2w_2un: lv_r_2w_2un ?? this.lv_r_2w_2un,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('PowtwrLvLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('lv_r_2u_2vn: $lv_r_2u_2vn, ')
          ..write('lv_r_2v_2wn: $lv_r_2v_2wn, ')
          ..write('lv_r_2w_2un: $lv_r_2w_2un, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      lv_r_2u_2vn, lv_r_2v_2wn, lv_r_2w_2un, equipmentUsed, updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowtwrLvLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.lv_r_2u_2vn == this.lv_r_2u_2vn &&
          other.lv_r_2v_2wn == this.lv_r_2v_2wn &&
          other.lv_r_2w_2un == this.lv_r_2w_2un &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class PowtwrLvLocalDatasourceImplCompanion
    extends UpdateCompanion<PowtwrLvLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> lv_r_2u_2vn;
  final Value<double> lv_r_2v_2wn;
  final Value<double> lv_r_2w_2un;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const PowtwrLvLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.lv_r_2u_2vn = const Value.absent(),
    this.lv_r_2v_2wn = const Value.absent(),
    this.lv_r_2w_2un = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  PowtwrLvLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double lv_r_2u_2vn,
    @required double lv_r_2v_2wn,
    @required double lv_r_2w_2un,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        lv_r_2u_2vn = Value(lv_r_2u_2vn),
        lv_r_2v_2wn = Value(lv_r_2v_2wn),
        lv_r_2w_2un = Value(lv_r_2w_2un),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<PowtwrLvLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> lv_r_2u_2vn,
    Expression<double> lv_r_2v_2wn,
    Expression<double> lv_r_2w_2un,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (lv_r_2u_2vn != null) 'lv_r_2u_2vn': lv_r_2u_2vn,
      if (lv_r_2v_2wn != null) 'lv_r_2v_2wn': lv_r_2v_2wn,
      if (lv_r_2w_2un != null) 'lv_r_2w_2un': lv_r_2w_2un,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  PowtwrLvLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> lv_r_2u_2vn,
      Value<double> lv_r_2v_2wn,
      Value<double> lv_r_2w_2un,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return PowtwrLvLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      lv_r_2u_2vn: lv_r_2u_2vn ?? this.lv_r_2u_2vn,
      lv_r_2v_2wn: lv_r_2v_2wn ?? this.lv_r_2v_2wn,
      lv_r_2w_2un: lv_r_2w_2un ?? this.lv_r_2w_2un,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (lv_r_2u_2vn.present) {
      map['lv_r_2u_2vn'] = Variable<double>(lv_r_2u_2vn.value);
    }
    if (lv_r_2v_2wn.present) {
      map['lv_r_2v_2wn'] = Variable<double>(lv_r_2v_2wn.value);
    }
    if (lv_r_2w_2un.present) {
      map['lv_r_2w_2un'] = Variable<double>(lv_r_2w_2un.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PowtwrLvLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('lv_r_2u_2vn: $lv_r_2u_2vn, ')
          ..write('lv_r_2v_2wn: $lv_r_2v_2wn, ')
          ..write('lv_r_2w_2un: $lv_r_2w_2un, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $PowtwrLvLocalDatasourceImplTable extends PowtwrLvLocalDatasourceImpl
    with TableInfo<$PowtwrLvLocalDatasourceImplTable, PowtwrLvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PowtwrLvLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _lv_r_2u_2vnMeta =
      const VerificationMeta('lv_r_2u_2vn');
  GeneratedColumn<double> _lv_r_2u_2vn;
  @override
  GeneratedColumn<double> get lv_r_2u_2vn => _lv_r_2u_2vn ??=
      GeneratedColumn<double>('lv_r_2u_2vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_r_2v_2wnMeta =
      const VerificationMeta('lv_r_2v_2wn');
  GeneratedColumn<double> _lv_r_2v_2wn;
  @override
  GeneratedColumn<double> get lv_r_2v_2wn => _lv_r_2v_2wn ??=
      GeneratedColumn<double>('lv_r_2v_2wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_r_2w_2unMeta =
      const VerificationMeta('lv_r_2w_2un');
  GeneratedColumn<double> _lv_r_2w_2un;
  @override
  GeneratedColumn<double> get lv_r_2w_2un => _lv_r_2w_2un ??=
      GeneratedColumn<double>('lv_r_2w_2un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        lv_r_2u_2vn,
        lv_r_2v_2wn,
        lv_r_2w_2un,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powtwr_lv_local_datasource_impl';
  @override
  String get actualTableName => 'powtwr_lv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PowtwrLvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('lv_r_2u_2vn')) {
      context.handle(
          _lv_r_2u_2vnMeta,
          lv_r_2u_2vn.isAcceptableOrUnknown(
              data['lv_r_2u_2vn'], _lv_r_2u_2vnMeta));
    } else if (isInserting) {
      context.missing(_lv_r_2u_2vnMeta);
    }
    if (data.containsKey('lv_r_2v_2wn')) {
      context.handle(
          _lv_r_2v_2wnMeta,
          lv_r_2v_2wn.isAcceptableOrUnknown(
              data['lv_r_2v_2wn'], _lv_r_2v_2wnMeta));
    } else if (isInserting) {
      context.missing(_lv_r_2v_2wnMeta);
    }
    if (data.containsKey('lv_r_2w_2un')) {
      context.handle(
          _lv_r_2w_2unMeta,
          lv_r_2w_2un.isAcceptableOrUnknown(
              data['lv_r_2w_2un'], _lv_r_2w_2unMeta));
    } else if (isInserting) {
      context.missing(_lv_r_2w_2unMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowtwrLvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowtwrLvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PowtwrLvLocalDatasourceImplTable createAlias(String alias) {
    return $PowtwrLvLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowtrLocalData extends DataClass implements Insertable<PowtrLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_1u_1v;
  final double hv_1v_1w;
  final double hv_1w_1u;
  final double hv_1u_1n;
  final double hv_1v_1n;
  final double hv_1w_1n;
  final double lv_2u_2v;
  final double lv_2v_2w;
  final double lv_2w_2u;
  final double lv_2u_2n;
  final double lv_2v_2n;
  final double lv_2w_2n;
  final String equipmentUsed;
  final DateTime updateDate;
  PowtrLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_1u_1v,
      @required this.hv_1v_1w,
      @required this.hv_1w_1u,
      @required this.hv_1u_1n,
      @required this.hv_1v_1n,
      @required this.hv_1w_1n,
      @required this.lv_2u_2v,
      @required this.lv_2v_2w,
      @required this.lv_2w_2u,
      @required this.lv_2u_2n,
      @required this.lv_2v_2n,
      @required this.lv_2w_2n,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory PowtrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowtrLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_1u_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u_1v']),
      hv_1v_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v_1w']),
      hv_1w_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w_1u']),
      hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u_1n']),
      hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v_1n']),
      hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w_1n']),
      lv_2u_2v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2u_2v']),
      lv_2v_2w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2v_2w']),
      lv_2w_2u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2w_2u']),
      lv_2u_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2u_2n']),
      lv_2v_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2v_2n']),
      lv_2w_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2w_2n']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_1u_1v != null) {
      map['hv_1u_1v'] = Variable<double>(hv_1u_1v);
    }
    if (!nullToAbsent || hv_1v_1w != null) {
      map['hv_1v_1w'] = Variable<double>(hv_1v_1w);
    }
    if (!nullToAbsent || hv_1w_1u != null) {
      map['hv_1w_1u'] = Variable<double>(hv_1w_1u);
    }
    if (!nullToAbsent || hv_1u_1n != null) {
      map['hv_1u_1n'] = Variable<double>(hv_1u_1n);
    }
    if (!nullToAbsent || hv_1v_1n != null) {
      map['hv_1v_1n'] = Variable<double>(hv_1v_1n);
    }
    if (!nullToAbsent || hv_1w_1n != null) {
      map['hv_1w_1n'] = Variable<double>(hv_1w_1n);
    }
    if (!nullToAbsent || lv_2u_2v != null) {
      map['lv_2u_2v'] = Variable<double>(lv_2u_2v);
    }
    if (!nullToAbsent || lv_2v_2w != null) {
      map['lv_2v_2w'] = Variable<double>(lv_2v_2w);
    }
    if (!nullToAbsent || lv_2w_2u != null) {
      map['lv_2w_2u'] = Variable<double>(lv_2w_2u);
    }
    if (!nullToAbsent || lv_2u_2n != null) {
      map['lv_2u_2n'] = Variable<double>(lv_2u_2n);
    }
    if (!nullToAbsent || lv_2v_2n != null) {
      map['lv_2v_2n'] = Variable<double>(lv_2v_2n);
    }
    if (!nullToAbsent || lv_2w_2n != null) {
      map['lv_2w_2n'] = Variable<double>(lv_2w_2n);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  Powt_R_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt_R_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_1u_1v: hv_1u_1v == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1u_1v),
      hv_1v_1w: hv_1v_1w == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1v_1w),
      hv_1w_1u: hv_1w_1u == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1w_1u),
      hv_1u_1n: hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1u_1n),
      hv_1v_1n: hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1v_1n),
      hv_1w_1n: hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1w_1n),
      lv_2u_2v: lv_2u_2v == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2u_2v),
      lv_2v_2w: lv_2v_2w == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2v_2w),
      lv_2w_2u: lv_2w_2u == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2w_2u),
      lv_2u_2n: lv_2u_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2u_2n),
      lv_2v_2n: lv_2v_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2v_2n),
      lv_2w_2n: lv_2w_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_2w_2n),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory PowtrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowtrLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_1u_1v: serializer.fromJson<double>(json['hv_1u_1v']),
      hv_1v_1w: serializer.fromJson<double>(json['hv_1v_1w']),
      hv_1w_1u: serializer.fromJson<double>(json['hv_1w_1u']),
      hv_1u_1n: serializer.fromJson<double>(json['hv_1u_1n']),
      hv_1v_1n: serializer.fromJson<double>(json['hv_1v_1n']),
      hv_1w_1n: serializer.fromJson<double>(json['hv_1w_1n']),
      lv_2u_2v: serializer.fromJson<double>(json['lv_2u_2v']),
      lv_2v_2w: serializer.fromJson<double>(json['lv_2v_2w']),
      lv_2w_2u: serializer.fromJson<double>(json['lv_2w_2u']),
      lv_2u_2n: serializer.fromJson<double>(json['lv_2u_2n']),
      lv_2v_2n: serializer.fromJson<double>(json['lv_2v_2n']),
      lv_2w_2n: serializer.fromJson<double>(json['lv_2w_2n']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_1u_1v': serializer.toJson<double>(hv_1u_1v),
      'hv_1v_1w': serializer.toJson<double>(hv_1v_1w),
      'hv_1w_1u': serializer.toJson<double>(hv_1w_1u),
      'hv_1u_1n': serializer.toJson<double>(hv_1u_1n),
      'hv_1v_1n': serializer.toJson<double>(hv_1v_1n),
      'hv_1w_1n': serializer.toJson<double>(hv_1w_1n),
      'lv_2u_2v': serializer.toJson<double>(lv_2u_2v),
      'lv_2v_2w': serializer.toJson<double>(lv_2v_2w),
      'lv_2w_2u': serializer.toJson<double>(lv_2w_2u),
      'lv_2u_2n': serializer.toJson<double>(lv_2u_2n),
      'lv_2v_2n': serializer.toJson<double>(lv_2v_2n),
      'lv_2w_2n': serializer.toJson<double>(lv_2w_2n),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  PowtrLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_1u_1v,
          double hv_1v_1w,
          double hv_1w_1u,
          double hv_1u_1n,
          double hv_1v_1n,
          double hv_1w_1n,
          double lv_2u_2v,
          double lv_2v_2w,
          double lv_2w_2u,
          double lv_2u_2n,
          double lv_2v_2n,
          double lv_2w_2n,
          String equipmentUsed,
          DateTime updateDate}) =>
      PowtrLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_1u_1v: hv_1u_1v ?? this.hv_1u_1v,
        hv_1v_1w: hv_1v_1w ?? this.hv_1v_1w,
        hv_1w_1u: hv_1w_1u ?? this.hv_1w_1u,
        hv_1u_1n: hv_1u_1n ?? this.hv_1u_1n,
        hv_1v_1n: hv_1v_1n ?? this.hv_1v_1n,
        hv_1w_1n: hv_1w_1n ?? this.hv_1w_1n,
        lv_2u_2v: lv_2u_2v ?? this.lv_2u_2v,
        lv_2v_2w: lv_2v_2w ?? this.lv_2v_2w,
        lv_2w_2u: lv_2w_2u ?? this.lv_2w_2u,
        lv_2u_2n: lv_2u_2n ?? this.lv_2u_2n,
        lv_2v_2n: lv_2v_2n ?? this.lv_2v_2n,
        lv_2w_2n: lv_2w_2n ?? this.lv_2w_2n,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('PowtrLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1v: $hv_1u_1v, ')
          ..write('hv_1v_1w: $hv_1v_1w, ')
          ..write('hv_1w_1u: $hv_1w_1u, ')
          ..write('hv_1u_1n: $hv_1u_1n, ')
          ..write('hv_1v_1n: $hv_1v_1n, ')
          ..write('hv_1w_1n: $hv_1w_1n, ')
          ..write('lv_2u_2v: $lv_2u_2v, ')
          ..write('lv_2v_2w: $lv_2v_2w, ')
          ..write('lv_2w_2u: $lv_2w_2u, ')
          ..write('lv_2u_2n: $lv_2u_2n, ')
          ..write('lv_2v_2n: $lv_2v_2n, ')
          ..write('lv_2w_2n: $lv_2w_2n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      tapPosition,
      hv_1u_1v,
      hv_1v_1w,
      hv_1w_1u,
      hv_1u_1n,
      hv_1v_1n,
      hv_1w_1n,
      lv_2u_2v,
      lv_2v_2w,
      lv_2w_2u,
      lv_2u_2n,
      lv_2v_2n,
      lv_2w_2n,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowtrLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_1u_1v == this.hv_1u_1v &&
          other.hv_1v_1w == this.hv_1v_1w &&
          other.hv_1w_1u == this.hv_1w_1u &&
          other.hv_1u_1n == this.hv_1u_1n &&
          other.hv_1v_1n == this.hv_1v_1n &&
          other.hv_1w_1n == this.hv_1w_1n &&
          other.lv_2u_2v == this.lv_2u_2v &&
          other.lv_2v_2w == this.lv_2v_2w &&
          other.lv_2w_2u == this.lv_2w_2u &&
          other.lv_2u_2n == this.lv_2u_2n &&
          other.lv_2v_2n == this.lv_2v_2n &&
          other.lv_2w_2n == this.lv_2w_2n &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class Powt_R_LocalDatasourceImplCompanion
    extends UpdateCompanion<PowtrLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_1u_1v;
  final Value<double> hv_1v_1w;
  final Value<double> hv_1w_1u;
  final Value<double> hv_1u_1n;
  final Value<double> hv_1v_1n;
  final Value<double> hv_1w_1n;
  final Value<double> lv_2u_2v;
  final Value<double> lv_2v_2w;
  final Value<double> lv_2w_2u;
  final Value<double> lv_2u_2n;
  final Value<double> lv_2v_2n;
  final Value<double> lv_2w_2n;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const Powt_R_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_1u_1v = const Value.absent(),
    this.hv_1v_1w = const Value.absent(),
    this.hv_1w_1u = const Value.absent(),
    this.hv_1u_1n = const Value.absent(),
    this.hv_1v_1n = const Value.absent(),
    this.hv_1w_1n = const Value.absent(),
    this.lv_2u_2v = const Value.absent(),
    this.lv_2v_2w = const Value.absent(),
    this.lv_2w_2u = const Value.absent(),
    this.lv_2u_2n = const Value.absent(),
    this.lv_2v_2n = const Value.absent(),
    this.lv_2w_2n = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  Powt_R_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_1u_1v,
    @required double hv_1v_1w,
    @required double hv_1w_1u,
    @required double hv_1u_1n,
    @required double hv_1v_1n,
    @required double hv_1w_1n,
    @required double lv_2u_2v,
    @required double lv_2v_2w,
    @required double lv_2w_2u,
    @required double lv_2u_2n,
    @required double lv_2v_2n,
    @required double lv_2w_2n,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_1u_1v = Value(hv_1u_1v),
        hv_1v_1w = Value(hv_1v_1w),
        hv_1w_1u = Value(hv_1w_1u),
        hv_1u_1n = Value(hv_1u_1n),
        hv_1v_1n = Value(hv_1v_1n),
        hv_1w_1n = Value(hv_1w_1n),
        lv_2u_2v = Value(lv_2u_2v),
        lv_2v_2w = Value(lv_2v_2w),
        lv_2w_2u = Value(lv_2w_2u),
        lv_2u_2n = Value(lv_2u_2n),
        lv_2v_2n = Value(lv_2v_2n),
        lv_2w_2n = Value(lv_2w_2n),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<PowtrLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_1u_1v,
    Expression<double> hv_1v_1w,
    Expression<double> hv_1w_1u,
    Expression<double> hv_1u_1n,
    Expression<double> hv_1v_1n,
    Expression<double> hv_1w_1n,
    Expression<double> lv_2u_2v,
    Expression<double> lv_2v_2w,
    Expression<double> lv_2w_2u,
    Expression<double> lv_2u_2n,
    Expression<double> lv_2v_2n,
    Expression<double> lv_2w_2n,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_1u_1v != null) 'hv_1u_1v': hv_1u_1v,
      if (hv_1v_1w != null) 'hv_1v_1w': hv_1v_1w,
      if (hv_1w_1u != null) 'hv_1w_1u': hv_1w_1u,
      if (hv_1u_1n != null) 'hv_1u_1n': hv_1u_1n,
      if (hv_1v_1n != null) 'hv_1v_1n': hv_1v_1n,
      if (hv_1w_1n != null) 'hv_1w_1n': hv_1w_1n,
      if (lv_2u_2v != null) 'lv_2u_2v': lv_2u_2v,
      if (lv_2v_2w != null) 'lv_2v_2w': lv_2v_2w,
      if (lv_2w_2u != null) 'lv_2w_2u': lv_2w_2u,
      if (lv_2u_2n != null) 'lv_2u_2n': lv_2u_2n,
      if (lv_2v_2n != null) 'lv_2v_2n': lv_2v_2n,
      if (lv_2w_2n != null) 'lv_2w_2n': lv_2w_2n,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  Powt_R_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_1u_1v,
      Value<double> hv_1v_1w,
      Value<double> hv_1w_1u,
      Value<double> hv_1u_1n,
      Value<double> hv_1v_1n,
      Value<double> hv_1w_1n,
      Value<double> lv_2u_2v,
      Value<double> lv_2v_2w,
      Value<double> lv_2w_2u,
      Value<double> lv_2u_2n,
      Value<double> lv_2v_2n,
      Value<double> lv_2w_2n,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return Powt_R_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_1u_1v: hv_1u_1v ?? this.hv_1u_1v,
      hv_1v_1w: hv_1v_1w ?? this.hv_1v_1w,
      hv_1w_1u: hv_1w_1u ?? this.hv_1w_1u,
      hv_1u_1n: hv_1u_1n ?? this.hv_1u_1n,
      hv_1v_1n: hv_1v_1n ?? this.hv_1v_1n,
      hv_1w_1n: hv_1w_1n ?? this.hv_1w_1n,
      lv_2u_2v: lv_2u_2v ?? this.lv_2u_2v,
      lv_2v_2w: lv_2v_2w ?? this.lv_2v_2w,
      lv_2w_2u: lv_2w_2u ?? this.lv_2w_2u,
      lv_2u_2n: lv_2u_2n ?? this.lv_2u_2n,
      lv_2v_2n: lv_2v_2n ?? this.lv_2v_2n,
      lv_2w_2n: lv_2w_2n ?? this.lv_2w_2n,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_1u_1v.present) {
      map['hv_1u_1v'] = Variable<double>(hv_1u_1v.value);
    }
    if (hv_1v_1w.present) {
      map['hv_1v_1w'] = Variable<double>(hv_1v_1w.value);
    }
    if (hv_1w_1u.present) {
      map['hv_1w_1u'] = Variable<double>(hv_1w_1u.value);
    }
    if (hv_1u_1n.present) {
      map['hv_1u_1n'] = Variable<double>(hv_1u_1n.value);
    }
    if (hv_1v_1n.present) {
      map['hv_1v_1n'] = Variable<double>(hv_1v_1n.value);
    }
    if (hv_1w_1n.present) {
      map['hv_1w_1n'] = Variable<double>(hv_1w_1n.value);
    }
    if (lv_2u_2v.present) {
      map['lv_2u_2v'] = Variable<double>(lv_2u_2v.value);
    }
    if (lv_2v_2w.present) {
      map['lv_2v_2w'] = Variable<double>(lv_2v_2w.value);
    }
    if (lv_2w_2u.present) {
      map['lv_2w_2u'] = Variable<double>(lv_2w_2u.value);
    }
    if (lv_2u_2n.present) {
      map['lv_2u_2n'] = Variable<double>(lv_2u_2n.value);
    }
    if (lv_2v_2n.present) {
      map['lv_2v_2n'] = Variable<double>(lv_2v_2n.value);
    }
    if (lv_2w_2n.present) {
      map['lv_2w_2n'] = Variable<double>(lv_2w_2n.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt_R_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1v: $hv_1u_1v, ')
          ..write('hv_1v_1w: $hv_1v_1w, ')
          ..write('hv_1w_1u: $hv_1w_1u, ')
          ..write('hv_1u_1n: $hv_1u_1n, ')
          ..write('hv_1v_1n: $hv_1v_1n, ')
          ..write('hv_1w_1n: $hv_1w_1n, ')
          ..write('lv_2u_2v: $lv_2u_2v, ')
          ..write('lv_2v_2w: $lv_2v_2w, ')
          ..write('lv_2w_2u: $lv_2w_2u, ')
          ..write('lv_2u_2n: $lv_2u_2n, ')
          ..write('lv_2v_2n: $lv_2v_2n, ')
          ..write('lv_2w_2n: $lv_2w_2n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $Powt_R_LocalDatasourceImplTable extends Powt_R_LocalDatasourceImpl
    with TableInfo<$Powt_R_LocalDatasourceImplTable, PowtrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt_R_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1u_1vMeta = const VerificationMeta('hv_1u_1v');
  GeneratedColumn<double> _hv_1u_1v;
  @override
  GeneratedColumn<double> get hv_1u_1v =>
      _hv_1u_1v ??= GeneratedColumn<double>('hv_1u_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1v_1wMeta = const VerificationMeta('hv_1v_1w');
  GeneratedColumn<double> _hv_1v_1w;
  @override
  GeneratedColumn<double> get hv_1v_1w =>
      _hv_1v_1w ??= GeneratedColumn<double>('hv_1v_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1w_1uMeta = const VerificationMeta('hv_1w_1u');
  GeneratedColumn<double> _hv_1w_1u;
  @override
  GeneratedColumn<double> get hv_1w_1u =>
      _hv_1w_1u ??= GeneratedColumn<double>('hv_1w_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1u_1nMeta = const VerificationMeta('hv_1u_1n');
  GeneratedColumn<double> _hv_1u_1n;
  @override
  GeneratedColumn<double> get hv_1u_1n =>
      _hv_1u_1n ??= GeneratedColumn<double>('hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1v_1nMeta = const VerificationMeta('hv_1v_1n');
  GeneratedColumn<double> _hv_1v_1n;
  @override
  GeneratedColumn<double> get hv_1v_1n =>
      _hv_1v_1n ??= GeneratedColumn<double>('hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1w_1nMeta = const VerificationMeta('hv_1w_1n');
  GeneratedColumn<double> _hv_1w_1n;
  @override
  GeneratedColumn<double> get hv_1w_1n =>
      _hv_1w_1n ??= GeneratedColumn<double>('hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2u_2vMeta = const VerificationMeta('lv_2u_2v');
  GeneratedColumn<double> _lv_2u_2v;
  @override
  GeneratedColumn<double> get lv_2u_2v =>
      _lv_2u_2v ??= GeneratedColumn<double>('lv_2u_2v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2v_2wMeta = const VerificationMeta('lv_2v_2w');
  GeneratedColumn<double> _lv_2v_2w;
  @override
  GeneratedColumn<double> get lv_2v_2w =>
      _lv_2v_2w ??= GeneratedColumn<double>('lv_2v_2w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2w_2uMeta = const VerificationMeta('lv_2w_2u');
  GeneratedColumn<double> _lv_2w_2u;
  @override
  GeneratedColumn<double> get lv_2w_2u =>
      _lv_2w_2u ??= GeneratedColumn<double>('lv_2w_2u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2u_2nMeta = const VerificationMeta('lv_2u_2n');
  GeneratedColumn<double> _lv_2u_2n;
  @override
  GeneratedColumn<double> get lv_2u_2n =>
      _lv_2u_2n ??= GeneratedColumn<double>('lv_2u_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2v_2nMeta = const VerificationMeta('lv_2v_2n');
  GeneratedColumn<double> _lv_2v_2n;
  @override
  GeneratedColumn<double> get lv_2v_2n =>
      _lv_2v_2n ??= GeneratedColumn<double>('lv_2v_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2w_2nMeta = const VerificationMeta('lv_2w_2n');
  GeneratedColumn<double> _lv_2w_2n;
  @override
  GeneratedColumn<double> get lv_2w_2n =>
      _lv_2w_2n ??= GeneratedColumn<double>('lv_2w_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_1u_1v,
        hv_1v_1w,
        hv_1w_1u,
        hv_1u_1n,
        hv_1v_1n,
        hv_1w_1n,
        lv_2u_2v,
        lv_2v_2w,
        lv_2w_2u,
        lv_2u_2n,
        lv_2v_2n,
        lv_2w_2n,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powt_r_local_datasource_impl';
  @override
  String get actualTableName => 'powt_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PowtrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_1u_1v')) {
      context.handle(_hv_1u_1vMeta,
          hv_1u_1v.isAcceptableOrUnknown(data['hv_1u_1v'], _hv_1u_1vMeta));
    } else if (isInserting) {
      context.missing(_hv_1u_1vMeta);
    }
    if (data.containsKey('hv_1v_1w')) {
      context.handle(_hv_1v_1wMeta,
          hv_1v_1w.isAcceptableOrUnknown(data['hv_1v_1w'], _hv_1v_1wMeta));
    } else if (isInserting) {
      context.missing(_hv_1v_1wMeta);
    }
    if (data.containsKey('hv_1w_1u')) {
      context.handle(_hv_1w_1uMeta,
          hv_1w_1u.isAcceptableOrUnknown(data['hv_1w_1u'], _hv_1w_1uMeta));
    } else if (isInserting) {
      context.missing(_hv_1w_1uMeta);
    }
    if (data.containsKey('hv_1u_1n')) {
      context.handle(_hv_1u_1nMeta,
          hv_1u_1n.isAcceptableOrUnknown(data['hv_1u_1n'], _hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1u_1nMeta);
    }
    if (data.containsKey('hv_1v_1n')) {
      context.handle(_hv_1v_1nMeta,
          hv_1v_1n.isAcceptableOrUnknown(data['hv_1v_1n'], _hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1v_1nMeta);
    }
    if (data.containsKey('hv_1w_1n')) {
      context.handle(_hv_1w_1nMeta,
          hv_1w_1n.isAcceptableOrUnknown(data['hv_1w_1n'], _hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1w_1nMeta);
    }
    if (data.containsKey('lv_2u_2v')) {
      context.handle(_lv_2u_2vMeta,
          lv_2u_2v.isAcceptableOrUnknown(data['lv_2u_2v'], _lv_2u_2vMeta));
    } else if (isInserting) {
      context.missing(_lv_2u_2vMeta);
    }
    if (data.containsKey('lv_2v_2w')) {
      context.handle(_lv_2v_2wMeta,
          lv_2v_2w.isAcceptableOrUnknown(data['lv_2v_2w'], _lv_2v_2wMeta));
    } else if (isInserting) {
      context.missing(_lv_2v_2wMeta);
    }
    if (data.containsKey('lv_2w_2u')) {
      context.handle(_lv_2w_2uMeta,
          lv_2w_2u.isAcceptableOrUnknown(data['lv_2w_2u'], _lv_2w_2uMeta));
    } else if (isInserting) {
      context.missing(_lv_2w_2uMeta);
    }
    if (data.containsKey('lv_2u_2n')) {
      context.handle(_lv_2u_2nMeta,
          lv_2u_2n.isAcceptableOrUnknown(data['lv_2u_2n'], _lv_2u_2nMeta));
    } else if (isInserting) {
      context.missing(_lv_2u_2nMeta);
    }
    if (data.containsKey('lv_2v_2n')) {
      context.handle(_lv_2v_2nMeta,
          lv_2v_2n.isAcceptableOrUnknown(data['lv_2v_2n'], _lv_2v_2nMeta));
    } else if (isInserting) {
      context.missing(_lv_2v_2nMeta);
    }
    if (data.containsKey('lv_2w_2n')) {
      context.handle(_lv_2w_2nMeta,
          lv_2w_2n.isAcceptableOrUnknown(data['lv_2w_2n'], _lv_2w_2nMeta));
    } else if (isInserting) {
      context.missing(_lv_2w_2nMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowtrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowtrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt_R_LocalDatasourceImplTable createAlias(String alias) {
    return $Powt_R_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowtmcLocalData extends DataClass implements Insertable<PowtmcLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_1u_1n;
  final double hv_1v_1n;
  final double hv_1w_1n;
  final double hv_1u;
  final double hv_1v;
  final double hv_1w;
  final double hv_1n;
  final String equipmentUsed;
  final DateTime updateDate;
  PowtmcLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_1u_1n,
      @required this.hv_1v_1n,
      @required this.hv_1w_1n,
      @required this.hv_1u,
      @required this.hv_1v,
      @required this.hv_1w,
      @required this.hv_1n,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory PowtmcLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowtmcLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u_1n']),
      hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v_1n']),
      hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w_1n']),
      hv_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u']),
      hv_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v']),
      hv_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w']),
      hv_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1n']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_1u_1n != null) {
      map['hv_1u_1n'] = Variable<double>(hv_1u_1n);
    }
    if (!nullToAbsent || hv_1v_1n != null) {
      map['hv_1v_1n'] = Variable<double>(hv_1v_1n);
    }
    if (!nullToAbsent || hv_1w_1n != null) {
      map['hv_1w_1n'] = Variable<double>(hv_1w_1n);
    }
    if (!nullToAbsent || hv_1u != null) {
      map['hv_1u'] = Variable<double>(hv_1u);
    }
    if (!nullToAbsent || hv_1v != null) {
      map['hv_1v'] = Variable<double>(hv_1v);
    }
    if (!nullToAbsent || hv_1w != null) {
      map['hv_1w'] = Variable<double>(hv_1w);
    }
    if (!nullToAbsent || hv_1n != null) {
      map['hv_1n'] = Variable<double>(hv_1n);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  Powt_mc_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt_mc_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_1u_1n: hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1u_1n),
      hv_1v_1n: hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1v_1n),
      hv_1w_1n: hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1w_1n),
      hv_1u:
          hv_1u == null && nullToAbsent ? const Value.absent() : Value(hv_1u),
      hv_1v:
          hv_1v == null && nullToAbsent ? const Value.absent() : Value(hv_1v),
      hv_1w:
          hv_1w == null && nullToAbsent ? const Value.absent() : Value(hv_1w),
      hv_1n:
          hv_1n == null && nullToAbsent ? const Value.absent() : Value(hv_1n),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory PowtmcLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowtmcLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_1u_1n: serializer.fromJson<double>(json['hv_1u_1n']),
      hv_1v_1n: serializer.fromJson<double>(json['hv_1v_1n']),
      hv_1w_1n: serializer.fromJson<double>(json['hv_1w_1n']),
      hv_1u: serializer.fromJson<double>(json['hv_1u']),
      hv_1v: serializer.fromJson<double>(json['hv_1v']),
      hv_1w: serializer.fromJson<double>(json['hv_1w']),
      hv_1n: serializer.fromJson<double>(json['hv_1n']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_1u_1n': serializer.toJson<double>(hv_1u_1n),
      'hv_1v_1n': serializer.toJson<double>(hv_1v_1n),
      'hv_1w_1n': serializer.toJson<double>(hv_1w_1n),
      'hv_1u': serializer.toJson<double>(hv_1u),
      'hv_1v': serializer.toJson<double>(hv_1v),
      'hv_1w': serializer.toJson<double>(hv_1w),
      'hv_1n': serializer.toJson<double>(hv_1n),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  PowtmcLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_1u_1n,
          double hv_1v_1n,
          double hv_1w_1n,
          double hv_1u,
          double hv_1v,
          double hv_1w,
          double hv_1n,
          String equipmentUsed,
          DateTime updateDate}) =>
      PowtmcLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_1u_1n: hv_1u_1n ?? this.hv_1u_1n,
        hv_1v_1n: hv_1v_1n ?? this.hv_1v_1n,
        hv_1w_1n: hv_1w_1n ?? this.hv_1w_1n,
        hv_1u: hv_1u ?? this.hv_1u,
        hv_1v: hv_1v ?? this.hv_1v,
        hv_1w: hv_1w ?? this.hv_1w,
        hv_1n: hv_1n ?? this.hv_1n,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('PowtmcLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1n: $hv_1u_1n, ')
          ..write('hv_1v_1n: $hv_1v_1n, ')
          ..write('hv_1w_1n: $hv_1w_1n, ')
          ..write('hv_1u: $hv_1u, ')
          ..write('hv_1v: $hv_1v, ')
          ..write('hv_1w: $hv_1w, ')
          ..write('hv_1n: $hv_1n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      tapPosition,
      hv_1u_1n,
      hv_1v_1n,
      hv_1w_1n,
      hv_1u,
      hv_1v,
      hv_1w,
      hv_1n,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowtmcLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_1u_1n == this.hv_1u_1n &&
          other.hv_1v_1n == this.hv_1v_1n &&
          other.hv_1w_1n == this.hv_1w_1n &&
          other.hv_1u == this.hv_1u &&
          other.hv_1v == this.hv_1v &&
          other.hv_1w == this.hv_1w &&
          other.hv_1n == this.hv_1n &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class Powt_mc_LocalDatasourceImplCompanion
    extends UpdateCompanion<PowtmcLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_1u_1n;
  final Value<double> hv_1v_1n;
  final Value<double> hv_1w_1n;
  final Value<double> hv_1u;
  final Value<double> hv_1v;
  final Value<double> hv_1w;
  final Value<double> hv_1n;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const Powt_mc_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_1u_1n = const Value.absent(),
    this.hv_1v_1n = const Value.absent(),
    this.hv_1w_1n = const Value.absent(),
    this.hv_1u = const Value.absent(),
    this.hv_1v = const Value.absent(),
    this.hv_1w = const Value.absent(),
    this.hv_1n = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  Powt_mc_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_1u_1n,
    @required double hv_1v_1n,
    @required double hv_1w_1n,
    @required double hv_1u,
    @required double hv_1v,
    @required double hv_1w,
    @required double hv_1n,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_1u_1n = Value(hv_1u_1n),
        hv_1v_1n = Value(hv_1v_1n),
        hv_1w_1n = Value(hv_1w_1n),
        hv_1u = Value(hv_1u),
        hv_1v = Value(hv_1v),
        hv_1w = Value(hv_1w),
        hv_1n = Value(hv_1n),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<PowtmcLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_1u_1n,
    Expression<double> hv_1v_1n,
    Expression<double> hv_1w_1n,
    Expression<double> hv_1u,
    Expression<double> hv_1v,
    Expression<double> hv_1w,
    Expression<double> hv_1n,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_1u_1n != null) 'hv_1u_1n': hv_1u_1n,
      if (hv_1v_1n != null) 'hv_1v_1n': hv_1v_1n,
      if (hv_1w_1n != null) 'hv_1w_1n': hv_1w_1n,
      if (hv_1u != null) 'hv_1u': hv_1u,
      if (hv_1v != null) 'hv_1v': hv_1v,
      if (hv_1w != null) 'hv_1w': hv_1w,
      if (hv_1n != null) 'hv_1n': hv_1n,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  Powt_mc_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_1u_1n,
      Value<double> hv_1v_1n,
      Value<double> hv_1w_1n,
      Value<double> hv_1u,
      Value<double> hv_1v,
      Value<double> hv_1w,
      Value<double> hv_1n,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return Powt_mc_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_1u_1n: hv_1u_1n ?? this.hv_1u_1n,
      hv_1v_1n: hv_1v_1n ?? this.hv_1v_1n,
      hv_1w_1n: hv_1w_1n ?? this.hv_1w_1n,
      hv_1u: hv_1u ?? this.hv_1u,
      hv_1v: hv_1v ?? this.hv_1v,
      hv_1w: hv_1w ?? this.hv_1w,
      hv_1n: hv_1n ?? this.hv_1n,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_1u_1n.present) {
      map['hv_1u_1n'] = Variable<double>(hv_1u_1n.value);
    }
    if (hv_1v_1n.present) {
      map['hv_1v_1n'] = Variable<double>(hv_1v_1n.value);
    }
    if (hv_1w_1n.present) {
      map['hv_1w_1n'] = Variable<double>(hv_1w_1n.value);
    }
    if (hv_1u.present) {
      map['hv_1u'] = Variable<double>(hv_1u.value);
    }
    if (hv_1v.present) {
      map['hv_1v'] = Variable<double>(hv_1v.value);
    }
    if (hv_1w.present) {
      map['hv_1w'] = Variable<double>(hv_1w.value);
    }
    if (hv_1n.present) {
      map['hv_1n'] = Variable<double>(hv_1n.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt_mc_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1n: $hv_1u_1n, ')
          ..write('hv_1v_1n: $hv_1v_1n, ')
          ..write('hv_1w_1n: $hv_1w_1n, ')
          ..write('hv_1u: $hv_1u, ')
          ..write('hv_1v: $hv_1v, ')
          ..write('hv_1w: $hv_1w, ')
          ..write('hv_1n: $hv_1n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $Powt_mc_LocalDatasourceImplTable extends Powt_mc_LocalDatasourceImpl
    with TableInfo<$Powt_mc_LocalDatasourceImplTable, PowtmcLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt_mc_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1u_1nMeta = const VerificationMeta('hv_1u_1n');
  GeneratedColumn<double> _hv_1u_1n;
  @override
  GeneratedColumn<double> get hv_1u_1n =>
      _hv_1u_1n ??= GeneratedColumn<double>('hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1v_1nMeta = const VerificationMeta('hv_1v_1n');
  GeneratedColumn<double> _hv_1v_1n;
  @override
  GeneratedColumn<double> get hv_1v_1n =>
      _hv_1v_1n ??= GeneratedColumn<double>('hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1w_1nMeta = const VerificationMeta('hv_1w_1n');
  GeneratedColumn<double> _hv_1w_1n;
  @override
  GeneratedColumn<double> get hv_1w_1n =>
      _hv_1w_1n ??= GeneratedColumn<double>('hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1uMeta = const VerificationMeta('hv_1u');
  GeneratedColumn<double> _hv_1u;
  @override
  GeneratedColumn<double> get hv_1u =>
      _hv_1u ??= GeneratedColumn<double>('hv_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1vMeta = const VerificationMeta('hv_1v');
  GeneratedColumn<double> _hv_1v;
  @override
  GeneratedColumn<double> get hv_1v =>
      _hv_1v ??= GeneratedColumn<double>('hv_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1wMeta = const VerificationMeta('hv_1w');
  GeneratedColumn<double> _hv_1w;
  @override
  GeneratedColumn<double> get hv_1w =>
      _hv_1w ??= GeneratedColumn<double>('hv_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1nMeta = const VerificationMeta('hv_1n');
  GeneratedColumn<double> _hv_1n;
  @override
  GeneratedColumn<double> get hv_1n =>
      _hv_1n ??= GeneratedColumn<double>('hv_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_1u_1n,
        hv_1v_1n,
        hv_1w_1n,
        hv_1u,
        hv_1v,
        hv_1w,
        hv_1n,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powt_mc_local_datasource_impl';
  @override
  String get actualTableName => 'powt_mc_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PowtmcLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_1u_1n')) {
      context.handle(_hv_1u_1nMeta,
          hv_1u_1n.isAcceptableOrUnknown(data['hv_1u_1n'], _hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1u_1nMeta);
    }
    if (data.containsKey('hv_1v_1n')) {
      context.handle(_hv_1v_1nMeta,
          hv_1v_1n.isAcceptableOrUnknown(data['hv_1v_1n'], _hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1v_1nMeta);
    }
    if (data.containsKey('hv_1w_1n')) {
      context.handle(_hv_1w_1nMeta,
          hv_1w_1n.isAcceptableOrUnknown(data['hv_1w_1n'], _hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1w_1nMeta);
    }
    if (data.containsKey('hv_1u')) {
      context.handle(
          _hv_1uMeta, hv_1u.isAcceptableOrUnknown(data['hv_1u'], _hv_1uMeta));
    } else if (isInserting) {
      context.missing(_hv_1uMeta);
    }
    if (data.containsKey('hv_1v')) {
      context.handle(
          _hv_1vMeta, hv_1v.isAcceptableOrUnknown(data['hv_1v'], _hv_1vMeta));
    } else if (isInserting) {
      context.missing(_hv_1vMeta);
    }
    if (data.containsKey('hv_1w')) {
      context.handle(
          _hv_1wMeta, hv_1w.isAcceptableOrUnknown(data['hv_1w'], _hv_1wMeta));
    } else if (isInserting) {
      context.missing(_hv_1wMeta);
    }
    if (data.containsKey('hv_1n')) {
      context.handle(
          _hv_1nMeta, hv_1n.isAcceptableOrUnknown(data['hv_1n'], _hv_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1nMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowtmcLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowtmcLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt_mc_LocalDatasourceImplTable createAlias(String alias) {
    return $Powt_mc_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowtmbLocalData extends DataClass implements Insertable<PowtmbLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double ry_hv_1u_1v;
  final double ry_hv_1v_1w;
  final double ry_hv_1w_1u;
  final double ry_hv_1u_1n;
  final double ry_hv_1v_1n;
  final double ry_hv_1w_1n;
  final double ry_lv_2u_2v;
  final double ry_lv_2v_2w;
  final double ry_lv_2w_2u;
  final double ry_lv_2u_2n;
  final double ry_lv_2v_2n;
  final double ry_lv_2w_2n;
  final double yb_hv_1u_1v;
  final double yb_hv_1v_1w;
  final double yb_hv_1w_1u;
  final double yb_hv_1u_1n;
  final double yb_hv_1v_1n;
  final double yb_hv_1w_1n;
  final double yb_lv_2u_2v;
  final double yb_lv_2v_2w;
  final double yb_lv_2w_2u;
  final double yb_lv_2u_2n;
  final double yb_lv_2v_2n;
  final double yb_lv_2w_2n;
  final double br_hv_1u_1v;
  final double br_hv_1v_1w;
  final double br_hv_1w_1u;
  final double br_hv_1u_1n;
  final double br_hv_1v_1n;
  final double br_hv_1w_1n;
  final double br_lv_2u_2v;
  final double br_lv_2v_2w;
  final double br_lv_2w_2u;
  final double br_lv_2u_2n;
  final double br_lv_2v_2n;
  final double br_lv_2w_2n;
  final String equipmentUsed;
  final DateTime updateDate;
  PowtmbLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.ry_hv_1u_1v,
      @required this.ry_hv_1v_1w,
      @required this.ry_hv_1w_1u,
      @required this.ry_hv_1u_1n,
      @required this.ry_hv_1v_1n,
      @required this.ry_hv_1w_1n,
      @required this.ry_lv_2u_2v,
      @required this.ry_lv_2v_2w,
      @required this.ry_lv_2w_2u,
      @required this.ry_lv_2u_2n,
      @required this.ry_lv_2v_2n,
      @required this.ry_lv_2w_2n,
      @required this.yb_hv_1u_1v,
      @required this.yb_hv_1v_1w,
      @required this.yb_hv_1w_1u,
      @required this.yb_hv_1u_1n,
      @required this.yb_hv_1v_1n,
      @required this.yb_hv_1w_1n,
      @required this.yb_lv_2u_2v,
      @required this.yb_lv_2v_2w,
      @required this.yb_lv_2w_2u,
      @required this.yb_lv_2u_2n,
      @required this.yb_lv_2v_2n,
      @required this.yb_lv_2w_2n,
      @required this.br_hv_1u_1v,
      @required this.br_hv_1v_1w,
      @required this.br_hv_1w_1u,
      @required this.br_hv_1u_1n,
      @required this.br_hv_1v_1n,
      @required this.br_hv_1w_1n,
      @required this.br_lv_2u_2v,
      @required this.br_lv_2v_2w,
      @required this.br_lv_2w_2u,
      @required this.br_lv_2u_2n,
      @required this.br_lv_2v_2n,
      @required this.br_lv_2w_2n,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory PowtmbLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowtmbLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      ry_hv_1u_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1u_1v']),
      ry_hv_1v_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1v_1w']),
      ry_hv_1w_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1w_1u']),
      ry_hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1u_1n']),
      ry_hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1v_1n']),
      ry_hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_hv_1w_1n']),
      ry_lv_2u_2v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2u_2v']),
      ry_lv_2v_2w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2v_2w']),
      ry_lv_2w_2u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2w_2u']),
      ry_lv_2u_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2u_2n']),
      ry_lv_2v_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2v_2n']),
      ry_lv_2w_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_lv_2w_2n']),
      yb_hv_1u_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1u_1v']),
      yb_hv_1v_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1v_1w']),
      yb_hv_1w_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1w_1u']),
      yb_hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1u_1n']),
      yb_hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1v_1n']),
      yb_hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_hv_1w_1n']),
      yb_lv_2u_2v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2u_2v']),
      yb_lv_2v_2w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2v_2w']),
      yb_lv_2w_2u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2w_2u']),
      yb_lv_2u_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2u_2n']),
      yb_lv_2v_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2v_2n']),
      yb_lv_2w_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_lv_2w_2n']),
      br_hv_1u_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1u_1v']),
      br_hv_1v_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1v_1w']),
      br_hv_1w_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1w_1u']),
      br_hv_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1u_1n']),
      br_hv_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1v_1n']),
      br_hv_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_hv_1w_1n']),
      br_lv_2u_2v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2u_2v']),
      br_lv_2v_2w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2v_2w']),
      br_lv_2w_2u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2w_2u']),
      br_lv_2u_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2u_2n']),
      br_lv_2v_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2v_2n']),
      br_lv_2w_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_lv_2w_2n']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || ry_hv_1u_1v != null) {
      map['ry_hv_1u_1v'] = Variable<double>(ry_hv_1u_1v);
    }
    if (!nullToAbsent || ry_hv_1v_1w != null) {
      map['ry_hv_1v_1w'] = Variable<double>(ry_hv_1v_1w);
    }
    if (!nullToAbsent || ry_hv_1w_1u != null) {
      map['ry_hv_1w_1u'] = Variable<double>(ry_hv_1w_1u);
    }
    if (!nullToAbsent || ry_hv_1u_1n != null) {
      map['ry_hv_1u_1n'] = Variable<double>(ry_hv_1u_1n);
    }
    if (!nullToAbsent || ry_hv_1v_1n != null) {
      map['ry_hv_1v_1n'] = Variable<double>(ry_hv_1v_1n);
    }
    if (!nullToAbsent || ry_hv_1w_1n != null) {
      map['ry_hv_1w_1n'] = Variable<double>(ry_hv_1w_1n);
    }
    if (!nullToAbsent || ry_lv_2u_2v != null) {
      map['ry_lv_2u_2v'] = Variable<double>(ry_lv_2u_2v);
    }
    if (!nullToAbsent || ry_lv_2v_2w != null) {
      map['ry_lv_2v_2w'] = Variable<double>(ry_lv_2v_2w);
    }
    if (!nullToAbsent || ry_lv_2w_2u != null) {
      map['ry_lv_2w_2u'] = Variable<double>(ry_lv_2w_2u);
    }
    if (!nullToAbsent || ry_lv_2u_2n != null) {
      map['ry_lv_2u_2n'] = Variable<double>(ry_lv_2u_2n);
    }
    if (!nullToAbsent || ry_lv_2v_2n != null) {
      map['ry_lv_2v_2n'] = Variable<double>(ry_lv_2v_2n);
    }
    if (!nullToAbsent || ry_lv_2w_2n != null) {
      map['ry_lv_2w_2n'] = Variable<double>(ry_lv_2w_2n);
    }
    if (!nullToAbsent || yb_hv_1u_1v != null) {
      map['yb_hv_1u_1v'] = Variable<double>(yb_hv_1u_1v);
    }
    if (!nullToAbsent || yb_hv_1v_1w != null) {
      map['yb_hv_1v_1w'] = Variable<double>(yb_hv_1v_1w);
    }
    if (!nullToAbsent || yb_hv_1w_1u != null) {
      map['yb_hv_1w_1u'] = Variable<double>(yb_hv_1w_1u);
    }
    if (!nullToAbsent || yb_hv_1u_1n != null) {
      map['yb_hv_1u_1n'] = Variable<double>(yb_hv_1u_1n);
    }
    if (!nullToAbsent || yb_hv_1v_1n != null) {
      map['yb_hv_1v_1n'] = Variable<double>(yb_hv_1v_1n);
    }
    if (!nullToAbsent || yb_hv_1w_1n != null) {
      map['yb_hv_1w_1n'] = Variable<double>(yb_hv_1w_1n);
    }
    if (!nullToAbsent || yb_lv_2u_2v != null) {
      map['yb_lv_2u_2v'] = Variable<double>(yb_lv_2u_2v);
    }
    if (!nullToAbsent || yb_lv_2v_2w != null) {
      map['yb_lv_2v_2w'] = Variable<double>(yb_lv_2v_2w);
    }
    if (!nullToAbsent || yb_lv_2w_2u != null) {
      map['yb_lv_2w_2u'] = Variable<double>(yb_lv_2w_2u);
    }
    if (!nullToAbsent || yb_lv_2u_2n != null) {
      map['yb_lv_2u_2n'] = Variable<double>(yb_lv_2u_2n);
    }
    if (!nullToAbsent || yb_lv_2v_2n != null) {
      map['yb_lv_2v_2n'] = Variable<double>(yb_lv_2v_2n);
    }
    if (!nullToAbsent || yb_lv_2w_2n != null) {
      map['yb_lv_2w_2n'] = Variable<double>(yb_lv_2w_2n);
    }
    if (!nullToAbsent || br_hv_1u_1v != null) {
      map['br_hv_1u_1v'] = Variable<double>(br_hv_1u_1v);
    }
    if (!nullToAbsent || br_hv_1v_1w != null) {
      map['br_hv_1v_1w'] = Variable<double>(br_hv_1v_1w);
    }
    if (!nullToAbsent || br_hv_1w_1u != null) {
      map['br_hv_1w_1u'] = Variable<double>(br_hv_1w_1u);
    }
    if (!nullToAbsent || br_hv_1u_1n != null) {
      map['br_hv_1u_1n'] = Variable<double>(br_hv_1u_1n);
    }
    if (!nullToAbsent || br_hv_1v_1n != null) {
      map['br_hv_1v_1n'] = Variable<double>(br_hv_1v_1n);
    }
    if (!nullToAbsent || br_hv_1w_1n != null) {
      map['br_hv_1w_1n'] = Variable<double>(br_hv_1w_1n);
    }
    if (!nullToAbsent || br_lv_2u_2v != null) {
      map['br_lv_2u_2v'] = Variable<double>(br_lv_2u_2v);
    }
    if (!nullToAbsent || br_lv_2v_2w != null) {
      map['br_lv_2v_2w'] = Variable<double>(br_lv_2v_2w);
    }
    if (!nullToAbsent || br_lv_2w_2u != null) {
      map['br_lv_2w_2u'] = Variable<double>(br_lv_2w_2u);
    }
    if (!nullToAbsent || br_lv_2u_2n != null) {
      map['br_lv_2u_2n'] = Variable<double>(br_lv_2u_2n);
    }
    if (!nullToAbsent || br_lv_2v_2n != null) {
      map['br_lv_2v_2n'] = Variable<double>(br_lv_2v_2n);
    }
    if (!nullToAbsent || br_lv_2w_2n != null) {
      map['br_lv_2w_2n'] = Variable<double>(br_lv_2w_2n);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  Powt_mb_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt_mb_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      ry_hv_1u_1v: ry_hv_1u_1v == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1u_1v),
      ry_hv_1v_1w: ry_hv_1v_1w == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1v_1w),
      ry_hv_1w_1u: ry_hv_1w_1u == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1w_1u),
      ry_hv_1u_1n: ry_hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1u_1n),
      ry_hv_1v_1n: ry_hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1v_1n),
      ry_hv_1w_1n: ry_hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_hv_1w_1n),
      ry_lv_2u_2v: ry_lv_2u_2v == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2u_2v),
      ry_lv_2v_2w: ry_lv_2v_2w == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2v_2w),
      ry_lv_2w_2u: ry_lv_2w_2u == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2w_2u),
      ry_lv_2u_2n: ry_lv_2u_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2u_2n),
      ry_lv_2v_2n: ry_lv_2v_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2v_2n),
      ry_lv_2w_2n: ry_lv_2w_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(ry_lv_2w_2n),
      yb_hv_1u_1v: yb_hv_1u_1v == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1u_1v),
      yb_hv_1v_1w: yb_hv_1v_1w == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1v_1w),
      yb_hv_1w_1u: yb_hv_1w_1u == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1w_1u),
      yb_hv_1u_1n: yb_hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1u_1n),
      yb_hv_1v_1n: yb_hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1v_1n),
      yb_hv_1w_1n: yb_hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_hv_1w_1n),
      yb_lv_2u_2v: yb_lv_2u_2v == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2u_2v),
      yb_lv_2v_2w: yb_lv_2v_2w == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2v_2w),
      yb_lv_2w_2u: yb_lv_2w_2u == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2w_2u),
      yb_lv_2u_2n: yb_lv_2u_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2u_2n),
      yb_lv_2v_2n: yb_lv_2v_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2v_2n),
      yb_lv_2w_2n: yb_lv_2w_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(yb_lv_2w_2n),
      br_hv_1u_1v: br_hv_1u_1v == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1u_1v),
      br_hv_1v_1w: br_hv_1v_1w == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1v_1w),
      br_hv_1w_1u: br_hv_1w_1u == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1w_1u),
      br_hv_1u_1n: br_hv_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1u_1n),
      br_hv_1v_1n: br_hv_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1v_1n),
      br_hv_1w_1n: br_hv_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_hv_1w_1n),
      br_lv_2u_2v: br_lv_2u_2v == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2u_2v),
      br_lv_2v_2w: br_lv_2v_2w == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2v_2w),
      br_lv_2w_2u: br_lv_2w_2u == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2w_2u),
      br_lv_2u_2n: br_lv_2u_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2u_2n),
      br_lv_2v_2n: br_lv_2v_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2v_2n),
      br_lv_2w_2n: br_lv_2w_2n == null && nullToAbsent
          ? const Value.absent()
          : Value(br_lv_2w_2n),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory PowtmbLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowtmbLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      ry_hv_1u_1v: serializer.fromJson<double>(json['ry_hv_1u_1v']),
      ry_hv_1v_1w: serializer.fromJson<double>(json['ry_hv_1v_1w']),
      ry_hv_1w_1u: serializer.fromJson<double>(json['ry_hv_1w_1u']),
      ry_hv_1u_1n: serializer.fromJson<double>(json['ry_hv_1u_1n']),
      ry_hv_1v_1n: serializer.fromJson<double>(json['ry_hv_1v_1n']),
      ry_hv_1w_1n: serializer.fromJson<double>(json['ry_hv_1w_1n']),
      ry_lv_2u_2v: serializer.fromJson<double>(json['ry_lv_2u_2v']),
      ry_lv_2v_2w: serializer.fromJson<double>(json['ry_lv_2v_2w']),
      ry_lv_2w_2u: serializer.fromJson<double>(json['ry_lv_2w_2u']),
      ry_lv_2u_2n: serializer.fromJson<double>(json['ry_lv_2u_2n']),
      ry_lv_2v_2n: serializer.fromJson<double>(json['ry_lv_2v_2n']),
      ry_lv_2w_2n: serializer.fromJson<double>(json['ry_lv_2w_2n']),
      yb_hv_1u_1v: serializer.fromJson<double>(json['yb_hv_1u_1v']),
      yb_hv_1v_1w: serializer.fromJson<double>(json['yb_hv_1v_1w']),
      yb_hv_1w_1u: serializer.fromJson<double>(json['yb_hv_1w_1u']),
      yb_hv_1u_1n: serializer.fromJson<double>(json['yb_hv_1u_1n']),
      yb_hv_1v_1n: serializer.fromJson<double>(json['yb_hv_1v_1n']),
      yb_hv_1w_1n: serializer.fromJson<double>(json['yb_hv_1w_1n']),
      yb_lv_2u_2v: serializer.fromJson<double>(json['yb_lv_2u_2v']),
      yb_lv_2v_2w: serializer.fromJson<double>(json['yb_lv_2v_2w']),
      yb_lv_2w_2u: serializer.fromJson<double>(json['yb_lv_2w_2u']),
      yb_lv_2u_2n: serializer.fromJson<double>(json['yb_lv_2u_2n']),
      yb_lv_2v_2n: serializer.fromJson<double>(json['yb_lv_2v_2n']),
      yb_lv_2w_2n: serializer.fromJson<double>(json['yb_lv_2w_2n']),
      br_hv_1u_1v: serializer.fromJson<double>(json['br_hv_1u_1v']),
      br_hv_1v_1w: serializer.fromJson<double>(json['br_hv_1v_1w']),
      br_hv_1w_1u: serializer.fromJson<double>(json['br_hv_1w_1u']),
      br_hv_1u_1n: serializer.fromJson<double>(json['br_hv_1u_1n']),
      br_hv_1v_1n: serializer.fromJson<double>(json['br_hv_1v_1n']),
      br_hv_1w_1n: serializer.fromJson<double>(json['br_hv_1w_1n']),
      br_lv_2u_2v: serializer.fromJson<double>(json['br_lv_2u_2v']),
      br_lv_2v_2w: serializer.fromJson<double>(json['br_lv_2v_2w']),
      br_lv_2w_2u: serializer.fromJson<double>(json['br_lv_2w_2u']),
      br_lv_2u_2n: serializer.fromJson<double>(json['br_lv_2u_2n']),
      br_lv_2v_2n: serializer.fromJson<double>(json['br_lv_2v_2n']),
      br_lv_2w_2n: serializer.fromJson<double>(json['br_lv_2w_2n']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'ry_hv_1u_1v': serializer.toJson<double>(ry_hv_1u_1v),
      'ry_hv_1v_1w': serializer.toJson<double>(ry_hv_1v_1w),
      'ry_hv_1w_1u': serializer.toJson<double>(ry_hv_1w_1u),
      'ry_hv_1u_1n': serializer.toJson<double>(ry_hv_1u_1n),
      'ry_hv_1v_1n': serializer.toJson<double>(ry_hv_1v_1n),
      'ry_hv_1w_1n': serializer.toJson<double>(ry_hv_1w_1n),
      'ry_lv_2u_2v': serializer.toJson<double>(ry_lv_2u_2v),
      'ry_lv_2v_2w': serializer.toJson<double>(ry_lv_2v_2w),
      'ry_lv_2w_2u': serializer.toJson<double>(ry_lv_2w_2u),
      'ry_lv_2u_2n': serializer.toJson<double>(ry_lv_2u_2n),
      'ry_lv_2v_2n': serializer.toJson<double>(ry_lv_2v_2n),
      'ry_lv_2w_2n': serializer.toJson<double>(ry_lv_2w_2n),
      'yb_hv_1u_1v': serializer.toJson<double>(yb_hv_1u_1v),
      'yb_hv_1v_1w': serializer.toJson<double>(yb_hv_1v_1w),
      'yb_hv_1w_1u': serializer.toJson<double>(yb_hv_1w_1u),
      'yb_hv_1u_1n': serializer.toJson<double>(yb_hv_1u_1n),
      'yb_hv_1v_1n': serializer.toJson<double>(yb_hv_1v_1n),
      'yb_hv_1w_1n': serializer.toJson<double>(yb_hv_1w_1n),
      'yb_lv_2u_2v': serializer.toJson<double>(yb_lv_2u_2v),
      'yb_lv_2v_2w': serializer.toJson<double>(yb_lv_2v_2w),
      'yb_lv_2w_2u': serializer.toJson<double>(yb_lv_2w_2u),
      'yb_lv_2u_2n': serializer.toJson<double>(yb_lv_2u_2n),
      'yb_lv_2v_2n': serializer.toJson<double>(yb_lv_2v_2n),
      'yb_lv_2w_2n': serializer.toJson<double>(yb_lv_2w_2n),
      'br_hv_1u_1v': serializer.toJson<double>(br_hv_1u_1v),
      'br_hv_1v_1w': serializer.toJson<double>(br_hv_1v_1w),
      'br_hv_1w_1u': serializer.toJson<double>(br_hv_1w_1u),
      'br_hv_1u_1n': serializer.toJson<double>(br_hv_1u_1n),
      'br_hv_1v_1n': serializer.toJson<double>(br_hv_1v_1n),
      'br_hv_1w_1n': serializer.toJson<double>(br_hv_1w_1n),
      'br_lv_2u_2v': serializer.toJson<double>(br_lv_2u_2v),
      'br_lv_2v_2w': serializer.toJson<double>(br_lv_2v_2w),
      'br_lv_2w_2u': serializer.toJson<double>(br_lv_2w_2u),
      'br_lv_2u_2n': serializer.toJson<double>(br_lv_2u_2n),
      'br_lv_2v_2n': serializer.toJson<double>(br_lv_2v_2n),
      'br_lv_2w_2n': serializer.toJson<double>(br_lv_2w_2n),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  PowtmbLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double ry_hv_1u_1v,
          double ry_hv_1v_1w,
          double ry_hv_1w_1u,
          double ry_hv_1u_1n,
          double ry_hv_1v_1n,
          double ry_hv_1w_1n,
          double ry_lv_2u_2v,
          double ry_lv_2v_2w,
          double ry_lv_2w_2u,
          double ry_lv_2u_2n,
          double ry_lv_2v_2n,
          double ry_lv_2w_2n,
          double yb_hv_1u_1v,
          double yb_hv_1v_1w,
          double yb_hv_1w_1u,
          double yb_hv_1u_1n,
          double yb_hv_1v_1n,
          double yb_hv_1w_1n,
          double yb_lv_2u_2v,
          double yb_lv_2v_2w,
          double yb_lv_2w_2u,
          double yb_lv_2u_2n,
          double yb_lv_2v_2n,
          double yb_lv_2w_2n,
          double br_hv_1u_1v,
          double br_hv_1v_1w,
          double br_hv_1w_1u,
          double br_hv_1u_1n,
          double br_hv_1v_1n,
          double br_hv_1w_1n,
          double br_lv_2u_2v,
          double br_lv_2v_2w,
          double br_lv_2w_2u,
          double br_lv_2u_2n,
          double br_lv_2v_2n,
          double br_lv_2w_2n,
          String equipmentUsed,
          DateTime updateDate}) =>
      PowtmbLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        ry_hv_1u_1v: ry_hv_1u_1v ?? this.ry_hv_1u_1v,
        ry_hv_1v_1w: ry_hv_1v_1w ?? this.ry_hv_1v_1w,
        ry_hv_1w_1u: ry_hv_1w_1u ?? this.ry_hv_1w_1u,
        ry_hv_1u_1n: ry_hv_1u_1n ?? this.ry_hv_1u_1n,
        ry_hv_1v_1n: ry_hv_1v_1n ?? this.ry_hv_1v_1n,
        ry_hv_1w_1n: ry_hv_1w_1n ?? this.ry_hv_1w_1n,
        ry_lv_2u_2v: ry_lv_2u_2v ?? this.ry_lv_2u_2v,
        ry_lv_2v_2w: ry_lv_2v_2w ?? this.ry_lv_2v_2w,
        ry_lv_2w_2u: ry_lv_2w_2u ?? this.ry_lv_2w_2u,
        ry_lv_2u_2n: ry_lv_2u_2n ?? this.ry_lv_2u_2n,
        ry_lv_2v_2n: ry_lv_2v_2n ?? this.ry_lv_2v_2n,
        ry_lv_2w_2n: ry_lv_2w_2n ?? this.ry_lv_2w_2n,
        yb_hv_1u_1v: yb_hv_1u_1v ?? this.yb_hv_1u_1v,
        yb_hv_1v_1w: yb_hv_1v_1w ?? this.yb_hv_1v_1w,
        yb_hv_1w_1u: yb_hv_1w_1u ?? this.yb_hv_1w_1u,
        yb_hv_1u_1n: yb_hv_1u_1n ?? this.yb_hv_1u_1n,
        yb_hv_1v_1n: yb_hv_1v_1n ?? this.yb_hv_1v_1n,
        yb_hv_1w_1n: yb_hv_1w_1n ?? this.yb_hv_1w_1n,
        yb_lv_2u_2v: yb_lv_2u_2v ?? this.yb_lv_2u_2v,
        yb_lv_2v_2w: yb_lv_2v_2w ?? this.yb_lv_2v_2w,
        yb_lv_2w_2u: yb_lv_2w_2u ?? this.yb_lv_2w_2u,
        yb_lv_2u_2n: yb_lv_2u_2n ?? this.yb_lv_2u_2n,
        yb_lv_2v_2n: yb_lv_2v_2n ?? this.yb_lv_2v_2n,
        yb_lv_2w_2n: yb_lv_2w_2n ?? this.yb_lv_2w_2n,
        br_hv_1u_1v: br_hv_1u_1v ?? this.br_hv_1u_1v,
        br_hv_1v_1w: br_hv_1v_1w ?? this.br_hv_1v_1w,
        br_hv_1w_1u: br_hv_1w_1u ?? this.br_hv_1w_1u,
        br_hv_1u_1n: br_hv_1u_1n ?? this.br_hv_1u_1n,
        br_hv_1v_1n: br_hv_1v_1n ?? this.br_hv_1v_1n,
        br_hv_1w_1n: br_hv_1w_1n ?? this.br_hv_1w_1n,
        br_lv_2u_2v: br_lv_2u_2v ?? this.br_lv_2u_2v,
        br_lv_2v_2w: br_lv_2v_2w ?? this.br_lv_2v_2w,
        br_lv_2w_2u: br_lv_2w_2u ?? this.br_lv_2w_2u,
        br_lv_2u_2n: br_lv_2u_2n ?? this.br_lv_2u_2n,
        br_lv_2v_2n: br_lv_2v_2n ?? this.br_lv_2v_2n,
        br_lv_2w_2n: br_lv_2w_2n ?? this.br_lv_2w_2n,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('PowtmbLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('ry_hv_1u_1v: $ry_hv_1u_1v, ')
          ..write('ry_hv_1v_1w: $ry_hv_1v_1w, ')
          ..write('ry_hv_1w_1u: $ry_hv_1w_1u, ')
          ..write('ry_hv_1u_1n: $ry_hv_1u_1n, ')
          ..write('ry_hv_1v_1n: $ry_hv_1v_1n, ')
          ..write('ry_hv_1w_1n: $ry_hv_1w_1n, ')
          ..write('ry_lv_2u_2v: $ry_lv_2u_2v, ')
          ..write('ry_lv_2v_2w: $ry_lv_2v_2w, ')
          ..write('ry_lv_2w_2u: $ry_lv_2w_2u, ')
          ..write('ry_lv_2u_2n: $ry_lv_2u_2n, ')
          ..write('ry_lv_2v_2n: $ry_lv_2v_2n, ')
          ..write('ry_lv_2w_2n: $ry_lv_2w_2n, ')
          ..write('yb_hv_1u_1v: $yb_hv_1u_1v, ')
          ..write('yb_hv_1v_1w: $yb_hv_1v_1w, ')
          ..write('yb_hv_1w_1u: $yb_hv_1w_1u, ')
          ..write('yb_hv_1u_1n: $yb_hv_1u_1n, ')
          ..write('yb_hv_1v_1n: $yb_hv_1v_1n, ')
          ..write('yb_hv_1w_1n: $yb_hv_1w_1n, ')
          ..write('yb_lv_2u_2v: $yb_lv_2u_2v, ')
          ..write('yb_lv_2v_2w: $yb_lv_2v_2w, ')
          ..write('yb_lv_2w_2u: $yb_lv_2w_2u, ')
          ..write('yb_lv_2u_2n: $yb_lv_2u_2n, ')
          ..write('yb_lv_2v_2n: $yb_lv_2v_2n, ')
          ..write('yb_lv_2w_2n: $yb_lv_2w_2n, ')
          ..write('br_hv_1u_1v: $br_hv_1u_1v, ')
          ..write('br_hv_1v_1w: $br_hv_1v_1w, ')
          ..write('br_hv_1w_1u: $br_hv_1w_1u, ')
          ..write('br_hv_1u_1n: $br_hv_1u_1n, ')
          ..write('br_hv_1v_1n: $br_hv_1v_1n, ')
          ..write('br_hv_1w_1n: $br_hv_1w_1n, ')
          ..write('br_lv_2u_2v: $br_lv_2u_2v, ')
          ..write('br_lv_2v_2w: $br_lv_2v_2w, ')
          ..write('br_lv_2w_2u: $br_lv_2w_2u, ')
          ..write('br_lv_2u_2n: $br_lv_2u_2n, ')
          ..write('br_lv_2v_2n: $br_lv_2v_2n, ')
          ..write('br_lv_2w_2n: $br_lv_2w_2n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        ry_hv_1u_1v,
        ry_hv_1v_1w,
        ry_hv_1w_1u,
        ry_hv_1u_1n,
        ry_hv_1v_1n,
        ry_hv_1w_1n,
        ry_lv_2u_2v,
        ry_lv_2v_2w,
        ry_lv_2w_2u,
        ry_lv_2u_2n,
        ry_lv_2v_2n,
        ry_lv_2w_2n,
        yb_hv_1u_1v,
        yb_hv_1v_1w,
        yb_hv_1w_1u,
        yb_hv_1u_1n,
        yb_hv_1v_1n,
        yb_hv_1w_1n,
        yb_lv_2u_2v,
        yb_lv_2v_2w,
        yb_lv_2w_2u,
        yb_lv_2u_2n,
        yb_lv_2v_2n,
        yb_lv_2w_2n,
        br_hv_1u_1v,
        br_hv_1v_1w,
        br_hv_1w_1u,
        br_hv_1u_1n,
        br_hv_1v_1n,
        br_hv_1w_1n,
        br_lv_2u_2v,
        br_lv_2v_2w,
        br_lv_2w_2u,
        br_lv_2u_2n,
        br_lv_2v_2n,
        br_lv_2w_2n,
        equipmentUsed,
        updateDate
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowtmbLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.ry_hv_1u_1v == this.ry_hv_1u_1v &&
          other.ry_hv_1v_1w == this.ry_hv_1v_1w &&
          other.ry_hv_1w_1u == this.ry_hv_1w_1u &&
          other.ry_hv_1u_1n == this.ry_hv_1u_1n &&
          other.ry_hv_1v_1n == this.ry_hv_1v_1n &&
          other.ry_hv_1w_1n == this.ry_hv_1w_1n &&
          other.ry_lv_2u_2v == this.ry_lv_2u_2v &&
          other.ry_lv_2v_2w == this.ry_lv_2v_2w &&
          other.ry_lv_2w_2u == this.ry_lv_2w_2u &&
          other.ry_lv_2u_2n == this.ry_lv_2u_2n &&
          other.ry_lv_2v_2n == this.ry_lv_2v_2n &&
          other.ry_lv_2w_2n == this.ry_lv_2w_2n &&
          other.yb_hv_1u_1v == this.yb_hv_1u_1v &&
          other.yb_hv_1v_1w == this.yb_hv_1v_1w &&
          other.yb_hv_1w_1u == this.yb_hv_1w_1u &&
          other.yb_hv_1u_1n == this.yb_hv_1u_1n &&
          other.yb_hv_1v_1n == this.yb_hv_1v_1n &&
          other.yb_hv_1w_1n == this.yb_hv_1w_1n &&
          other.yb_lv_2u_2v == this.yb_lv_2u_2v &&
          other.yb_lv_2v_2w == this.yb_lv_2v_2w &&
          other.yb_lv_2w_2u == this.yb_lv_2w_2u &&
          other.yb_lv_2u_2n == this.yb_lv_2u_2n &&
          other.yb_lv_2v_2n == this.yb_lv_2v_2n &&
          other.yb_lv_2w_2n == this.yb_lv_2w_2n &&
          other.br_hv_1u_1v == this.br_hv_1u_1v &&
          other.br_hv_1v_1w == this.br_hv_1v_1w &&
          other.br_hv_1w_1u == this.br_hv_1w_1u &&
          other.br_hv_1u_1n == this.br_hv_1u_1n &&
          other.br_hv_1v_1n == this.br_hv_1v_1n &&
          other.br_hv_1w_1n == this.br_hv_1w_1n &&
          other.br_lv_2u_2v == this.br_lv_2u_2v &&
          other.br_lv_2v_2w == this.br_lv_2v_2w &&
          other.br_lv_2w_2u == this.br_lv_2w_2u &&
          other.br_lv_2u_2n == this.br_lv_2u_2n &&
          other.br_lv_2v_2n == this.br_lv_2v_2n &&
          other.br_lv_2w_2n == this.br_lv_2w_2n &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class Powt_mb_LocalDatasourceImplCompanion
    extends UpdateCompanion<PowtmbLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> ry_hv_1u_1v;
  final Value<double> ry_hv_1v_1w;
  final Value<double> ry_hv_1w_1u;
  final Value<double> ry_hv_1u_1n;
  final Value<double> ry_hv_1v_1n;
  final Value<double> ry_hv_1w_1n;
  final Value<double> ry_lv_2u_2v;
  final Value<double> ry_lv_2v_2w;
  final Value<double> ry_lv_2w_2u;
  final Value<double> ry_lv_2u_2n;
  final Value<double> ry_lv_2v_2n;
  final Value<double> ry_lv_2w_2n;
  final Value<double> yb_hv_1u_1v;
  final Value<double> yb_hv_1v_1w;
  final Value<double> yb_hv_1w_1u;
  final Value<double> yb_hv_1u_1n;
  final Value<double> yb_hv_1v_1n;
  final Value<double> yb_hv_1w_1n;
  final Value<double> yb_lv_2u_2v;
  final Value<double> yb_lv_2v_2w;
  final Value<double> yb_lv_2w_2u;
  final Value<double> yb_lv_2u_2n;
  final Value<double> yb_lv_2v_2n;
  final Value<double> yb_lv_2w_2n;
  final Value<double> br_hv_1u_1v;
  final Value<double> br_hv_1v_1w;
  final Value<double> br_hv_1w_1u;
  final Value<double> br_hv_1u_1n;
  final Value<double> br_hv_1v_1n;
  final Value<double> br_hv_1w_1n;
  final Value<double> br_lv_2u_2v;
  final Value<double> br_lv_2v_2w;
  final Value<double> br_lv_2w_2u;
  final Value<double> br_lv_2u_2n;
  final Value<double> br_lv_2v_2n;
  final Value<double> br_lv_2w_2n;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const Powt_mb_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.ry_hv_1u_1v = const Value.absent(),
    this.ry_hv_1v_1w = const Value.absent(),
    this.ry_hv_1w_1u = const Value.absent(),
    this.ry_hv_1u_1n = const Value.absent(),
    this.ry_hv_1v_1n = const Value.absent(),
    this.ry_hv_1w_1n = const Value.absent(),
    this.ry_lv_2u_2v = const Value.absent(),
    this.ry_lv_2v_2w = const Value.absent(),
    this.ry_lv_2w_2u = const Value.absent(),
    this.ry_lv_2u_2n = const Value.absent(),
    this.ry_lv_2v_2n = const Value.absent(),
    this.ry_lv_2w_2n = const Value.absent(),
    this.yb_hv_1u_1v = const Value.absent(),
    this.yb_hv_1v_1w = const Value.absent(),
    this.yb_hv_1w_1u = const Value.absent(),
    this.yb_hv_1u_1n = const Value.absent(),
    this.yb_hv_1v_1n = const Value.absent(),
    this.yb_hv_1w_1n = const Value.absent(),
    this.yb_lv_2u_2v = const Value.absent(),
    this.yb_lv_2v_2w = const Value.absent(),
    this.yb_lv_2w_2u = const Value.absent(),
    this.yb_lv_2u_2n = const Value.absent(),
    this.yb_lv_2v_2n = const Value.absent(),
    this.yb_lv_2w_2n = const Value.absent(),
    this.br_hv_1u_1v = const Value.absent(),
    this.br_hv_1v_1w = const Value.absent(),
    this.br_hv_1w_1u = const Value.absent(),
    this.br_hv_1u_1n = const Value.absent(),
    this.br_hv_1v_1n = const Value.absent(),
    this.br_hv_1w_1n = const Value.absent(),
    this.br_lv_2u_2v = const Value.absent(),
    this.br_lv_2v_2w = const Value.absent(),
    this.br_lv_2w_2u = const Value.absent(),
    this.br_lv_2u_2n = const Value.absent(),
    this.br_lv_2v_2n = const Value.absent(),
    this.br_lv_2w_2n = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  Powt_mb_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double ry_hv_1u_1v,
    @required double ry_hv_1v_1w,
    @required double ry_hv_1w_1u,
    @required double ry_hv_1u_1n,
    @required double ry_hv_1v_1n,
    @required double ry_hv_1w_1n,
    @required double ry_lv_2u_2v,
    @required double ry_lv_2v_2w,
    @required double ry_lv_2w_2u,
    @required double ry_lv_2u_2n,
    @required double ry_lv_2v_2n,
    @required double ry_lv_2w_2n,
    @required double yb_hv_1u_1v,
    @required double yb_hv_1v_1w,
    @required double yb_hv_1w_1u,
    @required double yb_hv_1u_1n,
    @required double yb_hv_1v_1n,
    @required double yb_hv_1w_1n,
    @required double yb_lv_2u_2v,
    @required double yb_lv_2v_2w,
    @required double yb_lv_2w_2u,
    @required double yb_lv_2u_2n,
    @required double yb_lv_2v_2n,
    @required double yb_lv_2w_2n,
    @required double br_hv_1u_1v,
    @required double br_hv_1v_1w,
    @required double br_hv_1w_1u,
    @required double br_hv_1u_1n,
    @required double br_hv_1v_1n,
    @required double br_hv_1w_1n,
    @required double br_lv_2u_2v,
    @required double br_lv_2v_2w,
    @required double br_lv_2w_2u,
    @required double br_lv_2u_2n,
    @required double br_lv_2v_2n,
    @required double br_lv_2w_2n,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        ry_hv_1u_1v = Value(ry_hv_1u_1v),
        ry_hv_1v_1w = Value(ry_hv_1v_1w),
        ry_hv_1w_1u = Value(ry_hv_1w_1u),
        ry_hv_1u_1n = Value(ry_hv_1u_1n),
        ry_hv_1v_1n = Value(ry_hv_1v_1n),
        ry_hv_1w_1n = Value(ry_hv_1w_1n),
        ry_lv_2u_2v = Value(ry_lv_2u_2v),
        ry_lv_2v_2w = Value(ry_lv_2v_2w),
        ry_lv_2w_2u = Value(ry_lv_2w_2u),
        ry_lv_2u_2n = Value(ry_lv_2u_2n),
        ry_lv_2v_2n = Value(ry_lv_2v_2n),
        ry_lv_2w_2n = Value(ry_lv_2w_2n),
        yb_hv_1u_1v = Value(yb_hv_1u_1v),
        yb_hv_1v_1w = Value(yb_hv_1v_1w),
        yb_hv_1w_1u = Value(yb_hv_1w_1u),
        yb_hv_1u_1n = Value(yb_hv_1u_1n),
        yb_hv_1v_1n = Value(yb_hv_1v_1n),
        yb_hv_1w_1n = Value(yb_hv_1w_1n),
        yb_lv_2u_2v = Value(yb_lv_2u_2v),
        yb_lv_2v_2w = Value(yb_lv_2v_2w),
        yb_lv_2w_2u = Value(yb_lv_2w_2u),
        yb_lv_2u_2n = Value(yb_lv_2u_2n),
        yb_lv_2v_2n = Value(yb_lv_2v_2n),
        yb_lv_2w_2n = Value(yb_lv_2w_2n),
        br_hv_1u_1v = Value(br_hv_1u_1v),
        br_hv_1v_1w = Value(br_hv_1v_1w),
        br_hv_1w_1u = Value(br_hv_1w_1u),
        br_hv_1u_1n = Value(br_hv_1u_1n),
        br_hv_1v_1n = Value(br_hv_1v_1n),
        br_hv_1w_1n = Value(br_hv_1w_1n),
        br_lv_2u_2v = Value(br_lv_2u_2v),
        br_lv_2v_2w = Value(br_lv_2v_2w),
        br_lv_2w_2u = Value(br_lv_2w_2u),
        br_lv_2u_2n = Value(br_lv_2u_2n),
        br_lv_2v_2n = Value(br_lv_2v_2n),
        br_lv_2w_2n = Value(br_lv_2w_2n),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<PowtmbLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> ry_hv_1u_1v,
    Expression<double> ry_hv_1v_1w,
    Expression<double> ry_hv_1w_1u,
    Expression<double> ry_hv_1u_1n,
    Expression<double> ry_hv_1v_1n,
    Expression<double> ry_hv_1w_1n,
    Expression<double> ry_lv_2u_2v,
    Expression<double> ry_lv_2v_2w,
    Expression<double> ry_lv_2w_2u,
    Expression<double> ry_lv_2u_2n,
    Expression<double> ry_lv_2v_2n,
    Expression<double> ry_lv_2w_2n,
    Expression<double> yb_hv_1u_1v,
    Expression<double> yb_hv_1v_1w,
    Expression<double> yb_hv_1w_1u,
    Expression<double> yb_hv_1u_1n,
    Expression<double> yb_hv_1v_1n,
    Expression<double> yb_hv_1w_1n,
    Expression<double> yb_lv_2u_2v,
    Expression<double> yb_lv_2v_2w,
    Expression<double> yb_lv_2w_2u,
    Expression<double> yb_lv_2u_2n,
    Expression<double> yb_lv_2v_2n,
    Expression<double> yb_lv_2w_2n,
    Expression<double> br_hv_1u_1v,
    Expression<double> br_hv_1v_1w,
    Expression<double> br_hv_1w_1u,
    Expression<double> br_hv_1u_1n,
    Expression<double> br_hv_1v_1n,
    Expression<double> br_hv_1w_1n,
    Expression<double> br_lv_2u_2v,
    Expression<double> br_lv_2v_2w,
    Expression<double> br_lv_2w_2u,
    Expression<double> br_lv_2u_2n,
    Expression<double> br_lv_2v_2n,
    Expression<double> br_lv_2w_2n,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (ry_hv_1u_1v != null) 'ry_hv_1u_1v': ry_hv_1u_1v,
      if (ry_hv_1v_1w != null) 'ry_hv_1v_1w': ry_hv_1v_1w,
      if (ry_hv_1w_1u != null) 'ry_hv_1w_1u': ry_hv_1w_1u,
      if (ry_hv_1u_1n != null) 'ry_hv_1u_1n': ry_hv_1u_1n,
      if (ry_hv_1v_1n != null) 'ry_hv_1v_1n': ry_hv_1v_1n,
      if (ry_hv_1w_1n != null) 'ry_hv_1w_1n': ry_hv_1w_1n,
      if (ry_lv_2u_2v != null) 'ry_lv_2u_2v': ry_lv_2u_2v,
      if (ry_lv_2v_2w != null) 'ry_lv_2v_2w': ry_lv_2v_2w,
      if (ry_lv_2w_2u != null) 'ry_lv_2w_2u': ry_lv_2w_2u,
      if (ry_lv_2u_2n != null) 'ry_lv_2u_2n': ry_lv_2u_2n,
      if (ry_lv_2v_2n != null) 'ry_lv_2v_2n': ry_lv_2v_2n,
      if (ry_lv_2w_2n != null) 'ry_lv_2w_2n': ry_lv_2w_2n,
      if (yb_hv_1u_1v != null) 'yb_hv_1u_1v': yb_hv_1u_1v,
      if (yb_hv_1v_1w != null) 'yb_hv_1v_1w': yb_hv_1v_1w,
      if (yb_hv_1w_1u != null) 'yb_hv_1w_1u': yb_hv_1w_1u,
      if (yb_hv_1u_1n != null) 'yb_hv_1u_1n': yb_hv_1u_1n,
      if (yb_hv_1v_1n != null) 'yb_hv_1v_1n': yb_hv_1v_1n,
      if (yb_hv_1w_1n != null) 'yb_hv_1w_1n': yb_hv_1w_1n,
      if (yb_lv_2u_2v != null) 'yb_lv_2u_2v': yb_lv_2u_2v,
      if (yb_lv_2v_2w != null) 'yb_lv_2v_2w': yb_lv_2v_2w,
      if (yb_lv_2w_2u != null) 'yb_lv_2w_2u': yb_lv_2w_2u,
      if (yb_lv_2u_2n != null) 'yb_lv_2u_2n': yb_lv_2u_2n,
      if (yb_lv_2v_2n != null) 'yb_lv_2v_2n': yb_lv_2v_2n,
      if (yb_lv_2w_2n != null) 'yb_lv_2w_2n': yb_lv_2w_2n,
      if (br_hv_1u_1v != null) 'br_hv_1u_1v': br_hv_1u_1v,
      if (br_hv_1v_1w != null) 'br_hv_1v_1w': br_hv_1v_1w,
      if (br_hv_1w_1u != null) 'br_hv_1w_1u': br_hv_1w_1u,
      if (br_hv_1u_1n != null) 'br_hv_1u_1n': br_hv_1u_1n,
      if (br_hv_1v_1n != null) 'br_hv_1v_1n': br_hv_1v_1n,
      if (br_hv_1w_1n != null) 'br_hv_1w_1n': br_hv_1w_1n,
      if (br_lv_2u_2v != null) 'br_lv_2u_2v': br_lv_2u_2v,
      if (br_lv_2v_2w != null) 'br_lv_2v_2w': br_lv_2v_2w,
      if (br_lv_2w_2u != null) 'br_lv_2w_2u': br_lv_2w_2u,
      if (br_lv_2u_2n != null) 'br_lv_2u_2n': br_lv_2u_2n,
      if (br_lv_2v_2n != null) 'br_lv_2v_2n': br_lv_2v_2n,
      if (br_lv_2w_2n != null) 'br_lv_2w_2n': br_lv_2w_2n,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  Powt_mb_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> ry_hv_1u_1v,
      Value<double> ry_hv_1v_1w,
      Value<double> ry_hv_1w_1u,
      Value<double> ry_hv_1u_1n,
      Value<double> ry_hv_1v_1n,
      Value<double> ry_hv_1w_1n,
      Value<double> ry_lv_2u_2v,
      Value<double> ry_lv_2v_2w,
      Value<double> ry_lv_2w_2u,
      Value<double> ry_lv_2u_2n,
      Value<double> ry_lv_2v_2n,
      Value<double> ry_lv_2w_2n,
      Value<double> yb_hv_1u_1v,
      Value<double> yb_hv_1v_1w,
      Value<double> yb_hv_1w_1u,
      Value<double> yb_hv_1u_1n,
      Value<double> yb_hv_1v_1n,
      Value<double> yb_hv_1w_1n,
      Value<double> yb_lv_2u_2v,
      Value<double> yb_lv_2v_2w,
      Value<double> yb_lv_2w_2u,
      Value<double> yb_lv_2u_2n,
      Value<double> yb_lv_2v_2n,
      Value<double> yb_lv_2w_2n,
      Value<double> br_hv_1u_1v,
      Value<double> br_hv_1v_1w,
      Value<double> br_hv_1w_1u,
      Value<double> br_hv_1u_1n,
      Value<double> br_hv_1v_1n,
      Value<double> br_hv_1w_1n,
      Value<double> br_lv_2u_2v,
      Value<double> br_lv_2v_2w,
      Value<double> br_lv_2w_2u,
      Value<double> br_lv_2u_2n,
      Value<double> br_lv_2v_2n,
      Value<double> br_lv_2w_2n,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return Powt_mb_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      ry_hv_1u_1v: ry_hv_1u_1v ?? this.ry_hv_1u_1v,
      ry_hv_1v_1w: ry_hv_1v_1w ?? this.ry_hv_1v_1w,
      ry_hv_1w_1u: ry_hv_1w_1u ?? this.ry_hv_1w_1u,
      ry_hv_1u_1n: ry_hv_1u_1n ?? this.ry_hv_1u_1n,
      ry_hv_1v_1n: ry_hv_1v_1n ?? this.ry_hv_1v_1n,
      ry_hv_1w_1n: ry_hv_1w_1n ?? this.ry_hv_1w_1n,
      ry_lv_2u_2v: ry_lv_2u_2v ?? this.ry_lv_2u_2v,
      ry_lv_2v_2w: ry_lv_2v_2w ?? this.ry_lv_2v_2w,
      ry_lv_2w_2u: ry_lv_2w_2u ?? this.ry_lv_2w_2u,
      ry_lv_2u_2n: ry_lv_2u_2n ?? this.ry_lv_2u_2n,
      ry_lv_2v_2n: ry_lv_2v_2n ?? this.ry_lv_2v_2n,
      ry_lv_2w_2n: ry_lv_2w_2n ?? this.ry_lv_2w_2n,
      yb_hv_1u_1v: yb_hv_1u_1v ?? this.yb_hv_1u_1v,
      yb_hv_1v_1w: yb_hv_1v_1w ?? this.yb_hv_1v_1w,
      yb_hv_1w_1u: yb_hv_1w_1u ?? this.yb_hv_1w_1u,
      yb_hv_1u_1n: yb_hv_1u_1n ?? this.yb_hv_1u_1n,
      yb_hv_1v_1n: yb_hv_1v_1n ?? this.yb_hv_1v_1n,
      yb_hv_1w_1n: yb_hv_1w_1n ?? this.yb_hv_1w_1n,
      yb_lv_2u_2v: yb_lv_2u_2v ?? this.yb_lv_2u_2v,
      yb_lv_2v_2w: yb_lv_2v_2w ?? this.yb_lv_2v_2w,
      yb_lv_2w_2u: yb_lv_2w_2u ?? this.yb_lv_2w_2u,
      yb_lv_2u_2n: yb_lv_2u_2n ?? this.yb_lv_2u_2n,
      yb_lv_2v_2n: yb_lv_2v_2n ?? this.yb_lv_2v_2n,
      yb_lv_2w_2n: yb_lv_2w_2n ?? this.yb_lv_2w_2n,
      br_hv_1u_1v: br_hv_1u_1v ?? this.br_hv_1u_1v,
      br_hv_1v_1w: br_hv_1v_1w ?? this.br_hv_1v_1w,
      br_hv_1w_1u: br_hv_1w_1u ?? this.br_hv_1w_1u,
      br_hv_1u_1n: br_hv_1u_1n ?? this.br_hv_1u_1n,
      br_hv_1v_1n: br_hv_1v_1n ?? this.br_hv_1v_1n,
      br_hv_1w_1n: br_hv_1w_1n ?? this.br_hv_1w_1n,
      br_lv_2u_2v: br_lv_2u_2v ?? this.br_lv_2u_2v,
      br_lv_2v_2w: br_lv_2v_2w ?? this.br_lv_2v_2w,
      br_lv_2w_2u: br_lv_2w_2u ?? this.br_lv_2w_2u,
      br_lv_2u_2n: br_lv_2u_2n ?? this.br_lv_2u_2n,
      br_lv_2v_2n: br_lv_2v_2n ?? this.br_lv_2v_2n,
      br_lv_2w_2n: br_lv_2w_2n ?? this.br_lv_2w_2n,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (ry_hv_1u_1v.present) {
      map['ry_hv_1u_1v'] = Variable<double>(ry_hv_1u_1v.value);
    }
    if (ry_hv_1v_1w.present) {
      map['ry_hv_1v_1w'] = Variable<double>(ry_hv_1v_1w.value);
    }
    if (ry_hv_1w_1u.present) {
      map['ry_hv_1w_1u'] = Variable<double>(ry_hv_1w_1u.value);
    }
    if (ry_hv_1u_1n.present) {
      map['ry_hv_1u_1n'] = Variable<double>(ry_hv_1u_1n.value);
    }
    if (ry_hv_1v_1n.present) {
      map['ry_hv_1v_1n'] = Variable<double>(ry_hv_1v_1n.value);
    }
    if (ry_hv_1w_1n.present) {
      map['ry_hv_1w_1n'] = Variable<double>(ry_hv_1w_1n.value);
    }
    if (ry_lv_2u_2v.present) {
      map['ry_lv_2u_2v'] = Variable<double>(ry_lv_2u_2v.value);
    }
    if (ry_lv_2v_2w.present) {
      map['ry_lv_2v_2w'] = Variable<double>(ry_lv_2v_2w.value);
    }
    if (ry_lv_2w_2u.present) {
      map['ry_lv_2w_2u'] = Variable<double>(ry_lv_2w_2u.value);
    }
    if (ry_lv_2u_2n.present) {
      map['ry_lv_2u_2n'] = Variable<double>(ry_lv_2u_2n.value);
    }
    if (ry_lv_2v_2n.present) {
      map['ry_lv_2v_2n'] = Variable<double>(ry_lv_2v_2n.value);
    }
    if (ry_lv_2w_2n.present) {
      map['ry_lv_2w_2n'] = Variable<double>(ry_lv_2w_2n.value);
    }
    if (yb_hv_1u_1v.present) {
      map['yb_hv_1u_1v'] = Variable<double>(yb_hv_1u_1v.value);
    }
    if (yb_hv_1v_1w.present) {
      map['yb_hv_1v_1w'] = Variable<double>(yb_hv_1v_1w.value);
    }
    if (yb_hv_1w_1u.present) {
      map['yb_hv_1w_1u'] = Variable<double>(yb_hv_1w_1u.value);
    }
    if (yb_hv_1u_1n.present) {
      map['yb_hv_1u_1n'] = Variable<double>(yb_hv_1u_1n.value);
    }
    if (yb_hv_1v_1n.present) {
      map['yb_hv_1v_1n'] = Variable<double>(yb_hv_1v_1n.value);
    }
    if (yb_hv_1w_1n.present) {
      map['yb_hv_1w_1n'] = Variable<double>(yb_hv_1w_1n.value);
    }
    if (yb_lv_2u_2v.present) {
      map['yb_lv_2u_2v'] = Variable<double>(yb_lv_2u_2v.value);
    }
    if (yb_lv_2v_2w.present) {
      map['yb_lv_2v_2w'] = Variable<double>(yb_lv_2v_2w.value);
    }
    if (yb_lv_2w_2u.present) {
      map['yb_lv_2w_2u'] = Variable<double>(yb_lv_2w_2u.value);
    }
    if (yb_lv_2u_2n.present) {
      map['yb_lv_2u_2n'] = Variable<double>(yb_lv_2u_2n.value);
    }
    if (yb_lv_2v_2n.present) {
      map['yb_lv_2v_2n'] = Variable<double>(yb_lv_2v_2n.value);
    }
    if (yb_lv_2w_2n.present) {
      map['yb_lv_2w_2n'] = Variable<double>(yb_lv_2w_2n.value);
    }
    if (br_hv_1u_1v.present) {
      map['br_hv_1u_1v'] = Variable<double>(br_hv_1u_1v.value);
    }
    if (br_hv_1v_1w.present) {
      map['br_hv_1v_1w'] = Variable<double>(br_hv_1v_1w.value);
    }
    if (br_hv_1w_1u.present) {
      map['br_hv_1w_1u'] = Variable<double>(br_hv_1w_1u.value);
    }
    if (br_hv_1u_1n.present) {
      map['br_hv_1u_1n'] = Variable<double>(br_hv_1u_1n.value);
    }
    if (br_hv_1v_1n.present) {
      map['br_hv_1v_1n'] = Variable<double>(br_hv_1v_1n.value);
    }
    if (br_hv_1w_1n.present) {
      map['br_hv_1w_1n'] = Variable<double>(br_hv_1w_1n.value);
    }
    if (br_lv_2u_2v.present) {
      map['br_lv_2u_2v'] = Variable<double>(br_lv_2u_2v.value);
    }
    if (br_lv_2v_2w.present) {
      map['br_lv_2v_2w'] = Variable<double>(br_lv_2v_2w.value);
    }
    if (br_lv_2w_2u.present) {
      map['br_lv_2w_2u'] = Variable<double>(br_lv_2w_2u.value);
    }
    if (br_lv_2u_2n.present) {
      map['br_lv_2u_2n'] = Variable<double>(br_lv_2u_2n.value);
    }
    if (br_lv_2v_2n.present) {
      map['br_lv_2v_2n'] = Variable<double>(br_lv_2v_2n.value);
    }
    if (br_lv_2w_2n.present) {
      map['br_lv_2w_2n'] = Variable<double>(br_lv_2w_2n.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt_mb_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('ry_hv_1u_1v: $ry_hv_1u_1v, ')
          ..write('ry_hv_1v_1w: $ry_hv_1v_1w, ')
          ..write('ry_hv_1w_1u: $ry_hv_1w_1u, ')
          ..write('ry_hv_1u_1n: $ry_hv_1u_1n, ')
          ..write('ry_hv_1v_1n: $ry_hv_1v_1n, ')
          ..write('ry_hv_1w_1n: $ry_hv_1w_1n, ')
          ..write('ry_lv_2u_2v: $ry_lv_2u_2v, ')
          ..write('ry_lv_2v_2w: $ry_lv_2v_2w, ')
          ..write('ry_lv_2w_2u: $ry_lv_2w_2u, ')
          ..write('ry_lv_2u_2n: $ry_lv_2u_2n, ')
          ..write('ry_lv_2v_2n: $ry_lv_2v_2n, ')
          ..write('ry_lv_2w_2n: $ry_lv_2w_2n, ')
          ..write('yb_hv_1u_1v: $yb_hv_1u_1v, ')
          ..write('yb_hv_1v_1w: $yb_hv_1v_1w, ')
          ..write('yb_hv_1w_1u: $yb_hv_1w_1u, ')
          ..write('yb_hv_1u_1n: $yb_hv_1u_1n, ')
          ..write('yb_hv_1v_1n: $yb_hv_1v_1n, ')
          ..write('yb_hv_1w_1n: $yb_hv_1w_1n, ')
          ..write('yb_lv_2u_2v: $yb_lv_2u_2v, ')
          ..write('yb_lv_2v_2w: $yb_lv_2v_2w, ')
          ..write('yb_lv_2w_2u: $yb_lv_2w_2u, ')
          ..write('yb_lv_2u_2n: $yb_lv_2u_2n, ')
          ..write('yb_lv_2v_2n: $yb_lv_2v_2n, ')
          ..write('yb_lv_2w_2n: $yb_lv_2w_2n, ')
          ..write('br_hv_1u_1v: $br_hv_1u_1v, ')
          ..write('br_hv_1v_1w: $br_hv_1v_1w, ')
          ..write('br_hv_1w_1u: $br_hv_1w_1u, ')
          ..write('br_hv_1u_1n: $br_hv_1u_1n, ')
          ..write('br_hv_1v_1n: $br_hv_1v_1n, ')
          ..write('br_hv_1w_1n: $br_hv_1w_1n, ')
          ..write('br_lv_2u_2v: $br_lv_2u_2v, ')
          ..write('br_lv_2v_2w: $br_lv_2v_2w, ')
          ..write('br_lv_2w_2u: $br_lv_2w_2u, ')
          ..write('br_lv_2u_2n: $br_lv_2u_2n, ')
          ..write('br_lv_2v_2n: $br_lv_2v_2n, ')
          ..write('br_lv_2w_2n: $br_lv_2w_2n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $Powt_mb_LocalDatasourceImplTable extends Powt_mb_LocalDatasourceImpl
    with TableInfo<$Powt_mb_LocalDatasourceImplTable, PowtmbLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt_mb_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1u_1vMeta =
      const VerificationMeta('ry_hv_1u_1v');
  GeneratedColumn<double> _ry_hv_1u_1v;
  @override
  GeneratedColumn<double> get ry_hv_1u_1v => _ry_hv_1u_1v ??=
      GeneratedColumn<double>('ry_hv_1u_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1v_1wMeta =
      const VerificationMeta('ry_hv_1v_1w');
  GeneratedColumn<double> _ry_hv_1v_1w;
  @override
  GeneratedColumn<double> get ry_hv_1v_1w => _ry_hv_1v_1w ??=
      GeneratedColumn<double>('ry_hv_1v_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1w_1uMeta =
      const VerificationMeta('ry_hv_1w_1u');
  GeneratedColumn<double> _ry_hv_1w_1u;
  @override
  GeneratedColumn<double> get ry_hv_1w_1u => _ry_hv_1w_1u ??=
      GeneratedColumn<double>('ry_hv_1w_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1u_1nMeta =
      const VerificationMeta('ry_hv_1u_1n');
  GeneratedColumn<double> _ry_hv_1u_1n;
  @override
  GeneratedColumn<double> get ry_hv_1u_1n => _ry_hv_1u_1n ??=
      GeneratedColumn<double>('ry_hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1v_1nMeta =
      const VerificationMeta('ry_hv_1v_1n');
  GeneratedColumn<double> _ry_hv_1v_1n;
  @override
  GeneratedColumn<double> get ry_hv_1v_1n => _ry_hv_1v_1n ??=
      GeneratedColumn<double>('ry_hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_hv_1w_1nMeta =
      const VerificationMeta('ry_hv_1w_1n');
  GeneratedColumn<double> _ry_hv_1w_1n;
  @override
  GeneratedColumn<double> get ry_hv_1w_1n => _ry_hv_1w_1n ??=
      GeneratedColumn<double>('ry_hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2u_2vMeta =
      const VerificationMeta('ry_lv_2u_2v');
  GeneratedColumn<double> _ry_lv_2u_2v;
  @override
  GeneratedColumn<double> get ry_lv_2u_2v => _ry_lv_2u_2v ??=
      GeneratedColumn<double>('ry_lv_2u_2v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2v_2wMeta =
      const VerificationMeta('ry_lv_2v_2w');
  GeneratedColumn<double> _ry_lv_2v_2w;
  @override
  GeneratedColumn<double> get ry_lv_2v_2w => _ry_lv_2v_2w ??=
      GeneratedColumn<double>('ry_lv_2v_2w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2w_2uMeta =
      const VerificationMeta('ry_lv_2w_2u');
  GeneratedColumn<double> _ry_lv_2w_2u;
  @override
  GeneratedColumn<double> get ry_lv_2w_2u => _ry_lv_2w_2u ??=
      GeneratedColumn<double>('ry_lv_2w_2u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2u_2nMeta =
      const VerificationMeta('ry_lv_2u_2n');
  GeneratedColumn<double> _ry_lv_2u_2n;
  @override
  GeneratedColumn<double> get ry_lv_2u_2n => _ry_lv_2u_2n ??=
      GeneratedColumn<double>('ry_lv_2u_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2v_2nMeta =
      const VerificationMeta('ry_lv_2v_2n');
  GeneratedColumn<double> _ry_lv_2v_2n;
  @override
  GeneratedColumn<double> get ry_lv_2v_2n => _ry_lv_2v_2n ??=
      GeneratedColumn<double>('ry_lv_2v_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ry_lv_2w_2nMeta =
      const VerificationMeta('ry_lv_2w_2n');
  GeneratedColumn<double> _ry_lv_2w_2n;
  @override
  GeneratedColumn<double> get ry_lv_2w_2n => _ry_lv_2w_2n ??=
      GeneratedColumn<double>('ry_lv_2w_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1u_1vMeta =
      const VerificationMeta('yb_hv_1u_1v');
  GeneratedColumn<double> _yb_hv_1u_1v;
  @override
  GeneratedColumn<double> get yb_hv_1u_1v => _yb_hv_1u_1v ??=
      GeneratedColumn<double>('yb_hv_1u_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1v_1wMeta =
      const VerificationMeta('yb_hv_1v_1w');
  GeneratedColumn<double> _yb_hv_1v_1w;
  @override
  GeneratedColumn<double> get yb_hv_1v_1w => _yb_hv_1v_1w ??=
      GeneratedColumn<double>('yb_hv_1v_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1w_1uMeta =
      const VerificationMeta('yb_hv_1w_1u');
  GeneratedColumn<double> _yb_hv_1w_1u;
  @override
  GeneratedColumn<double> get yb_hv_1w_1u => _yb_hv_1w_1u ??=
      GeneratedColumn<double>('yb_hv_1w_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1u_1nMeta =
      const VerificationMeta('yb_hv_1u_1n');
  GeneratedColumn<double> _yb_hv_1u_1n;
  @override
  GeneratedColumn<double> get yb_hv_1u_1n => _yb_hv_1u_1n ??=
      GeneratedColumn<double>('yb_hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1v_1nMeta =
      const VerificationMeta('yb_hv_1v_1n');
  GeneratedColumn<double> _yb_hv_1v_1n;
  @override
  GeneratedColumn<double> get yb_hv_1v_1n => _yb_hv_1v_1n ??=
      GeneratedColumn<double>('yb_hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_hv_1w_1nMeta =
      const VerificationMeta('yb_hv_1w_1n');
  GeneratedColumn<double> _yb_hv_1w_1n;
  @override
  GeneratedColumn<double> get yb_hv_1w_1n => _yb_hv_1w_1n ??=
      GeneratedColumn<double>('yb_hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2u_2vMeta =
      const VerificationMeta('yb_lv_2u_2v');
  GeneratedColumn<double> _yb_lv_2u_2v;
  @override
  GeneratedColumn<double> get yb_lv_2u_2v => _yb_lv_2u_2v ??=
      GeneratedColumn<double>('yb_lv_2u_2v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2v_2wMeta =
      const VerificationMeta('yb_lv_2v_2w');
  GeneratedColumn<double> _yb_lv_2v_2w;
  @override
  GeneratedColumn<double> get yb_lv_2v_2w => _yb_lv_2v_2w ??=
      GeneratedColumn<double>('yb_lv_2v_2w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2w_2uMeta =
      const VerificationMeta('yb_lv_2w_2u');
  GeneratedColumn<double> _yb_lv_2w_2u;
  @override
  GeneratedColumn<double> get yb_lv_2w_2u => _yb_lv_2w_2u ??=
      GeneratedColumn<double>('yb_lv_2w_2u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2u_2nMeta =
      const VerificationMeta('yb_lv_2u_2n');
  GeneratedColumn<double> _yb_lv_2u_2n;
  @override
  GeneratedColumn<double> get yb_lv_2u_2n => _yb_lv_2u_2n ??=
      GeneratedColumn<double>('yb_lv_2u_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2v_2nMeta =
      const VerificationMeta('yb_lv_2v_2n');
  GeneratedColumn<double> _yb_lv_2v_2n;
  @override
  GeneratedColumn<double> get yb_lv_2v_2n => _yb_lv_2v_2n ??=
      GeneratedColumn<double>('yb_lv_2v_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yb_lv_2w_2nMeta =
      const VerificationMeta('yb_lv_2w_2n');
  GeneratedColumn<double> _yb_lv_2w_2n;
  @override
  GeneratedColumn<double> get yb_lv_2w_2n => _yb_lv_2w_2n ??=
      GeneratedColumn<double>('yb_lv_2w_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1u_1vMeta =
      const VerificationMeta('br_hv_1u_1v');
  GeneratedColumn<double> _br_hv_1u_1v;
  @override
  GeneratedColumn<double> get br_hv_1u_1v => _br_hv_1u_1v ??=
      GeneratedColumn<double>('br_hv_1u_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1v_1wMeta =
      const VerificationMeta('br_hv_1v_1w');
  GeneratedColumn<double> _br_hv_1v_1w;
  @override
  GeneratedColumn<double> get br_hv_1v_1w => _br_hv_1v_1w ??=
      GeneratedColumn<double>('br_hv_1v_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1w_1uMeta =
      const VerificationMeta('br_hv_1w_1u');
  GeneratedColumn<double> _br_hv_1w_1u;
  @override
  GeneratedColumn<double> get br_hv_1w_1u => _br_hv_1w_1u ??=
      GeneratedColumn<double>('br_hv_1w_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1u_1nMeta =
      const VerificationMeta('br_hv_1u_1n');
  GeneratedColumn<double> _br_hv_1u_1n;
  @override
  GeneratedColumn<double> get br_hv_1u_1n => _br_hv_1u_1n ??=
      GeneratedColumn<double>('br_hv_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1v_1nMeta =
      const VerificationMeta('br_hv_1v_1n');
  GeneratedColumn<double> _br_hv_1v_1n;
  @override
  GeneratedColumn<double> get br_hv_1v_1n => _br_hv_1v_1n ??=
      GeneratedColumn<double>('br_hv_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_hv_1w_1nMeta =
      const VerificationMeta('br_hv_1w_1n');
  GeneratedColumn<double> _br_hv_1w_1n;
  @override
  GeneratedColumn<double> get br_hv_1w_1n => _br_hv_1w_1n ??=
      GeneratedColumn<double>('br_hv_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2u_2vMeta =
      const VerificationMeta('br_lv_2u_2v');
  GeneratedColumn<double> _br_lv_2u_2v;
  @override
  GeneratedColumn<double> get br_lv_2u_2v => _br_lv_2u_2v ??=
      GeneratedColumn<double>('br_lv_2u_2v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2v_2wMeta =
      const VerificationMeta('br_lv_2v_2w');
  GeneratedColumn<double> _br_lv_2v_2w;
  @override
  GeneratedColumn<double> get br_lv_2v_2w => _br_lv_2v_2w ??=
      GeneratedColumn<double>('br_lv_2v_2w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2w_2uMeta =
      const VerificationMeta('br_lv_2w_2u');
  GeneratedColumn<double> _br_lv_2w_2u;
  @override
  GeneratedColumn<double> get br_lv_2w_2u => _br_lv_2w_2u ??=
      GeneratedColumn<double>('br_lv_2w_2u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2u_2nMeta =
      const VerificationMeta('br_lv_2u_2n');
  GeneratedColumn<double> _br_lv_2u_2n;
  @override
  GeneratedColumn<double> get br_lv_2u_2n => _br_lv_2u_2n ??=
      GeneratedColumn<double>('br_lv_2u_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2v_2nMeta =
      const VerificationMeta('br_lv_2v_2n');
  GeneratedColumn<double> _br_lv_2v_2n;
  @override
  GeneratedColumn<double> get br_lv_2v_2n => _br_lv_2v_2n ??=
      GeneratedColumn<double>('br_lv_2v_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _br_lv_2w_2nMeta =
      const VerificationMeta('br_lv_2w_2n');
  GeneratedColumn<double> _br_lv_2w_2n;
  @override
  GeneratedColumn<double> get br_lv_2w_2n => _br_lv_2w_2n ??=
      GeneratedColumn<double>('br_lv_2w_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        ry_hv_1u_1v,
        ry_hv_1v_1w,
        ry_hv_1w_1u,
        ry_hv_1u_1n,
        ry_hv_1v_1n,
        ry_hv_1w_1n,
        ry_lv_2u_2v,
        ry_lv_2v_2w,
        ry_lv_2w_2u,
        ry_lv_2u_2n,
        ry_lv_2v_2n,
        ry_lv_2w_2n,
        yb_hv_1u_1v,
        yb_hv_1v_1w,
        yb_hv_1w_1u,
        yb_hv_1u_1n,
        yb_hv_1v_1n,
        yb_hv_1w_1n,
        yb_lv_2u_2v,
        yb_lv_2v_2w,
        yb_lv_2w_2u,
        yb_lv_2u_2n,
        yb_lv_2v_2n,
        yb_lv_2w_2n,
        br_hv_1u_1v,
        br_hv_1v_1w,
        br_hv_1w_1u,
        br_hv_1u_1n,
        br_hv_1v_1n,
        br_hv_1w_1n,
        br_lv_2u_2v,
        br_lv_2v_2w,
        br_lv_2w_2u,
        br_lv_2u_2n,
        br_lv_2v_2n,
        br_lv_2w_2n,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powt_mb_local_datasource_impl';
  @override
  String get actualTableName => 'powt_mb_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PowtmbLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('ry_hv_1u_1v')) {
      context.handle(
          _ry_hv_1u_1vMeta,
          ry_hv_1u_1v.isAcceptableOrUnknown(
              data['ry_hv_1u_1v'], _ry_hv_1u_1vMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1u_1vMeta);
    }
    if (data.containsKey('ry_hv_1v_1w')) {
      context.handle(
          _ry_hv_1v_1wMeta,
          ry_hv_1v_1w.isAcceptableOrUnknown(
              data['ry_hv_1v_1w'], _ry_hv_1v_1wMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1v_1wMeta);
    }
    if (data.containsKey('ry_hv_1w_1u')) {
      context.handle(
          _ry_hv_1w_1uMeta,
          ry_hv_1w_1u.isAcceptableOrUnknown(
              data['ry_hv_1w_1u'], _ry_hv_1w_1uMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1w_1uMeta);
    }
    if (data.containsKey('ry_hv_1u_1n')) {
      context.handle(
          _ry_hv_1u_1nMeta,
          ry_hv_1u_1n.isAcceptableOrUnknown(
              data['ry_hv_1u_1n'], _ry_hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1u_1nMeta);
    }
    if (data.containsKey('ry_hv_1v_1n')) {
      context.handle(
          _ry_hv_1v_1nMeta,
          ry_hv_1v_1n.isAcceptableOrUnknown(
              data['ry_hv_1v_1n'], _ry_hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1v_1nMeta);
    }
    if (data.containsKey('ry_hv_1w_1n')) {
      context.handle(
          _ry_hv_1w_1nMeta,
          ry_hv_1w_1n.isAcceptableOrUnknown(
              data['ry_hv_1w_1n'], _ry_hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_ry_hv_1w_1nMeta);
    }
    if (data.containsKey('ry_lv_2u_2v')) {
      context.handle(
          _ry_lv_2u_2vMeta,
          ry_lv_2u_2v.isAcceptableOrUnknown(
              data['ry_lv_2u_2v'], _ry_lv_2u_2vMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2u_2vMeta);
    }
    if (data.containsKey('ry_lv_2v_2w')) {
      context.handle(
          _ry_lv_2v_2wMeta,
          ry_lv_2v_2w.isAcceptableOrUnknown(
              data['ry_lv_2v_2w'], _ry_lv_2v_2wMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2v_2wMeta);
    }
    if (data.containsKey('ry_lv_2w_2u')) {
      context.handle(
          _ry_lv_2w_2uMeta,
          ry_lv_2w_2u.isAcceptableOrUnknown(
              data['ry_lv_2w_2u'], _ry_lv_2w_2uMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2w_2uMeta);
    }
    if (data.containsKey('ry_lv_2u_2n')) {
      context.handle(
          _ry_lv_2u_2nMeta,
          ry_lv_2u_2n.isAcceptableOrUnknown(
              data['ry_lv_2u_2n'], _ry_lv_2u_2nMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2u_2nMeta);
    }
    if (data.containsKey('ry_lv_2v_2n')) {
      context.handle(
          _ry_lv_2v_2nMeta,
          ry_lv_2v_2n.isAcceptableOrUnknown(
              data['ry_lv_2v_2n'], _ry_lv_2v_2nMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2v_2nMeta);
    }
    if (data.containsKey('ry_lv_2w_2n')) {
      context.handle(
          _ry_lv_2w_2nMeta,
          ry_lv_2w_2n.isAcceptableOrUnknown(
              data['ry_lv_2w_2n'], _ry_lv_2w_2nMeta));
    } else if (isInserting) {
      context.missing(_ry_lv_2w_2nMeta);
    }
    if (data.containsKey('yb_hv_1u_1v')) {
      context.handle(
          _yb_hv_1u_1vMeta,
          yb_hv_1u_1v.isAcceptableOrUnknown(
              data['yb_hv_1u_1v'], _yb_hv_1u_1vMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1u_1vMeta);
    }
    if (data.containsKey('yb_hv_1v_1w')) {
      context.handle(
          _yb_hv_1v_1wMeta,
          yb_hv_1v_1w.isAcceptableOrUnknown(
              data['yb_hv_1v_1w'], _yb_hv_1v_1wMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1v_1wMeta);
    }
    if (data.containsKey('yb_hv_1w_1u')) {
      context.handle(
          _yb_hv_1w_1uMeta,
          yb_hv_1w_1u.isAcceptableOrUnknown(
              data['yb_hv_1w_1u'], _yb_hv_1w_1uMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1w_1uMeta);
    }
    if (data.containsKey('yb_hv_1u_1n')) {
      context.handle(
          _yb_hv_1u_1nMeta,
          yb_hv_1u_1n.isAcceptableOrUnknown(
              data['yb_hv_1u_1n'], _yb_hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1u_1nMeta);
    }
    if (data.containsKey('yb_hv_1v_1n')) {
      context.handle(
          _yb_hv_1v_1nMeta,
          yb_hv_1v_1n.isAcceptableOrUnknown(
              data['yb_hv_1v_1n'], _yb_hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1v_1nMeta);
    }
    if (data.containsKey('yb_hv_1w_1n')) {
      context.handle(
          _yb_hv_1w_1nMeta,
          yb_hv_1w_1n.isAcceptableOrUnknown(
              data['yb_hv_1w_1n'], _yb_hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_yb_hv_1w_1nMeta);
    }
    if (data.containsKey('yb_lv_2u_2v')) {
      context.handle(
          _yb_lv_2u_2vMeta,
          yb_lv_2u_2v.isAcceptableOrUnknown(
              data['yb_lv_2u_2v'], _yb_lv_2u_2vMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2u_2vMeta);
    }
    if (data.containsKey('yb_lv_2v_2w')) {
      context.handle(
          _yb_lv_2v_2wMeta,
          yb_lv_2v_2w.isAcceptableOrUnknown(
              data['yb_lv_2v_2w'], _yb_lv_2v_2wMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2v_2wMeta);
    }
    if (data.containsKey('yb_lv_2w_2u')) {
      context.handle(
          _yb_lv_2w_2uMeta,
          yb_lv_2w_2u.isAcceptableOrUnknown(
              data['yb_lv_2w_2u'], _yb_lv_2w_2uMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2w_2uMeta);
    }
    if (data.containsKey('yb_lv_2u_2n')) {
      context.handle(
          _yb_lv_2u_2nMeta,
          yb_lv_2u_2n.isAcceptableOrUnknown(
              data['yb_lv_2u_2n'], _yb_lv_2u_2nMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2u_2nMeta);
    }
    if (data.containsKey('yb_lv_2v_2n')) {
      context.handle(
          _yb_lv_2v_2nMeta,
          yb_lv_2v_2n.isAcceptableOrUnknown(
              data['yb_lv_2v_2n'], _yb_lv_2v_2nMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2v_2nMeta);
    }
    if (data.containsKey('yb_lv_2w_2n')) {
      context.handle(
          _yb_lv_2w_2nMeta,
          yb_lv_2w_2n.isAcceptableOrUnknown(
              data['yb_lv_2w_2n'], _yb_lv_2w_2nMeta));
    } else if (isInserting) {
      context.missing(_yb_lv_2w_2nMeta);
    }
    if (data.containsKey('br_hv_1u_1v')) {
      context.handle(
          _br_hv_1u_1vMeta,
          br_hv_1u_1v.isAcceptableOrUnknown(
              data['br_hv_1u_1v'], _br_hv_1u_1vMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1u_1vMeta);
    }
    if (data.containsKey('br_hv_1v_1w')) {
      context.handle(
          _br_hv_1v_1wMeta,
          br_hv_1v_1w.isAcceptableOrUnknown(
              data['br_hv_1v_1w'], _br_hv_1v_1wMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1v_1wMeta);
    }
    if (data.containsKey('br_hv_1w_1u')) {
      context.handle(
          _br_hv_1w_1uMeta,
          br_hv_1w_1u.isAcceptableOrUnknown(
              data['br_hv_1w_1u'], _br_hv_1w_1uMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1w_1uMeta);
    }
    if (data.containsKey('br_hv_1u_1n')) {
      context.handle(
          _br_hv_1u_1nMeta,
          br_hv_1u_1n.isAcceptableOrUnknown(
              data['br_hv_1u_1n'], _br_hv_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1u_1nMeta);
    }
    if (data.containsKey('br_hv_1v_1n')) {
      context.handle(
          _br_hv_1v_1nMeta,
          br_hv_1v_1n.isAcceptableOrUnknown(
              data['br_hv_1v_1n'], _br_hv_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1v_1nMeta);
    }
    if (data.containsKey('br_hv_1w_1n')) {
      context.handle(
          _br_hv_1w_1nMeta,
          br_hv_1w_1n.isAcceptableOrUnknown(
              data['br_hv_1w_1n'], _br_hv_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_br_hv_1w_1nMeta);
    }
    if (data.containsKey('br_lv_2u_2v')) {
      context.handle(
          _br_lv_2u_2vMeta,
          br_lv_2u_2v.isAcceptableOrUnknown(
              data['br_lv_2u_2v'], _br_lv_2u_2vMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2u_2vMeta);
    }
    if (data.containsKey('br_lv_2v_2w')) {
      context.handle(
          _br_lv_2v_2wMeta,
          br_lv_2v_2w.isAcceptableOrUnknown(
              data['br_lv_2v_2w'], _br_lv_2v_2wMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2v_2wMeta);
    }
    if (data.containsKey('br_lv_2w_2u')) {
      context.handle(
          _br_lv_2w_2uMeta,
          br_lv_2w_2u.isAcceptableOrUnknown(
              data['br_lv_2w_2u'], _br_lv_2w_2uMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2w_2uMeta);
    }
    if (data.containsKey('br_lv_2u_2n')) {
      context.handle(
          _br_lv_2u_2nMeta,
          br_lv_2u_2n.isAcceptableOrUnknown(
              data['br_lv_2u_2n'], _br_lv_2u_2nMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2u_2nMeta);
    }
    if (data.containsKey('br_lv_2v_2n')) {
      context.handle(
          _br_lv_2v_2nMeta,
          br_lv_2v_2n.isAcceptableOrUnknown(
              data['br_lv_2v_2n'], _br_lv_2v_2nMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2v_2nMeta);
    }
    if (data.containsKey('br_lv_2w_2n')) {
      context.handle(
          _br_lv_2w_2nMeta,
          br_lv_2w_2n.isAcceptableOrUnknown(
              data['br_lv_2w_2n'], _br_lv_2w_2nMeta));
    } else if (isInserting) {
      context.missing(_br_lv_2w_2nMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowtmbLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowtmbLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt_mb_LocalDatasourceImplTable createAlias(String alias) {
    return $Powt_mb_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowtscLocalData extends DataClass implements Insertable<PowtscLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_1u;
  final double hv_1v;
  final double hv_1w;
  final double hv_1n;
  final double lv_2u;
  final double lv_2v;
  final double lv_2w;
  final double lv_2n;
  final String equipmentUsed;
  final DateTime updateDate;
  PowtscLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_1u,
      @required this.hv_1v,
      @required this.hv_1w,
      @required this.hv_1n,
      @required this.lv_2u,
      @required this.lv_2v,
      @required this.lv_2w,
      @required this.lv_2n,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory PowtscLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowtscLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u']),
      hv_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v']),
      hv_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w']),
      hv_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1n']),
      lv_2u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2u']),
      lv_2v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2v']),
      lv_2w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2w']),
      lv_2n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_2n']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_1u != null) {
      map['hv_1u'] = Variable<double>(hv_1u);
    }
    if (!nullToAbsent || hv_1v != null) {
      map['hv_1v'] = Variable<double>(hv_1v);
    }
    if (!nullToAbsent || hv_1w != null) {
      map['hv_1w'] = Variable<double>(hv_1w);
    }
    if (!nullToAbsent || hv_1n != null) {
      map['hv_1n'] = Variable<double>(hv_1n);
    }
    if (!nullToAbsent || lv_2u != null) {
      map['lv_2u'] = Variable<double>(lv_2u);
    }
    if (!nullToAbsent || lv_2v != null) {
      map['lv_2v'] = Variable<double>(lv_2v);
    }
    if (!nullToAbsent || lv_2w != null) {
      map['lv_2w'] = Variable<double>(lv_2w);
    }
    if (!nullToAbsent || lv_2n != null) {
      map['lv_2n'] = Variable<double>(lv_2n);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  PowtscLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PowtscLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_1u:
          hv_1u == null && nullToAbsent ? const Value.absent() : Value(hv_1u),
      hv_1v:
          hv_1v == null && nullToAbsent ? const Value.absent() : Value(hv_1v),
      hv_1w:
          hv_1w == null && nullToAbsent ? const Value.absent() : Value(hv_1w),
      hv_1n:
          hv_1n == null && nullToAbsent ? const Value.absent() : Value(hv_1n),
      lv_2u:
          lv_2u == null && nullToAbsent ? const Value.absent() : Value(lv_2u),
      lv_2v:
          lv_2v == null && nullToAbsent ? const Value.absent() : Value(lv_2v),
      lv_2w:
          lv_2w == null && nullToAbsent ? const Value.absent() : Value(lv_2w),
      lv_2n:
          lv_2n == null && nullToAbsent ? const Value.absent() : Value(lv_2n),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory PowtscLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowtscLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_1u: serializer.fromJson<double>(json['hv_1u']),
      hv_1v: serializer.fromJson<double>(json['hv_1v']),
      hv_1w: serializer.fromJson<double>(json['hv_1w']),
      hv_1n: serializer.fromJson<double>(json['hv_1n']),
      lv_2u: serializer.fromJson<double>(json['lv_2u']),
      lv_2v: serializer.fromJson<double>(json['lv_2v']),
      lv_2w: serializer.fromJson<double>(json['lv_2w']),
      lv_2n: serializer.fromJson<double>(json['lv_2n']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_1u': serializer.toJson<double>(hv_1u),
      'hv_1v': serializer.toJson<double>(hv_1v),
      'hv_1w': serializer.toJson<double>(hv_1w),
      'hv_1n': serializer.toJson<double>(hv_1n),
      'lv_2u': serializer.toJson<double>(lv_2u),
      'lv_2v': serializer.toJson<double>(lv_2v),
      'lv_2w': serializer.toJson<double>(lv_2w),
      'lv_2n': serializer.toJson<double>(lv_2n),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  PowtscLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_1u,
          double hv_1v,
          double hv_1w,
          double hv_1n,
          double lv_2u,
          double lv_2v,
          double lv_2w,
          double lv_2n,
          String equipmentUsed,
          DateTime updateDate}) =>
      PowtscLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_1u: hv_1u ?? this.hv_1u,
        hv_1v: hv_1v ?? this.hv_1v,
        hv_1w: hv_1w ?? this.hv_1w,
        hv_1n: hv_1n ?? this.hv_1n,
        lv_2u: lv_2u ?? this.lv_2u,
        lv_2v: lv_2v ?? this.lv_2v,
        lv_2w: lv_2w ?? this.lv_2w,
        lv_2n: lv_2n ?? this.lv_2n,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('PowtscLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u: $hv_1u, ')
          ..write('hv_1v: $hv_1v, ')
          ..write('hv_1w: $hv_1w, ')
          ..write('hv_1n: $hv_1n, ')
          ..write('lv_2u: $lv_2u, ')
          ..write('lv_2v: $lv_2v, ')
          ..write('lv_2w: $lv_2w, ')
          ..write('lv_2n: $lv_2n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      tapPosition,
      hv_1u,
      hv_1v,
      hv_1w,
      hv_1n,
      lv_2u,
      lv_2v,
      lv_2w,
      lv_2n,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowtscLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_1u == this.hv_1u &&
          other.hv_1v == this.hv_1v &&
          other.hv_1w == this.hv_1w &&
          other.hv_1n == this.hv_1n &&
          other.lv_2u == this.lv_2u &&
          other.lv_2v == this.lv_2v &&
          other.lv_2w == this.lv_2w &&
          other.lv_2n == this.lv_2n &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class PowtscLocalDatasourceImplCompanion
    extends UpdateCompanion<PowtscLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_1u;
  final Value<double> hv_1v;
  final Value<double> hv_1w;
  final Value<double> hv_1n;
  final Value<double> lv_2u;
  final Value<double> lv_2v;
  final Value<double> lv_2w;
  final Value<double> lv_2n;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const PowtscLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_1u = const Value.absent(),
    this.hv_1v = const Value.absent(),
    this.hv_1w = const Value.absent(),
    this.hv_1n = const Value.absent(),
    this.lv_2u = const Value.absent(),
    this.lv_2v = const Value.absent(),
    this.lv_2w = const Value.absent(),
    this.lv_2n = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  PowtscLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_1u,
    @required double hv_1v,
    @required double hv_1w,
    @required double hv_1n,
    @required double lv_2u,
    @required double lv_2v,
    @required double lv_2w,
    @required double lv_2n,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_1u = Value(hv_1u),
        hv_1v = Value(hv_1v),
        hv_1w = Value(hv_1w),
        hv_1n = Value(hv_1n),
        lv_2u = Value(lv_2u),
        lv_2v = Value(lv_2v),
        lv_2w = Value(lv_2w),
        lv_2n = Value(lv_2n),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<PowtscLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_1u,
    Expression<double> hv_1v,
    Expression<double> hv_1w,
    Expression<double> hv_1n,
    Expression<double> lv_2u,
    Expression<double> lv_2v,
    Expression<double> lv_2w,
    Expression<double> lv_2n,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_1u != null) 'hv_1u': hv_1u,
      if (hv_1v != null) 'hv_1v': hv_1v,
      if (hv_1w != null) 'hv_1w': hv_1w,
      if (hv_1n != null) 'hv_1n': hv_1n,
      if (lv_2u != null) 'lv_2u': lv_2u,
      if (lv_2v != null) 'lv_2v': lv_2v,
      if (lv_2w != null) 'lv_2w': lv_2w,
      if (lv_2n != null) 'lv_2n': lv_2n,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  PowtscLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_1u,
      Value<double> hv_1v,
      Value<double> hv_1w,
      Value<double> hv_1n,
      Value<double> lv_2u,
      Value<double> lv_2v,
      Value<double> lv_2w,
      Value<double> lv_2n,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return PowtscLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_1u: hv_1u ?? this.hv_1u,
      hv_1v: hv_1v ?? this.hv_1v,
      hv_1w: hv_1w ?? this.hv_1w,
      hv_1n: hv_1n ?? this.hv_1n,
      lv_2u: lv_2u ?? this.lv_2u,
      lv_2v: lv_2v ?? this.lv_2v,
      lv_2w: lv_2w ?? this.lv_2w,
      lv_2n: lv_2n ?? this.lv_2n,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_1u.present) {
      map['hv_1u'] = Variable<double>(hv_1u.value);
    }
    if (hv_1v.present) {
      map['hv_1v'] = Variable<double>(hv_1v.value);
    }
    if (hv_1w.present) {
      map['hv_1w'] = Variable<double>(hv_1w.value);
    }
    if (hv_1n.present) {
      map['hv_1n'] = Variable<double>(hv_1n.value);
    }
    if (lv_2u.present) {
      map['lv_2u'] = Variable<double>(lv_2u.value);
    }
    if (lv_2v.present) {
      map['lv_2v'] = Variable<double>(lv_2v.value);
    }
    if (lv_2w.present) {
      map['lv_2w'] = Variable<double>(lv_2w.value);
    }
    if (lv_2n.present) {
      map['lv_2n'] = Variable<double>(lv_2n.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PowtscLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u: $hv_1u, ')
          ..write('hv_1v: $hv_1v, ')
          ..write('hv_1w: $hv_1w, ')
          ..write('hv_1n: $hv_1n, ')
          ..write('lv_2u: $lv_2u, ')
          ..write('lv_2v: $lv_2v, ')
          ..write('lv_2w: $lv_2w, ')
          ..write('lv_2n: $lv_2n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $PowtscLocalDatasourceImplTable extends PowtscLocalDatasourceImpl
    with TableInfo<$PowtscLocalDatasourceImplTable, PowtscLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PowtscLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1uMeta = const VerificationMeta('hv_1u');
  GeneratedColumn<double> _hv_1u;
  @override
  GeneratedColumn<double> get hv_1u =>
      _hv_1u ??= GeneratedColumn<double>('hv_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1vMeta = const VerificationMeta('hv_1v');
  GeneratedColumn<double> _hv_1v;
  @override
  GeneratedColumn<double> get hv_1v =>
      _hv_1v ??= GeneratedColumn<double>('hv_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1wMeta = const VerificationMeta('hv_1w');
  GeneratedColumn<double> _hv_1w;
  @override
  GeneratedColumn<double> get hv_1w =>
      _hv_1w ??= GeneratedColumn<double>('hv_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1nMeta = const VerificationMeta('hv_1n');
  GeneratedColumn<double> _hv_1n;
  @override
  GeneratedColumn<double> get hv_1n =>
      _hv_1n ??= GeneratedColumn<double>('hv_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2uMeta = const VerificationMeta('lv_2u');
  GeneratedColumn<double> _lv_2u;
  @override
  GeneratedColumn<double> get lv_2u =>
      _lv_2u ??= GeneratedColumn<double>('lv_2u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2vMeta = const VerificationMeta('lv_2v');
  GeneratedColumn<double> _lv_2v;
  @override
  GeneratedColumn<double> get lv_2v =>
      _lv_2v ??= GeneratedColumn<double>('lv_2v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2wMeta = const VerificationMeta('lv_2w');
  GeneratedColumn<double> _lv_2w;
  @override
  GeneratedColumn<double> get lv_2w =>
      _lv_2w ??= GeneratedColumn<double>('lv_2w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_2nMeta = const VerificationMeta('lv_2n');
  GeneratedColumn<double> _lv_2n;
  @override
  GeneratedColumn<double> get lv_2n =>
      _lv_2n ??= GeneratedColumn<double>('lv_2n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_1u,
        hv_1v,
        hv_1w,
        hv_1n,
        lv_2u,
        lv_2v,
        lv_2w,
        lv_2n,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powtsc_local_datasource_impl';
  @override
  String get actualTableName => 'powtsc_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PowtscLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_1u')) {
      context.handle(
          _hv_1uMeta, hv_1u.isAcceptableOrUnknown(data['hv_1u'], _hv_1uMeta));
    } else if (isInserting) {
      context.missing(_hv_1uMeta);
    }
    if (data.containsKey('hv_1v')) {
      context.handle(
          _hv_1vMeta, hv_1v.isAcceptableOrUnknown(data['hv_1v'], _hv_1vMeta));
    } else if (isInserting) {
      context.missing(_hv_1vMeta);
    }
    if (data.containsKey('hv_1w')) {
      context.handle(
          _hv_1wMeta, hv_1w.isAcceptableOrUnknown(data['hv_1w'], _hv_1wMeta));
    } else if (isInserting) {
      context.missing(_hv_1wMeta);
    }
    if (data.containsKey('hv_1n')) {
      context.handle(
          _hv_1nMeta, hv_1n.isAcceptableOrUnknown(data['hv_1n'], _hv_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1nMeta);
    }
    if (data.containsKey('lv_2u')) {
      context.handle(
          _lv_2uMeta, lv_2u.isAcceptableOrUnknown(data['lv_2u'], _lv_2uMeta));
    } else if (isInserting) {
      context.missing(_lv_2uMeta);
    }
    if (data.containsKey('lv_2v')) {
      context.handle(
          _lv_2vMeta, lv_2v.isAcceptableOrUnknown(data['lv_2v'], _lv_2vMeta));
    } else if (isInserting) {
      context.missing(_lv_2vMeta);
    }
    if (data.containsKey('lv_2w')) {
      context.handle(
          _lv_2wMeta, lv_2w.isAcceptableOrUnknown(data['lv_2w'], _lv_2wMeta));
    } else if (isInserting) {
      context.missing(_lv_2wMeta);
    }
    if (data.containsKey('lv_2n')) {
      context.handle(
          _lv_2nMeta, lv_2n.isAcceptableOrUnknown(data['lv_2n'], _lv_2nMeta));
    } else if (isInserting) {
      context.missing(_lv_2nMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowtscLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowtscLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PowtscLocalDatasourceImplTable createAlias(String alias) {
    return $PowtscLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowtbNamePlateLocalData extends DataClass
    implements Insertable<PowtbNamePlateLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String R_serialNo;
  final int R_ratedVoltage;
  final int R_ratedCurrent;
  final String R_Make;
  final String Y_serialNo;
  final int Y_ratedVoltage;
  final int Y_ratedCurrent;
  final String Y_Make;
  final String B_serialNo;
  final int B_ratedVoltage;
  final int B_ratedCurrent;
  final String B_Make;
  PowtbNamePlateLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.R_serialNo,
      @required this.R_ratedVoltage,
      @required this.R_ratedCurrent,
      @required this.R_Make,
      @required this.Y_serialNo,
      @required this.Y_ratedVoltage,
      @required this.Y_ratedCurrent,
      @required this.Y_Make,
      @required this.B_serialNo,
      @required this.B_ratedVoltage,
      @required this.B_ratedCurrent,
      @required this.B_Make});
  factory PowtbNamePlateLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowtbNamePlateLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      R_serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_serial_no']),
      R_ratedVoltage: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_rated_voltage']),
      R_ratedCurrent: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_rated_current']),
      R_Make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_make']),
      Y_serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_serial_no']),
      Y_ratedVoltage: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_rated_voltage']),
      Y_ratedCurrent: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_rated_current']),
      Y_Make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_make']),
      B_serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_serial_no']),
      B_ratedVoltage: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_rated_voltage']),
      B_ratedCurrent: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_rated_current']),
      B_Make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_make']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || R_serialNo != null) {
      map['r_serial_no'] = Variable<String>(R_serialNo);
    }
    if (!nullToAbsent || R_ratedVoltage != null) {
      map['r_rated_voltage'] = Variable<int>(R_ratedVoltage);
    }
    if (!nullToAbsent || R_ratedCurrent != null) {
      map['r_rated_current'] = Variable<int>(R_ratedCurrent);
    }
    if (!nullToAbsent || R_Make != null) {
      map['r_make'] = Variable<String>(R_Make);
    }
    if (!nullToAbsent || Y_serialNo != null) {
      map['y_serial_no'] = Variable<String>(Y_serialNo);
    }
    if (!nullToAbsent || Y_ratedVoltage != null) {
      map['y_rated_voltage'] = Variable<int>(Y_ratedVoltage);
    }
    if (!nullToAbsent || Y_ratedCurrent != null) {
      map['y_rated_current'] = Variable<int>(Y_ratedCurrent);
    }
    if (!nullToAbsent || Y_Make != null) {
      map['y_make'] = Variable<String>(Y_Make);
    }
    if (!nullToAbsent || B_serialNo != null) {
      map['b_serial_no'] = Variable<String>(B_serialNo);
    }
    if (!nullToAbsent || B_ratedVoltage != null) {
      map['b_rated_voltage'] = Variable<int>(B_ratedVoltage);
    }
    if (!nullToAbsent || B_ratedCurrent != null) {
      map['b_rated_current'] = Variable<int>(B_ratedCurrent);
    }
    if (!nullToAbsent || B_Make != null) {
      map['b_make'] = Variable<String>(B_Make);
    }
    return map;
  }

  PowtbNamePlateLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PowtbNamePlateLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      R_serialNo: R_serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(R_serialNo),
      R_ratedVoltage: R_ratedVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(R_ratedVoltage),
      R_ratedCurrent: R_ratedCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(R_ratedCurrent),
      R_Make:
          R_Make == null && nullToAbsent ? const Value.absent() : Value(R_Make),
      Y_serialNo: Y_serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_serialNo),
      Y_ratedVoltage: Y_ratedVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_ratedVoltage),
      Y_ratedCurrent: Y_ratedCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(Y_ratedCurrent),
      Y_Make:
          Y_Make == null && nullToAbsent ? const Value.absent() : Value(Y_Make),
      B_serialNo: B_serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(B_serialNo),
      B_ratedVoltage: B_ratedVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(B_ratedVoltage),
      B_ratedCurrent: B_ratedCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(B_ratedCurrent),
      B_Make:
          B_Make == null && nullToAbsent ? const Value.absent() : Value(B_Make),
    );
  }

  factory PowtbNamePlateLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowtbNamePlateLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      R_serialNo: serializer.fromJson<String>(json['R_serialNo']),
      R_ratedVoltage: serializer.fromJson<int>(json['R_ratedVoltage']),
      R_ratedCurrent: serializer.fromJson<int>(json['R_ratedCurrent']),
      R_Make: serializer.fromJson<String>(json['R_Make']),
      Y_serialNo: serializer.fromJson<String>(json['Y_serialNo']),
      Y_ratedVoltage: serializer.fromJson<int>(json['Y_ratedVoltage']),
      Y_ratedCurrent: serializer.fromJson<int>(json['Y_ratedCurrent']),
      Y_Make: serializer.fromJson<String>(json['Y_Make']),
      B_serialNo: serializer.fromJson<String>(json['B_serialNo']),
      B_ratedVoltage: serializer.fromJson<int>(json['B_ratedVoltage']),
      B_ratedCurrent: serializer.fromJson<int>(json['B_ratedCurrent']),
      B_Make: serializer.fromJson<String>(json['B_Make']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'R_serialNo': serializer.toJson<String>(R_serialNo),
      'R_ratedVoltage': serializer.toJson<int>(R_ratedVoltage),
      'R_ratedCurrent': serializer.toJson<int>(R_ratedCurrent),
      'R_Make': serializer.toJson<String>(R_Make),
      'Y_serialNo': serializer.toJson<String>(Y_serialNo),
      'Y_ratedVoltage': serializer.toJson<int>(Y_ratedVoltage),
      'Y_ratedCurrent': serializer.toJson<int>(Y_ratedCurrent),
      'Y_Make': serializer.toJson<String>(Y_Make),
      'B_serialNo': serializer.toJson<String>(B_serialNo),
      'B_ratedVoltage': serializer.toJson<int>(B_ratedVoltage),
      'B_ratedCurrent': serializer.toJson<int>(B_ratedCurrent),
      'B_Make': serializer.toJson<String>(B_Make),
    };
  }

  PowtbNamePlateLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String R_serialNo,
          int R_ratedVoltage,
          int R_ratedCurrent,
          String R_Make,
          String Y_serialNo,
          int Y_ratedVoltage,
          int Y_ratedCurrent,
          String Y_Make,
          String B_serialNo,
          int B_ratedVoltage,
          int B_ratedCurrent,
          String B_Make}) =>
      PowtbNamePlateLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        R_serialNo: R_serialNo ?? this.R_serialNo,
        R_ratedVoltage: R_ratedVoltage ?? this.R_ratedVoltage,
        R_ratedCurrent: R_ratedCurrent ?? this.R_ratedCurrent,
        R_Make: R_Make ?? this.R_Make,
        Y_serialNo: Y_serialNo ?? this.Y_serialNo,
        Y_ratedVoltage: Y_ratedVoltage ?? this.Y_ratedVoltage,
        Y_ratedCurrent: Y_ratedCurrent ?? this.Y_ratedCurrent,
        Y_Make: Y_Make ?? this.Y_Make,
        B_serialNo: B_serialNo ?? this.B_serialNo,
        B_ratedVoltage: B_ratedVoltage ?? this.B_ratedVoltage,
        B_ratedCurrent: B_ratedCurrent ?? this.B_ratedCurrent,
        B_Make: B_Make ?? this.B_Make,
      );
  @override
  String toString() {
    return (StringBuffer('PowtbNamePlateLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('R_serialNo: $R_serialNo, ')
          ..write('R_ratedVoltage: $R_ratedVoltage, ')
          ..write('R_ratedCurrent: $R_ratedCurrent, ')
          ..write('R_Make: $R_Make, ')
          ..write('Y_serialNo: $Y_serialNo, ')
          ..write('Y_ratedVoltage: $Y_ratedVoltage, ')
          ..write('Y_ratedCurrent: $Y_ratedCurrent, ')
          ..write('Y_Make: $Y_Make, ')
          ..write('B_serialNo: $B_serialNo, ')
          ..write('B_ratedVoltage: $B_ratedVoltage, ')
          ..write('B_ratedCurrent: $B_ratedCurrent, ')
          ..write('B_Make: $B_Make')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      R_serialNo,
      R_ratedVoltage,
      R_ratedCurrent,
      R_Make,
      Y_serialNo,
      Y_ratedVoltage,
      Y_ratedCurrent,
      Y_Make,
      B_serialNo,
      B_ratedVoltage,
      B_ratedCurrent,
      B_Make);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowtbNamePlateLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.R_serialNo == this.R_serialNo &&
          other.R_ratedVoltage == this.R_ratedVoltage &&
          other.R_ratedCurrent == this.R_ratedCurrent &&
          other.R_Make == this.R_Make &&
          other.Y_serialNo == this.Y_serialNo &&
          other.Y_ratedVoltage == this.Y_ratedVoltage &&
          other.Y_ratedCurrent == this.Y_ratedCurrent &&
          other.Y_Make == this.Y_Make &&
          other.B_serialNo == this.B_serialNo &&
          other.B_ratedVoltage == this.B_ratedVoltage &&
          other.B_ratedCurrent == this.B_ratedCurrent &&
          other.B_Make == this.B_Make);
}

class PowtbNamePlateLocalDatasourceImplCompanion
    extends UpdateCompanion<PowtbNamePlateLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> R_serialNo;
  final Value<int> R_ratedVoltage;
  final Value<int> R_ratedCurrent;
  final Value<String> R_Make;
  final Value<String> Y_serialNo;
  final Value<int> Y_ratedVoltage;
  final Value<int> Y_ratedCurrent;
  final Value<String> Y_Make;
  final Value<String> B_serialNo;
  final Value<int> B_ratedVoltage;
  final Value<int> B_ratedCurrent;
  final Value<String> B_Make;
  const PowtbNamePlateLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.R_serialNo = const Value.absent(),
    this.R_ratedVoltage = const Value.absent(),
    this.R_ratedCurrent = const Value.absent(),
    this.R_Make = const Value.absent(),
    this.Y_serialNo = const Value.absent(),
    this.Y_ratedVoltage = const Value.absent(),
    this.Y_ratedCurrent = const Value.absent(),
    this.Y_Make = const Value.absent(),
    this.B_serialNo = const Value.absent(),
    this.B_ratedVoltage = const Value.absent(),
    this.B_ratedCurrent = const Value.absent(),
    this.B_Make = const Value.absent(),
  });
  PowtbNamePlateLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String R_serialNo,
    @required int R_ratedVoltage,
    @required int R_ratedCurrent,
    @required String R_Make,
    @required String Y_serialNo,
    @required int Y_ratedVoltage,
    @required int Y_ratedCurrent,
    @required String Y_Make,
    @required String B_serialNo,
    @required int B_ratedVoltage,
    @required int B_ratedCurrent,
    @required String B_Make,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        R_serialNo = Value(R_serialNo),
        R_ratedVoltage = Value(R_ratedVoltage),
        R_ratedCurrent = Value(R_ratedCurrent),
        R_Make = Value(R_Make),
        Y_serialNo = Value(Y_serialNo),
        Y_ratedVoltage = Value(Y_ratedVoltage),
        Y_ratedCurrent = Value(Y_ratedCurrent),
        Y_Make = Value(Y_Make),
        B_serialNo = Value(B_serialNo),
        B_ratedVoltage = Value(B_ratedVoltage),
        B_ratedCurrent = Value(B_ratedCurrent),
        B_Make = Value(B_Make);
  static Insertable<PowtbNamePlateLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> R_serialNo,
    Expression<int> R_ratedVoltage,
    Expression<int> R_ratedCurrent,
    Expression<String> R_Make,
    Expression<String> Y_serialNo,
    Expression<int> Y_ratedVoltage,
    Expression<int> Y_ratedCurrent,
    Expression<String> Y_Make,
    Expression<String> B_serialNo,
    Expression<int> B_ratedVoltage,
    Expression<int> B_ratedCurrent,
    Expression<String> B_Make,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (R_serialNo != null) 'r_serial_no': R_serialNo,
      if (R_ratedVoltage != null) 'r_rated_voltage': R_ratedVoltage,
      if (R_ratedCurrent != null) 'r_rated_current': R_ratedCurrent,
      if (R_Make != null) 'r_make': R_Make,
      if (Y_serialNo != null) 'y_serial_no': Y_serialNo,
      if (Y_ratedVoltage != null) 'y_rated_voltage': Y_ratedVoltage,
      if (Y_ratedCurrent != null) 'y_rated_current': Y_ratedCurrent,
      if (Y_Make != null) 'y_make': Y_Make,
      if (B_serialNo != null) 'b_serial_no': B_serialNo,
      if (B_ratedVoltage != null) 'b_rated_voltage': B_ratedVoltage,
      if (B_ratedCurrent != null) 'b_rated_current': B_ratedCurrent,
      if (B_Make != null) 'b_make': B_Make,
    });
  }

  PowtbNamePlateLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> R_serialNo,
      Value<int> R_ratedVoltage,
      Value<int> R_ratedCurrent,
      Value<String> R_Make,
      Value<String> Y_serialNo,
      Value<int> Y_ratedVoltage,
      Value<int> Y_ratedCurrent,
      Value<String> Y_Make,
      Value<String> B_serialNo,
      Value<int> B_ratedVoltage,
      Value<int> B_ratedCurrent,
      Value<String> B_Make}) {
    return PowtbNamePlateLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      R_serialNo: R_serialNo ?? this.R_serialNo,
      R_ratedVoltage: R_ratedVoltage ?? this.R_ratedVoltage,
      R_ratedCurrent: R_ratedCurrent ?? this.R_ratedCurrent,
      R_Make: R_Make ?? this.R_Make,
      Y_serialNo: Y_serialNo ?? this.Y_serialNo,
      Y_ratedVoltage: Y_ratedVoltage ?? this.Y_ratedVoltage,
      Y_ratedCurrent: Y_ratedCurrent ?? this.Y_ratedCurrent,
      Y_Make: Y_Make ?? this.Y_Make,
      B_serialNo: B_serialNo ?? this.B_serialNo,
      B_ratedVoltage: B_ratedVoltage ?? this.B_ratedVoltage,
      B_ratedCurrent: B_ratedCurrent ?? this.B_ratedCurrent,
      B_Make: B_Make ?? this.B_Make,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (R_serialNo.present) {
      map['r_serial_no'] = Variable<String>(R_serialNo.value);
    }
    if (R_ratedVoltage.present) {
      map['r_rated_voltage'] = Variable<int>(R_ratedVoltage.value);
    }
    if (R_ratedCurrent.present) {
      map['r_rated_current'] = Variable<int>(R_ratedCurrent.value);
    }
    if (R_Make.present) {
      map['r_make'] = Variable<String>(R_Make.value);
    }
    if (Y_serialNo.present) {
      map['y_serial_no'] = Variable<String>(Y_serialNo.value);
    }
    if (Y_ratedVoltage.present) {
      map['y_rated_voltage'] = Variable<int>(Y_ratedVoltage.value);
    }
    if (Y_ratedCurrent.present) {
      map['y_rated_current'] = Variable<int>(Y_ratedCurrent.value);
    }
    if (Y_Make.present) {
      map['y_make'] = Variable<String>(Y_Make.value);
    }
    if (B_serialNo.present) {
      map['b_serial_no'] = Variable<String>(B_serialNo.value);
    }
    if (B_ratedVoltage.present) {
      map['b_rated_voltage'] = Variable<int>(B_ratedVoltage.value);
    }
    if (B_ratedCurrent.present) {
      map['b_rated_current'] = Variable<int>(B_ratedCurrent.value);
    }
    if (B_Make.present) {
      map['b_make'] = Variable<String>(B_Make.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PowtbNamePlateLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('R_serialNo: $R_serialNo, ')
          ..write('R_ratedVoltage: $R_ratedVoltage, ')
          ..write('R_ratedCurrent: $R_ratedCurrent, ')
          ..write('R_Make: $R_Make, ')
          ..write('Y_serialNo: $Y_serialNo, ')
          ..write('Y_ratedVoltage: $Y_ratedVoltage, ')
          ..write('Y_ratedCurrent: $Y_ratedCurrent, ')
          ..write('Y_Make: $Y_Make, ')
          ..write('B_serialNo: $B_serialNo, ')
          ..write('B_ratedVoltage: $B_ratedVoltage, ')
          ..write('B_ratedCurrent: $B_ratedCurrent, ')
          ..write('B_Make: $B_Make')
          ..write(')'))
        .toString();
  }
}

class $PowtbNamePlateLocalDatasourceImplTable
    extends PowtbNamePlateLocalDatasourceImpl
    with
        TableInfo<$PowtbNamePlateLocalDatasourceImplTable,
            PowtbNamePlateLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PowtbNamePlateLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _R_serialNoMeta = const VerificationMeta('R_serialNo');
  GeneratedColumn<String> _R_serialNo;
  @override
  GeneratedColumn<String> get R_serialNo =>
      _R_serialNo ??= GeneratedColumn<String>('r_serial_no', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _R_ratedVoltageMeta =
      const VerificationMeta('R_ratedVoltage');
  GeneratedColumn<int> _R_ratedVoltage;
  @override
  GeneratedColumn<int> get R_ratedVoltage => _R_ratedVoltage ??=
      GeneratedColumn<int>('r_rated_voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _R_ratedCurrentMeta =
      const VerificationMeta('R_ratedCurrent');
  GeneratedColumn<int> _R_ratedCurrent;
  @override
  GeneratedColumn<int> get R_ratedCurrent => _R_ratedCurrent ??=
      GeneratedColumn<int>('r_rated_current', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _R_MakeMeta = const VerificationMeta('R_Make');
  GeneratedColumn<String> _R_Make;
  @override
  GeneratedColumn<String> get R_Make => _R_Make ??= GeneratedColumn<String>(
      'r_make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _Y_serialNoMeta = const VerificationMeta('Y_serialNo');
  GeneratedColumn<String> _Y_serialNo;
  @override
  GeneratedColumn<String> get Y_serialNo =>
      _Y_serialNo ??= GeneratedColumn<String>('y_serial_no', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _Y_ratedVoltageMeta =
      const VerificationMeta('Y_ratedVoltage');
  GeneratedColumn<int> _Y_ratedVoltage;
  @override
  GeneratedColumn<int> get Y_ratedVoltage => _Y_ratedVoltage ??=
      GeneratedColumn<int>('y_rated_voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _Y_ratedCurrentMeta =
      const VerificationMeta('Y_ratedCurrent');
  GeneratedColumn<int> _Y_ratedCurrent;
  @override
  GeneratedColumn<int> get Y_ratedCurrent => _Y_ratedCurrent ??=
      GeneratedColumn<int>('y_rated_current', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _Y_MakeMeta = const VerificationMeta('Y_Make');
  GeneratedColumn<String> _Y_Make;
  @override
  GeneratedColumn<String> get Y_Make => _Y_Make ??= GeneratedColumn<String>(
      'y_make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _B_serialNoMeta = const VerificationMeta('B_serialNo');
  GeneratedColumn<String> _B_serialNo;
  @override
  GeneratedColumn<String> get B_serialNo =>
      _B_serialNo ??= GeneratedColumn<String>('b_serial_no', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _B_ratedVoltageMeta =
      const VerificationMeta('B_ratedVoltage');
  GeneratedColumn<int> _B_ratedVoltage;
  @override
  GeneratedColumn<int> get B_ratedVoltage => _B_ratedVoltage ??=
      GeneratedColumn<int>('b_rated_voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _B_ratedCurrentMeta =
      const VerificationMeta('B_ratedCurrent');
  GeneratedColumn<int> _B_ratedCurrent;
  @override
  GeneratedColumn<int> get B_ratedCurrent => _B_ratedCurrent ??=
      GeneratedColumn<int>('b_rated_current', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _B_MakeMeta = const VerificationMeta('B_Make');
  GeneratedColumn<String> _B_Make;
  @override
  GeneratedColumn<String> get B_Make => _B_Make ??= GeneratedColumn<String>(
      'b_make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        R_serialNo,
        R_ratedVoltage,
        R_ratedCurrent,
        R_Make,
        Y_serialNo,
        Y_ratedVoltage,
        Y_ratedCurrent,
        Y_Make,
        B_serialNo,
        B_ratedVoltage,
        B_ratedCurrent,
        B_Make
      ];
  @override
  String get aliasedName => _alias ?? 'powtb_name_plate_local_datasource_impl';
  @override
  String get actualTableName => 'powtb_name_plate_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<PowtbNamePlateLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('r_serial_no')) {
      context.handle(
          _R_serialNoMeta,
          R_serialNo.isAcceptableOrUnknown(
              data['r_serial_no'], _R_serialNoMeta));
    } else if (isInserting) {
      context.missing(_R_serialNoMeta);
    }
    if (data.containsKey('r_rated_voltage')) {
      context.handle(
          _R_ratedVoltageMeta,
          R_ratedVoltage.isAcceptableOrUnknown(
              data['r_rated_voltage'], _R_ratedVoltageMeta));
    } else if (isInserting) {
      context.missing(_R_ratedVoltageMeta);
    }
    if (data.containsKey('r_rated_current')) {
      context.handle(
          _R_ratedCurrentMeta,
          R_ratedCurrent.isAcceptableOrUnknown(
              data['r_rated_current'], _R_ratedCurrentMeta));
    } else if (isInserting) {
      context.missing(_R_ratedCurrentMeta);
    }
    if (data.containsKey('r_make')) {
      context.handle(_R_MakeMeta,
          R_Make.isAcceptableOrUnknown(data['r_make'], _R_MakeMeta));
    } else if (isInserting) {
      context.missing(_R_MakeMeta);
    }
    if (data.containsKey('y_serial_no')) {
      context.handle(
          _Y_serialNoMeta,
          Y_serialNo.isAcceptableOrUnknown(
              data['y_serial_no'], _Y_serialNoMeta));
    } else if (isInserting) {
      context.missing(_Y_serialNoMeta);
    }
    if (data.containsKey('y_rated_voltage')) {
      context.handle(
          _Y_ratedVoltageMeta,
          Y_ratedVoltage.isAcceptableOrUnknown(
              data['y_rated_voltage'], _Y_ratedVoltageMeta));
    } else if (isInserting) {
      context.missing(_Y_ratedVoltageMeta);
    }
    if (data.containsKey('y_rated_current')) {
      context.handle(
          _Y_ratedCurrentMeta,
          Y_ratedCurrent.isAcceptableOrUnknown(
              data['y_rated_current'], _Y_ratedCurrentMeta));
    } else if (isInserting) {
      context.missing(_Y_ratedCurrentMeta);
    }
    if (data.containsKey('y_make')) {
      context.handle(_Y_MakeMeta,
          Y_Make.isAcceptableOrUnknown(data['y_make'], _Y_MakeMeta));
    } else if (isInserting) {
      context.missing(_Y_MakeMeta);
    }
    if (data.containsKey('b_serial_no')) {
      context.handle(
          _B_serialNoMeta,
          B_serialNo.isAcceptableOrUnknown(
              data['b_serial_no'], _B_serialNoMeta));
    } else if (isInserting) {
      context.missing(_B_serialNoMeta);
    }
    if (data.containsKey('b_rated_voltage')) {
      context.handle(
          _B_ratedVoltageMeta,
          B_ratedVoltage.isAcceptableOrUnknown(
              data['b_rated_voltage'], _B_ratedVoltageMeta));
    } else if (isInserting) {
      context.missing(_B_ratedVoltageMeta);
    }
    if (data.containsKey('b_rated_current')) {
      context.handle(
          _B_ratedCurrentMeta,
          B_ratedCurrent.isAcceptableOrUnknown(
              data['b_rated_current'], _B_ratedCurrentMeta));
    } else if (isInserting) {
      context.missing(_B_ratedCurrentMeta);
    }
    if (data.containsKey('b_make')) {
      context.handle(_B_MakeMeta,
          B_Make.isAcceptableOrUnknown(data['b_make'], _B_MakeMeta));
    } else if (isInserting) {
      context.missing(_B_MakeMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowtbNamePlateLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowtbNamePlateLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PowtbNamePlateLocalDatasourceImplTable createAlias(String alias) {
    return $PowtbNamePlateLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PowttdLocalData extends DataClass implements Insertable<PowttdLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double ru1;
  final double ru2;
  final double ru3;
  final double ri1;
  final double ri2;
  final double ri3;
  final double rc1;
  final double rc2;
  final double rc3;
  final double rtanD1;
  final double rtanD2;
  final double rtanD3;
  final double rp1;
  final double rp2;
  final double rp3;
  final double rVdf1;
  final double rVdf2;
  final double rVdf3;
  final double yu1;
  final double yu2;
  final double yu3;
  final double yi1;
  final double yi2;
  final double yi3;
  final double yc1;
  final double yc2;
  final double yc3;
  final double ytanD1;
  final double ytanD2;
  final double ytanD3;
  final double yp1;
  final double yp2;
  final double yp3;
  final double yVdf1;
  final double yVdf2;
  final double yVdf3;
  final double bu1;
  final double bu2;
  final double bu3;
  final double bi1;
  final double bi2;
  final double bi3;
  final double bc1;
  final double bc2;
  final double bc3;
  final double btanD1;
  final double btanD2;
  final double btanD3;
  final double bp1;
  final double bp2;
  final double bp3;
  final double bVdf1;
  final double bVdf2;
  final double bVdf3;
  final double hv_lv_u1;
  final double hv_lv_u2;
  final double hv_lv_u3;
  final double hv_lv_i1;
  final double hv_lv_i2;
  final double hv_lv_i3;
  final double hv_lv_c1;
  final double hv_lv_c2;
  final double hv_lv_c3;
  final double hv_lv_tanD1;
  final double hv_lv_tanD2;
  final double hv_lv_tanD3;
  final double hv_lv_p1;
  final double hv_lv_p2;
  final double hv_lv_p3;
  final double hv_lv_Vdf1;
  final double hv_lv_Vdf2;
  final double hv_lv_Vdf3;
  final double hvE_G_u1;
  final double hvE_G_u2;
  final double hvE_G_u3;
  final double hvE_G_i1;
  final double hvE_G_i2;
  final double hvE_G_i3;
  final double hvE_G_c1;
  final double hvE_G_c2;
  final double hvE_G_c3;
  final double hvE_G_tanD1;
  final double hvE_G_tanD2;
  final double hvE_G_tanD3;
  final double hvE_G_p1;
  final double hvE_G_p2;
  final double hvE_G_p3;
  final double hvE_G_Vdf1;
  final double hvE_G_Vdf2;
  final double hvE_G_Vdf3;
  final double hvE_Grnd_u1;
  final double hvE_Grnd_u2;
  final double hvE_Grnd_u3;
  final double hvE_Grnd_i1;
  final double hvE_Grnd_i2;
  final double hvE_Grnd_i3;
  final double hvE_Grnd_c1;
  final double hvE_Grnd_c2;
  final double hvE_Grnd_c3;
  final double hvE_Grnd_tanD1;
  final double hvE_Grnd_tanD2;
  final double hvE_Grnd_tanD3;
  final double hvE_Grnd_p1;
  final double hvE_Grnd_p2;
  final double hvE_Grnd_p3;
  final double hvE_Grnd_Vdf1;
  final double hvE_Grnd_Vdf2;
  final double hvE_Grnd_Vdf3;
  final double lvEu1;
  final double lvEu2;
  final double lvEu3;
  final double lvEi1;
  final double lvEi2;
  final double lvEi3;
  final double lvEc1;
  final double lvEc2;
  final double lvEc3;
  final double lvEtanD1;
  final double lvEtanD2;
  final double lvEtanD3;
  final double lvEp1;
  final double lvEp2;
  final double lvEp3;
  final double lvEVdf1;
  final double lvEVdf2;
  final double lvEVdf3;
  final double lvE_G_u1;
  final double lvE_G_u2;
  final double lvE_G_u3;
  final double lvE_G_i1;
  final double lvE_G_i2;
  final double lvE_G_i3;
  final double lvE_G_c1;
  final double lvE_G_c2;
  final double lvE_G_c3;
  final double lvE_G_tanD1;
  final double lvE_G_tanD2;
  final double lvE_G_tanD3;
  final double lvE_G_p1;
  final double lvE_G_p2;
  final double lvE_G_p3;
  final double lvE_G_Vdf1;
  final double lvE_G_Vdf2;
  final double lvE_G_Vdf3;
  final double lvE_Grnd_u1;
  final double lvE_Grnd_u2;
  final double lvE_Grnd_u3;
  final double lvE_Grnd_i1;
  final double lvE_Grnd_i2;
  final double lvE_Grnd_i3;
  final double lvE_Grnd_c1;
  final double lvE_Grnd_c2;
  final double lvE_Grnd_c3;
  final double lvE_Grnd_tanD1;
  final double lvE_Grnd_tanD2;
  final double lvE_Grnd_tanD3;
  final double lvE_Grnd_p1;
  final double lvE_Grnd_p2;
  final double lvE_Grnd_p3;
  final double lvE_Grnd_Vdf1;
  final double lvE_Grnd_Vdf2;
  final double lvE_Grnd_Vdf3;
  PowttdLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.ru1,
      @required this.ru2,
      @required this.ru3,
      @required this.ri1,
      @required this.ri2,
      @required this.ri3,
      @required this.rc1,
      @required this.rc2,
      @required this.rc3,
      @required this.rtanD1,
      @required this.rtanD2,
      @required this.rtanD3,
      @required this.rp1,
      @required this.rp2,
      @required this.rp3,
      @required this.rVdf1,
      @required this.rVdf2,
      @required this.rVdf3,
      @required this.yu1,
      @required this.yu2,
      @required this.yu3,
      @required this.yi1,
      @required this.yi2,
      @required this.yi3,
      @required this.yc1,
      @required this.yc2,
      @required this.yc3,
      @required this.ytanD1,
      @required this.ytanD2,
      @required this.ytanD3,
      @required this.yp1,
      @required this.yp2,
      @required this.yp3,
      @required this.yVdf1,
      @required this.yVdf2,
      @required this.yVdf3,
      @required this.bu1,
      @required this.bu2,
      @required this.bu3,
      @required this.bi1,
      @required this.bi2,
      @required this.bi3,
      @required this.bc1,
      @required this.bc2,
      @required this.bc3,
      @required this.btanD1,
      @required this.btanD2,
      @required this.btanD3,
      @required this.bp1,
      @required this.bp2,
      @required this.bp3,
      @required this.bVdf1,
      @required this.bVdf2,
      @required this.bVdf3,
      @required this.hv_lv_u1,
      @required this.hv_lv_u2,
      @required this.hv_lv_u3,
      @required this.hv_lv_i1,
      @required this.hv_lv_i2,
      @required this.hv_lv_i3,
      @required this.hv_lv_c1,
      @required this.hv_lv_c2,
      @required this.hv_lv_c3,
      @required this.hv_lv_tanD1,
      @required this.hv_lv_tanD2,
      @required this.hv_lv_tanD3,
      @required this.hv_lv_p1,
      @required this.hv_lv_p2,
      @required this.hv_lv_p3,
      @required this.hv_lv_Vdf1,
      @required this.hv_lv_Vdf2,
      @required this.hv_lv_Vdf3,
      @required this.hvE_G_u1,
      @required this.hvE_G_u2,
      @required this.hvE_G_u3,
      @required this.hvE_G_i1,
      @required this.hvE_G_i2,
      @required this.hvE_G_i3,
      @required this.hvE_G_c1,
      @required this.hvE_G_c2,
      @required this.hvE_G_c3,
      @required this.hvE_G_tanD1,
      @required this.hvE_G_tanD2,
      @required this.hvE_G_tanD3,
      @required this.hvE_G_p1,
      @required this.hvE_G_p2,
      @required this.hvE_G_p3,
      @required this.hvE_G_Vdf1,
      @required this.hvE_G_Vdf2,
      @required this.hvE_G_Vdf3,
      @required this.hvE_Grnd_u1,
      @required this.hvE_Grnd_u2,
      @required this.hvE_Grnd_u3,
      @required this.hvE_Grnd_i1,
      @required this.hvE_Grnd_i2,
      @required this.hvE_Grnd_i3,
      @required this.hvE_Grnd_c1,
      @required this.hvE_Grnd_c2,
      @required this.hvE_Grnd_c3,
      @required this.hvE_Grnd_tanD1,
      @required this.hvE_Grnd_tanD2,
      @required this.hvE_Grnd_tanD3,
      @required this.hvE_Grnd_p1,
      @required this.hvE_Grnd_p2,
      @required this.hvE_Grnd_p3,
      @required this.hvE_Grnd_Vdf1,
      @required this.hvE_Grnd_Vdf2,
      @required this.hvE_Grnd_Vdf3,
      @required this.lvEu1,
      @required this.lvEu2,
      @required this.lvEu3,
      @required this.lvEi1,
      @required this.lvEi2,
      @required this.lvEi3,
      @required this.lvEc1,
      @required this.lvEc2,
      @required this.lvEc3,
      @required this.lvEtanD1,
      @required this.lvEtanD2,
      @required this.lvEtanD3,
      @required this.lvEp1,
      @required this.lvEp2,
      @required this.lvEp3,
      @required this.lvEVdf1,
      @required this.lvEVdf2,
      @required this.lvEVdf3,
      @required this.lvE_G_u1,
      @required this.lvE_G_u2,
      @required this.lvE_G_u3,
      @required this.lvE_G_i1,
      @required this.lvE_G_i2,
      @required this.lvE_G_i3,
      @required this.lvE_G_c1,
      @required this.lvE_G_c2,
      @required this.lvE_G_c3,
      @required this.lvE_G_tanD1,
      @required this.lvE_G_tanD2,
      @required this.lvE_G_tanD3,
      @required this.lvE_G_p1,
      @required this.lvE_G_p2,
      @required this.lvE_G_p3,
      @required this.lvE_G_Vdf1,
      @required this.lvE_G_Vdf2,
      @required this.lvE_G_Vdf3,
      @required this.lvE_Grnd_u1,
      @required this.lvE_Grnd_u2,
      @required this.lvE_Grnd_u3,
      @required this.lvE_Grnd_i1,
      @required this.lvE_Grnd_i2,
      @required this.lvE_Grnd_i3,
      @required this.lvE_Grnd_c1,
      @required this.lvE_Grnd_c2,
      @required this.lvE_Grnd_c3,
      @required this.lvE_Grnd_tanD1,
      @required this.lvE_Grnd_tanD2,
      @required this.lvE_Grnd_tanD3,
      @required this.lvE_Grnd_p1,
      @required this.lvE_Grnd_p2,
      @required this.lvE_Grnd_p3,
      @required this.lvE_Grnd_Vdf1,
      @required this.lvE_Grnd_Vdf2,
      @required this.lvE_Grnd_Vdf3});
  factory PowttdLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PowttdLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      ru1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ru1']),
      ru2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ru2']),
      ru3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ru3']),
      ri1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ri1']),
      ri2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ri2']),
      ri3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ri3']),
      rc1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rc1']),
      rc2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rc2']),
      rc3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rc3']),
      rtanD1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rtan_d1']),
      rtanD2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rtan_d2']),
      rtanD3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rtan_d3']),
      rp1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rp1']),
      rp2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rp2']),
      rp3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rp3']),
      rVdf1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_vdf1']),
      rVdf2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_vdf2']),
      rVdf3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_vdf3']),
      yu1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yu1']),
      yu2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yu2']),
      yu3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yu3']),
      yi1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yi1']),
      yi2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yi2']),
      yi3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yi3']),
      yc1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yc1']),
      yc2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yc2']),
      yc3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yc3']),
      ytanD1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ytan_d1']),
      ytanD2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ytan_d2']),
      ytanD3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ytan_d3']),
      yp1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yp1']),
      yp2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yp2']),
      yp3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yp3']),
      yVdf1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_vdf1']),
      yVdf2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_vdf2']),
      yVdf3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_vdf3']),
      bu1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bu1']),
      bu2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bu2']),
      bu3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bu3']),
      bi1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bi1']),
      bi2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bi2']),
      bi3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bi3']),
      bc1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bc1']),
      bc2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bc2']),
      bc3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bc3']),
      btanD1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}btan_d1']),
      btanD2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}btan_d2']),
      btanD3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}btan_d3']),
      bp1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bp1']),
      bp2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bp2']),
      bp3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bp3']),
      bVdf1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_vdf1']),
      bVdf2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_vdf2']),
      bVdf3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_vdf3']),
      hv_lv_u1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_u1']),
      hv_lv_u2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_u2']),
      hv_lv_u3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_u3']),
      hv_lv_i1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_i1']),
      hv_lv_i2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_i2']),
      hv_lv_i3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_i3']),
      hv_lv_c1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_c1']),
      hv_lv_c2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_c2']),
      hv_lv_c3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_c3']),
      hv_lv_tanD1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_tan_d1']),
      hv_lv_tanD2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_tan_d2']),
      hv_lv_tanD3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_tan_d3']),
      hv_lv_p1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_p1']),
      hv_lv_p2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_p2']),
      hv_lv_p3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_p3']),
      hv_lv_Vdf1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_vdf1']),
      hv_lv_Vdf2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_vdf2']),
      hv_lv_Vdf3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_vdf3']),
      hvE_G_u1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_u1']),
      hvE_G_u2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_u2']),
      hvE_G_u3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_u3']),
      hvE_G_i1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_i1']),
      hvE_G_i2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_i2']),
      hvE_G_i3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_i3']),
      hvE_G_c1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_c1']),
      hvE_G_c2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_c2']),
      hvE_G_c3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_c3']),
      hvE_G_tanD1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_tan_d1']),
      hvE_G_tanD2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_tan_d2']),
      hvE_G_tanD3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_tan_d3']),
      hvE_G_p1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_p1']),
      hvE_G_p2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_p2']),
      hvE_G_p3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_p3']),
      hvE_G_Vdf1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_vdf1']),
      hvE_G_Vdf2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_vdf2']),
      hvE_G_Vdf3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_g_vdf3']),
      hvE_Grnd_u1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_u1']),
      hvE_Grnd_u2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_u2']),
      hvE_Grnd_u3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_u3']),
      hvE_Grnd_i1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_i1']),
      hvE_Grnd_i2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_i2']),
      hvE_Grnd_i3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_i3']),
      hvE_Grnd_c1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_c1']),
      hvE_Grnd_c2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_c2']),
      hvE_Grnd_c3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_c3']),
      hvE_Grnd_tanD1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_tan_d1']),
      hvE_Grnd_tanD2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_tan_d2']),
      hvE_Grnd_tanD3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_tan_d3']),
      hvE_Grnd_p1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_p1']),
      hvE_Grnd_p2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_p2']),
      hvE_Grnd_p3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_p3']),
      hvE_Grnd_Vdf1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_vdf1']),
      hvE_Grnd_Vdf2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_vdf2']),
      hvE_Grnd_Vdf3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_grnd_vdf3']),
      lvEu1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_eu1']),
      lvEu2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_eu2']),
      lvEu3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_eu3']),
      lvEi1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_ei1']),
      lvEi2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_ei2']),
      lvEi3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_ei3']),
      lvEc1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_ec1']),
      lvEc2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_ec2']),
      lvEc3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_ec3']),
      lvEtanD1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_etan_d1']),
      lvEtanD2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_etan_d2']),
      lvEtanD3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_etan_d3']),
      lvEp1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_ep1']),
      lvEp2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_ep2']),
      lvEp3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_ep3']),
      lvEVdf1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_vdf1']),
      lvEVdf2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_vdf2']),
      lvEVdf3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_vdf3']),
      lvE_G_u1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_u1']),
      lvE_G_u2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_u2']),
      lvE_G_u3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_u3']),
      lvE_G_i1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_i1']),
      lvE_G_i2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_i2']),
      lvE_G_i3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_i3']),
      lvE_G_c1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_c1']),
      lvE_G_c2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_c2']),
      lvE_G_c3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_c3']),
      lvE_G_tanD1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_tan_d1']),
      lvE_G_tanD2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_tan_d2']),
      lvE_G_tanD3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_tan_d3']),
      lvE_G_p1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_p1']),
      lvE_G_p2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_p2']),
      lvE_G_p3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_p3']),
      lvE_G_Vdf1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_vdf1']),
      lvE_G_Vdf2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_vdf2']),
      lvE_G_Vdf3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_g_vdf3']),
      lvE_Grnd_u1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_u1']),
      lvE_Grnd_u2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_u2']),
      lvE_Grnd_u3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_u3']),
      lvE_Grnd_i1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_i1']),
      lvE_Grnd_i2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_i2']),
      lvE_Grnd_i3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_i3']),
      lvE_Grnd_c1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_c1']),
      lvE_Grnd_c2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_c2']),
      lvE_Grnd_c3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_c3']),
      lvE_Grnd_tanD1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_tan_d1']),
      lvE_Grnd_tanD2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_tan_d2']),
      lvE_Grnd_tanD3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_tan_d3']),
      lvE_Grnd_p1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_p1']),
      lvE_Grnd_p2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_p2']),
      lvE_Grnd_p3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_p3']),
      lvE_Grnd_Vdf1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_vdf1']),
      lvE_Grnd_Vdf2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_vdf2']),
      lvE_Grnd_Vdf3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_grnd_vdf3']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || ru1 != null) {
      map['ru1'] = Variable<double>(ru1);
    }
    if (!nullToAbsent || ru2 != null) {
      map['ru2'] = Variable<double>(ru2);
    }
    if (!nullToAbsent || ru3 != null) {
      map['ru3'] = Variable<double>(ru3);
    }
    if (!nullToAbsent || ri1 != null) {
      map['ri1'] = Variable<double>(ri1);
    }
    if (!nullToAbsent || ri2 != null) {
      map['ri2'] = Variable<double>(ri2);
    }
    if (!nullToAbsent || ri3 != null) {
      map['ri3'] = Variable<double>(ri3);
    }
    if (!nullToAbsent || rc1 != null) {
      map['rc1'] = Variable<double>(rc1);
    }
    if (!nullToAbsent || rc2 != null) {
      map['rc2'] = Variable<double>(rc2);
    }
    if (!nullToAbsent || rc3 != null) {
      map['rc3'] = Variable<double>(rc3);
    }
    if (!nullToAbsent || rtanD1 != null) {
      map['rtan_d1'] = Variable<double>(rtanD1);
    }
    if (!nullToAbsent || rtanD2 != null) {
      map['rtan_d2'] = Variable<double>(rtanD2);
    }
    if (!nullToAbsent || rtanD3 != null) {
      map['rtan_d3'] = Variable<double>(rtanD3);
    }
    if (!nullToAbsent || rp1 != null) {
      map['rp1'] = Variable<double>(rp1);
    }
    if (!nullToAbsent || rp2 != null) {
      map['rp2'] = Variable<double>(rp2);
    }
    if (!nullToAbsent || rp3 != null) {
      map['rp3'] = Variable<double>(rp3);
    }
    if (!nullToAbsent || rVdf1 != null) {
      map['r_vdf1'] = Variable<double>(rVdf1);
    }
    if (!nullToAbsent || rVdf2 != null) {
      map['r_vdf2'] = Variable<double>(rVdf2);
    }
    if (!nullToAbsent || rVdf3 != null) {
      map['r_vdf3'] = Variable<double>(rVdf3);
    }
    if (!nullToAbsent || yu1 != null) {
      map['yu1'] = Variable<double>(yu1);
    }
    if (!nullToAbsent || yu2 != null) {
      map['yu2'] = Variable<double>(yu2);
    }
    if (!nullToAbsent || yu3 != null) {
      map['yu3'] = Variable<double>(yu3);
    }
    if (!nullToAbsent || yi1 != null) {
      map['yi1'] = Variable<double>(yi1);
    }
    if (!nullToAbsent || yi2 != null) {
      map['yi2'] = Variable<double>(yi2);
    }
    if (!nullToAbsent || yi3 != null) {
      map['yi3'] = Variable<double>(yi3);
    }
    if (!nullToAbsent || yc1 != null) {
      map['yc1'] = Variable<double>(yc1);
    }
    if (!nullToAbsent || yc2 != null) {
      map['yc2'] = Variable<double>(yc2);
    }
    if (!nullToAbsent || yc3 != null) {
      map['yc3'] = Variable<double>(yc3);
    }
    if (!nullToAbsent || ytanD1 != null) {
      map['ytan_d1'] = Variable<double>(ytanD1);
    }
    if (!nullToAbsent || ytanD2 != null) {
      map['ytan_d2'] = Variable<double>(ytanD2);
    }
    if (!nullToAbsent || ytanD3 != null) {
      map['ytan_d3'] = Variable<double>(ytanD3);
    }
    if (!nullToAbsent || yp1 != null) {
      map['yp1'] = Variable<double>(yp1);
    }
    if (!nullToAbsent || yp2 != null) {
      map['yp2'] = Variable<double>(yp2);
    }
    if (!nullToAbsent || yp3 != null) {
      map['yp3'] = Variable<double>(yp3);
    }
    if (!nullToAbsent || yVdf1 != null) {
      map['y_vdf1'] = Variable<double>(yVdf1);
    }
    if (!nullToAbsent || yVdf2 != null) {
      map['y_vdf2'] = Variable<double>(yVdf2);
    }
    if (!nullToAbsent || yVdf3 != null) {
      map['y_vdf3'] = Variable<double>(yVdf3);
    }
    if (!nullToAbsent || bu1 != null) {
      map['bu1'] = Variable<double>(bu1);
    }
    if (!nullToAbsent || bu2 != null) {
      map['bu2'] = Variable<double>(bu2);
    }
    if (!nullToAbsent || bu3 != null) {
      map['bu3'] = Variable<double>(bu3);
    }
    if (!nullToAbsent || bi1 != null) {
      map['bi1'] = Variable<double>(bi1);
    }
    if (!nullToAbsent || bi2 != null) {
      map['bi2'] = Variable<double>(bi2);
    }
    if (!nullToAbsent || bi3 != null) {
      map['bi3'] = Variable<double>(bi3);
    }
    if (!nullToAbsent || bc1 != null) {
      map['bc1'] = Variable<double>(bc1);
    }
    if (!nullToAbsent || bc2 != null) {
      map['bc2'] = Variable<double>(bc2);
    }
    if (!nullToAbsent || bc3 != null) {
      map['bc3'] = Variable<double>(bc3);
    }
    if (!nullToAbsent || btanD1 != null) {
      map['btan_d1'] = Variable<double>(btanD1);
    }
    if (!nullToAbsent || btanD2 != null) {
      map['btan_d2'] = Variable<double>(btanD2);
    }
    if (!nullToAbsent || btanD3 != null) {
      map['btan_d3'] = Variable<double>(btanD3);
    }
    if (!nullToAbsent || bp1 != null) {
      map['bp1'] = Variable<double>(bp1);
    }
    if (!nullToAbsent || bp2 != null) {
      map['bp2'] = Variable<double>(bp2);
    }
    if (!nullToAbsent || bp3 != null) {
      map['bp3'] = Variable<double>(bp3);
    }
    if (!nullToAbsent || bVdf1 != null) {
      map['b_vdf1'] = Variable<double>(bVdf1);
    }
    if (!nullToAbsent || bVdf2 != null) {
      map['b_vdf2'] = Variable<double>(bVdf2);
    }
    if (!nullToAbsent || bVdf3 != null) {
      map['b_vdf3'] = Variable<double>(bVdf3);
    }
    if (!nullToAbsent || hv_lv_u1 != null) {
      map['hv_lv_u1'] = Variable<double>(hv_lv_u1);
    }
    if (!nullToAbsent || hv_lv_u2 != null) {
      map['hv_lv_u2'] = Variable<double>(hv_lv_u2);
    }
    if (!nullToAbsent || hv_lv_u3 != null) {
      map['hv_lv_u3'] = Variable<double>(hv_lv_u3);
    }
    if (!nullToAbsent || hv_lv_i1 != null) {
      map['hv_lv_i1'] = Variable<double>(hv_lv_i1);
    }
    if (!nullToAbsent || hv_lv_i2 != null) {
      map['hv_lv_i2'] = Variable<double>(hv_lv_i2);
    }
    if (!nullToAbsent || hv_lv_i3 != null) {
      map['hv_lv_i3'] = Variable<double>(hv_lv_i3);
    }
    if (!nullToAbsent || hv_lv_c1 != null) {
      map['hv_lv_c1'] = Variable<double>(hv_lv_c1);
    }
    if (!nullToAbsent || hv_lv_c2 != null) {
      map['hv_lv_c2'] = Variable<double>(hv_lv_c2);
    }
    if (!nullToAbsent || hv_lv_c3 != null) {
      map['hv_lv_c3'] = Variable<double>(hv_lv_c3);
    }
    if (!nullToAbsent || hv_lv_tanD1 != null) {
      map['hv_lv_tan_d1'] = Variable<double>(hv_lv_tanD1);
    }
    if (!nullToAbsent || hv_lv_tanD2 != null) {
      map['hv_lv_tan_d2'] = Variable<double>(hv_lv_tanD2);
    }
    if (!nullToAbsent || hv_lv_tanD3 != null) {
      map['hv_lv_tan_d3'] = Variable<double>(hv_lv_tanD3);
    }
    if (!nullToAbsent || hv_lv_p1 != null) {
      map['hv_lv_p1'] = Variable<double>(hv_lv_p1);
    }
    if (!nullToAbsent || hv_lv_p2 != null) {
      map['hv_lv_p2'] = Variable<double>(hv_lv_p2);
    }
    if (!nullToAbsent || hv_lv_p3 != null) {
      map['hv_lv_p3'] = Variable<double>(hv_lv_p3);
    }
    if (!nullToAbsent || hv_lv_Vdf1 != null) {
      map['hv_lv_vdf1'] = Variable<double>(hv_lv_Vdf1);
    }
    if (!nullToAbsent || hv_lv_Vdf2 != null) {
      map['hv_lv_vdf2'] = Variable<double>(hv_lv_Vdf2);
    }
    if (!nullToAbsent || hv_lv_Vdf3 != null) {
      map['hv_lv_vdf3'] = Variable<double>(hv_lv_Vdf3);
    }
    if (!nullToAbsent || hvE_G_u1 != null) {
      map['hv_e_g_u1'] = Variable<double>(hvE_G_u1);
    }
    if (!nullToAbsent || hvE_G_u2 != null) {
      map['hv_e_g_u2'] = Variable<double>(hvE_G_u2);
    }
    if (!nullToAbsent || hvE_G_u3 != null) {
      map['hv_e_g_u3'] = Variable<double>(hvE_G_u3);
    }
    if (!nullToAbsent || hvE_G_i1 != null) {
      map['hv_e_g_i1'] = Variable<double>(hvE_G_i1);
    }
    if (!nullToAbsent || hvE_G_i2 != null) {
      map['hv_e_g_i2'] = Variable<double>(hvE_G_i2);
    }
    if (!nullToAbsent || hvE_G_i3 != null) {
      map['hv_e_g_i3'] = Variable<double>(hvE_G_i3);
    }
    if (!nullToAbsent || hvE_G_c1 != null) {
      map['hv_e_g_c1'] = Variable<double>(hvE_G_c1);
    }
    if (!nullToAbsent || hvE_G_c2 != null) {
      map['hv_e_g_c2'] = Variable<double>(hvE_G_c2);
    }
    if (!nullToAbsent || hvE_G_c3 != null) {
      map['hv_e_g_c3'] = Variable<double>(hvE_G_c3);
    }
    if (!nullToAbsent || hvE_G_tanD1 != null) {
      map['hv_e_g_tan_d1'] = Variable<double>(hvE_G_tanD1);
    }
    if (!nullToAbsent || hvE_G_tanD2 != null) {
      map['hv_e_g_tan_d2'] = Variable<double>(hvE_G_tanD2);
    }
    if (!nullToAbsent || hvE_G_tanD3 != null) {
      map['hv_e_g_tan_d3'] = Variable<double>(hvE_G_tanD3);
    }
    if (!nullToAbsent || hvE_G_p1 != null) {
      map['hv_e_g_p1'] = Variable<double>(hvE_G_p1);
    }
    if (!nullToAbsent || hvE_G_p2 != null) {
      map['hv_e_g_p2'] = Variable<double>(hvE_G_p2);
    }
    if (!nullToAbsent || hvE_G_p3 != null) {
      map['hv_e_g_p3'] = Variable<double>(hvE_G_p3);
    }
    if (!nullToAbsent || hvE_G_Vdf1 != null) {
      map['hv_e_g_vdf1'] = Variable<double>(hvE_G_Vdf1);
    }
    if (!nullToAbsent || hvE_G_Vdf2 != null) {
      map['hv_e_g_vdf2'] = Variable<double>(hvE_G_Vdf2);
    }
    if (!nullToAbsent || hvE_G_Vdf3 != null) {
      map['hv_e_g_vdf3'] = Variable<double>(hvE_G_Vdf3);
    }
    if (!nullToAbsent || hvE_Grnd_u1 != null) {
      map['hv_e_grnd_u1'] = Variable<double>(hvE_Grnd_u1);
    }
    if (!nullToAbsent || hvE_Grnd_u2 != null) {
      map['hv_e_grnd_u2'] = Variable<double>(hvE_Grnd_u2);
    }
    if (!nullToAbsent || hvE_Grnd_u3 != null) {
      map['hv_e_grnd_u3'] = Variable<double>(hvE_Grnd_u3);
    }
    if (!nullToAbsent || hvE_Grnd_i1 != null) {
      map['hv_e_grnd_i1'] = Variable<double>(hvE_Grnd_i1);
    }
    if (!nullToAbsent || hvE_Grnd_i2 != null) {
      map['hv_e_grnd_i2'] = Variable<double>(hvE_Grnd_i2);
    }
    if (!nullToAbsent || hvE_Grnd_i3 != null) {
      map['hv_e_grnd_i3'] = Variable<double>(hvE_Grnd_i3);
    }
    if (!nullToAbsent || hvE_Grnd_c1 != null) {
      map['hv_e_grnd_c1'] = Variable<double>(hvE_Grnd_c1);
    }
    if (!nullToAbsent || hvE_Grnd_c2 != null) {
      map['hv_e_grnd_c2'] = Variable<double>(hvE_Grnd_c2);
    }
    if (!nullToAbsent || hvE_Grnd_c3 != null) {
      map['hv_e_grnd_c3'] = Variable<double>(hvE_Grnd_c3);
    }
    if (!nullToAbsent || hvE_Grnd_tanD1 != null) {
      map['hv_e_grnd_tan_d1'] = Variable<double>(hvE_Grnd_tanD1);
    }
    if (!nullToAbsent || hvE_Grnd_tanD2 != null) {
      map['hv_e_grnd_tan_d2'] = Variable<double>(hvE_Grnd_tanD2);
    }
    if (!nullToAbsent || hvE_Grnd_tanD3 != null) {
      map['hv_e_grnd_tan_d3'] = Variable<double>(hvE_Grnd_tanD3);
    }
    if (!nullToAbsent || hvE_Grnd_p1 != null) {
      map['hv_e_grnd_p1'] = Variable<double>(hvE_Grnd_p1);
    }
    if (!nullToAbsent || hvE_Grnd_p2 != null) {
      map['hv_e_grnd_p2'] = Variable<double>(hvE_Grnd_p2);
    }
    if (!nullToAbsent || hvE_Grnd_p3 != null) {
      map['hv_e_grnd_p3'] = Variable<double>(hvE_Grnd_p3);
    }
    if (!nullToAbsent || hvE_Grnd_Vdf1 != null) {
      map['hv_e_grnd_vdf1'] = Variable<double>(hvE_Grnd_Vdf1);
    }
    if (!nullToAbsent || hvE_Grnd_Vdf2 != null) {
      map['hv_e_grnd_vdf2'] = Variable<double>(hvE_Grnd_Vdf2);
    }
    if (!nullToAbsent || hvE_Grnd_Vdf3 != null) {
      map['hv_e_grnd_vdf3'] = Variable<double>(hvE_Grnd_Vdf3);
    }
    if (!nullToAbsent || lvEu1 != null) {
      map['lv_eu1'] = Variable<double>(lvEu1);
    }
    if (!nullToAbsent || lvEu2 != null) {
      map['lv_eu2'] = Variable<double>(lvEu2);
    }
    if (!nullToAbsent || lvEu3 != null) {
      map['lv_eu3'] = Variable<double>(lvEu3);
    }
    if (!nullToAbsent || lvEi1 != null) {
      map['lv_ei1'] = Variable<double>(lvEi1);
    }
    if (!nullToAbsent || lvEi2 != null) {
      map['lv_ei2'] = Variable<double>(lvEi2);
    }
    if (!nullToAbsent || lvEi3 != null) {
      map['lv_ei3'] = Variable<double>(lvEi3);
    }
    if (!nullToAbsent || lvEc1 != null) {
      map['lv_ec1'] = Variable<double>(lvEc1);
    }
    if (!nullToAbsent || lvEc2 != null) {
      map['lv_ec2'] = Variable<double>(lvEc2);
    }
    if (!nullToAbsent || lvEc3 != null) {
      map['lv_ec3'] = Variable<double>(lvEc3);
    }
    if (!nullToAbsent || lvEtanD1 != null) {
      map['lv_etan_d1'] = Variable<double>(lvEtanD1);
    }
    if (!nullToAbsent || lvEtanD2 != null) {
      map['lv_etan_d2'] = Variable<double>(lvEtanD2);
    }
    if (!nullToAbsent || lvEtanD3 != null) {
      map['lv_etan_d3'] = Variable<double>(lvEtanD3);
    }
    if (!nullToAbsent || lvEp1 != null) {
      map['lv_ep1'] = Variable<double>(lvEp1);
    }
    if (!nullToAbsent || lvEp2 != null) {
      map['lv_ep2'] = Variable<double>(lvEp2);
    }
    if (!nullToAbsent || lvEp3 != null) {
      map['lv_ep3'] = Variable<double>(lvEp3);
    }
    if (!nullToAbsent || lvEVdf1 != null) {
      map['lv_e_vdf1'] = Variable<double>(lvEVdf1);
    }
    if (!nullToAbsent || lvEVdf2 != null) {
      map['lv_e_vdf2'] = Variable<double>(lvEVdf2);
    }
    if (!nullToAbsent || lvEVdf3 != null) {
      map['lv_e_vdf3'] = Variable<double>(lvEVdf3);
    }
    if (!nullToAbsent || lvE_G_u1 != null) {
      map['lv_e_g_u1'] = Variable<double>(lvE_G_u1);
    }
    if (!nullToAbsent || lvE_G_u2 != null) {
      map['lv_e_g_u2'] = Variable<double>(lvE_G_u2);
    }
    if (!nullToAbsent || lvE_G_u3 != null) {
      map['lv_e_g_u3'] = Variable<double>(lvE_G_u3);
    }
    if (!nullToAbsent || lvE_G_i1 != null) {
      map['lv_e_g_i1'] = Variable<double>(lvE_G_i1);
    }
    if (!nullToAbsent || lvE_G_i2 != null) {
      map['lv_e_g_i2'] = Variable<double>(lvE_G_i2);
    }
    if (!nullToAbsent || lvE_G_i3 != null) {
      map['lv_e_g_i3'] = Variable<double>(lvE_G_i3);
    }
    if (!nullToAbsent || lvE_G_c1 != null) {
      map['lv_e_g_c1'] = Variable<double>(lvE_G_c1);
    }
    if (!nullToAbsent || lvE_G_c2 != null) {
      map['lv_e_g_c2'] = Variable<double>(lvE_G_c2);
    }
    if (!nullToAbsent || lvE_G_c3 != null) {
      map['lv_e_g_c3'] = Variable<double>(lvE_G_c3);
    }
    if (!nullToAbsent || lvE_G_tanD1 != null) {
      map['lv_e_g_tan_d1'] = Variable<double>(lvE_G_tanD1);
    }
    if (!nullToAbsent || lvE_G_tanD2 != null) {
      map['lv_e_g_tan_d2'] = Variable<double>(lvE_G_tanD2);
    }
    if (!nullToAbsent || lvE_G_tanD3 != null) {
      map['lv_e_g_tan_d3'] = Variable<double>(lvE_G_tanD3);
    }
    if (!nullToAbsent || lvE_G_p1 != null) {
      map['lv_e_g_p1'] = Variable<double>(lvE_G_p1);
    }
    if (!nullToAbsent || lvE_G_p2 != null) {
      map['lv_e_g_p2'] = Variable<double>(lvE_G_p2);
    }
    if (!nullToAbsent || lvE_G_p3 != null) {
      map['lv_e_g_p3'] = Variable<double>(lvE_G_p3);
    }
    if (!nullToAbsent || lvE_G_Vdf1 != null) {
      map['lv_e_g_vdf1'] = Variable<double>(lvE_G_Vdf1);
    }
    if (!nullToAbsent || lvE_G_Vdf2 != null) {
      map['lv_e_g_vdf2'] = Variable<double>(lvE_G_Vdf2);
    }
    if (!nullToAbsent || lvE_G_Vdf3 != null) {
      map['lv_e_g_vdf3'] = Variable<double>(lvE_G_Vdf3);
    }
    if (!nullToAbsent || lvE_Grnd_u1 != null) {
      map['lv_e_grnd_u1'] = Variable<double>(lvE_Grnd_u1);
    }
    if (!nullToAbsent || lvE_Grnd_u2 != null) {
      map['lv_e_grnd_u2'] = Variable<double>(lvE_Grnd_u2);
    }
    if (!nullToAbsent || lvE_Grnd_u3 != null) {
      map['lv_e_grnd_u3'] = Variable<double>(lvE_Grnd_u3);
    }
    if (!nullToAbsent || lvE_Grnd_i1 != null) {
      map['lv_e_grnd_i1'] = Variable<double>(lvE_Grnd_i1);
    }
    if (!nullToAbsent || lvE_Grnd_i2 != null) {
      map['lv_e_grnd_i2'] = Variable<double>(lvE_Grnd_i2);
    }
    if (!nullToAbsent || lvE_Grnd_i3 != null) {
      map['lv_e_grnd_i3'] = Variable<double>(lvE_Grnd_i3);
    }
    if (!nullToAbsent || lvE_Grnd_c1 != null) {
      map['lv_e_grnd_c1'] = Variable<double>(lvE_Grnd_c1);
    }
    if (!nullToAbsent || lvE_Grnd_c2 != null) {
      map['lv_e_grnd_c2'] = Variable<double>(lvE_Grnd_c2);
    }
    if (!nullToAbsent || lvE_Grnd_c3 != null) {
      map['lv_e_grnd_c3'] = Variable<double>(lvE_Grnd_c3);
    }
    if (!nullToAbsent || lvE_Grnd_tanD1 != null) {
      map['lv_e_grnd_tan_d1'] = Variable<double>(lvE_Grnd_tanD1);
    }
    if (!nullToAbsent || lvE_Grnd_tanD2 != null) {
      map['lv_e_grnd_tan_d2'] = Variable<double>(lvE_Grnd_tanD2);
    }
    if (!nullToAbsent || lvE_Grnd_tanD3 != null) {
      map['lv_e_grnd_tan_d3'] = Variable<double>(lvE_Grnd_tanD3);
    }
    if (!nullToAbsent || lvE_Grnd_p1 != null) {
      map['lv_e_grnd_p1'] = Variable<double>(lvE_Grnd_p1);
    }
    if (!nullToAbsent || lvE_Grnd_p2 != null) {
      map['lv_e_grnd_p2'] = Variable<double>(lvE_Grnd_p2);
    }
    if (!nullToAbsent || lvE_Grnd_p3 != null) {
      map['lv_e_grnd_p3'] = Variable<double>(lvE_Grnd_p3);
    }
    if (!nullToAbsent || lvE_Grnd_Vdf1 != null) {
      map['lv_e_grnd_vdf1'] = Variable<double>(lvE_Grnd_Vdf1);
    }
    if (!nullToAbsent || lvE_Grnd_Vdf2 != null) {
      map['lv_e_grnd_vdf2'] = Variable<double>(lvE_Grnd_Vdf2);
    }
    if (!nullToAbsent || lvE_Grnd_Vdf3 != null) {
      map['lv_e_grnd_vdf3'] = Variable<double>(lvE_Grnd_Vdf3);
    }
    return map;
  }

  PowttdLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PowttdLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      ru1: ru1 == null && nullToAbsent ? const Value.absent() : Value(ru1),
      ru2: ru2 == null && nullToAbsent ? const Value.absent() : Value(ru2),
      ru3: ru3 == null && nullToAbsent ? const Value.absent() : Value(ru3),
      ri1: ri1 == null && nullToAbsent ? const Value.absent() : Value(ri1),
      ri2: ri2 == null && nullToAbsent ? const Value.absent() : Value(ri2),
      ri3: ri3 == null && nullToAbsent ? const Value.absent() : Value(ri3),
      rc1: rc1 == null && nullToAbsent ? const Value.absent() : Value(rc1),
      rc2: rc2 == null && nullToAbsent ? const Value.absent() : Value(rc2),
      rc3: rc3 == null && nullToAbsent ? const Value.absent() : Value(rc3),
      rtanD1:
          rtanD1 == null && nullToAbsent ? const Value.absent() : Value(rtanD1),
      rtanD2:
          rtanD2 == null && nullToAbsent ? const Value.absent() : Value(rtanD2),
      rtanD3:
          rtanD3 == null && nullToAbsent ? const Value.absent() : Value(rtanD3),
      rp1: rp1 == null && nullToAbsent ? const Value.absent() : Value(rp1),
      rp2: rp2 == null && nullToAbsent ? const Value.absent() : Value(rp2),
      rp3: rp3 == null && nullToAbsent ? const Value.absent() : Value(rp3),
      rVdf1:
          rVdf1 == null && nullToAbsent ? const Value.absent() : Value(rVdf1),
      rVdf2:
          rVdf2 == null && nullToAbsent ? const Value.absent() : Value(rVdf2),
      rVdf3:
          rVdf3 == null && nullToAbsent ? const Value.absent() : Value(rVdf3),
      yu1: yu1 == null && nullToAbsent ? const Value.absent() : Value(yu1),
      yu2: yu2 == null && nullToAbsent ? const Value.absent() : Value(yu2),
      yu3: yu3 == null && nullToAbsent ? const Value.absent() : Value(yu3),
      yi1: yi1 == null && nullToAbsent ? const Value.absent() : Value(yi1),
      yi2: yi2 == null && nullToAbsent ? const Value.absent() : Value(yi2),
      yi3: yi3 == null && nullToAbsent ? const Value.absent() : Value(yi3),
      yc1: yc1 == null && nullToAbsent ? const Value.absent() : Value(yc1),
      yc2: yc2 == null && nullToAbsent ? const Value.absent() : Value(yc2),
      yc3: yc3 == null && nullToAbsent ? const Value.absent() : Value(yc3),
      ytanD1:
          ytanD1 == null && nullToAbsent ? const Value.absent() : Value(ytanD1),
      ytanD2:
          ytanD2 == null && nullToAbsent ? const Value.absent() : Value(ytanD2),
      ytanD3:
          ytanD3 == null && nullToAbsent ? const Value.absent() : Value(ytanD3),
      yp1: yp1 == null && nullToAbsent ? const Value.absent() : Value(yp1),
      yp2: yp2 == null && nullToAbsent ? const Value.absent() : Value(yp2),
      yp3: yp3 == null && nullToAbsent ? const Value.absent() : Value(yp3),
      yVdf1:
          yVdf1 == null && nullToAbsent ? const Value.absent() : Value(yVdf1),
      yVdf2:
          yVdf2 == null && nullToAbsent ? const Value.absent() : Value(yVdf2),
      yVdf3:
          yVdf3 == null && nullToAbsent ? const Value.absent() : Value(yVdf3),
      bu1: bu1 == null && nullToAbsent ? const Value.absent() : Value(bu1),
      bu2: bu2 == null && nullToAbsent ? const Value.absent() : Value(bu2),
      bu3: bu3 == null && nullToAbsent ? const Value.absent() : Value(bu3),
      bi1: bi1 == null && nullToAbsent ? const Value.absent() : Value(bi1),
      bi2: bi2 == null && nullToAbsent ? const Value.absent() : Value(bi2),
      bi3: bi3 == null && nullToAbsent ? const Value.absent() : Value(bi3),
      bc1: bc1 == null && nullToAbsent ? const Value.absent() : Value(bc1),
      bc2: bc2 == null && nullToAbsent ? const Value.absent() : Value(bc2),
      bc3: bc3 == null && nullToAbsent ? const Value.absent() : Value(bc3),
      btanD1:
          btanD1 == null && nullToAbsent ? const Value.absent() : Value(btanD1),
      btanD2:
          btanD2 == null && nullToAbsent ? const Value.absent() : Value(btanD2),
      btanD3:
          btanD3 == null && nullToAbsent ? const Value.absent() : Value(btanD3),
      bp1: bp1 == null && nullToAbsent ? const Value.absent() : Value(bp1),
      bp2: bp2 == null && nullToAbsent ? const Value.absent() : Value(bp2),
      bp3: bp3 == null && nullToAbsent ? const Value.absent() : Value(bp3),
      bVdf1:
          bVdf1 == null && nullToAbsent ? const Value.absent() : Value(bVdf1),
      bVdf2:
          bVdf2 == null && nullToAbsent ? const Value.absent() : Value(bVdf2),
      bVdf3:
          bVdf3 == null && nullToAbsent ? const Value.absent() : Value(bVdf3),
      hv_lv_u1: hv_lv_u1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_u1),
      hv_lv_u2: hv_lv_u2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_u2),
      hv_lv_u3: hv_lv_u3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_u3),
      hv_lv_i1: hv_lv_i1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_i1),
      hv_lv_i2: hv_lv_i2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_i2),
      hv_lv_i3: hv_lv_i3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_i3),
      hv_lv_c1: hv_lv_c1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_c1),
      hv_lv_c2: hv_lv_c2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_c2),
      hv_lv_c3: hv_lv_c3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_c3),
      hv_lv_tanD1: hv_lv_tanD1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_tanD1),
      hv_lv_tanD2: hv_lv_tanD2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_tanD2),
      hv_lv_tanD3: hv_lv_tanD3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_tanD3),
      hv_lv_p1: hv_lv_p1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_p1),
      hv_lv_p2: hv_lv_p2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_p2),
      hv_lv_p3: hv_lv_p3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_p3),
      hv_lv_Vdf1: hv_lv_Vdf1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_Vdf1),
      hv_lv_Vdf2: hv_lv_Vdf2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_Vdf2),
      hv_lv_Vdf3: hv_lv_Vdf3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_lv_Vdf3),
      hvE_G_u1: hvE_G_u1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_u1),
      hvE_G_u2: hvE_G_u2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_u2),
      hvE_G_u3: hvE_G_u3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_u3),
      hvE_G_i1: hvE_G_i1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_i1),
      hvE_G_i2: hvE_G_i2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_i2),
      hvE_G_i3: hvE_G_i3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_i3),
      hvE_G_c1: hvE_G_c1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_c1),
      hvE_G_c2: hvE_G_c2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_c2),
      hvE_G_c3: hvE_G_c3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_c3),
      hvE_G_tanD1: hvE_G_tanD1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_tanD1),
      hvE_G_tanD2: hvE_G_tanD2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_tanD2),
      hvE_G_tanD3: hvE_G_tanD3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_tanD3),
      hvE_G_p1: hvE_G_p1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_p1),
      hvE_G_p2: hvE_G_p2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_p2),
      hvE_G_p3: hvE_G_p3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_p3),
      hvE_G_Vdf1: hvE_G_Vdf1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_Vdf1),
      hvE_G_Vdf2: hvE_G_Vdf2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_Vdf2),
      hvE_G_Vdf3: hvE_G_Vdf3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_G_Vdf3),
      hvE_Grnd_u1: hvE_Grnd_u1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_u1),
      hvE_Grnd_u2: hvE_Grnd_u2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_u2),
      hvE_Grnd_u3: hvE_Grnd_u3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_u3),
      hvE_Grnd_i1: hvE_Grnd_i1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_i1),
      hvE_Grnd_i2: hvE_Grnd_i2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_i2),
      hvE_Grnd_i3: hvE_Grnd_i3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_i3),
      hvE_Grnd_c1: hvE_Grnd_c1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_c1),
      hvE_Grnd_c2: hvE_Grnd_c2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_c2),
      hvE_Grnd_c3: hvE_Grnd_c3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_c3),
      hvE_Grnd_tanD1: hvE_Grnd_tanD1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_tanD1),
      hvE_Grnd_tanD2: hvE_Grnd_tanD2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_tanD2),
      hvE_Grnd_tanD3: hvE_Grnd_tanD3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_tanD3),
      hvE_Grnd_p1: hvE_Grnd_p1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_p1),
      hvE_Grnd_p2: hvE_Grnd_p2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_p2),
      hvE_Grnd_p3: hvE_Grnd_p3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_p3),
      hvE_Grnd_Vdf1: hvE_Grnd_Vdf1 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_Vdf1),
      hvE_Grnd_Vdf2: hvE_Grnd_Vdf2 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_Vdf2),
      hvE_Grnd_Vdf3: hvE_Grnd_Vdf3 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_Grnd_Vdf3),
      lvEu1:
          lvEu1 == null && nullToAbsent ? const Value.absent() : Value(lvEu1),
      lvEu2:
          lvEu2 == null && nullToAbsent ? const Value.absent() : Value(lvEu2),
      lvEu3:
          lvEu3 == null && nullToAbsent ? const Value.absent() : Value(lvEu3),
      lvEi1:
          lvEi1 == null && nullToAbsent ? const Value.absent() : Value(lvEi1),
      lvEi2:
          lvEi2 == null && nullToAbsent ? const Value.absent() : Value(lvEi2),
      lvEi3:
          lvEi3 == null && nullToAbsent ? const Value.absent() : Value(lvEi3),
      lvEc1:
          lvEc1 == null && nullToAbsent ? const Value.absent() : Value(lvEc1),
      lvEc2:
          lvEc2 == null && nullToAbsent ? const Value.absent() : Value(lvEc2),
      lvEc3:
          lvEc3 == null && nullToAbsent ? const Value.absent() : Value(lvEc3),
      lvEtanD1: lvEtanD1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvEtanD1),
      lvEtanD2: lvEtanD2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvEtanD2),
      lvEtanD3: lvEtanD3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvEtanD3),
      lvEp1:
          lvEp1 == null && nullToAbsent ? const Value.absent() : Value(lvEp1),
      lvEp2:
          lvEp2 == null && nullToAbsent ? const Value.absent() : Value(lvEp2),
      lvEp3:
          lvEp3 == null && nullToAbsent ? const Value.absent() : Value(lvEp3),
      lvEVdf1: lvEVdf1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvEVdf1),
      lvEVdf2: lvEVdf2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvEVdf2),
      lvEVdf3: lvEVdf3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvEVdf3),
      lvE_G_u1: lvE_G_u1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_u1),
      lvE_G_u2: lvE_G_u2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_u2),
      lvE_G_u3: lvE_G_u3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_u3),
      lvE_G_i1: lvE_G_i1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_i1),
      lvE_G_i2: lvE_G_i2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_i2),
      lvE_G_i3: lvE_G_i3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_i3),
      lvE_G_c1: lvE_G_c1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_c1),
      lvE_G_c2: lvE_G_c2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_c2),
      lvE_G_c3: lvE_G_c3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_c3),
      lvE_G_tanD1: lvE_G_tanD1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_tanD1),
      lvE_G_tanD2: lvE_G_tanD2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_tanD2),
      lvE_G_tanD3: lvE_G_tanD3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_tanD3),
      lvE_G_p1: lvE_G_p1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_p1),
      lvE_G_p2: lvE_G_p2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_p2),
      lvE_G_p3: lvE_G_p3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_p3),
      lvE_G_Vdf1: lvE_G_Vdf1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_Vdf1),
      lvE_G_Vdf2: lvE_G_Vdf2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_Vdf2),
      lvE_G_Vdf3: lvE_G_Vdf3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_G_Vdf3),
      lvE_Grnd_u1: lvE_Grnd_u1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_u1),
      lvE_Grnd_u2: lvE_Grnd_u2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_u2),
      lvE_Grnd_u3: lvE_Grnd_u3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_u3),
      lvE_Grnd_i1: lvE_Grnd_i1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_i1),
      lvE_Grnd_i2: lvE_Grnd_i2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_i2),
      lvE_Grnd_i3: lvE_Grnd_i3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_i3),
      lvE_Grnd_c1: lvE_Grnd_c1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_c1),
      lvE_Grnd_c2: lvE_Grnd_c2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_c2),
      lvE_Grnd_c3: lvE_Grnd_c3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_c3),
      lvE_Grnd_tanD1: lvE_Grnd_tanD1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_tanD1),
      lvE_Grnd_tanD2: lvE_Grnd_tanD2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_tanD2),
      lvE_Grnd_tanD3: lvE_Grnd_tanD3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_tanD3),
      lvE_Grnd_p1: lvE_Grnd_p1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_p1),
      lvE_Grnd_p2: lvE_Grnd_p2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_p2),
      lvE_Grnd_p3: lvE_Grnd_p3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_p3),
      lvE_Grnd_Vdf1: lvE_Grnd_Vdf1 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_Vdf1),
      lvE_Grnd_Vdf2: lvE_Grnd_Vdf2 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_Vdf2),
      lvE_Grnd_Vdf3: lvE_Grnd_Vdf3 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_Grnd_Vdf3),
    );
  }

  factory PowttdLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PowttdLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      ru1: serializer.fromJson<double>(json['ru1']),
      ru2: serializer.fromJson<double>(json['ru2']),
      ru3: serializer.fromJson<double>(json['ru3']),
      ri1: serializer.fromJson<double>(json['ri1']),
      ri2: serializer.fromJson<double>(json['ri2']),
      ri3: serializer.fromJson<double>(json['ri3']),
      rc1: serializer.fromJson<double>(json['rc1']),
      rc2: serializer.fromJson<double>(json['rc2']),
      rc3: serializer.fromJson<double>(json['rc3']),
      rtanD1: serializer.fromJson<double>(json['rtanD1']),
      rtanD2: serializer.fromJson<double>(json['rtanD2']),
      rtanD3: serializer.fromJson<double>(json['rtanD3']),
      rp1: serializer.fromJson<double>(json['rp1']),
      rp2: serializer.fromJson<double>(json['rp2']),
      rp3: serializer.fromJson<double>(json['rp3']),
      rVdf1: serializer.fromJson<double>(json['rVdf1']),
      rVdf2: serializer.fromJson<double>(json['rVdf2']),
      rVdf3: serializer.fromJson<double>(json['rVdf3']),
      yu1: serializer.fromJson<double>(json['yu1']),
      yu2: serializer.fromJson<double>(json['yu2']),
      yu3: serializer.fromJson<double>(json['yu3']),
      yi1: serializer.fromJson<double>(json['yi1']),
      yi2: serializer.fromJson<double>(json['yi2']),
      yi3: serializer.fromJson<double>(json['yi3']),
      yc1: serializer.fromJson<double>(json['yc1']),
      yc2: serializer.fromJson<double>(json['yc2']),
      yc3: serializer.fromJson<double>(json['yc3']),
      ytanD1: serializer.fromJson<double>(json['ytanD1']),
      ytanD2: serializer.fromJson<double>(json['ytanD2']),
      ytanD3: serializer.fromJson<double>(json['ytanD3']),
      yp1: serializer.fromJson<double>(json['yp1']),
      yp2: serializer.fromJson<double>(json['yp2']),
      yp3: serializer.fromJson<double>(json['yp3']),
      yVdf1: serializer.fromJson<double>(json['yVdf1']),
      yVdf2: serializer.fromJson<double>(json['yVdf2']),
      yVdf3: serializer.fromJson<double>(json['yVdf3']),
      bu1: serializer.fromJson<double>(json['bu1']),
      bu2: serializer.fromJson<double>(json['bu2']),
      bu3: serializer.fromJson<double>(json['bu3']),
      bi1: serializer.fromJson<double>(json['bi1']),
      bi2: serializer.fromJson<double>(json['bi2']),
      bi3: serializer.fromJson<double>(json['bi3']),
      bc1: serializer.fromJson<double>(json['bc1']),
      bc2: serializer.fromJson<double>(json['bc2']),
      bc3: serializer.fromJson<double>(json['bc3']),
      btanD1: serializer.fromJson<double>(json['btanD1']),
      btanD2: serializer.fromJson<double>(json['btanD2']),
      btanD3: serializer.fromJson<double>(json['btanD3']),
      bp1: serializer.fromJson<double>(json['bp1']),
      bp2: serializer.fromJson<double>(json['bp2']),
      bp3: serializer.fromJson<double>(json['bp3']),
      bVdf1: serializer.fromJson<double>(json['bVdf1']),
      bVdf2: serializer.fromJson<double>(json['bVdf2']),
      bVdf3: serializer.fromJson<double>(json['bVdf3']),
      hv_lv_u1: serializer.fromJson<double>(json['hv_lv_u1']),
      hv_lv_u2: serializer.fromJson<double>(json['hv_lv_u2']),
      hv_lv_u3: serializer.fromJson<double>(json['hv_lv_u3']),
      hv_lv_i1: serializer.fromJson<double>(json['hv_lv_i1']),
      hv_lv_i2: serializer.fromJson<double>(json['hv_lv_i2']),
      hv_lv_i3: serializer.fromJson<double>(json['hv_lv_i3']),
      hv_lv_c1: serializer.fromJson<double>(json['hv_lv_c1']),
      hv_lv_c2: serializer.fromJson<double>(json['hv_lv_c2']),
      hv_lv_c3: serializer.fromJson<double>(json['hv_lv_c3']),
      hv_lv_tanD1: serializer.fromJson<double>(json['hv_lv_tanD1']),
      hv_lv_tanD2: serializer.fromJson<double>(json['hv_lv_tanD2']),
      hv_lv_tanD3: serializer.fromJson<double>(json['hv_lv_tanD3']),
      hv_lv_p1: serializer.fromJson<double>(json['hv_lv_p1']),
      hv_lv_p2: serializer.fromJson<double>(json['hv_lv_p2']),
      hv_lv_p3: serializer.fromJson<double>(json['hv_lv_p3']),
      hv_lv_Vdf1: serializer.fromJson<double>(json['hv_lv_Vdf1']),
      hv_lv_Vdf2: serializer.fromJson<double>(json['hv_lv_Vdf2']),
      hv_lv_Vdf3: serializer.fromJson<double>(json['hv_lv_Vdf3']),
      hvE_G_u1: serializer.fromJson<double>(json['hvE_G_u1']),
      hvE_G_u2: serializer.fromJson<double>(json['hvE_G_u2']),
      hvE_G_u3: serializer.fromJson<double>(json['hvE_G_u3']),
      hvE_G_i1: serializer.fromJson<double>(json['hvE_G_i1']),
      hvE_G_i2: serializer.fromJson<double>(json['hvE_G_i2']),
      hvE_G_i3: serializer.fromJson<double>(json['hvE_G_i3']),
      hvE_G_c1: serializer.fromJson<double>(json['hvE_G_c1']),
      hvE_G_c2: serializer.fromJson<double>(json['hvE_G_c2']),
      hvE_G_c3: serializer.fromJson<double>(json['hvE_G_c3']),
      hvE_G_tanD1: serializer.fromJson<double>(json['hvE_G_tanD1']),
      hvE_G_tanD2: serializer.fromJson<double>(json['hvE_G_tanD2']),
      hvE_G_tanD3: serializer.fromJson<double>(json['hvE_G_tanD3']),
      hvE_G_p1: serializer.fromJson<double>(json['hvE_G_p1']),
      hvE_G_p2: serializer.fromJson<double>(json['hvE_G_p2']),
      hvE_G_p3: serializer.fromJson<double>(json['hvE_G_p3']),
      hvE_G_Vdf1: serializer.fromJson<double>(json['hvE_G_Vdf1']),
      hvE_G_Vdf2: serializer.fromJson<double>(json['hvE_G_Vdf2']),
      hvE_G_Vdf3: serializer.fromJson<double>(json['hvE_G_Vdf3']),
      hvE_Grnd_u1: serializer.fromJson<double>(json['hvE_Grnd_u1']),
      hvE_Grnd_u2: serializer.fromJson<double>(json['hvE_Grnd_u2']),
      hvE_Grnd_u3: serializer.fromJson<double>(json['hvE_Grnd_u3']),
      hvE_Grnd_i1: serializer.fromJson<double>(json['hvE_Grnd_i1']),
      hvE_Grnd_i2: serializer.fromJson<double>(json['hvE_Grnd_i2']),
      hvE_Grnd_i3: serializer.fromJson<double>(json['hvE_Grnd_i3']),
      hvE_Grnd_c1: serializer.fromJson<double>(json['hvE_Grnd_c1']),
      hvE_Grnd_c2: serializer.fromJson<double>(json['hvE_Grnd_c2']),
      hvE_Grnd_c3: serializer.fromJson<double>(json['hvE_Grnd_c3']),
      hvE_Grnd_tanD1: serializer.fromJson<double>(json['hvE_Grnd_tanD1']),
      hvE_Grnd_tanD2: serializer.fromJson<double>(json['hvE_Grnd_tanD2']),
      hvE_Grnd_tanD3: serializer.fromJson<double>(json['hvE_Grnd_tanD3']),
      hvE_Grnd_p1: serializer.fromJson<double>(json['hvE_Grnd_p1']),
      hvE_Grnd_p2: serializer.fromJson<double>(json['hvE_Grnd_p2']),
      hvE_Grnd_p3: serializer.fromJson<double>(json['hvE_Grnd_p3']),
      hvE_Grnd_Vdf1: serializer.fromJson<double>(json['hvE_Grnd_Vdf1']),
      hvE_Grnd_Vdf2: serializer.fromJson<double>(json['hvE_Grnd_Vdf2']),
      hvE_Grnd_Vdf3: serializer.fromJson<double>(json['hvE_Grnd_Vdf3']),
      lvEu1: serializer.fromJson<double>(json['lvEu1']),
      lvEu2: serializer.fromJson<double>(json['lvEu2']),
      lvEu3: serializer.fromJson<double>(json['lvEu3']),
      lvEi1: serializer.fromJson<double>(json['lvEi1']),
      lvEi2: serializer.fromJson<double>(json['lvEi2']),
      lvEi3: serializer.fromJson<double>(json['lvEi3']),
      lvEc1: serializer.fromJson<double>(json['lvEc1']),
      lvEc2: serializer.fromJson<double>(json['lvEc2']),
      lvEc3: serializer.fromJson<double>(json['lvEc3']),
      lvEtanD1: serializer.fromJson<double>(json['lvEtanD1']),
      lvEtanD2: serializer.fromJson<double>(json['lvEtanD2']),
      lvEtanD3: serializer.fromJson<double>(json['lvEtanD3']),
      lvEp1: serializer.fromJson<double>(json['lvEp1']),
      lvEp2: serializer.fromJson<double>(json['lvEp2']),
      lvEp3: serializer.fromJson<double>(json['lvEp3']),
      lvEVdf1: serializer.fromJson<double>(json['lvEVdf1']),
      lvEVdf2: serializer.fromJson<double>(json['lvEVdf2']),
      lvEVdf3: serializer.fromJson<double>(json['lvEVdf3']),
      lvE_G_u1: serializer.fromJson<double>(json['lvE_G_u1']),
      lvE_G_u2: serializer.fromJson<double>(json['lvE_G_u2']),
      lvE_G_u3: serializer.fromJson<double>(json['lvE_G_u3']),
      lvE_G_i1: serializer.fromJson<double>(json['lvE_G_i1']),
      lvE_G_i2: serializer.fromJson<double>(json['lvE_G_i2']),
      lvE_G_i3: serializer.fromJson<double>(json['lvE_G_i3']),
      lvE_G_c1: serializer.fromJson<double>(json['lvE_G_c1']),
      lvE_G_c2: serializer.fromJson<double>(json['lvE_G_c2']),
      lvE_G_c3: serializer.fromJson<double>(json['lvE_G_c3']),
      lvE_G_tanD1: serializer.fromJson<double>(json['lvE_G_tanD1']),
      lvE_G_tanD2: serializer.fromJson<double>(json['lvE_G_tanD2']),
      lvE_G_tanD3: serializer.fromJson<double>(json['lvE_G_tanD3']),
      lvE_G_p1: serializer.fromJson<double>(json['lvE_G_p1']),
      lvE_G_p2: serializer.fromJson<double>(json['lvE_G_p2']),
      lvE_G_p3: serializer.fromJson<double>(json['lvE_G_p3']),
      lvE_G_Vdf1: serializer.fromJson<double>(json['lvE_G_Vdf1']),
      lvE_G_Vdf2: serializer.fromJson<double>(json['lvE_G_Vdf2']),
      lvE_G_Vdf3: serializer.fromJson<double>(json['lvE_G_Vdf3']),
      lvE_Grnd_u1: serializer.fromJson<double>(json['lvE_Grnd_u1']),
      lvE_Grnd_u2: serializer.fromJson<double>(json['lvE_Grnd_u2']),
      lvE_Grnd_u3: serializer.fromJson<double>(json['lvE_Grnd_u3']),
      lvE_Grnd_i1: serializer.fromJson<double>(json['lvE_Grnd_i1']),
      lvE_Grnd_i2: serializer.fromJson<double>(json['lvE_Grnd_i2']),
      lvE_Grnd_i3: serializer.fromJson<double>(json['lvE_Grnd_i3']),
      lvE_Grnd_c1: serializer.fromJson<double>(json['lvE_Grnd_c1']),
      lvE_Grnd_c2: serializer.fromJson<double>(json['lvE_Grnd_c2']),
      lvE_Grnd_c3: serializer.fromJson<double>(json['lvE_Grnd_c3']),
      lvE_Grnd_tanD1: serializer.fromJson<double>(json['lvE_Grnd_tanD1']),
      lvE_Grnd_tanD2: serializer.fromJson<double>(json['lvE_Grnd_tanD2']),
      lvE_Grnd_tanD3: serializer.fromJson<double>(json['lvE_Grnd_tanD3']),
      lvE_Grnd_p1: serializer.fromJson<double>(json['lvE_Grnd_p1']),
      lvE_Grnd_p2: serializer.fromJson<double>(json['lvE_Grnd_p2']),
      lvE_Grnd_p3: serializer.fromJson<double>(json['lvE_Grnd_p3']),
      lvE_Grnd_Vdf1: serializer.fromJson<double>(json['lvE_Grnd_Vdf1']),
      lvE_Grnd_Vdf2: serializer.fromJson<double>(json['lvE_Grnd_Vdf2']),
      lvE_Grnd_Vdf3: serializer.fromJson<double>(json['lvE_Grnd_Vdf3']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'ru1': serializer.toJson<double>(ru1),
      'ru2': serializer.toJson<double>(ru2),
      'ru3': serializer.toJson<double>(ru3),
      'ri1': serializer.toJson<double>(ri1),
      'ri2': serializer.toJson<double>(ri2),
      'ri3': serializer.toJson<double>(ri3),
      'rc1': serializer.toJson<double>(rc1),
      'rc2': serializer.toJson<double>(rc2),
      'rc3': serializer.toJson<double>(rc3),
      'rtanD1': serializer.toJson<double>(rtanD1),
      'rtanD2': serializer.toJson<double>(rtanD2),
      'rtanD3': serializer.toJson<double>(rtanD3),
      'rp1': serializer.toJson<double>(rp1),
      'rp2': serializer.toJson<double>(rp2),
      'rp3': serializer.toJson<double>(rp3),
      'rVdf1': serializer.toJson<double>(rVdf1),
      'rVdf2': serializer.toJson<double>(rVdf2),
      'rVdf3': serializer.toJson<double>(rVdf3),
      'yu1': serializer.toJson<double>(yu1),
      'yu2': serializer.toJson<double>(yu2),
      'yu3': serializer.toJson<double>(yu3),
      'yi1': serializer.toJson<double>(yi1),
      'yi2': serializer.toJson<double>(yi2),
      'yi3': serializer.toJson<double>(yi3),
      'yc1': serializer.toJson<double>(yc1),
      'yc2': serializer.toJson<double>(yc2),
      'yc3': serializer.toJson<double>(yc3),
      'ytanD1': serializer.toJson<double>(ytanD1),
      'ytanD2': serializer.toJson<double>(ytanD2),
      'ytanD3': serializer.toJson<double>(ytanD3),
      'yp1': serializer.toJson<double>(yp1),
      'yp2': serializer.toJson<double>(yp2),
      'yp3': serializer.toJson<double>(yp3),
      'yVdf1': serializer.toJson<double>(yVdf1),
      'yVdf2': serializer.toJson<double>(yVdf2),
      'yVdf3': serializer.toJson<double>(yVdf3),
      'bu1': serializer.toJson<double>(bu1),
      'bu2': serializer.toJson<double>(bu2),
      'bu3': serializer.toJson<double>(bu3),
      'bi1': serializer.toJson<double>(bi1),
      'bi2': serializer.toJson<double>(bi2),
      'bi3': serializer.toJson<double>(bi3),
      'bc1': serializer.toJson<double>(bc1),
      'bc2': serializer.toJson<double>(bc2),
      'bc3': serializer.toJson<double>(bc3),
      'btanD1': serializer.toJson<double>(btanD1),
      'btanD2': serializer.toJson<double>(btanD2),
      'btanD3': serializer.toJson<double>(btanD3),
      'bp1': serializer.toJson<double>(bp1),
      'bp2': serializer.toJson<double>(bp2),
      'bp3': serializer.toJson<double>(bp3),
      'bVdf1': serializer.toJson<double>(bVdf1),
      'bVdf2': serializer.toJson<double>(bVdf2),
      'bVdf3': serializer.toJson<double>(bVdf3),
      'hv_lv_u1': serializer.toJson<double>(hv_lv_u1),
      'hv_lv_u2': serializer.toJson<double>(hv_lv_u2),
      'hv_lv_u3': serializer.toJson<double>(hv_lv_u3),
      'hv_lv_i1': serializer.toJson<double>(hv_lv_i1),
      'hv_lv_i2': serializer.toJson<double>(hv_lv_i2),
      'hv_lv_i3': serializer.toJson<double>(hv_lv_i3),
      'hv_lv_c1': serializer.toJson<double>(hv_lv_c1),
      'hv_lv_c2': serializer.toJson<double>(hv_lv_c2),
      'hv_lv_c3': serializer.toJson<double>(hv_lv_c3),
      'hv_lv_tanD1': serializer.toJson<double>(hv_lv_tanD1),
      'hv_lv_tanD2': serializer.toJson<double>(hv_lv_tanD2),
      'hv_lv_tanD3': serializer.toJson<double>(hv_lv_tanD3),
      'hv_lv_p1': serializer.toJson<double>(hv_lv_p1),
      'hv_lv_p2': serializer.toJson<double>(hv_lv_p2),
      'hv_lv_p3': serializer.toJson<double>(hv_lv_p3),
      'hv_lv_Vdf1': serializer.toJson<double>(hv_lv_Vdf1),
      'hv_lv_Vdf2': serializer.toJson<double>(hv_lv_Vdf2),
      'hv_lv_Vdf3': serializer.toJson<double>(hv_lv_Vdf3),
      'hvE_G_u1': serializer.toJson<double>(hvE_G_u1),
      'hvE_G_u2': serializer.toJson<double>(hvE_G_u2),
      'hvE_G_u3': serializer.toJson<double>(hvE_G_u3),
      'hvE_G_i1': serializer.toJson<double>(hvE_G_i1),
      'hvE_G_i2': serializer.toJson<double>(hvE_G_i2),
      'hvE_G_i3': serializer.toJson<double>(hvE_G_i3),
      'hvE_G_c1': serializer.toJson<double>(hvE_G_c1),
      'hvE_G_c2': serializer.toJson<double>(hvE_G_c2),
      'hvE_G_c3': serializer.toJson<double>(hvE_G_c3),
      'hvE_G_tanD1': serializer.toJson<double>(hvE_G_tanD1),
      'hvE_G_tanD2': serializer.toJson<double>(hvE_G_tanD2),
      'hvE_G_tanD3': serializer.toJson<double>(hvE_G_tanD3),
      'hvE_G_p1': serializer.toJson<double>(hvE_G_p1),
      'hvE_G_p2': serializer.toJson<double>(hvE_G_p2),
      'hvE_G_p3': serializer.toJson<double>(hvE_G_p3),
      'hvE_G_Vdf1': serializer.toJson<double>(hvE_G_Vdf1),
      'hvE_G_Vdf2': serializer.toJson<double>(hvE_G_Vdf2),
      'hvE_G_Vdf3': serializer.toJson<double>(hvE_G_Vdf3),
      'hvE_Grnd_u1': serializer.toJson<double>(hvE_Grnd_u1),
      'hvE_Grnd_u2': serializer.toJson<double>(hvE_Grnd_u2),
      'hvE_Grnd_u3': serializer.toJson<double>(hvE_Grnd_u3),
      'hvE_Grnd_i1': serializer.toJson<double>(hvE_Grnd_i1),
      'hvE_Grnd_i2': serializer.toJson<double>(hvE_Grnd_i2),
      'hvE_Grnd_i3': serializer.toJson<double>(hvE_Grnd_i3),
      'hvE_Grnd_c1': serializer.toJson<double>(hvE_Grnd_c1),
      'hvE_Grnd_c2': serializer.toJson<double>(hvE_Grnd_c2),
      'hvE_Grnd_c3': serializer.toJson<double>(hvE_Grnd_c3),
      'hvE_Grnd_tanD1': serializer.toJson<double>(hvE_Grnd_tanD1),
      'hvE_Grnd_tanD2': serializer.toJson<double>(hvE_Grnd_tanD2),
      'hvE_Grnd_tanD3': serializer.toJson<double>(hvE_Grnd_tanD3),
      'hvE_Grnd_p1': serializer.toJson<double>(hvE_Grnd_p1),
      'hvE_Grnd_p2': serializer.toJson<double>(hvE_Grnd_p2),
      'hvE_Grnd_p3': serializer.toJson<double>(hvE_Grnd_p3),
      'hvE_Grnd_Vdf1': serializer.toJson<double>(hvE_Grnd_Vdf1),
      'hvE_Grnd_Vdf2': serializer.toJson<double>(hvE_Grnd_Vdf2),
      'hvE_Grnd_Vdf3': serializer.toJson<double>(hvE_Grnd_Vdf3),
      'lvEu1': serializer.toJson<double>(lvEu1),
      'lvEu2': serializer.toJson<double>(lvEu2),
      'lvEu3': serializer.toJson<double>(lvEu3),
      'lvEi1': serializer.toJson<double>(lvEi1),
      'lvEi2': serializer.toJson<double>(lvEi2),
      'lvEi3': serializer.toJson<double>(lvEi3),
      'lvEc1': serializer.toJson<double>(lvEc1),
      'lvEc2': serializer.toJson<double>(lvEc2),
      'lvEc3': serializer.toJson<double>(lvEc3),
      'lvEtanD1': serializer.toJson<double>(lvEtanD1),
      'lvEtanD2': serializer.toJson<double>(lvEtanD2),
      'lvEtanD3': serializer.toJson<double>(lvEtanD3),
      'lvEp1': serializer.toJson<double>(lvEp1),
      'lvEp2': serializer.toJson<double>(lvEp2),
      'lvEp3': serializer.toJson<double>(lvEp3),
      'lvEVdf1': serializer.toJson<double>(lvEVdf1),
      'lvEVdf2': serializer.toJson<double>(lvEVdf2),
      'lvEVdf3': serializer.toJson<double>(lvEVdf3),
      'lvE_G_u1': serializer.toJson<double>(lvE_G_u1),
      'lvE_G_u2': serializer.toJson<double>(lvE_G_u2),
      'lvE_G_u3': serializer.toJson<double>(lvE_G_u3),
      'lvE_G_i1': serializer.toJson<double>(lvE_G_i1),
      'lvE_G_i2': serializer.toJson<double>(lvE_G_i2),
      'lvE_G_i3': serializer.toJson<double>(lvE_G_i3),
      'lvE_G_c1': serializer.toJson<double>(lvE_G_c1),
      'lvE_G_c2': serializer.toJson<double>(lvE_G_c2),
      'lvE_G_c3': serializer.toJson<double>(lvE_G_c3),
      'lvE_G_tanD1': serializer.toJson<double>(lvE_G_tanD1),
      'lvE_G_tanD2': serializer.toJson<double>(lvE_G_tanD2),
      'lvE_G_tanD3': serializer.toJson<double>(lvE_G_tanD3),
      'lvE_G_p1': serializer.toJson<double>(lvE_G_p1),
      'lvE_G_p2': serializer.toJson<double>(lvE_G_p2),
      'lvE_G_p3': serializer.toJson<double>(lvE_G_p3),
      'lvE_G_Vdf1': serializer.toJson<double>(lvE_G_Vdf1),
      'lvE_G_Vdf2': serializer.toJson<double>(lvE_G_Vdf2),
      'lvE_G_Vdf3': serializer.toJson<double>(lvE_G_Vdf3),
      'lvE_Grnd_u1': serializer.toJson<double>(lvE_Grnd_u1),
      'lvE_Grnd_u2': serializer.toJson<double>(lvE_Grnd_u2),
      'lvE_Grnd_u3': serializer.toJson<double>(lvE_Grnd_u3),
      'lvE_Grnd_i1': serializer.toJson<double>(lvE_Grnd_i1),
      'lvE_Grnd_i2': serializer.toJson<double>(lvE_Grnd_i2),
      'lvE_Grnd_i3': serializer.toJson<double>(lvE_Grnd_i3),
      'lvE_Grnd_c1': serializer.toJson<double>(lvE_Grnd_c1),
      'lvE_Grnd_c2': serializer.toJson<double>(lvE_Grnd_c2),
      'lvE_Grnd_c3': serializer.toJson<double>(lvE_Grnd_c3),
      'lvE_Grnd_tanD1': serializer.toJson<double>(lvE_Grnd_tanD1),
      'lvE_Grnd_tanD2': serializer.toJson<double>(lvE_Grnd_tanD2),
      'lvE_Grnd_tanD3': serializer.toJson<double>(lvE_Grnd_tanD3),
      'lvE_Grnd_p1': serializer.toJson<double>(lvE_Grnd_p1),
      'lvE_Grnd_p2': serializer.toJson<double>(lvE_Grnd_p2),
      'lvE_Grnd_p3': serializer.toJson<double>(lvE_Grnd_p3),
      'lvE_Grnd_Vdf1': serializer.toJson<double>(lvE_Grnd_Vdf1),
      'lvE_Grnd_Vdf2': serializer.toJson<double>(lvE_Grnd_Vdf2),
      'lvE_Grnd_Vdf3': serializer.toJson<double>(lvE_Grnd_Vdf3),
    };
  }

  PowttdLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double ru1,
          double ru2,
          double ru3,
          double ri1,
          double ri2,
          double ri3,
          double rc1,
          double rc2,
          double rc3,
          double rtanD1,
          double rtanD2,
          double rtanD3,
          double rp1,
          double rp2,
          double rp3,
          double rVdf1,
          double rVdf2,
          double rVdf3,
          double yu1,
          double yu2,
          double yu3,
          double yi1,
          double yi2,
          double yi3,
          double yc1,
          double yc2,
          double yc3,
          double ytanD1,
          double ytanD2,
          double ytanD3,
          double yp1,
          double yp2,
          double yp3,
          double yVdf1,
          double yVdf2,
          double yVdf3,
          double bu1,
          double bu2,
          double bu3,
          double bi1,
          double bi2,
          double bi3,
          double bc1,
          double bc2,
          double bc3,
          double btanD1,
          double btanD2,
          double btanD3,
          double bp1,
          double bp2,
          double bp3,
          double bVdf1,
          double bVdf2,
          double bVdf3,
          double hv_lv_u1,
          double hv_lv_u2,
          double hv_lv_u3,
          double hv_lv_i1,
          double hv_lv_i2,
          double hv_lv_i3,
          double hv_lv_c1,
          double hv_lv_c2,
          double hv_lv_c3,
          double hv_lv_tanD1,
          double hv_lv_tanD2,
          double hv_lv_tanD3,
          double hv_lv_p1,
          double hv_lv_p2,
          double hv_lv_p3,
          double hv_lv_Vdf1,
          double hv_lv_Vdf2,
          double hv_lv_Vdf3,
          double hvE_G_u1,
          double hvE_G_u2,
          double hvE_G_u3,
          double hvE_G_i1,
          double hvE_G_i2,
          double hvE_G_i3,
          double hvE_G_c1,
          double hvE_G_c2,
          double hvE_G_c3,
          double hvE_G_tanD1,
          double hvE_G_tanD2,
          double hvE_G_tanD3,
          double hvE_G_p1,
          double hvE_G_p2,
          double hvE_G_p3,
          double hvE_G_Vdf1,
          double hvE_G_Vdf2,
          double hvE_G_Vdf3,
          double hvE_Grnd_u1,
          double hvE_Grnd_u2,
          double hvE_Grnd_u3,
          double hvE_Grnd_i1,
          double hvE_Grnd_i2,
          double hvE_Grnd_i3,
          double hvE_Grnd_c1,
          double hvE_Grnd_c2,
          double hvE_Grnd_c3,
          double hvE_Grnd_tanD1,
          double hvE_Grnd_tanD2,
          double hvE_Grnd_tanD3,
          double hvE_Grnd_p1,
          double hvE_Grnd_p2,
          double hvE_Grnd_p3,
          double hvE_Grnd_Vdf1,
          double hvE_Grnd_Vdf2,
          double hvE_Grnd_Vdf3,
          double lvEu1,
          double lvEu2,
          double lvEu3,
          double lvEi1,
          double lvEi2,
          double lvEi3,
          double lvEc1,
          double lvEc2,
          double lvEc3,
          double lvEtanD1,
          double lvEtanD2,
          double lvEtanD3,
          double lvEp1,
          double lvEp2,
          double lvEp3,
          double lvEVdf1,
          double lvEVdf2,
          double lvEVdf3,
          double lvE_G_u1,
          double lvE_G_u2,
          double lvE_G_u3,
          double lvE_G_i1,
          double lvE_G_i2,
          double lvE_G_i3,
          double lvE_G_c1,
          double lvE_G_c2,
          double lvE_G_c3,
          double lvE_G_tanD1,
          double lvE_G_tanD2,
          double lvE_G_tanD3,
          double lvE_G_p1,
          double lvE_G_p2,
          double lvE_G_p3,
          double lvE_G_Vdf1,
          double lvE_G_Vdf2,
          double lvE_G_Vdf3,
          double lvE_Grnd_u1,
          double lvE_Grnd_u2,
          double lvE_Grnd_u3,
          double lvE_Grnd_i1,
          double lvE_Grnd_i2,
          double lvE_Grnd_i3,
          double lvE_Grnd_c1,
          double lvE_Grnd_c2,
          double lvE_Grnd_c3,
          double lvE_Grnd_tanD1,
          double lvE_Grnd_tanD2,
          double lvE_Grnd_tanD3,
          double lvE_Grnd_p1,
          double lvE_Grnd_p2,
          double lvE_Grnd_p3,
          double lvE_Grnd_Vdf1,
          double lvE_Grnd_Vdf2,
          double lvE_Grnd_Vdf3}) =>
      PowttdLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        ru1: ru1 ?? this.ru1,
        ru2: ru2 ?? this.ru2,
        ru3: ru3 ?? this.ru3,
        ri1: ri1 ?? this.ri1,
        ri2: ri2 ?? this.ri2,
        ri3: ri3 ?? this.ri3,
        rc1: rc1 ?? this.rc1,
        rc2: rc2 ?? this.rc2,
        rc3: rc3 ?? this.rc3,
        rtanD1: rtanD1 ?? this.rtanD1,
        rtanD2: rtanD2 ?? this.rtanD2,
        rtanD3: rtanD3 ?? this.rtanD3,
        rp1: rp1 ?? this.rp1,
        rp2: rp2 ?? this.rp2,
        rp3: rp3 ?? this.rp3,
        rVdf1: rVdf1 ?? this.rVdf1,
        rVdf2: rVdf2 ?? this.rVdf2,
        rVdf3: rVdf3 ?? this.rVdf3,
        yu1: yu1 ?? this.yu1,
        yu2: yu2 ?? this.yu2,
        yu3: yu3 ?? this.yu3,
        yi1: yi1 ?? this.yi1,
        yi2: yi2 ?? this.yi2,
        yi3: yi3 ?? this.yi3,
        yc1: yc1 ?? this.yc1,
        yc2: yc2 ?? this.yc2,
        yc3: yc3 ?? this.yc3,
        ytanD1: ytanD1 ?? this.ytanD1,
        ytanD2: ytanD2 ?? this.ytanD2,
        ytanD3: ytanD3 ?? this.ytanD3,
        yp1: yp1 ?? this.yp1,
        yp2: yp2 ?? this.yp2,
        yp3: yp3 ?? this.yp3,
        yVdf1: yVdf1 ?? this.yVdf1,
        yVdf2: yVdf2 ?? this.yVdf2,
        yVdf3: yVdf3 ?? this.yVdf3,
        bu1: bu1 ?? this.bu1,
        bu2: bu2 ?? this.bu2,
        bu3: bu3 ?? this.bu3,
        bi1: bi1 ?? this.bi1,
        bi2: bi2 ?? this.bi2,
        bi3: bi3 ?? this.bi3,
        bc1: bc1 ?? this.bc1,
        bc2: bc2 ?? this.bc2,
        bc3: bc3 ?? this.bc3,
        btanD1: btanD1 ?? this.btanD1,
        btanD2: btanD2 ?? this.btanD2,
        btanD3: btanD3 ?? this.btanD3,
        bp1: bp1 ?? this.bp1,
        bp2: bp2 ?? this.bp2,
        bp3: bp3 ?? this.bp3,
        bVdf1: bVdf1 ?? this.bVdf1,
        bVdf2: bVdf2 ?? this.bVdf2,
        bVdf3: bVdf3 ?? this.bVdf3,
        hv_lv_u1: hv_lv_u1 ?? this.hv_lv_u1,
        hv_lv_u2: hv_lv_u2 ?? this.hv_lv_u2,
        hv_lv_u3: hv_lv_u3 ?? this.hv_lv_u3,
        hv_lv_i1: hv_lv_i1 ?? this.hv_lv_i1,
        hv_lv_i2: hv_lv_i2 ?? this.hv_lv_i2,
        hv_lv_i3: hv_lv_i3 ?? this.hv_lv_i3,
        hv_lv_c1: hv_lv_c1 ?? this.hv_lv_c1,
        hv_lv_c2: hv_lv_c2 ?? this.hv_lv_c2,
        hv_lv_c3: hv_lv_c3 ?? this.hv_lv_c3,
        hv_lv_tanD1: hv_lv_tanD1 ?? this.hv_lv_tanD1,
        hv_lv_tanD2: hv_lv_tanD2 ?? this.hv_lv_tanD2,
        hv_lv_tanD3: hv_lv_tanD3 ?? this.hv_lv_tanD3,
        hv_lv_p1: hv_lv_p1 ?? this.hv_lv_p1,
        hv_lv_p2: hv_lv_p2 ?? this.hv_lv_p2,
        hv_lv_p3: hv_lv_p3 ?? this.hv_lv_p3,
        hv_lv_Vdf1: hv_lv_Vdf1 ?? this.hv_lv_Vdf1,
        hv_lv_Vdf2: hv_lv_Vdf2 ?? this.hv_lv_Vdf2,
        hv_lv_Vdf3: hv_lv_Vdf3 ?? this.hv_lv_Vdf3,
        hvE_G_u1: hvE_G_u1 ?? this.hvE_G_u1,
        hvE_G_u2: hvE_G_u2 ?? this.hvE_G_u2,
        hvE_G_u3: hvE_G_u3 ?? this.hvE_G_u3,
        hvE_G_i1: hvE_G_i1 ?? this.hvE_G_i1,
        hvE_G_i2: hvE_G_i2 ?? this.hvE_G_i2,
        hvE_G_i3: hvE_G_i3 ?? this.hvE_G_i3,
        hvE_G_c1: hvE_G_c1 ?? this.hvE_G_c1,
        hvE_G_c2: hvE_G_c2 ?? this.hvE_G_c2,
        hvE_G_c3: hvE_G_c3 ?? this.hvE_G_c3,
        hvE_G_tanD1: hvE_G_tanD1 ?? this.hvE_G_tanD1,
        hvE_G_tanD2: hvE_G_tanD2 ?? this.hvE_G_tanD2,
        hvE_G_tanD3: hvE_G_tanD3 ?? this.hvE_G_tanD3,
        hvE_G_p1: hvE_G_p1 ?? this.hvE_G_p1,
        hvE_G_p2: hvE_G_p2 ?? this.hvE_G_p2,
        hvE_G_p3: hvE_G_p3 ?? this.hvE_G_p3,
        hvE_G_Vdf1: hvE_G_Vdf1 ?? this.hvE_G_Vdf1,
        hvE_G_Vdf2: hvE_G_Vdf2 ?? this.hvE_G_Vdf2,
        hvE_G_Vdf3: hvE_G_Vdf3 ?? this.hvE_G_Vdf3,
        hvE_Grnd_u1: hvE_Grnd_u1 ?? this.hvE_Grnd_u1,
        hvE_Grnd_u2: hvE_Grnd_u2 ?? this.hvE_Grnd_u2,
        hvE_Grnd_u3: hvE_Grnd_u3 ?? this.hvE_Grnd_u3,
        hvE_Grnd_i1: hvE_Grnd_i1 ?? this.hvE_Grnd_i1,
        hvE_Grnd_i2: hvE_Grnd_i2 ?? this.hvE_Grnd_i2,
        hvE_Grnd_i3: hvE_Grnd_i3 ?? this.hvE_Grnd_i3,
        hvE_Grnd_c1: hvE_Grnd_c1 ?? this.hvE_Grnd_c1,
        hvE_Grnd_c2: hvE_Grnd_c2 ?? this.hvE_Grnd_c2,
        hvE_Grnd_c3: hvE_Grnd_c3 ?? this.hvE_Grnd_c3,
        hvE_Grnd_tanD1: hvE_Grnd_tanD1 ?? this.hvE_Grnd_tanD1,
        hvE_Grnd_tanD2: hvE_Grnd_tanD2 ?? this.hvE_Grnd_tanD2,
        hvE_Grnd_tanD3: hvE_Grnd_tanD3 ?? this.hvE_Grnd_tanD3,
        hvE_Grnd_p1: hvE_Grnd_p1 ?? this.hvE_Grnd_p1,
        hvE_Grnd_p2: hvE_Grnd_p2 ?? this.hvE_Grnd_p2,
        hvE_Grnd_p3: hvE_Grnd_p3 ?? this.hvE_Grnd_p3,
        hvE_Grnd_Vdf1: hvE_Grnd_Vdf1 ?? this.hvE_Grnd_Vdf1,
        hvE_Grnd_Vdf2: hvE_Grnd_Vdf2 ?? this.hvE_Grnd_Vdf2,
        hvE_Grnd_Vdf3: hvE_Grnd_Vdf3 ?? this.hvE_Grnd_Vdf3,
        lvEu1: lvEu1 ?? this.lvEu1,
        lvEu2: lvEu2 ?? this.lvEu2,
        lvEu3: lvEu3 ?? this.lvEu3,
        lvEi1: lvEi1 ?? this.lvEi1,
        lvEi2: lvEi2 ?? this.lvEi2,
        lvEi3: lvEi3 ?? this.lvEi3,
        lvEc1: lvEc1 ?? this.lvEc1,
        lvEc2: lvEc2 ?? this.lvEc2,
        lvEc3: lvEc3 ?? this.lvEc3,
        lvEtanD1: lvEtanD1 ?? this.lvEtanD1,
        lvEtanD2: lvEtanD2 ?? this.lvEtanD2,
        lvEtanD3: lvEtanD3 ?? this.lvEtanD3,
        lvEp1: lvEp1 ?? this.lvEp1,
        lvEp2: lvEp2 ?? this.lvEp2,
        lvEp3: lvEp3 ?? this.lvEp3,
        lvEVdf1: lvEVdf1 ?? this.lvEVdf1,
        lvEVdf2: lvEVdf2 ?? this.lvEVdf2,
        lvEVdf3: lvEVdf3 ?? this.lvEVdf3,
        lvE_G_u1: lvE_G_u1 ?? this.lvE_G_u1,
        lvE_G_u2: lvE_G_u2 ?? this.lvE_G_u2,
        lvE_G_u3: lvE_G_u3 ?? this.lvE_G_u3,
        lvE_G_i1: lvE_G_i1 ?? this.lvE_G_i1,
        lvE_G_i2: lvE_G_i2 ?? this.lvE_G_i2,
        lvE_G_i3: lvE_G_i3 ?? this.lvE_G_i3,
        lvE_G_c1: lvE_G_c1 ?? this.lvE_G_c1,
        lvE_G_c2: lvE_G_c2 ?? this.lvE_G_c2,
        lvE_G_c3: lvE_G_c3 ?? this.lvE_G_c3,
        lvE_G_tanD1: lvE_G_tanD1 ?? this.lvE_G_tanD1,
        lvE_G_tanD2: lvE_G_tanD2 ?? this.lvE_G_tanD2,
        lvE_G_tanD3: lvE_G_tanD3 ?? this.lvE_G_tanD3,
        lvE_G_p1: lvE_G_p1 ?? this.lvE_G_p1,
        lvE_G_p2: lvE_G_p2 ?? this.lvE_G_p2,
        lvE_G_p3: lvE_G_p3 ?? this.lvE_G_p3,
        lvE_G_Vdf1: lvE_G_Vdf1 ?? this.lvE_G_Vdf1,
        lvE_G_Vdf2: lvE_G_Vdf2 ?? this.lvE_G_Vdf2,
        lvE_G_Vdf3: lvE_G_Vdf3 ?? this.lvE_G_Vdf3,
        lvE_Grnd_u1: lvE_Grnd_u1 ?? this.lvE_Grnd_u1,
        lvE_Grnd_u2: lvE_Grnd_u2 ?? this.lvE_Grnd_u2,
        lvE_Grnd_u3: lvE_Grnd_u3 ?? this.lvE_Grnd_u3,
        lvE_Grnd_i1: lvE_Grnd_i1 ?? this.lvE_Grnd_i1,
        lvE_Grnd_i2: lvE_Grnd_i2 ?? this.lvE_Grnd_i2,
        lvE_Grnd_i3: lvE_Grnd_i3 ?? this.lvE_Grnd_i3,
        lvE_Grnd_c1: lvE_Grnd_c1 ?? this.lvE_Grnd_c1,
        lvE_Grnd_c2: lvE_Grnd_c2 ?? this.lvE_Grnd_c2,
        lvE_Grnd_c3: lvE_Grnd_c3 ?? this.lvE_Grnd_c3,
        lvE_Grnd_tanD1: lvE_Grnd_tanD1 ?? this.lvE_Grnd_tanD1,
        lvE_Grnd_tanD2: lvE_Grnd_tanD2 ?? this.lvE_Grnd_tanD2,
        lvE_Grnd_tanD3: lvE_Grnd_tanD3 ?? this.lvE_Grnd_tanD3,
        lvE_Grnd_p1: lvE_Grnd_p1 ?? this.lvE_Grnd_p1,
        lvE_Grnd_p2: lvE_Grnd_p2 ?? this.lvE_Grnd_p2,
        lvE_Grnd_p3: lvE_Grnd_p3 ?? this.lvE_Grnd_p3,
        lvE_Grnd_Vdf1: lvE_Grnd_Vdf1 ?? this.lvE_Grnd_Vdf1,
        lvE_Grnd_Vdf2: lvE_Grnd_Vdf2 ?? this.lvE_Grnd_Vdf2,
        lvE_Grnd_Vdf3: lvE_Grnd_Vdf3 ?? this.lvE_Grnd_Vdf3,
      );
  @override
  String toString() {
    return (StringBuffer('PowttdLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('ru1: $ru1, ')
          ..write('ru2: $ru2, ')
          ..write('ru3: $ru3, ')
          ..write('ri1: $ri1, ')
          ..write('ri2: $ri2, ')
          ..write('ri3: $ri3, ')
          ..write('rc1: $rc1, ')
          ..write('rc2: $rc2, ')
          ..write('rc3: $rc3, ')
          ..write('rtanD1: $rtanD1, ')
          ..write('rtanD2: $rtanD2, ')
          ..write('rtanD3: $rtanD3, ')
          ..write('rp1: $rp1, ')
          ..write('rp2: $rp2, ')
          ..write('rp3: $rp3, ')
          ..write('rVdf1: $rVdf1, ')
          ..write('rVdf2: $rVdf2, ')
          ..write('rVdf3: $rVdf3, ')
          ..write('yu1: $yu1, ')
          ..write('yu2: $yu2, ')
          ..write('yu3: $yu3, ')
          ..write('yi1: $yi1, ')
          ..write('yi2: $yi2, ')
          ..write('yi3: $yi3, ')
          ..write('yc1: $yc1, ')
          ..write('yc2: $yc2, ')
          ..write('yc3: $yc3, ')
          ..write('ytanD1: $ytanD1, ')
          ..write('ytanD2: $ytanD2, ')
          ..write('ytanD3: $ytanD3, ')
          ..write('yp1: $yp1, ')
          ..write('yp2: $yp2, ')
          ..write('yp3: $yp3, ')
          ..write('yVdf1: $yVdf1, ')
          ..write('yVdf2: $yVdf2, ')
          ..write('yVdf3: $yVdf3, ')
          ..write('bu1: $bu1, ')
          ..write('bu2: $bu2, ')
          ..write('bu3: $bu3, ')
          ..write('bi1: $bi1, ')
          ..write('bi2: $bi2, ')
          ..write('bi3: $bi3, ')
          ..write('bc1: $bc1, ')
          ..write('bc2: $bc2, ')
          ..write('bc3: $bc3, ')
          ..write('btanD1: $btanD1, ')
          ..write('btanD2: $btanD2, ')
          ..write('btanD3: $btanD3, ')
          ..write('bp1: $bp1, ')
          ..write('bp2: $bp2, ')
          ..write('bp3: $bp3, ')
          ..write('bVdf1: $bVdf1, ')
          ..write('bVdf2: $bVdf2, ')
          ..write('bVdf3: $bVdf3, ')
          ..write('hv_lv_u1: $hv_lv_u1, ')
          ..write('hv_lv_u2: $hv_lv_u2, ')
          ..write('hv_lv_u3: $hv_lv_u3, ')
          ..write('hv_lv_i1: $hv_lv_i1, ')
          ..write('hv_lv_i2: $hv_lv_i2, ')
          ..write('hv_lv_i3: $hv_lv_i3, ')
          ..write('hv_lv_c1: $hv_lv_c1, ')
          ..write('hv_lv_c2: $hv_lv_c2, ')
          ..write('hv_lv_c3: $hv_lv_c3, ')
          ..write('hv_lv_tanD1: $hv_lv_tanD1, ')
          ..write('hv_lv_tanD2: $hv_lv_tanD2, ')
          ..write('hv_lv_tanD3: $hv_lv_tanD3, ')
          ..write('hv_lv_p1: $hv_lv_p1, ')
          ..write('hv_lv_p2: $hv_lv_p2, ')
          ..write('hv_lv_p3: $hv_lv_p3, ')
          ..write('hv_lv_Vdf1: $hv_lv_Vdf1, ')
          ..write('hv_lv_Vdf2: $hv_lv_Vdf2, ')
          ..write('hv_lv_Vdf3: $hv_lv_Vdf3, ')
          ..write('hvE_G_u1: $hvE_G_u1, ')
          ..write('hvE_G_u2: $hvE_G_u2, ')
          ..write('hvE_G_u3: $hvE_G_u3, ')
          ..write('hvE_G_i1: $hvE_G_i1, ')
          ..write('hvE_G_i2: $hvE_G_i2, ')
          ..write('hvE_G_i3: $hvE_G_i3, ')
          ..write('hvE_G_c1: $hvE_G_c1, ')
          ..write('hvE_G_c2: $hvE_G_c2, ')
          ..write('hvE_G_c3: $hvE_G_c3, ')
          ..write('hvE_G_tanD1: $hvE_G_tanD1, ')
          ..write('hvE_G_tanD2: $hvE_G_tanD2, ')
          ..write('hvE_G_tanD3: $hvE_G_tanD3, ')
          ..write('hvE_G_p1: $hvE_G_p1, ')
          ..write('hvE_G_p2: $hvE_G_p2, ')
          ..write('hvE_G_p3: $hvE_G_p3, ')
          ..write('hvE_G_Vdf1: $hvE_G_Vdf1, ')
          ..write('hvE_G_Vdf2: $hvE_G_Vdf2, ')
          ..write('hvE_G_Vdf3: $hvE_G_Vdf3, ')
          ..write('hvE_Grnd_u1: $hvE_Grnd_u1, ')
          ..write('hvE_Grnd_u2: $hvE_Grnd_u2, ')
          ..write('hvE_Grnd_u3: $hvE_Grnd_u3, ')
          ..write('hvE_Grnd_i1: $hvE_Grnd_i1, ')
          ..write('hvE_Grnd_i2: $hvE_Grnd_i2, ')
          ..write('hvE_Grnd_i3: $hvE_Grnd_i3, ')
          ..write('hvE_Grnd_c1: $hvE_Grnd_c1, ')
          ..write('hvE_Grnd_c2: $hvE_Grnd_c2, ')
          ..write('hvE_Grnd_c3: $hvE_Grnd_c3, ')
          ..write('hvE_Grnd_tanD1: $hvE_Grnd_tanD1, ')
          ..write('hvE_Grnd_tanD2: $hvE_Grnd_tanD2, ')
          ..write('hvE_Grnd_tanD3: $hvE_Grnd_tanD3, ')
          ..write('hvE_Grnd_p1: $hvE_Grnd_p1, ')
          ..write('hvE_Grnd_p2: $hvE_Grnd_p2, ')
          ..write('hvE_Grnd_p3: $hvE_Grnd_p3, ')
          ..write('hvE_Grnd_Vdf1: $hvE_Grnd_Vdf1, ')
          ..write('hvE_Grnd_Vdf2: $hvE_Grnd_Vdf2, ')
          ..write('hvE_Grnd_Vdf3: $hvE_Grnd_Vdf3, ')
          ..write('lvEu1: $lvEu1, ')
          ..write('lvEu2: $lvEu2, ')
          ..write('lvEu3: $lvEu3, ')
          ..write('lvEi1: $lvEi1, ')
          ..write('lvEi2: $lvEi2, ')
          ..write('lvEi3: $lvEi3, ')
          ..write('lvEc1: $lvEc1, ')
          ..write('lvEc2: $lvEc2, ')
          ..write('lvEc3: $lvEc3, ')
          ..write('lvEtanD1: $lvEtanD1, ')
          ..write('lvEtanD2: $lvEtanD2, ')
          ..write('lvEtanD3: $lvEtanD3, ')
          ..write('lvEp1: $lvEp1, ')
          ..write('lvEp2: $lvEp2, ')
          ..write('lvEp3: $lvEp3, ')
          ..write('lvEVdf1: $lvEVdf1, ')
          ..write('lvEVdf2: $lvEVdf2, ')
          ..write('lvEVdf3: $lvEVdf3, ')
          ..write('lvE_G_u1: $lvE_G_u1, ')
          ..write('lvE_G_u2: $lvE_G_u2, ')
          ..write('lvE_G_u3: $lvE_G_u3, ')
          ..write('lvE_G_i1: $lvE_G_i1, ')
          ..write('lvE_G_i2: $lvE_G_i2, ')
          ..write('lvE_G_i3: $lvE_G_i3, ')
          ..write('lvE_G_c1: $lvE_G_c1, ')
          ..write('lvE_G_c2: $lvE_G_c2, ')
          ..write('lvE_G_c3: $lvE_G_c3, ')
          ..write('lvE_G_tanD1: $lvE_G_tanD1, ')
          ..write('lvE_G_tanD2: $lvE_G_tanD2, ')
          ..write('lvE_G_tanD3: $lvE_G_tanD3, ')
          ..write('lvE_G_p1: $lvE_G_p1, ')
          ..write('lvE_G_p2: $lvE_G_p2, ')
          ..write('lvE_G_p3: $lvE_G_p3, ')
          ..write('lvE_G_Vdf1: $lvE_G_Vdf1, ')
          ..write('lvE_G_Vdf2: $lvE_G_Vdf2, ')
          ..write('lvE_G_Vdf3: $lvE_G_Vdf3, ')
          ..write('lvE_Grnd_u1: $lvE_Grnd_u1, ')
          ..write('lvE_Grnd_u2: $lvE_Grnd_u2, ')
          ..write('lvE_Grnd_u3: $lvE_Grnd_u3, ')
          ..write('lvE_Grnd_i1: $lvE_Grnd_i1, ')
          ..write('lvE_Grnd_i2: $lvE_Grnd_i2, ')
          ..write('lvE_Grnd_i3: $lvE_Grnd_i3, ')
          ..write('lvE_Grnd_c1: $lvE_Grnd_c1, ')
          ..write('lvE_Grnd_c2: $lvE_Grnd_c2, ')
          ..write('lvE_Grnd_c3: $lvE_Grnd_c3, ')
          ..write('lvE_Grnd_tanD1: $lvE_Grnd_tanD1, ')
          ..write('lvE_Grnd_tanD2: $lvE_Grnd_tanD2, ')
          ..write('lvE_Grnd_tanD3: $lvE_Grnd_tanD3, ')
          ..write('lvE_Grnd_p1: $lvE_Grnd_p1, ')
          ..write('lvE_Grnd_p2: $lvE_Grnd_p2, ')
          ..write('lvE_Grnd_p3: $lvE_Grnd_p3, ')
          ..write('lvE_Grnd_Vdf1: $lvE_Grnd_Vdf1, ')
          ..write('lvE_Grnd_Vdf2: $lvE_Grnd_Vdf2, ')
          ..write('lvE_Grnd_Vdf3: $lvE_Grnd_Vdf3')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        ru1,
        ru2,
        ru3,
        ri1,
        ri2,
        ri3,
        rc1,
        rc2,
        rc3,
        rtanD1,
        rtanD2,
        rtanD3,
        rp1,
        rp2,
        rp3,
        rVdf1,
        rVdf2,
        rVdf3,
        yu1,
        yu2,
        yu3,
        yi1,
        yi2,
        yi3,
        yc1,
        yc2,
        yc3,
        ytanD1,
        ytanD2,
        ytanD3,
        yp1,
        yp2,
        yp3,
        yVdf1,
        yVdf2,
        yVdf3,
        bu1,
        bu2,
        bu3,
        bi1,
        bi2,
        bi3,
        bc1,
        bc2,
        bc3,
        btanD1,
        btanD2,
        btanD3,
        bp1,
        bp2,
        bp3,
        bVdf1,
        bVdf2,
        bVdf3,
        hv_lv_u1,
        hv_lv_u2,
        hv_lv_u3,
        hv_lv_i1,
        hv_lv_i2,
        hv_lv_i3,
        hv_lv_c1,
        hv_lv_c2,
        hv_lv_c3,
        hv_lv_tanD1,
        hv_lv_tanD2,
        hv_lv_tanD3,
        hv_lv_p1,
        hv_lv_p2,
        hv_lv_p3,
        hv_lv_Vdf1,
        hv_lv_Vdf2,
        hv_lv_Vdf3,
        hvE_G_u1,
        hvE_G_u2,
        hvE_G_u3,
        hvE_G_i1,
        hvE_G_i2,
        hvE_G_i3,
        hvE_G_c1,
        hvE_G_c2,
        hvE_G_c3,
        hvE_G_tanD1,
        hvE_G_tanD2,
        hvE_G_tanD3,
        hvE_G_p1,
        hvE_G_p2,
        hvE_G_p3,
        hvE_G_Vdf1,
        hvE_G_Vdf2,
        hvE_G_Vdf3,
        hvE_Grnd_u1,
        hvE_Grnd_u2,
        hvE_Grnd_u3,
        hvE_Grnd_i1,
        hvE_Grnd_i2,
        hvE_Grnd_i3,
        hvE_Grnd_c1,
        hvE_Grnd_c2,
        hvE_Grnd_c3,
        hvE_Grnd_tanD1,
        hvE_Grnd_tanD2,
        hvE_Grnd_tanD3,
        hvE_Grnd_p1,
        hvE_Grnd_p2,
        hvE_Grnd_p3,
        hvE_Grnd_Vdf1,
        hvE_Grnd_Vdf2,
        hvE_Grnd_Vdf3,
        lvEu1,
        lvEu2,
        lvEu3,
        lvEi1,
        lvEi2,
        lvEi3,
        lvEc1,
        lvEc2,
        lvEc3,
        lvEtanD1,
        lvEtanD2,
        lvEtanD3,
        lvEp1,
        lvEp2,
        lvEp3,
        lvEVdf1,
        lvEVdf2,
        lvEVdf3,
        lvE_G_u1,
        lvE_G_u2,
        lvE_G_u3,
        lvE_G_i1,
        lvE_G_i2,
        lvE_G_i3,
        lvE_G_c1,
        lvE_G_c2,
        lvE_G_c3,
        lvE_G_tanD1,
        lvE_G_tanD2,
        lvE_G_tanD3,
        lvE_G_p1,
        lvE_G_p2,
        lvE_G_p3,
        lvE_G_Vdf1,
        lvE_G_Vdf2,
        lvE_G_Vdf3,
        lvE_Grnd_u1,
        lvE_Grnd_u2,
        lvE_Grnd_u3,
        lvE_Grnd_i1,
        lvE_Grnd_i2,
        lvE_Grnd_i3,
        lvE_Grnd_c1,
        lvE_Grnd_c2,
        lvE_Grnd_c3,
        lvE_Grnd_tanD1,
        lvE_Grnd_tanD2,
        lvE_Grnd_tanD3,
        lvE_Grnd_p1,
        lvE_Grnd_p2,
        lvE_Grnd_p3,
        lvE_Grnd_Vdf1,
        lvE_Grnd_Vdf2,
        lvE_Grnd_Vdf3
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PowttdLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.ru1 == this.ru1 &&
          other.ru2 == this.ru2 &&
          other.ru3 == this.ru3 &&
          other.ri1 == this.ri1 &&
          other.ri2 == this.ri2 &&
          other.ri3 == this.ri3 &&
          other.rc1 == this.rc1 &&
          other.rc2 == this.rc2 &&
          other.rc3 == this.rc3 &&
          other.rtanD1 == this.rtanD1 &&
          other.rtanD2 == this.rtanD2 &&
          other.rtanD3 == this.rtanD3 &&
          other.rp1 == this.rp1 &&
          other.rp2 == this.rp2 &&
          other.rp3 == this.rp3 &&
          other.rVdf1 == this.rVdf1 &&
          other.rVdf2 == this.rVdf2 &&
          other.rVdf3 == this.rVdf3 &&
          other.yu1 == this.yu1 &&
          other.yu2 == this.yu2 &&
          other.yu3 == this.yu3 &&
          other.yi1 == this.yi1 &&
          other.yi2 == this.yi2 &&
          other.yi3 == this.yi3 &&
          other.yc1 == this.yc1 &&
          other.yc2 == this.yc2 &&
          other.yc3 == this.yc3 &&
          other.ytanD1 == this.ytanD1 &&
          other.ytanD2 == this.ytanD2 &&
          other.ytanD3 == this.ytanD3 &&
          other.yp1 == this.yp1 &&
          other.yp2 == this.yp2 &&
          other.yp3 == this.yp3 &&
          other.yVdf1 == this.yVdf1 &&
          other.yVdf2 == this.yVdf2 &&
          other.yVdf3 == this.yVdf3 &&
          other.bu1 == this.bu1 &&
          other.bu2 == this.bu2 &&
          other.bu3 == this.bu3 &&
          other.bi1 == this.bi1 &&
          other.bi2 == this.bi2 &&
          other.bi3 == this.bi3 &&
          other.bc1 == this.bc1 &&
          other.bc2 == this.bc2 &&
          other.bc3 == this.bc3 &&
          other.btanD1 == this.btanD1 &&
          other.btanD2 == this.btanD2 &&
          other.btanD3 == this.btanD3 &&
          other.bp1 == this.bp1 &&
          other.bp2 == this.bp2 &&
          other.bp3 == this.bp3 &&
          other.bVdf1 == this.bVdf1 &&
          other.bVdf2 == this.bVdf2 &&
          other.bVdf3 == this.bVdf3 &&
          other.hv_lv_u1 == this.hv_lv_u1 &&
          other.hv_lv_u2 == this.hv_lv_u2 &&
          other.hv_lv_u3 == this.hv_lv_u3 &&
          other.hv_lv_i1 == this.hv_lv_i1 &&
          other.hv_lv_i2 == this.hv_lv_i2 &&
          other.hv_lv_i3 == this.hv_lv_i3 &&
          other.hv_lv_c1 == this.hv_lv_c1 &&
          other.hv_lv_c2 == this.hv_lv_c2 &&
          other.hv_lv_c3 == this.hv_lv_c3 &&
          other.hv_lv_tanD1 == this.hv_lv_tanD1 &&
          other.hv_lv_tanD2 == this.hv_lv_tanD2 &&
          other.hv_lv_tanD3 == this.hv_lv_tanD3 &&
          other.hv_lv_p1 == this.hv_lv_p1 &&
          other.hv_lv_p2 == this.hv_lv_p2 &&
          other.hv_lv_p3 == this.hv_lv_p3 &&
          other.hv_lv_Vdf1 == this.hv_lv_Vdf1 &&
          other.hv_lv_Vdf2 == this.hv_lv_Vdf2 &&
          other.hv_lv_Vdf3 == this.hv_lv_Vdf3 &&
          other.hvE_G_u1 == this.hvE_G_u1 &&
          other.hvE_G_u2 == this.hvE_G_u2 &&
          other.hvE_G_u3 == this.hvE_G_u3 &&
          other.hvE_G_i1 == this.hvE_G_i1 &&
          other.hvE_G_i2 == this.hvE_G_i2 &&
          other.hvE_G_i3 == this.hvE_G_i3 &&
          other.hvE_G_c1 == this.hvE_G_c1 &&
          other.hvE_G_c2 == this.hvE_G_c2 &&
          other.hvE_G_c3 == this.hvE_G_c3 &&
          other.hvE_G_tanD1 == this.hvE_G_tanD1 &&
          other.hvE_G_tanD2 == this.hvE_G_tanD2 &&
          other.hvE_G_tanD3 == this.hvE_G_tanD3 &&
          other.hvE_G_p1 == this.hvE_G_p1 &&
          other.hvE_G_p2 == this.hvE_G_p2 &&
          other.hvE_G_p3 == this.hvE_G_p3 &&
          other.hvE_G_Vdf1 == this.hvE_G_Vdf1 &&
          other.hvE_G_Vdf2 == this.hvE_G_Vdf2 &&
          other.hvE_G_Vdf3 == this.hvE_G_Vdf3 &&
          other.hvE_Grnd_u1 == this.hvE_Grnd_u1 &&
          other.hvE_Grnd_u2 == this.hvE_Grnd_u2 &&
          other.hvE_Grnd_u3 == this.hvE_Grnd_u3 &&
          other.hvE_Grnd_i1 == this.hvE_Grnd_i1 &&
          other.hvE_Grnd_i2 == this.hvE_Grnd_i2 &&
          other.hvE_Grnd_i3 == this.hvE_Grnd_i3 &&
          other.hvE_Grnd_c1 == this.hvE_Grnd_c1 &&
          other.hvE_Grnd_c2 == this.hvE_Grnd_c2 &&
          other.hvE_Grnd_c3 == this.hvE_Grnd_c3 &&
          other.hvE_Grnd_tanD1 == this.hvE_Grnd_tanD1 &&
          other.hvE_Grnd_tanD2 == this.hvE_Grnd_tanD2 &&
          other.hvE_Grnd_tanD3 == this.hvE_Grnd_tanD3 &&
          other.hvE_Grnd_p1 == this.hvE_Grnd_p1 &&
          other.hvE_Grnd_p2 == this.hvE_Grnd_p2 &&
          other.hvE_Grnd_p3 == this.hvE_Grnd_p3 &&
          other.hvE_Grnd_Vdf1 == this.hvE_Grnd_Vdf1 &&
          other.hvE_Grnd_Vdf2 == this.hvE_Grnd_Vdf2 &&
          other.hvE_Grnd_Vdf3 == this.hvE_Grnd_Vdf3 &&
          other.lvEu1 == this.lvEu1 &&
          other.lvEu2 == this.lvEu2 &&
          other.lvEu3 == this.lvEu3 &&
          other.lvEi1 == this.lvEi1 &&
          other.lvEi2 == this.lvEi2 &&
          other.lvEi3 == this.lvEi3 &&
          other.lvEc1 == this.lvEc1 &&
          other.lvEc2 == this.lvEc2 &&
          other.lvEc3 == this.lvEc3 &&
          other.lvEtanD1 == this.lvEtanD1 &&
          other.lvEtanD2 == this.lvEtanD2 &&
          other.lvEtanD3 == this.lvEtanD3 &&
          other.lvEp1 == this.lvEp1 &&
          other.lvEp2 == this.lvEp2 &&
          other.lvEp3 == this.lvEp3 &&
          other.lvEVdf1 == this.lvEVdf1 &&
          other.lvEVdf2 == this.lvEVdf2 &&
          other.lvEVdf3 == this.lvEVdf3 &&
          other.lvE_G_u1 == this.lvE_G_u1 &&
          other.lvE_G_u2 == this.lvE_G_u2 &&
          other.lvE_G_u3 == this.lvE_G_u3 &&
          other.lvE_G_i1 == this.lvE_G_i1 &&
          other.lvE_G_i2 == this.lvE_G_i2 &&
          other.lvE_G_i3 == this.lvE_G_i3 &&
          other.lvE_G_c1 == this.lvE_G_c1 &&
          other.lvE_G_c2 == this.lvE_G_c2 &&
          other.lvE_G_c3 == this.lvE_G_c3 &&
          other.lvE_G_tanD1 == this.lvE_G_tanD1 &&
          other.lvE_G_tanD2 == this.lvE_G_tanD2 &&
          other.lvE_G_tanD3 == this.lvE_G_tanD3 &&
          other.lvE_G_p1 == this.lvE_G_p1 &&
          other.lvE_G_p2 == this.lvE_G_p2 &&
          other.lvE_G_p3 == this.lvE_G_p3 &&
          other.lvE_G_Vdf1 == this.lvE_G_Vdf1 &&
          other.lvE_G_Vdf2 == this.lvE_G_Vdf2 &&
          other.lvE_G_Vdf3 == this.lvE_G_Vdf3 &&
          other.lvE_Grnd_u1 == this.lvE_Grnd_u1 &&
          other.lvE_Grnd_u2 == this.lvE_Grnd_u2 &&
          other.lvE_Grnd_u3 == this.lvE_Grnd_u3 &&
          other.lvE_Grnd_i1 == this.lvE_Grnd_i1 &&
          other.lvE_Grnd_i2 == this.lvE_Grnd_i2 &&
          other.lvE_Grnd_i3 == this.lvE_Grnd_i3 &&
          other.lvE_Grnd_c1 == this.lvE_Grnd_c1 &&
          other.lvE_Grnd_c2 == this.lvE_Grnd_c2 &&
          other.lvE_Grnd_c3 == this.lvE_Grnd_c3 &&
          other.lvE_Grnd_tanD1 == this.lvE_Grnd_tanD1 &&
          other.lvE_Grnd_tanD2 == this.lvE_Grnd_tanD2 &&
          other.lvE_Grnd_tanD3 == this.lvE_Grnd_tanD3 &&
          other.lvE_Grnd_p1 == this.lvE_Grnd_p1 &&
          other.lvE_Grnd_p2 == this.lvE_Grnd_p2 &&
          other.lvE_Grnd_p3 == this.lvE_Grnd_p3 &&
          other.lvE_Grnd_Vdf1 == this.lvE_Grnd_Vdf1 &&
          other.lvE_Grnd_Vdf2 == this.lvE_Grnd_Vdf2 &&
          other.lvE_Grnd_Vdf3 == this.lvE_Grnd_Vdf3);
}

class PowttdLocalDatasourceImplCompanion
    extends UpdateCompanion<PowttdLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> ru1;
  final Value<double> ru2;
  final Value<double> ru3;
  final Value<double> ri1;
  final Value<double> ri2;
  final Value<double> ri3;
  final Value<double> rc1;
  final Value<double> rc2;
  final Value<double> rc3;
  final Value<double> rtanD1;
  final Value<double> rtanD2;
  final Value<double> rtanD3;
  final Value<double> rp1;
  final Value<double> rp2;
  final Value<double> rp3;
  final Value<double> rVdf1;
  final Value<double> rVdf2;
  final Value<double> rVdf3;
  final Value<double> yu1;
  final Value<double> yu2;
  final Value<double> yu3;
  final Value<double> yi1;
  final Value<double> yi2;
  final Value<double> yi3;
  final Value<double> yc1;
  final Value<double> yc2;
  final Value<double> yc3;
  final Value<double> ytanD1;
  final Value<double> ytanD2;
  final Value<double> ytanD3;
  final Value<double> yp1;
  final Value<double> yp2;
  final Value<double> yp3;
  final Value<double> yVdf1;
  final Value<double> yVdf2;
  final Value<double> yVdf3;
  final Value<double> bu1;
  final Value<double> bu2;
  final Value<double> bu3;
  final Value<double> bi1;
  final Value<double> bi2;
  final Value<double> bi3;
  final Value<double> bc1;
  final Value<double> bc2;
  final Value<double> bc3;
  final Value<double> btanD1;
  final Value<double> btanD2;
  final Value<double> btanD3;
  final Value<double> bp1;
  final Value<double> bp2;
  final Value<double> bp3;
  final Value<double> bVdf1;
  final Value<double> bVdf2;
  final Value<double> bVdf3;
  final Value<double> hv_lv_u1;
  final Value<double> hv_lv_u2;
  final Value<double> hv_lv_u3;
  final Value<double> hv_lv_i1;
  final Value<double> hv_lv_i2;
  final Value<double> hv_lv_i3;
  final Value<double> hv_lv_c1;
  final Value<double> hv_lv_c2;
  final Value<double> hv_lv_c3;
  final Value<double> hv_lv_tanD1;
  final Value<double> hv_lv_tanD2;
  final Value<double> hv_lv_tanD3;
  final Value<double> hv_lv_p1;
  final Value<double> hv_lv_p2;
  final Value<double> hv_lv_p3;
  final Value<double> hv_lv_Vdf1;
  final Value<double> hv_lv_Vdf2;
  final Value<double> hv_lv_Vdf3;
  final Value<double> hvE_G_u1;
  final Value<double> hvE_G_u2;
  final Value<double> hvE_G_u3;
  final Value<double> hvE_G_i1;
  final Value<double> hvE_G_i2;
  final Value<double> hvE_G_i3;
  final Value<double> hvE_G_c1;
  final Value<double> hvE_G_c2;
  final Value<double> hvE_G_c3;
  final Value<double> hvE_G_tanD1;
  final Value<double> hvE_G_tanD2;
  final Value<double> hvE_G_tanD3;
  final Value<double> hvE_G_p1;
  final Value<double> hvE_G_p2;
  final Value<double> hvE_G_p3;
  final Value<double> hvE_G_Vdf1;
  final Value<double> hvE_G_Vdf2;
  final Value<double> hvE_G_Vdf3;
  final Value<double> hvE_Grnd_u1;
  final Value<double> hvE_Grnd_u2;
  final Value<double> hvE_Grnd_u3;
  final Value<double> hvE_Grnd_i1;
  final Value<double> hvE_Grnd_i2;
  final Value<double> hvE_Grnd_i3;
  final Value<double> hvE_Grnd_c1;
  final Value<double> hvE_Grnd_c2;
  final Value<double> hvE_Grnd_c3;
  final Value<double> hvE_Grnd_tanD1;
  final Value<double> hvE_Grnd_tanD2;
  final Value<double> hvE_Grnd_tanD3;
  final Value<double> hvE_Grnd_p1;
  final Value<double> hvE_Grnd_p2;
  final Value<double> hvE_Grnd_p3;
  final Value<double> hvE_Grnd_Vdf1;
  final Value<double> hvE_Grnd_Vdf2;
  final Value<double> hvE_Grnd_Vdf3;
  final Value<double> lvEu1;
  final Value<double> lvEu2;
  final Value<double> lvEu3;
  final Value<double> lvEi1;
  final Value<double> lvEi2;
  final Value<double> lvEi3;
  final Value<double> lvEc1;
  final Value<double> lvEc2;
  final Value<double> lvEc3;
  final Value<double> lvEtanD1;
  final Value<double> lvEtanD2;
  final Value<double> lvEtanD3;
  final Value<double> lvEp1;
  final Value<double> lvEp2;
  final Value<double> lvEp3;
  final Value<double> lvEVdf1;
  final Value<double> lvEVdf2;
  final Value<double> lvEVdf3;
  final Value<double> lvE_G_u1;
  final Value<double> lvE_G_u2;
  final Value<double> lvE_G_u3;
  final Value<double> lvE_G_i1;
  final Value<double> lvE_G_i2;
  final Value<double> lvE_G_i3;
  final Value<double> lvE_G_c1;
  final Value<double> lvE_G_c2;
  final Value<double> lvE_G_c3;
  final Value<double> lvE_G_tanD1;
  final Value<double> lvE_G_tanD2;
  final Value<double> lvE_G_tanD3;
  final Value<double> lvE_G_p1;
  final Value<double> lvE_G_p2;
  final Value<double> lvE_G_p3;
  final Value<double> lvE_G_Vdf1;
  final Value<double> lvE_G_Vdf2;
  final Value<double> lvE_G_Vdf3;
  final Value<double> lvE_Grnd_u1;
  final Value<double> lvE_Grnd_u2;
  final Value<double> lvE_Grnd_u3;
  final Value<double> lvE_Grnd_i1;
  final Value<double> lvE_Grnd_i2;
  final Value<double> lvE_Grnd_i3;
  final Value<double> lvE_Grnd_c1;
  final Value<double> lvE_Grnd_c2;
  final Value<double> lvE_Grnd_c3;
  final Value<double> lvE_Grnd_tanD1;
  final Value<double> lvE_Grnd_tanD2;
  final Value<double> lvE_Grnd_tanD3;
  final Value<double> lvE_Grnd_p1;
  final Value<double> lvE_Grnd_p2;
  final Value<double> lvE_Grnd_p3;
  final Value<double> lvE_Grnd_Vdf1;
  final Value<double> lvE_Grnd_Vdf2;
  final Value<double> lvE_Grnd_Vdf3;
  const PowttdLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.ru1 = const Value.absent(),
    this.ru2 = const Value.absent(),
    this.ru3 = const Value.absent(),
    this.ri1 = const Value.absent(),
    this.ri2 = const Value.absent(),
    this.ri3 = const Value.absent(),
    this.rc1 = const Value.absent(),
    this.rc2 = const Value.absent(),
    this.rc3 = const Value.absent(),
    this.rtanD1 = const Value.absent(),
    this.rtanD2 = const Value.absent(),
    this.rtanD3 = const Value.absent(),
    this.rp1 = const Value.absent(),
    this.rp2 = const Value.absent(),
    this.rp3 = const Value.absent(),
    this.rVdf1 = const Value.absent(),
    this.rVdf2 = const Value.absent(),
    this.rVdf3 = const Value.absent(),
    this.yu1 = const Value.absent(),
    this.yu2 = const Value.absent(),
    this.yu3 = const Value.absent(),
    this.yi1 = const Value.absent(),
    this.yi2 = const Value.absent(),
    this.yi3 = const Value.absent(),
    this.yc1 = const Value.absent(),
    this.yc2 = const Value.absent(),
    this.yc3 = const Value.absent(),
    this.ytanD1 = const Value.absent(),
    this.ytanD2 = const Value.absent(),
    this.ytanD3 = const Value.absent(),
    this.yp1 = const Value.absent(),
    this.yp2 = const Value.absent(),
    this.yp3 = const Value.absent(),
    this.yVdf1 = const Value.absent(),
    this.yVdf2 = const Value.absent(),
    this.yVdf3 = const Value.absent(),
    this.bu1 = const Value.absent(),
    this.bu2 = const Value.absent(),
    this.bu3 = const Value.absent(),
    this.bi1 = const Value.absent(),
    this.bi2 = const Value.absent(),
    this.bi3 = const Value.absent(),
    this.bc1 = const Value.absent(),
    this.bc2 = const Value.absent(),
    this.bc3 = const Value.absent(),
    this.btanD1 = const Value.absent(),
    this.btanD2 = const Value.absent(),
    this.btanD3 = const Value.absent(),
    this.bp1 = const Value.absent(),
    this.bp2 = const Value.absent(),
    this.bp3 = const Value.absent(),
    this.bVdf1 = const Value.absent(),
    this.bVdf2 = const Value.absent(),
    this.bVdf3 = const Value.absent(),
    this.hv_lv_u1 = const Value.absent(),
    this.hv_lv_u2 = const Value.absent(),
    this.hv_lv_u3 = const Value.absent(),
    this.hv_lv_i1 = const Value.absent(),
    this.hv_lv_i2 = const Value.absent(),
    this.hv_lv_i3 = const Value.absent(),
    this.hv_lv_c1 = const Value.absent(),
    this.hv_lv_c2 = const Value.absent(),
    this.hv_lv_c3 = const Value.absent(),
    this.hv_lv_tanD1 = const Value.absent(),
    this.hv_lv_tanD2 = const Value.absent(),
    this.hv_lv_tanD3 = const Value.absent(),
    this.hv_lv_p1 = const Value.absent(),
    this.hv_lv_p2 = const Value.absent(),
    this.hv_lv_p3 = const Value.absent(),
    this.hv_lv_Vdf1 = const Value.absent(),
    this.hv_lv_Vdf2 = const Value.absent(),
    this.hv_lv_Vdf3 = const Value.absent(),
    this.hvE_G_u1 = const Value.absent(),
    this.hvE_G_u2 = const Value.absent(),
    this.hvE_G_u3 = const Value.absent(),
    this.hvE_G_i1 = const Value.absent(),
    this.hvE_G_i2 = const Value.absent(),
    this.hvE_G_i3 = const Value.absent(),
    this.hvE_G_c1 = const Value.absent(),
    this.hvE_G_c2 = const Value.absent(),
    this.hvE_G_c3 = const Value.absent(),
    this.hvE_G_tanD1 = const Value.absent(),
    this.hvE_G_tanD2 = const Value.absent(),
    this.hvE_G_tanD3 = const Value.absent(),
    this.hvE_G_p1 = const Value.absent(),
    this.hvE_G_p2 = const Value.absent(),
    this.hvE_G_p3 = const Value.absent(),
    this.hvE_G_Vdf1 = const Value.absent(),
    this.hvE_G_Vdf2 = const Value.absent(),
    this.hvE_G_Vdf3 = const Value.absent(),
    this.hvE_Grnd_u1 = const Value.absent(),
    this.hvE_Grnd_u2 = const Value.absent(),
    this.hvE_Grnd_u3 = const Value.absent(),
    this.hvE_Grnd_i1 = const Value.absent(),
    this.hvE_Grnd_i2 = const Value.absent(),
    this.hvE_Grnd_i3 = const Value.absent(),
    this.hvE_Grnd_c1 = const Value.absent(),
    this.hvE_Grnd_c2 = const Value.absent(),
    this.hvE_Grnd_c3 = const Value.absent(),
    this.hvE_Grnd_tanD1 = const Value.absent(),
    this.hvE_Grnd_tanD2 = const Value.absent(),
    this.hvE_Grnd_tanD3 = const Value.absent(),
    this.hvE_Grnd_p1 = const Value.absent(),
    this.hvE_Grnd_p2 = const Value.absent(),
    this.hvE_Grnd_p3 = const Value.absent(),
    this.hvE_Grnd_Vdf1 = const Value.absent(),
    this.hvE_Grnd_Vdf2 = const Value.absent(),
    this.hvE_Grnd_Vdf3 = const Value.absent(),
    this.lvEu1 = const Value.absent(),
    this.lvEu2 = const Value.absent(),
    this.lvEu3 = const Value.absent(),
    this.lvEi1 = const Value.absent(),
    this.lvEi2 = const Value.absent(),
    this.lvEi3 = const Value.absent(),
    this.lvEc1 = const Value.absent(),
    this.lvEc2 = const Value.absent(),
    this.lvEc3 = const Value.absent(),
    this.lvEtanD1 = const Value.absent(),
    this.lvEtanD2 = const Value.absent(),
    this.lvEtanD3 = const Value.absent(),
    this.lvEp1 = const Value.absent(),
    this.lvEp2 = const Value.absent(),
    this.lvEp3 = const Value.absent(),
    this.lvEVdf1 = const Value.absent(),
    this.lvEVdf2 = const Value.absent(),
    this.lvEVdf3 = const Value.absent(),
    this.lvE_G_u1 = const Value.absent(),
    this.lvE_G_u2 = const Value.absent(),
    this.lvE_G_u3 = const Value.absent(),
    this.lvE_G_i1 = const Value.absent(),
    this.lvE_G_i2 = const Value.absent(),
    this.lvE_G_i3 = const Value.absent(),
    this.lvE_G_c1 = const Value.absent(),
    this.lvE_G_c2 = const Value.absent(),
    this.lvE_G_c3 = const Value.absent(),
    this.lvE_G_tanD1 = const Value.absent(),
    this.lvE_G_tanD2 = const Value.absent(),
    this.lvE_G_tanD3 = const Value.absent(),
    this.lvE_G_p1 = const Value.absent(),
    this.lvE_G_p2 = const Value.absent(),
    this.lvE_G_p3 = const Value.absent(),
    this.lvE_G_Vdf1 = const Value.absent(),
    this.lvE_G_Vdf2 = const Value.absent(),
    this.lvE_G_Vdf3 = const Value.absent(),
    this.lvE_Grnd_u1 = const Value.absent(),
    this.lvE_Grnd_u2 = const Value.absent(),
    this.lvE_Grnd_u3 = const Value.absent(),
    this.lvE_Grnd_i1 = const Value.absent(),
    this.lvE_Grnd_i2 = const Value.absent(),
    this.lvE_Grnd_i3 = const Value.absent(),
    this.lvE_Grnd_c1 = const Value.absent(),
    this.lvE_Grnd_c2 = const Value.absent(),
    this.lvE_Grnd_c3 = const Value.absent(),
    this.lvE_Grnd_tanD1 = const Value.absent(),
    this.lvE_Grnd_tanD2 = const Value.absent(),
    this.lvE_Grnd_tanD3 = const Value.absent(),
    this.lvE_Grnd_p1 = const Value.absent(),
    this.lvE_Grnd_p2 = const Value.absent(),
    this.lvE_Grnd_p3 = const Value.absent(),
    this.lvE_Grnd_Vdf1 = const Value.absent(),
    this.lvE_Grnd_Vdf2 = const Value.absent(),
    this.lvE_Grnd_Vdf3 = const Value.absent(),
  });
  PowttdLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double ru1,
    @required double ru2,
    @required double ru3,
    @required double ri1,
    @required double ri2,
    @required double ri3,
    @required double rc1,
    @required double rc2,
    @required double rc3,
    @required double rtanD1,
    @required double rtanD2,
    @required double rtanD3,
    @required double rp1,
    @required double rp2,
    @required double rp3,
    @required double rVdf1,
    @required double rVdf2,
    @required double rVdf3,
    @required double yu1,
    @required double yu2,
    @required double yu3,
    @required double yi1,
    @required double yi2,
    @required double yi3,
    @required double yc1,
    @required double yc2,
    @required double yc3,
    @required double ytanD1,
    @required double ytanD2,
    @required double ytanD3,
    @required double yp1,
    @required double yp2,
    @required double yp3,
    @required double yVdf1,
    @required double yVdf2,
    @required double yVdf3,
    @required double bu1,
    @required double bu2,
    @required double bu3,
    @required double bi1,
    @required double bi2,
    @required double bi3,
    @required double bc1,
    @required double bc2,
    @required double bc3,
    @required double btanD1,
    @required double btanD2,
    @required double btanD3,
    @required double bp1,
    @required double bp2,
    @required double bp3,
    @required double bVdf1,
    @required double bVdf2,
    @required double bVdf3,
    @required double hv_lv_u1,
    @required double hv_lv_u2,
    @required double hv_lv_u3,
    @required double hv_lv_i1,
    @required double hv_lv_i2,
    @required double hv_lv_i3,
    @required double hv_lv_c1,
    @required double hv_lv_c2,
    @required double hv_lv_c3,
    @required double hv_lv_tanD1,
    @required double hv_lv_tanD2,
    @required double hv_lv_tanD3,
    @required double hv_lv_p1,
    @required double hv_lv_p2,
    @required double hv_lv_p3,
    @required double hv_lv_Vdf1,
    @required double hv_lv_Vdf2,
    @required double hv_lv_Vdf3,
    @required double hvE_G_u1,
    @required double hvE_G_u2,
    @required double hvE_G_u3,
    @required double hvE_G_i1,
    @required double hvE_G_i2,
    @required double hvE_G_i3,
    @required double hvE_G_c1,
    @required double hvE_G_c2,
    @required double hvE_G_c3,
    @required double hvE_G_tanD1,
    @required double hvE_G_tanD2,
    @required double hvE_G_tanD3,
    @required double hvE_G_p1,
    @required double hvE_G_p2,
    @required double hvE_G_p3,
    @required double hvE_G_Vdf1,
    @required double hvE_G_Vdf2,
    @required double hvE_G_Vdf3,
    @required double hvE_Grnd_u1,
    @required double hvE_Grnd_u2,
    @required double hvE_Grnd_u3,
    @required double hvE_Grnd_i1,
    @required double hvE_Grnd_i2,
    @required double hvE_Grnd_i3,
    @required double hvE_Grnd_c1,
    @required double hvE_Grnd_c2,
    @required double hvE_Grnd_c3,
    @required double hvE_Grnd_tanD1,
    @required double hvE_Grnd_tanD2,
    @required double hvE_Grnd_tanD3,
    @required double hvE_Grnd_p1,
    @required double hvE_Grnd_p2,
    @required double hvE_Grnd_p3,
    @required double hvE_Grnd_Vdf1,
    @required double hvE_Grnd_Vdf2,
    @required double hvE_Grnd_Vdf3,
    @required double lvEu1,
    @required double lvEu2,
    @required double lvEu3,
    @required double lvEi1,
    @required double lvEi2,
    @required double lvEi3,
    @required double lvEc1,
    @required double lvEc2,
    @required double lvEc3,
    @required double lvEtanD1,
    @required double lvEtanD2,
    @required double lvEtanD3,
    @required double lvEp1,
    @required double lvEp2,
    @required double lvEp3,
    @required double lvEVdf1,
    @required double lvEVdf2,
    @required double lvEVdf3,
    @required double lvE_G_u1,
    @required double lvE_G_u2,
    @required double lvE_G_u3,
    @required double lvE_G_i1,
    @required double lvE_G_i2,
    @required double lvE_G_i3,
    @required double lvE_G_c1,
    @required double lvE_G_c2,
    @required double lvE_G_c3,
    @required double lvE_G_tanD1,
    @required double lvE_G_tanD2,
    @required double lvE_G_tanD3,
    @required double lvE_G_p1,
    @required double lvE_G_p2,
    @required double lvE_G_p3,
    @required double lvE_G_Vdf1,
    @required double lvE_G_Vdf2,
    @required double lvE_G_Vdf3,
    @required double lvE_Grnd_u1,
    @required double lvE_Grnd_u2,
    @required double lvE_Grnd_u3,
    @required double lvE_Grnd_i1,
    @required double lvE_Grnd_i2,
    @required double lvE_Grnd_i3,
    @required double lvE_Grnd_c1,
    @required double lvE_Grnd_c2,
    @required double lvE_Grnd_c3,
    @required double lvE_Grnd_tanD1,
    @required double lvE_Grnd_tanD2,
    @required double lvE_Grnd_tanD3,
    @required double lvE_Grnd_p1,
    @required double lvE_Grnd_p2,
    @required double lvE_Grnd_p3,
    @required double lvE_Grnd_Vdf1,
    @required double lvE_Grnd_Vdf2,
    @required double lvE_Grnd_Vdf3,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        ru1 = Value(ru1),
        ru2 = Value(ru2),
        ru3 = Value(ru3),
        ri1 = Value(ri1),
        ri2 = Value(ri2),
        ri3 = Value(ri3),
        rc1 = Value(rc1),
        rc2 = Value(rc2),
        rc3 = Value(rc3),
        rtanD1 = Value(rtanD1),
        rtanD2 = Value(rtanD2),
        rtanD3 = Value(rtanD3),
        rp1 = Value(rp1),
        rp2 = Value(rp2),
        rp3 = Value(rp3),
        rVdf1 = Value(rVdf1),
        rVdf2 = Value(rVdf2),
        rVdf3 = Value(rVdf3),
        yu1 = Value(yu1),
        yu2 = Value(yu2),
        yu3 = Value(yu3),
        yi1 = Value(yi1),
        yi2 = Value(yi2),
        yi3 = Value(yi3),
        yc1 = Value(yc1),
        yc2 = Value(yc2),
        yc3 = Value(yc3),
        ytanD1 = Value(ytanD1),
        ytanD2 = Value(ytanD2),
        ytanD3 = Value(ytanD3),
        yp1 = Value(yp1),
        yp2 = Value(yp2),
        yp3 = Value(yp3),
        yVdf1 = Value(yVdf1),
        yVdf2 = Value(yVdf2),
        yVdf3 = Value(yVdf3),
        bu1 = Value(bu1),
        bu2 = Value(bu2),
        bu3 = Value(bu3),
        bi1 = Value(bi1),
        bi2 = Value(bi2),
        bi3 = Value(bi3),
        bc1 = Value(bc1),
        bc2 = Value(bc2),
        bc3 = Value(bc3),
        btanD1 = Value(btanD1),
        btanD2 = Value(btanD2),
        btanD3 = Value(btanD3),
        bp1 = Value(bp1),
        bp2 = Value(bp2),
        bp3 = Value(bp3),
        bVdf1 = Value(bVdf1),
        bVdf2 = Value(bVdf2),
        bVdf3 = Value(bVdf3),
        hv_lv_u1 = Value(hv_lv_u1),
        hv_lv_u2 = Value(hv_lv_u2),
        hv_lv_u3 = Value(hv_lv_u3),
        hv_lv_i1 = Value(hv_lv_i1),
        hv_lv_i2 = Value(hv_lv_i2),
        hv_lv_i3 = Value(hv_lv_i3),
        hv_lv_c1 = Value(hv_lv_c1),
        hv_lv_c2 = Value(hv_lv_c2),
        hv_lv_c3 = Value(hv_lv_c3),
        hv_lv_tanD1 = Value(hv_lv_tanD1),
        hv_lv_tanD2 = Value(hv_lv_tanD2),
        hv_lv_tanD3 = Value(hv_lv_tanD3),
        hv_lv_p1 = Value(hv_lv_p1),
        hv_lv_p2 = Value(hv_lv_p2),
        hv_lv_p3 = Value(hv_lv_p3),
        hv_lv_Vdf1 = Value(hv_lv_Vdf1),
        hv_lv_Vdf2 = Value(hv_lv_Vdf2),
        hv_lv_Vdf3 = Value(hv_lv_Vdf3),
        hvE_G_u1 = Value(hvE_G_u1),
        hvE_G_u2 = Value(hvE_G_u2),
        hvE_G_u3 = Value(hvE_G_u3),
        hvE_G_i1 = Value(hvE_G_i1),
        hvE_G_i2 = Value(hvE_G_i2),
        hvE_G_i3 = Value(hvE_G_i3),
        hvE_G_c1 = Value(hvE_G_c1),
        hvE_G_c2 = Value(hvE_G_c2),
        hvE_G_c3 = Value(hvE_G_c3),
        hvE_G_tanD1 = Value(hvE_G_tanD1),
        hvE_G_tanD2 = Value(hvE_G_tanD2),
        hvE_G_tanD3 = Value(hvE_G_tanD3),
        hvE_G_p1 = Value(hvE_G_p1),
        hvE_G_p2 = Value(hvE_G_p2),
        hvE_G_p3 = Value(hvE_G_p3),
        hvE_G_Vdf1 = Value(hvE_G_Vdf1),
        hvE_G_Vdf2 = Value(hvE_G_Vdf2),
        hvE_G_Vdf3 = Value(hvE_G_Vdf3),
        hvE_Grnd_u1 = Value(hvE_Grnd_u1),
        hvE_Grnd_u2 = Value(hvE_Grnd_u2),
        hvE_Grnd_u3 = Value(hvE_Grnd_u3),
        hvE_Grnd_i1 = Value(hvE_Grnd_i1),
        hvE_Grnd_i2 = Value(hvE_Grnd_i2),
        hvE_Grnd_i3 = Value(hvE_Grnd_i3),
        hvE_Grnd_c1 = Value(hvE_Grnd_c1),
        hvE_Grnd_c2 = Value(hvE_Grnd_c2),
        hvE_Grnd_c3 = Value(hvE_Grnd_c3),
        hvE_Grnd_tanD1 = Value(hvE_Grnd_tanD1),
        hvE_Grnd_tanD2 = Value(hvE_Grnd_tanD2),
        hvE_Grnd_tanD3 = Value(hvE_Grnd_tanD3),
        hvE_Grnd_p1 = Value(hvE_Grnd_p1),
        hvE_Grnd_p2 = Value(hvE_Grnd_p2),
        hvE_Grnd_p3 = Value(hvE_Grnd_p3),
        hvE_Grnd_Vdf1 = Value(hvE_Grnd_Vdf1),
        hvE_Grnd_Vdf2 = Value(hvE_Grnd_Vdf2),
        hvE_Grnd_Vdf3 = Value(hvE_Grnd_Vdf3),
        lvEu1 = Value(lvEu1),
        lvEu2 = Value(lvEu2),
        lvEu3 = Value(lvEu3),
        lvEi1 = Value(lvEi1),
        lvEi2 = Value(lvEi2),
        lvEi3 = Value(lvEi3),
        lvEc1 = Value(lvEc1),
        lvEc2 = Value(lvEc2),
        lvEc3 = Value(lvEc3),
        lvEtanD1 = Value(lvEtanD1),
        lvEtanD2 = Value(lvEtanD2),
        lvEtanD3 = Value(lvEtanD3),
        lvEp1 = Value(lvEp1),
        lvEp2 = Value(lvEp2),
        lvEp3 = Value(lvEp3),
        lvEVdf1 = Value(lvEVdf1),
        lvEVdf2 = Value(lvEVdf2),
        lvEVdf3 = Value(lvEVdf3),
        lvE_G_u1 = Value(lvE_G_u1),
        lvE_G_u2 = Value(lvE_G_u2),
        lvE_G_u3 = Value(lvE_G_u3),
        lvE_G_i1 = Value(lvE_G_i1),
        lvE_G_i2 = Value(lvE_G_i2),
        lvE_G_i3 = Value(lvE_G_i3),
        lvE_G_c1 = Value(lvE_G_c1),
        lvE_G_c2 = Value(lvE_G_c2),
        lvE_G_c3 = Value(lvE_G_c3),
        lvE_G_tanD1 = Value(lvE_G_tanD1),
        lvE_G_tanD2 = Value(lvE_G_tanD2),
        lvE_G_tanD3 = Value(lvE_G_tanD3),
        lvE_G_p1 = Value(lvE_G_p1),
        lvE_G_p2 = Value(lvE_G_p2),
        lvE_G_p3 = Value(lvE_G_p3),
        lvE_G_Vdf1 = Value(lvE_G_Vdf1),
        lvE_G_Vdf2 = Value(lvE_G_Vdf2),
        lvE_G_Vdf3 = Value(lvE_G_Vdf3),
        lvE_Grnd_u1 = Value(lvE_Grnd_u1),
        lvE_Grnd_u2 = Value(lvE_Grnd_u2),
        lvE_Grnd_u3 = Value(lvE_Grnd_u3),
        lvE_Grnd_i1 = Value(lvE_Grnd_i1),
        lvE_Grnd_i2 = Value(lvE_Grnd_i2),
        lvE_Grnd_i3 = Value(lvE_Grnd_i3),
        lvE_Grnd_c1 = Value(lvE_Grnd_c1),
        lvE_Grnd_c2 = Value(lvE_Grnd_c2),
        lvE_Grnd_c3 = Value(lvE_Grnd_c3),
        lvE_Grnd_tanD1 = Value(lvE_Grnd_tanD1),
        lvE_Grnd_tanD2 = Value(lvE_Grnd_tanD2),
        lvE_Grnd_tanD3 = Value(lvE_Grnd_tanD3),
        lvE_Grnd_p1 = Value(lvE_Grnd_p1),
        lvE_Grnd_p2 = Value(lvE_Grnd_p2),
        lvE_Grnd_p3 = Value(lvE_Grnd_p3),
        lvE_Grnd_Vdf1 = Value(lvE_Grnd_Vdf1),
        lvE_Grnd_Vdf2 = Value(lvE_Grnd_Vdf2),
        lvE_Grnd_Vdf3 = Value(lvE_Grnd_Vdf3);
  static Insertable<PowttdLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> ru1,
    Expression<double> ru2,
    Expression<double> ru3,
    Expression<double> ri1,
    Expression<double> ri2,
    Expression<double> ri3,
    Expression<double> rc1,
    Expression<double> rc2,
    Expression<double> rc3,
    Expression<double> rtanD1,
    Expression<double> rtanD2,
    Expression<double> rtanD3,
    Expression<double> rp1,
    Expression<double> rp2,
    Expression<double> rp3,
    Expression<double> rVdf1,
    Expression<double> rVdf2,
    Expression<double> rVdf3,
    Expression<double> yu1,
    Expression<double> yu2,
    Expression<double> yu3,
    Expression<double> yi1,
    Expression<double> yi2,
    Expression<double> yi3,
    Expression<double> yc1,
    Expression<double> yc2,
    Expression<double> yc3,
    Expression<double> ytanD1,
    Expression<double> ytanD2,
    Expression<double> ytanD3,
    Expression<double> yp1,
    Expression<double> yp2,
    Expression<double> yp3,
    Expression<double> yVdf1,
    Expression<double> yVdf2,
    Expression<double> yVdf3,
    Expression<double> bu1,
    Expression<double> bu2,
    Expression<double> bu3,
    Expression<double> bi1,
    Expression<double> bi2,
    Expression<double> bi3,
    Expression<double> bc1,
    Expression<double> bc2,
    Expression<double> bc3,
    Expression<double> btanD1,
    Expression<double> btanD2,
    Expression<double> btanD3,
    Expression<double> bp1,
    Expression<double> bp2,
    Expression<double> bp3,
    Expression<double> bVdf1,
    Expression<double> bVdf2,
    Expression<double> bVdf3,
    Expression<double> hv_lv_u1,
    Expression<double> hv_lv_u2,
    Expression<double> hv_lv_u3,
    Expression<double> hv_lv_i1,
    Expression<double> hv_lv_i2,
    Expression<double> hv_lv_i3,
    Expression<double> hv_lv_c1,
    Expression<double> hv_lv_c2,
    Expression<double> hv_lv_c3,
    Expression<double> hv_lv_tanD1,
    Expression<double> hv_lv_tanD2,
    Expression<double> hv_lv_tanD3,
    Expression<double> hv_lv_p1,
    Expression<double> hv_lv_p2,
    Expression<double> hv_lv_p3,
    Expression<double> hv_lv_Vdf1,
    Expression<double> hv_lv_Vdf2,
    Expression<double> hv_lv_Vdf3,
    Expression<double> hvE_G_u1,
    Expression<double> hvE_G_u2,
    Expression<double> hvE_G_u3,
    Expression<double> hvE_G_i1,
    Expression<double> hvE_G_i2,
    Expression<double> hvE_G_i3,
    Expression<double> hvE_G_c1,
    Expression<double> hvE_G_c2,
    Expression<double> hvE_G_c3,
    Expression<double> hvE_G_tanD1,
    Expression<double> hvE_G_tanD2,
    Expression<double> hvE_G_tanD3,
    Expression<double> hvE_G_p1,
    Expression<double> hvE_G_p2,
    Expression<double> hvE_G_p3,
    Expression<double> hvE_G_Vdf1,
    Expression<double> hvE_G_Vdf2,
    Expression<double> hvE_G_Vdf3,
    Expression<double> hvE_Grnd_u1,
    Expression<double> hvE_Grnd_u2,
    Expression<double> hvE_Grnd_u3,
    Expression<double> hvE_Grnd_i1,
    Expression<double> hvE_Grnd_i2,
    Expression<double> hvE_Grnd_i3,
    Expression<double> hvE_Grnd_c1,
    Expression<double> hvE_Grnd_c2,
    Expression<double> hvE_Grnd_c3,
    Expression<double> hvE_Grnd_tanD1,
    Expression<double> hvE_Grnd_tanD2,
    Expression<double> hvE_Grnd_tanD3,
    Expression<double> hvE_Grnd_p1,
    Expression<double> hvE_Grnd_p2,
    Expression<double> hvE_Grnd_p3,
    Expression<double> hvE_Grnd_Vdf1,
    Expression<double> hvE_Grnd_Vdf2,
    Expression<double> hvE_Grnd_Vdf3,
    Expression<double> lvEu1,
    Expression<double> lvEu2,
    Expression<double> lvEu3,
    Expression<double> lvEi1,
    Expression<double> lvEi2,
    Expression<double> lvEi3,
    Expression<double> lvEc1,
    Expression<double> lvEc2,
    Expression<double> lvEc3,
    Expression<double> lvEtanD1,
    Expression<double> lvEtanD2,
    Expression<double> lvEtanD3,
    Expression<double> lvEp1,
    Expression<double> lvEp2,
    Expression<double> lvEp3,
    Expression<double> lvEVdf1,
    Expression<double> lvEVdf2,
    Expression<double> lvEVdf3,
    Expression<double> lvE_G_u1,
    Expression<double> lvE_G_u2,
    Expression<double> lvE_G_u3,
    Expression<double> lvE_G_i1,
    Expression<double> lvE_G_i2,
    Expression<double> lvE_G_i3,
    Expression<double> lvE_G_c1,
    Expression<double> lvE_G_c2,
    Expression<double> lvE_G_c3,
    Expression<double> lvE_G_tanD1,
    Expression<double> lvE_G_tanD2,
    Expression<double> lvE_G_tanD3,
    Expression<double> lvE_G_p1,
    Expression<double> lvE_G_p2,
    Expression<double> lvE_G_p3,
    Expression<double> lvE_G_Vdf1,
    Expression<double> lvE_G_Vdf2,
    Expression<double> lvE_G_Vdf3,
    Expression<double> lvE_Grnd_u1,
    Expression<double> lvE_Grnd_u2,
    Expression<double> lvE_Grnd_u3,
    Expression<double> lvE_Grnd_i1,
    Expression<double> lvE_Grnd_i2,
    Expression<double> lvE_Grnd_i3,
    Expression<double> lvE_Grnd_c1,
    Expression<double> lvE_Grnd_c2,
    Expression<double> lvE_Grnd_c3,
    Expression<double> lvE_Grnd_tanD1,
    Expression<double> lvE_Grnd_tanD2,
    Expression<double> lvE_Grnd_tanD3,
    Expression<double> lvE_Grnd_p1,
    Expression<double> lvE_Grnd_p2,
    Expression<double> lvE_Grnd_p3,
    Expression<double> lvE_Grnd_Vdf1,
    Expression<double> lvE_Grnd_Vdf2,
    Expression<double> lvE_Grnd_Vdf3,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (ru1 != null) 'ru1': ru1,
      if (ru2 != null) 'ru2': ru2,
      if (ru3 != null) 'ru3': ru3,
      if (ri1 != null) 'ri1': ri1,
      if (ri2 != null) 'ri2': ri2,
      if (ri3 != null) 'ri3': ri3,
      if (rc1 != null) 'rc1': rc1,
      if (rc2 != null) 'rc2': rc2,
      if (rc3 != null) 'rc3': rc3,
      if (rtanD1 != null) 'rtan_d1': rtanD1,
      if (rtanD2 != null) 'rtan_d2': rtanD2,
      if (rtanD3 != null) 'rtan_d3': rtanD3,
      if (rp1 != null) 'rp1': rp1,
      if (rp2 != null) 'rp2': rp2,
      if (rp3 != null) 'rp3': rp3,
      if (rVdf1 != null) 'r_vdf1': rVdf1,
      if (rVdf2 != null) 'r_vdf2': rVdf2,
      if (rVdf3 != null) 'r_vdf3': rVdf3,
      if (yu1 != null) 'yu1': yu1,
      if (yu2 != null) 'yu2': yu2,
      if (yu3 != null) 'yu3': yu3,
      if (yi1 != null) 'yi1': yi1,
      if (yi2 != null) 'yi2': yi2,
      if (yi3 != null) 'yi3': yi3,
      if (yc1 != null) 'yc1': yc1,
      if (yc2 != null) 'yc2': yc2,
      if (yc3 != null) 'yc3': yc3,
      if (ytanD1 != null) 'ytan_d1': ytanD1,
      if (ytanD2 != null) 'ytan_d2': ytanD2,
      if (ytanD3 != null) 'ytan_d3': ytanD3,
      if (yp1 != null) 'yp1': yp1,
      if (yp2 != null) 'yp2': yp2,
      if (yp3 != null) 'yp3': yp3,
      if (yVdf1 != null) 'y_vdf1': yVdf1,
      if (yVdf2 != null) 'y_vdf2': yVdf2,
      if (yVdf3 != null) 'y_vdf3': yVdf3,
      if (bu1 != null) 'bu1': bu1,
      if (bu2 != null) 'bu2': bu2,
      if (bu3 != null) 'bu3': bu3,
      if (bi1 != null) 'bi1': bi1,
      if (bi2 != null) 'bi2': bi2,
      if (bi3 != null) 'bi3': bi3,
      if (bc1 != null) 'bc1': bc1,
      if (bc2 != null) 'bc2': bc2,
      if (bc3 != null) 'bc3': bc3,
      if (btanD1 != null) 'btan_d1': btanD1,
      if (btanD2 != null) 'btan_d2': btanD2,
      if (btanD3 != null) 'btan_d3': btanD3,
      if (bp1 != null) 'bp1': bp1,
      if (bp2 != null) 'bp2': bp2,
      if (bp3 != null) 'bp3': bp3,
      if (bVdf1 != null) 'b_vdf1': bVdf1,
      if (bVdf2 != null) 'b_vdf2': bVdf2,
      if (bVdf3 != null) 'b_vdf3': bVdf3,
      if (hv_lv_u1 != null) 'hv_lv_u1': hv_lv_u1,
      if (hv_lv_u2 != null) 'hv_lv_u2': hv_lv_u2,
      if (hv_lv_u3 != null) 'hv_lv_u3': hv_lv_u3,
      if (hv_lv_i1 != null) 'hv_lv_i1': hv_lv_i1,
      if (hv_lv_i2 != null) 'hv_lv_i2': hv_lv_i2,
      if (hv_lv_i3 != null) 'hv_lv_i3': hv_lv_i3,
      if (hv_lv_c1 != null) 'hv_lv_c1': hv_lv_c1,
      if (hv_lv_c2 != null) 'hv_lv_c2': hv_lv_c2,
      if (hv_lv_c3 != null) 'hv_lv_c3': hv_lv_c3,
      if (hv_lv_tanD1 != null) 'hv_lv_tan_d1': hv_lv_tanD1,
      if (hv_lv_tanD2 != null) 'hv_lv_tan_d2': hv_lv_tanD2,
      if (hv_lv_tanD3 != null) 'hv_lv_tan_d3': hv_lv_tanD3,
      if (hv_lv_p1 != null) 'hv_lv_p1': hv_lv_p1,
      if (hv_lv_p2 != null) 'hv_lv_p2': hv_lv_p2,
      if (hv_lv_p3 != null) 'hv_lv_p3': hv_lv_p3,
      if (hv_lv_Vdf1 != null) 'hv_lv_vdf1': hv_lv_Vdf1,
      if (hv_lv_Vdf2 != null) 'hv_lv_vdf2': hv_lv_Vdf2,
      if (hv_lv_Vdf3 != null) 'hv_lv_vdf3': hv_lv_Vdf3,
      if (hvE_G_u1 != null) 'hv_e_g_u1': hvE_G_u1,
      if (hvE_G_u2 != null) 'hv_e_g_u2': hvE_G_u2,
      if (hvE_G_u3 != null) 'hv_e_g_u3': hvE_G_u3,
      if (hvE_G_i1 != null) 'hv_e_g_i1': hvE_G_i1,
      if (hvE_G_i2 != null) 'hv_e_g_i2': hvE_G_i2,
      if (hvE_G_i3 != null) 'hv_e_g_i3': hvE_G_i3,
      if (hvE_G_c1 != null) 'hv_e_g_c1': hvE_G_c1,
      if (hvE_G_c2 != null) 'hv_e_g_c2': hvE_G_c2,
      if (hvE_G_c3 != null) 'hv_e_g_c3': hvE_G_c3,
      if (hvE_G_tanD1 != null) 'hv_e_g_tan_d1': hvE_G_tanD1,
      if (hvE_G_tanD2 != null) 'hv_e_g_tan_d2': hvE_G_tanD2,
      if (hvE_G_tanD3 != null) 'hv_e_g_tan_d3': hvE_G_tanD3,
      if (hvE_G_p1 != null) 'hv_e_g_p1': hvE_G_p1,
      if (hvE_G_p2 != null) 'hv_e_g_p2': hvE_G_p2,
      if (hvE_G_p3 != null) 'hv_e_g_p3': hvE_G_p3,
      if (hvE_G_Vdf1 != null) 'hv_e_g_vdf1': hvE_G_Vdf1,
      if (hvE_G_Vdf2 != null) 'hv_e_g_vdf2': hvE_G_Vdf2,
      if (hvE_G_Vdf3 != null) 'hv_e_g_vdf3': hvE_G_Vdf3,
      if (hvE_Grnd_u1 != null) 'hv_e_grnd_u1': hvE_Grnd_u1,
      if (hvE_Grnd_u2 != null) 'hv_e_grnd_u2': hvE_Grnd_u2,
      if (hvE_Grnd_u3 != null) 'hv_e_grnd_u3': hvE_Grnd_u3,
      if (hvE_Grnd_i1 != null) 'hv_e_grnd_i1': hvE_Grnd_i1,
      if (hvE_Grnd_i2 != null) 'hv_e_grnd_i2': hvE_Grnd_i2,
      if (hvE_Grnd_i3 != null) 'hv_e_grnd_i3': hvE_Grnd_i3,
      if (hvE_Grnd_c1 != null) 'hv_e_grnd_c1': hvE_Grnd_c1,
      if (hvE_Grnd_c2 != null) 'hv_e_grnd_c2': hvE_Grnd_c2,
      if (hvE_Grnd_c3 != null) 'hv_e_grnd_c3': hvE_Grnd_c3,
      if (hvE_Grnd_tanD1 != null) 'hv_e_grnd_tan_d1': hvE_Grnd_tanD1,
      if (hvE_Grnd_tanD2 != null) 'hv_e_grnd_tan_d2': hvE_Grnd_tanD2,
      if (hvE_Grnd_tanD3 != null) 'hv_e_grnd_tan_d3': hvE_Grnd_tanD3,
      if (hvE_Grnd_p1 != null) 'hv_e_grnd_p1': hvE_Grnd_p1,
      if (hvE_Grnd_p2 != null) 'hv_e_grnd_p2': hvE_Grnd_p2,
      if (hvE_Grnd_p3 != null) 'hv_e_grnd_p3': hvE_Grnd_p3,
      if (hvE_Grnd_Vdf1 != null) 'hv_e_grnd_vdf1': hvE_Grnd_Vdf1,
      if (hvE_Grnd_Vdf2 != null) 'hv_e_grnd_vdf2': hvE_Grnd_Vdf2,
      if (hvE_Grnd_Vdf3 != null) 'hv_e_grnd_vdf3': hvE_Grnd_Vdf3,
      if (lvEu1 != null) 'lv_eu1': lvEu1,
      if (lvEu2 != null) 'lv_eu2': lvEu2,
      if (lvEu3 != null) 'lv_eu3': lvEu3,
      if (lvEi1 != null) 'lv_ei1': lvEi1,
      if (lvEi2 != null) 'lv_ei2': lvEi2,
      if (lvEi3 != null) 'lv_ei3': lvEi3,
      if (lvEc1 != null) 'lv_ec1': lvEc1,
      if (lvEc2 != null) 'lv_ec2': lvEc2,
      if (lvEc3 != null) 'lv_ec3': lvEc3,
      if (lvEtanD1 != null) 'lv_etan_d1': lvEtanD1,
      if (lvEtanD2 != null) 'lv_etan_d2': lvEtanD2,
      if (lvEtanD3 != null) 'lv_etan_d3': lvEtanD3,
      if (lvEp1 != null) 'lv_ep1': lvEp1,
      if (lvEp2 != null) 'lv_ep2': lvEp2,
      if (lvEp3 != null) 'lv_ep3': lvEp3,
      if (lvEVdf1 != null) 'lv_e_vdf1': lvEVdf1,
      if (lvEVdf2 != null) 'lv_e_vdf2': lvEVdf2,
      if (lvEVdf3 != null) 'lv_e_vdf3': lvEVdf3,
      if (lvE_G_u1 != null) 'lv_e_g_u1': lvE_G_u1,
      if (lvE_G_u2 != null) 'lv_e_g_u2': lvE_G_u2,
      if (lvE_G_u3 != null) 'lv_e_g_u3': lvE_G_u3,
      if (lvE_G_i1 != null) 'lv_e_g_i1': lvE_G_i1,
      if (lvE_G_i2 != null) 'lv_e_g_i2': lvE_G_i2,
      if (lvE_G_i3 != null) 'lv_e_g_i3': lvE_G_i3,
      if (lvE_G_c1 != null) 'lv_e_g_c1': lvE_G_c1,
      if (lvE_G_c2 != null) 'lv_e_g_c2': lvE_G_c2,
      if (lvE_G_c3 != null) 'lv_e_g_c3': lvE_G_c3,
      if (lvE_G_tanD1 != null) 'lv_e_g_tan_d1': lvE_G_tanD1,
      if (lvE_G_tanD2 != null) 'lv_e_g_tan_d2': lvE_G_tanD2,
      if (lvE_G_tanD3 != null) 'lv_e_g_tan_d3': lvE_G_tanD3,
      if (lvE_G_p1 != null) 'lv_e_g_p1': lvE_G_p1,
      if (lvE_G_p2 != null) 'lv_e_g_p2': lvE_G_p2,
      if (lvE_G_p3 != null) 'lv_e_g_p3': lvE_G_p3,
      if (lvE_G_Vdf1 != null) 'lv_e_g_vdf1': lvE_G_Vdf1,
      if (lvE_G_Vdf2 != null) 'lv_e_g_vdf2': lvE_G_Vdf2,
      if (lvE_G_Vdf3 != null) 'lv_e_g_vdf3': lvE_G_Vdf3,
      if (lvE_Grnd_u1 != null) 'lv_e_grnd_u1': lvE_Grnd_u1,
      if (lvE_Grnd_u2 != null) 'lv_e_grnd_u2': lvE_Grnd_u2,
      if (lvE_Grnd_u3 != null) 'lv_e_grnd_u3': lvE_Grnd_u3,
      if (lvE_Grnd_i1 != null) 'lv_e_grnd_i1': lvE_Grnd_i1,
      if (lvE_Grnd_i2 != null) 'lv_e_grnd_i2': lvE_Grnd_i2,
      if (lvE_Grnd_i3 != null) 'lv_e_grnd_i3': lvE_Grnd_i3,
      if (lvE_Grnd_c1 != null) 'lv_e_grnd_c1': lvE_Grnd_c1,
      if (lvE_Grnd_c2 != null) 'lv_e_grnd_c2': lvE_Grnd_c2,
      if (lvE_Grnd_c3 != null) 'lv_e_grnd_c3': lvE_Grnd_c3,
      if (lvE_Grnd_tanD1 != null) 'lv_e_grnd_tan_d1': lvE_Grnd_tanD1,
      if (lvE_Grnd_tanD2 != null) 'lv_e_grnd_tan_d2': lvE_Grnd_tanD2,
      if (lvE_Grnd_tanD3 != null) 'lv_e_grnd_tan_d3': lvE_Grnd_tanD3,
      if (lvE_Grnd_p1 != null) 'lv_e_grnd_p1': lvE_Grnd_p1,
      if (lvE_Grnd_p2 != null) 'lv_e_grnd_p2': lvE_Grnd_p2,
      if (lvE_Grnd_p3 != null) 'lv_e_grnd_p3': lvE_Grnd_p3,
      if (lvE_Grnd_Vdf1 != null) 'lv_e_grnd_vdf1': lvE_Grnd_Vdf1,
      if (lvE_Grnd_Vdf2 != null) 'lv_e_grnd_vdf2': lvE_Grnd_Vdf2,
      if (lvE_Grnd_Vdf3 != null) 'lv_e_grnd_vdf3': lvE_Grnd_Vdf3,
    });
  }

  PowttdLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> ru1,
      Value<double> ru2,
      Value<double> ru3,
      Value<double> ri1,
      Value<double> ri2,
      Value<double> ri3,
      Value<double> rc1,
      Value<double> rc2,
      Value<double> rc3,
      Value<double> rtanD1,
      Value<double> rtanD2,
      Value<double> rtanD3,
      Value<double> rp1,
      Value<double> rp2,
      Value<double> rp3,
      Value<double> rVdf1,
      Value<double> rVdf2,
      Value<double> rVdf3,
      Value<double> yu1,
      Value<double> yu2,
      Value<double> yu3,
      Value<double> yi1,
      Value<double> yi2,
      Value<double> yi3,
      Value<double> yc1,
      Value<double> yc2,
      Value<double> yc3,
      Value<double> ytanD1,
      Value<double> ytanD2,
      Value<double> ytanD3,
      Value<double> yp1,
      Value<double> yp2,
      Value<double> yp3,
      Value<double> yVdf1,
      Value<double> yVdf2,
      Value<double> yVdf3,
      Value<double> bu1,
      Value<double> bu2,
      Value<double> bu3,
      Value<double> bi1,
      Value<double> bi2,
      Value<double> bi3,
      Value<double> bc1,
      Value<double> bc2,
      Value<double> bc3,
      Value<double> btanD1,
      Value<double> btanD2,
      Value<double> btanD3,
      Value<double> bp1,
      Value<double> bp2,
      Value<double> bp3,
      Value<double> bVdf1,
      Value<double> bVdf2,
      Value<double> bVdf3,
      Value<double> hv_lv_u1,
      Value<double> hv_lv_u2,
      Value<double> hv_lv_u3,
      Value<double> hv_lv_i1,
      Value<double> hv_lv_i2,
      Value<double> hv_lv_i3,
      Value<double> hv_lv_c1,
      Value<double> hv_lv_c2,
      Value<double> hv_lv_c3,
      Value<double> hv_lv_tanD1,
      Value<double> hv_lv_tanD2,
      Value<double> hv_lv_tanD3,
      Value<double> hv_lv_p1,
      Value<double> hv_lv_p2,
      Value<double> hv_lv_p3,
      Value<double> hv_lv_Vdf1,
      Value<double> hv_lv_Vdf2,
      Value<double> hv_lv_Vdf3,
      Value<double> hvE_G_u1,
      Value<double> hvE_G_u2,
      Value<double> hvE_G_u3,
      Value<double> hvE_G_i1,
      Value<double> hvE_G_i2,
      Value<double> hvE_G_i3,
      Value<double> hvE_G_c1,
      Value<double> hvE_G_c2,
      Value<double> hvE_G_c3,
      Value<double> hvE_G_tanD1,
      Value<double> hvE_G_tanD2,
      Value<double> hvE_G_tanD3,
      Value<double> hvE_G_p1,
      Value<double> hvE_G_p2,
      Value<double> hvE_G_p3,
      Value<double> hvE_G_Vdf1,
      Value<double> hvE_G_Vdf2,
      Value<double> hvE_G_Vdf3,
      Value<double> hvE_Grnd_u1,
      Value<double> hvE_Grnd_u2,
      Value<double> hvE_Grnd_u3,
      Value<double> hvE_Grnd_i1,
      Value<double> hvE_Grnd_i2,
      Value<double> hvE_Grnd_i3,
      Value<double> hvE_Grnd_c1,
      Value<double> hvE_Grnd_c2,
      Value<double> hvE_Grnd_c3,
      Value<double> hvE_Grnd_tanD1,
      Value<double> hvE_Grnd_tanD2,
      Value<double> hvE_Grnd_tanD3,
      Value<double> hvE_Grnd_p1,
      Value<double> hvE_Grnd_p2,
      Value<double> hvE_Grnd_p3,
      Value<double> hvE_Grnd_Vdf1,
      Value<double> hvE_Grnd_Vdf2,
      Value<double> hvE_Grnd_Vdf3,
      Value<double> lvEu1,
      Value<double> lvEu2,
      Value<double> lvEu3,
      Value<double> lvEi1,
      Value<double> lvEi2,
      Value<double> lvEi3,
      Value<double> lvEc1,
      Value<double> lvEc2,
      Value<double> lvEc3,
      Value<double> lvEtanD1,
      Value<double> lvEtanD2,
      Value<double> lvEtanD3,
      Value<double> lvEp1,
      Value<double> lvEp2,
      Value<double> lvEp3,
      Value<double> lvEVdf1,
      Value<double> lvEVdf2,
      Value<double> lvEVdf3,
      Value<double> lvE_G_u1,
      Value<double> lvE_G_u2,
      Value<double> lvE_G_u3,
      Value<double> lvE_G_i1,
      Value<double> lvE_G_i2,
      Value<double> lvE_G_i3,
      Value<double> lvE_G_c1,
      Value<double> lvE_G_c2,
      Value<double> lvE_G_c3,
      Value<double> lvE_G_tanD1,
      Value<double> lvE_G_tanD2,
      Value<double> lvE_G_tanD3,
      Value<double> lvE_G_p1,
      Value<double> lvE_G_p2,
      Value<double> lvE_G_p3,
      Value<double> lvE_G_Vdf1,
      Value<double> lvE_G_Vdf2,
      Value<double> lvE_G_Vdf3,
      Value<double> lvE_Grnd_u1,
      Value<double> lvE_Grnd_u2,
      Value<double> lvE_Grnd_u3,
      Value<double> lvE_Grnd_i1,
      Value<double> lvE_Grnd_i2,
      Value<double> lvE_Grnd_i3,
      Value<double> lvE_Grnd_c1,
      Value<double> lvE_Grnd_c2,
      Value<double> lvE_Grnd_c3,
      Value<double> lvE_Grnd_tanD1,
      Value<double> lvE_Grnd_tanD2,
      Value<double> lvE_Grnd_tanD3,
      Value<double> lvE_Grnd_p1,
      Value<double> lvE_Grnd_p2,
      Value<double> lvE_Grnd_p3,
      Value<double> lvE_Grnd_Vdf1,
      Value<double> lvE_Grnd_Vdf2,
      Value<double> lvE_Grnd_Vdf3}) {
    return PowttdLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      ru1: ru1 ?? this.ru1,
      ru2: ru2 ?? this.ru2,
      ru3: ru3 ?? this.ru3,
      ri1: ri1 ?? this.ri1,
      ri2: ri2 ?? this.ri2,
      ri3: ri3 ?? this.ri3,
      rc1: rc1 ?? this.rc1,
      rc2: rc2 ?? this.rc2,
      rc3: rc3 ?? this.rc3,
      rtanD1: rtanD1 ?? this.rtanD1,
      rtanD2: rtanD2 ?? this.rtanD2,
      rtanD3: rtanD3 ?? this.rtanD3,
      rp1: rp1 ?? this.rp1,
      rp2: rp2 ?? this.rp2,
      rp3: rp3 ?? this.rp3,
      rVdf1: rVdf1 ?? this.rVdf1,
      rVdf2: rVdf2 ?? this.rVdf2,
      rVdf3: rVdf3 ?? this.rVdf3,
      yu1: yu1 ?? this.yu1,
      yu2: yu2 ?? this.yu2,
      yu3: yu3 ?? this.yu3,
      yi1: yi1 ?? this.yi1,
      yi2: yi2 ?? this.yi2,
      yi3: yi3 ?? this.yi3,
      yc1: yc1 ?? this.yc1,
      yc2: yc2 ?? this.yc2,
      yc3: yc3 ?? this.yc3,
      ytanD1: ytanD1 ?? this.ytanD1,
      ytanD2: ytanD2 ?? this.ytanD2,
      ytanD3: ytanD3 ?? this.ytanD3,
      yp1: yp1 ?? this.yp1,
      yp2: yp2 ?? this.yp2,
      yp3: yp3 ?? this.yp3,
      yVdf1: yVdf1 ?? this.yVdf1,
      yVdf2: yVdf2 ?? this.yVdf2,
      yVdf3: yVdf3 ?? this.yVdf3,
      bu1: bu1 ?? this.bu1,
      bu2: bu2 ?? this.bu2,
      bu3: bu3 ?? this.bu3,
      bi1: bi1 ?? this.bi1,
      bi2: bi2 ?? this.bi2,
      bi3: bi3 ?? this.bi3,
      bc1: bc1 ?? this.bc1,
      bc2: bc2 ?? this.bc2,
      bc3: bc3 ?? this.bc3,
      btanD1: btanD1 ?? this.btanD1,
      btanD2: btanD2 ?? this.btanD2,
      btanD3: btanD3 ?? this.btanD3,
      bp1: bp1 ?? this.bp1,
      bp2: bp2 ?? this.bp2,
      bp3: bp3 ?? this.bp3,
      bVdf1: bVdf1 ?? this.bVdf1,
      bVdf2: bVdf2 ?? this.bVdf2,
      bVdf3: bVdf3 ?? this.bVdf3,
      hv_lv_u1: hv_lv_u1 ?? this.hv_lv_u1,
      hv_lv_u2: hv_lv_u2 ?? this.hv_lv_u2,
      hv_lv_u3: hv_lv_u3 ?? this.hv_lv_u3,
      hv_lv_i1: hv_lv_i1 ?? this.hv_lv_i1,
      hv_lv_i2: hv_lv_i2 ?? this.hv_lv_i2,
      hv_lv_i3: hv_lv_i3 ?? this.hv_lv_i3,
      hv_lv_c1: hv_lv_c1 ?? this.hv_lv_c1,
      hv_lv_c2: hv_lv_c2 ?? this.hv_lv_c2,
      hv_lv_c3: hv_lv_c3 ?? this.hv_lv_c3,
      hv_lv_tanD1: hv_lv_tanD1 ?? this.hv_lv_tanD1,
      hv_lv_tanD2: hv_lv_tanD2 ?? this.hv_lv_tanD2,
      hv_lv_tanD3: hv_lv_tanD3 ?? this.hv_lv_tanD3,
      hv_lv_p1: hv_lv_p1 ?? this.hv_lv_p1,
      hv_lv_p2: hv_lv_p2 ?? this.hv_lv_p2,
      hv_lv_p3: hv_lv_p3 ?? this.hv_lv_p3,
      hv_lv_Vdf1: hv_lv_Vdf1 ?? this.hv_lv_Vdf1,
      hv_lv_Vdf2: hv_lv_Vdf2 ?? this.hv_lv_Vdf2,
      hv_lv_Vdf3: hv_lv_Vdf3 ?? this.hv_lv_Vdf3,
      hvE_G_u1: hvE_G_u1 ?? this.hvE_G_u1,
      hvE_G_u2: hvE_G_u2 ?? this.hvE_G_u2,
      hvE_G_u3: hvE_G_u3 ?? this.hvE_G_u3,
      hvE_G_i1: hvE_G_i1 ?? this.hvE_G_i1,
      hvE_G_i2: hvE_G_i2 ?? this.hvE_G_i2,
      hvE_G_i3: hvE_G_i3 ?? this.hvE_G_i3,
      hvE_G_c1: hvE_G_c1 ?? this.hvE_G_c1,
      hvE_G_c2: hvE_G_c2 ?? this.hvE_G_c2,
      hvE_G_c3: hvE_G_c3 ?? this.hvE_G_c3,
      hvE_G_tanD1: hvE_G_tanD1 ?? this.hvE_G_tanD1,
      hvE_G_tanD2: hvE_G_tanD2 ?? this.hvE_G_tanD2,
      hvE_G_tanD3: hvE_G_tanD3 ?? this.hvE_G_tanD3,
      hvE_G_p1: hvE_G_p1 ?? this.hvE_G_p1,
      hvE_G_p2: hvE_G_p2 ?? this.hvE_G_p2,
      hvE_G_p3: hvE_G_p3 ?? this.hvE_G_p3,
      hvE_G_Vdf1: hvE_G_Vdf1 ?? this.hvE_G_Vdf1,
      hvE_G_Vdf2: hvE_G_Vdf2 ?? this.hvE_G_Vdf2,
      hvE_G_Vdf3: hvE_G_Vdf3 ?? this.hvE_G_Vdf3,
      hvE_Grnd_u1: hvE_Grnd_u1 ?? this.hvE_Grnd_u1,
      hvE_Grnd_u2: hvE_Grnd_u2 ?? this.hvE_Grnd_u2,
      hvE_Grnd_u3: hvE_Grnd_u3 ?? this.hvE_Grnd_u3,
      hvE_Grnd_i1: hvE_Grnd_i1 ?? this.hvE_Grnd_i1,
      hvE_Grnd_i2: hvE_Grnd_i2 ?? this.hvE_Grnd_i2,
      hvE_Grnd_i3: hvE_Grnd_i3 ?? this.hvE_Grnd_i3,
      hvE_Grnd_c1: hvE_Grnd_c1 ?? this.hvE_Grnd_c1,
      hvE_Grnd_c2: hvE_Grnd_c2 ?? this.hvE_Grnd_c2,
      hvE_Grnd_c3: hvE_Grnd_c3 ?? this.hvE_Grnd_c3,
      hvE_Grnd_tanD1: hvE_Grnd_tanD1 ?? this.hvE_Grnd_tanD1,
      hvE_Grnd_tanD2: hvE_Grnd_tanD2 ?? this.hvE_Grnd_tanD2,
      hvE_Grnd_tanD3: hvE_Grnd_tanD3 ?? this.hvE_Grnd_tanD3,
      hvE_Grnd_p1: hvE_Grnd_p1 ?? this.hvE_Grnd_p1,
      hvE_Grnd_p2: hvE_Grnd_p2 ?? this.hvE_Grnd_p2,
      hvE_Grnd_p3: hvE_Grnd_p3 ?? this.hvE_Grnd_p3,
      hvE_Grnd_Vdf1: hvE_Grnd_Vdf1 ?? this.hvE_Grnd_Vdf1,
      hvE_Grnd_Vdf2: hvE_Grnd_Vdf2 ?? this.hvE_Grnd_Vdf2,
      hvE_Grnd_Vdf3: hvE_Grnd_Vdf3 ?? this.hvE_Grnd_Vdf3,
      lvEu1: lvEu1 ?? this.lvEu1,
      lvEu2: lvEu2 ?? this.lvEu2,
      lvEu3: lvEu3 ?? this.lvEu3,
      lvEi1: lvEi1 ?? this.lvEi1,
      lvEi2: lvEi2 ?? this.lvEi2,
      lvEi3: lvEi3 ?? this.lvEi3,
      lvEc1: lvEc1 ?? this.lvEc1,
      lvEc2: lvEc2 ?? this.lvEc2,
      lvEc3: lvEc3 ?? this.lvEc3,
      lvEtanD1: lvEtanD1 ?? this.lvEtanD1,
      lvEtanD2: lvEtanD2 ?? this.lvEtanD2,
      lvEtanD3: lvEtanD3 ?? this.lvEtanD3,
      lvEp1: lvEp1 ?? this.lvEp1,
      lvEp2: lvEp2 ?? this.lvEp2,
      lvEp3: lvEp3 ?? this.lvEp3,
      lvEVdf1: lvEVdf1 ?? this.lvEVdf1,
      lvEVdf2: lvEVdf2 ?? this.lvEVdf2,
      lvEVdf3: lvEVdf3 ?? this.lvEVdf3,
      lvE_G_u1: lvE_G_u1 ?? this.lvE_G_u1,
      lvE_G_u2: lvE_G_u2 ?? this.lvE_G_u2,
      lvE_G_u3: lvE_G_u3 ?? this.lvE_G_u3,
      lvE_G_i1: lvE_G_i1 ?? this.lvE_G_i1,
      lvE_G_i2: lvE_G_i2 ?? this.lvE_G_i2,
      lvE_G_i3: lvE_G_i3 ?? this.lvE_G_i3,
      lvE_G_c1: lvE_G_c1 ?? this.lvE_G_c1,
      lvE_G_c2: lvE_G_c2 ?? this.lvE_G_c2,
      lvE_G_c3: lvE_G_c3 ?? this.lvE_G_c3,
      lvE_G_tanD1: lvE_G_tanD1 ?? this.lvE_G_tanD1,
      lvE_G_tanD2: lvE_G_tanD2 ?? this.lvE_G_tanD2,
      lvE_G_tanD3: lvE_G_tanD3 ?? this.lvE_G_tanD3,
      lvE_G_p1: lvE_G_p1 ?? this.lvE_G_p1,
      lvE_G_p2: lvE_G_p2 ?? this.lvE_G_p2,
      lvE_G_p3: lvE_G_p3 ?? this.lvE_G_p3,
      lvE_G_Vdf1: lvE_G_Vdf1 ?? this.lvE_G_Vdf1,
      lvE_G_Vdf2: lvE_G_Vdf2 ?? this.lvE_G_Vdf2,
      lvE_G_Vdf3: lvE_G_Vdf3 ?? this.lvE_G_Vdf3,
      lvE_Grnd_u1: lvE_Grnd_u1 ?? this.lvE_Grnd_u1,
      lvE_Grnd_u2: lvE_Grnd_u2 ?? this.lvE_Grnd_u2,
      lvE_Grnd_u3: lvE_Grnd_u3 ?? this.lvE_Grnd_u3,
      lvE_Grnd_i1: lvE_Grnd_i1 ?? this.lvE_Grnd_i1,
      lvE_Grnd_i2: lvE_Grnd_i2 ?? this.lvE_Grnd_i2,
      lvE_Grnd_i3: lvE_Grnd_i3 ?? this.lvE_Grnd_i3,
      lvE_Grnd_c1: lvE_Grnd_c1 ?? this.lvE_Grnd_c1,
      lvE_Grnd_c2: lvE_Grnd_c2 ?? this.lvE_Grnd_c2,
      lvE_Grnd_c3: lvE_Grnd_c3 ?? this.lvE_Grnd_c3,
      lvE_Grnd_tanD1: lvE_Grnd_tanD1 ?? this.lvE_Grnd_tanD1,
      lvE_Grnd_tanD2: lvE_Grnd_tanD2 ?? this.lvE_Grnd_tanD2,
      lvE_Grnd_tanD3: lvE_Grnd_tanD3 ?? this.lvE_Grnd_tanD3,
      lvE_Grnd_p1: lvE_Grnd_p1 ?? this.lvE_Grnd_p1,
      lvE_Grnd_p2: lvE_Grnd_p2 ?? this.lvE_Grnd_p2,
      lvE_Grnd_p3: lvE_Grnd_p3 ?? this.lvE_Grnd_p3,
      lvE_Grnd_Vdf1: lvE_Grnd_Vdf1 ?? this.lvE_Grnd_Vdf1,
      lvE_Grnd_Vdf2: lvE_Grnd_Vdf2 ?? this.lvE_Grnd_Vdf2,
      lvE_Grnd_Vdf3: lvE_Grnd_Vdf3 ?? this.lvE_Grnd_Vdf3,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (ru1.present) {
      map['ru1'] = Variable<double>(ru1.value);
    }
    if (ru2.present) {
      map['ru2'] = Variable<double>(ru2.value);
    }
    if (ru3.present) {
      map['ru3'] = Variable<double>(ru3.value);
    }
    if (ri1.present) {
      map['ri1'] = Variable<double>(ri1.value);
    }
    if (ri2.present) {
      map['ri2'] = Variable<double>(ri2.value);
    }
    if (ri3.present) {
      map['ri3'] = Variable<double>(ri3.value);
    }
    if (rc1.present) {
      map['rc1'] = Variable<double>(rc1.value);
    }
    if (rc2.present) {
      map['rc2'] = Variable<double>(rc2.value);
    }
    if (rc3.present) {
      map['rc3'] = Variable<double>(rc3.value);
    }
    if (rtanD1.present) {
      map['rtan_d1'] = Variable<double>(rtanD1.value);
    }
    if (rtanD2.present) {
      map['rtan_d2'] = Variable<double>(rtanD2.value);
    }
    if (rtanD3.present) {
      map['rtan_d3'] = Variable<double>(rtanD3.value);
    }
    if (rp1.present) {
      map['rp1'] = Variable<double>(rp1.value);
    }
    if (rp2.present) {
      map['rp2'] = Variable<double>(rp2.value);
    }
    if (rp3.present) {
      map['rp3'] = Variable<double>(rp3.value);
    }
    if (rVdf1.present) {
      map['r_vdf1'] = Variable<double>(rVdf1.value);
    }
    if (rVdf2.present) {
      map['r_vdf2'] = Variable<double>(rVdf2.value);
    }
    if (rVdf3.present) {
      map['r_vdf3'] = Variable<double>(rVdf3.value);
    }
    if (yu1.present) {
      map['yu1'] = Variable<double>(yu1.value);
    }
    if (yu2.present) {
      map['yu2'] = Variable<double>(yu2.value);
    }
    if (yu3.present) {
      map['yu3'] = Variable<double>(yu3.value);
    }
    if (yi1.present) {
      map['yi1'] = Variable<double>(yi1.value);
    }
    if (yi2.present) {
      map['yi2'] = Variable<double>(yi2.value);
    }
    if (yi3.present) {
      map['yi3'] = Variable<double>(yi3.value);
    }
    if (yc1.present) {
      map['yc1'] = Variable<double>(yc1.value);
    }
    if (yc2.present) {
      map['yc2'] = Variable<double>(yc2.value);
    }
    if (yc3.present) {
      map['yc3'] = Variable<double>(yc3.value);
    }
    if (ytanD1.present) {
      map['ytan_d1'] = Variable<double>(ytanD1.value);
    }
    if (ytanD2.present) {
      map['ytan_d2'] = Variable<double>(ytanD2.value);
    }
    if (ytanD3.present) {
      map['ytan_d3'] = Variable<double>(ytanD3.value);
    }
    if (yp1.present) {
      map['yp1'] = Variable<double>(yp1.value);
    }
    if (yp2.present) {
      map['yp2'] = Variable<double>(yp2.value);
    }
    if (yp3.present) {
      map['yp3'] = Variable<double>(yp3.value);
    }
    if (yVdf1.present) {
      map['y_vdf1'] = Variable<double>(yVdf1.value);
    }
    if (yVdf2.present) {
      map['y_vdf2'] = Variable<double>(yVdf2.value);
    }
    if (yVdf3.present) {
      map['y_vdf3'] = Variable<double>(yVdf3.value);
    }
    if (bu1.present) {
      map['bu1'] = Variable<double>(bu1.value);
    }
    if (bu2.present) {
      map['bu2'] = Variable<double>(bu2.value);
    }
    if (bu3.present) {
      map['bu3'] = Variable<double>(bu3.value);
    }
    if (bi1.present) {
      map['bi1'] = Variable<double>(bi1.value);
    }
    if (bi2.present) {
      map['bi2'] = Variable<double>(bi2.value);
    }
    if (bi3.present) {
      map['bi3'] = Variable<double>(bi3.value);
    }
    if (bc1.present) {
      map['bc1'] = Variable<double>(bc1.value);
    }
    if (bc2.present) {
      map['bc2'] = Variable<double>(bc2.value);
    }
    if (bc3.present) {
      map['bc3'] = Variable<double>(bc3.value);
    }
    if (btanD1.present) {
      map['btan_d1'] = Variable<double>(btanD1.value);
    }
    if (btanD2.present) {
      map['btan_d2'] = Variable<double>(btanD2.value);
    }
    if (btanD3.present) {
      map['btan_d3'] = Variable<double>(btanD3.value);
    }
    if (bp1.present) {
      map['bp1'] = Variable<double>(bp1.value);
    }
    if (bp2.present) {
      map['bp2'] = Variable<double>(bp2.value);
    }
    if (bp3.present) {
      map['bp3'] = Variable<double>(bp3.value);
    }
    if (bVdf1.present) {
      map['b_vdf1'] = Variable<double>(bVdf1.value);
    }
    if (bVdf2.present) {
      map['b_vdf2'] = Variable<double>(bVdf2.value);
    }
    if (bVdf3.present) {
      map['b_vdf3'] = Variable<double>(bVdf3.value);
    }
    if (hv_lv_u1.present) {
      map['hv_lv_u1'] = Variable<double>(hv_lv_u1.value);
    }
    if (hv_lv_u2.present) {
      map['hv_lv_u2'] = Variable<double>(hv_lv_u2.value);
    }
    if (hv_lv_u3.present) {
      map['hv_lv_u3'] = Variable<double>(hv_lv_u3.value);
    }
    if (hv_lv_i1.present) {
      map['hv_lv_i1'] = Variable<double>(hv_lv_i1.value);
    }
    if (hv_lv_i2.present) {
      map['hv_lv_i2'] = Variable<double>(hv_lv_i2.value);
    }
    if (hv_lv_i3.present) {
      map['hv_lv_i3'] = Variable<double>(hv_lv_i3.value);
    }
    if (hv_lv_c1.present) {
      map['hv_lv_c1'] = Variable<double>(hv_lv_c1.value);
    }
    if (hv_lv_c2.present) {
      map['hv_lv_c2'] = Variable<double>(hv_lv_c2.value);
    }
    if (hv_lv_c3.present) {
      map['hv_lv_c3'] = Variable<double>(hv_lv_c3.value);
    }
    if (hv_lv_tanD1.present) {
      map['hv_lv_tan_d1'] = Variable<double>(hv_lv_tanD1.value);
    }
    if (hv_lv_tanD2.present) {
      map['hv_lv_tan_d2'] = Variable<double>(hv_lv_tanD2.value);
    }
    if (hv_lv_tanD3.present) {
      map['hv_lv_tan_d3'] = Variable<double>(hv_lv_tanD3.value);
    }
    if (hv_lv_p1.present) {
      map['hv_lv_p1'] = Variable<double>(hv_lv_p1.value);
    }
    if (hv_lv_p2.present) {
      map['hv_lv_p2'] = Variable<double>(hv_lv_p2.value);
    }
    if (hv_lv_p3.present) {
      map['hv_lv_p3'] = Variable<double>(hv_lv_p3.value);
    }
    if (hv_lv_Vdf1.present) {
      map['hv_lv_vdf1'] = Variable<double>(hv_lv_Vdf1.value);
    }
    if (hv_lv_Vdf2.present) {
      map['hv_lv_vdf2'] = Variable<double>(hv_lv_Vdf2.value);
    }
    if (hv_lv_Vdf3.present) {
      map['hv_lv_vdf3'] = Variable<double>(hv_lv_Vdf3.value);
    }
    if (hvE_G_u1.present) {
      map['hv_e_g_u1'] = Variable<double>(hvE_G_u1.value);
    }
    if (hvE_G_u2.present) {
      map['hv_e_g_u2'] = Variable<double>(hvE_G_u2.value);
    }
    if (hvE_G_u3.present) {
      map['hv_e_g_u3'] = Variable<double>(hvE_G_u3.value);
    }
    if (hvE_G_i1.present) {
      map['hv_e_g_i1'] = Variable<double>(hvE_G_i1.value);
    }
    if (hvE_G_i2.present) {
      map['hv_e_g_i2'] = Variable<double>(hvE_G_i2.value);
    }
    if (hvE_G_i3.present) {
      map['hv_e_g_i3'] = Variable<double>(hvE_G_i3.value);
    }
    if (hvE_G_c1.present) {
      map['hv_e_g_c1'] = Variable<double>(hvE_G_c1.value);
    }
    if (hvE_G_c2.present) {
      map['hv_e_g_c2'] = Variable<double>(hvE_G_c2.value);
    }
    if (hvE_G_c3.present) {
      map['hv_e_g_c3'] = Variable<double>(hvE_G_c3.value);
    }
    if (hvE_G_tanD1.present) {
      map['hv_e_g_tan_d1'] = Variable<double>(hvE_G_tanD1.value);
    }
    if (hvE_G_tanD2.present) {
      map['hv_e_g_tan_d2'] = Variable<double>(hvE_G_tanD2.value);
    }
    if (hvE_G_tanD3.present) {
      map['hv_e_g_tan_d3'] = Variable<double>(hvE_G_tanD3.value);
    }
    if (hvE_G_p1.present) {
      map['hv_e_g_p1'] = Variable<double>(hvE_G_p1.value);
    }
    if (hvE_G_p2.present) {
      map['hv_e_g_p2'] = Variable<double>(hvE_G_p2.value);
    }
    if (hvE_G_p3.present) {
      map['hv_e_g_p3'] = Variable<double>(hvE_G_p3.value);
    }
    if (hvE_G_Vdf1.present) {
      map['hv_e_g_vdf1'] = Variable<double>(hvE_G_Vdf1.value);
    }
    if (hvE_G_Vdf2.present) {
      map['hv_e_g_vdf2'] = Variable<double>(hvE_G_Vdf2.value);
    }
    if (hvE_G_Vdf3.present) {
      map['hv_e_g_vdf3'] = Variable<double>(hvE_G_Vdf3.value);
    }
    if (hvE_Grnd_u1.present) {
      map['hv_e_grnd_u1'] = Variable<double>(hvE_Grnd_u1.value);
    }
    if (hvE_Grnd_u2.present) {
      map['hv_e_grnd_u2'] = Variable<double>(hvE_Grnd_u2.value);
    }
    if (hvE_Grnd_u3.present) {
      map['hv_e_grnd_u3'] = Variable<double>(hvE_Grnd_u3.value);
    }
    if (hvE_Grnd_i1.present) {
      map['hv_e_grnd_i1'] = Variable<double>(hvE_Grnd_i1.value);
    }
    if (hvE_Grnd_i2.present) {
      map['hv_e_grnd_i2'] = Variable<double>(hvE_Grnd_i2.value);
    }
    if (hvE_Grnd_i3.present) {
      map['hv_e_grnd_i3'] = Variable<double>(hvE_Grnd_i3.value);
    }
    if (hvE_Grnd_c1.present) {
      map['hv_e_grnd_c1'] = Variable<double>(hvE_Grnd_c1.value);
    }
    if (hvE_Grnd_c2.present) {
      map['hv_e_grnd_c2'] = Variable<double>(hvE_Grnd_c2.value);
    }
    if (hvE_Grnd_c3.present) {
      map['hv_e_grnd_c3'] = Variable<double>(hvE_Grnd_c3.value);
    }
    if (hvE_Grnd_tanD1.present) {
      map['hv_e_grnd_tan_d1'] = Variable<double>(hvE_Grnd_tanD1.value);
    }
    if (hvE_Grnd_tanD2.present) {
      map['hv_e_grnd_tan_d2'] = Variable<double>(hvE_Grnd_tanD2.value);
    }
    if (hvE_Grnd_tanD3.present) {
      map['hv_e_grnd_tan_d3'] = Variable<double>(hvE_Grnd_tanD3.value);
    }
    if (hvE_Grnd_p1.present) {
      map['hv_e_grnd_p1'] = Variable<double>(hvE_Grnd_p1.value);
    }
    if (hvE_Grnd_p2.present) {
      map['hv_e_grnd_p2'] = Variable<double>(hvE_Grnd_p2.value);
    }
    if (hvE_Grnd_p3.present) {
      map['hv_e_grnd_p3'] = Variable<double>(hvE_Grnd_p3.value);
    }
    if (hvE_Grnd_Vdf1.present) {
      map['hv_e_grnd_vdf1'] = Variable<double>(hvE_Grnd_Vdf1.value);
    }
    if (hvE_Grnd_Vdf2.present) {
      map['hv_e_grnd_vdf2'] = Variable<double>(hvE_Grnd_Vdf2.value);
    }
    if (hvE_Grnd_Vdf3.present) {
      map['hv_e_grnd_vdf3'] = Variable<double>(hvE_Grnd_Vdf3.value);
    }
    if (lvEu1.present) {
      map['lv_eu1'] = Variable<double>(lvEu1.value);
    }
    if (lvEu2.present) {
      map['lv_eu2'] = Variable<double>(lvEu2.value);
    }
    if (lvEu3.present) {
      map['lv_eu3'] = Variable<double>(lvEu3.value);
    }
    if (lvEi1.present) {
      map['lv_ei1'] = Variable<double>(lvEi1.value);
    }
    if (lvEi2.present) {
      map['lv_ei2'] = Variable<double>(lvEi2.value);
    }
    if (lvEi3.present) {
      map['lv_ei3'] = Variable<double>(lvEi3.value);
    }
    if (lvEc1.present) {
      map['lv_ec1'] = Variable<double>(lvEc1.value);
    }
    if (lvEc2.present) {
      map['lv_ec2'] = Variable<double>(lvEc2.value);
    }
    if (lvEc3.present) {
      map['lv_ec3'] = Variable<double>(lvEc3.value);
    }
    if (lvEtanD1.present) {
      map['lv_etan_d1'] = Variable<double>(lvEtanD1.value);
    }
    if (lvEtanD2.present) {
      map['lv_etan_d2'] = Variable<double>(lvEtanD2.value);
    }
    if (lvEtanD3.present) {
      map['lv_etan_d3'] = Variable<double>(lvEtanD3.value);
    }
    if (lvEp1.present) {
      map['lv_ep1'] = Variable<double>(lvEp1.value);
    }
    if (lvEp2.present) {
      map['lv_ep2'] = Variable<double>(lvEp2.value);
    }
    if (lvEp3.present) {
      map['lv_ep3'] = Variable<double>(lvEp3.value);
    }
    if (lvEVdf1.present) {
      map['lv_e_vdf1'] = Variable<double>(lvEVdf1.value);
    }
    if (lvEVdf2.present) {
      map['lv_e_vdf2'] = Variable<double>(lvEVdf2.value);
    }
    if (lvEVdf3.present) {
      map['lv_e_vdf3'] = Variable<double>(lvEVdf3.value);
    }
    if (lvE_G_u1.present) {
      map['lv_e_g_u1'] = Variable<double>(lvE_G_u1.value);
    }
    if (lvE_G_u2.present) {
      map['lv_e_g_u2'] = Variable<double>(lvE_G_u2.value);
    }
    if (lvE_G_u3.present) {
      map['lv_e_g_u3'] = Variable<double>(lvE_G_u3.value);
    }
    if (lvE_G_i1.present) {
      map['lv_e_g_i1'] = Variable<double>(lvE_G_i1.value);
    }
    if (lvE_G_i2.present) {
      map['lv_e_g_i2'] = Variable<double>(lvE_G_i2.value);
    }
    if (lvE_G_i3.present) {
      map['lv_e_g_i3'] = Variable<double>(lvE_G_i3.value);
    }
    if (lvE_G_c1.present) {
      map['lv_e_g_c1'] = Variable<double>(lvE_G_c1.value);
    }
    if (lvE_G_c2.present) {
      map['lv_e_g_c2'] = Variable<double>(lvE_G_c2.value);
    }
    if (lvE_G_c3.present) {
      map['lv_e_g_c3'] = Variable<double>(lvE_G_c3.value);
    }
    if (lvE_G_tanD1.present) {
      map['lv_e_g_tan_d1'] = Variable<double>(lvE_G_tanD1.value);
    }
    if (lvE_G_tanD2.present) {
      map['lv_e_g_tan_d2'] = Variable<double>(lvE_G_tanD2.value);
    }
    if (lvE_G_tanD3.present) {
      map['lv_e_g_tan_d3'] = Variable<double>(lvE_G_tanD3.value);
    }
    if (lvE_G_p1.present) {
      map['lv_e_g_p1'] = Variable<double>(lvE_G_p1.value);
    }
    if (lvE_G_p2.present) {
      map['lv_e_g_p2'] = Variable<double>(lvE_G_p2.value);
    }
    if (lvE_G_p3.present) {
      map['lv_e_g_p3'] = Variable<double>(lvE_G_p3.value);
    }
    if (lvE_G_Vdf1.present) {
      map['lv_e_g_vdf1'] = Variable<double>(lvE_G_Vdf1.value);
    }
    if (lvE_G_Vdf2.present) {
      map['lv_e_g_vdf2'] = Variable<double>(lvE_G_Vdf2.value);
    }
    if (lvE_G_Vdf3.present) {
      map['lv_e_g_vdf3'] = Variable<double>(lvE_G_Vdf3.value);
    }
    if (lvE_Grnd_u1.present) {
      map['lv_e_grnd_u1'] = Variable<double>(lvE_Grnd_u1.value);
    }
    if (lvE_Grnd_u2.present) {
      map['lv_e_grnd_u2'] = Variable<double>(lvE_Grnd_u2.value);
    }
    if (lvE_Grnd_u3.present) {
      map['lv_e_grnd_u3'] = Variable<double>(lvE_Grnd_u3.value);
    }
    if (lvE_Grnd_i1.present) {
      map['lv_e_grnd_i1'] = Variable<double>(lvE_Grnd_i1.value);
    }
    if (lvE_Grnd_i2.present) {
      map['lv_e_grnd_i2'] = Variable<double>(lvE_Grnd_i2.value);
    }
    if (lvE_Grnd_i3.present) {
      map['lv_e_grnd_i3'] = Variable<double>(lvE_Grnd_i3.value);
    }
    if (lvE_Grnd_c1.present) {
      map['lv_e_grnd_c1'] = Variable<double>(lvE_Grnd_c1.value);
    }
    if (lvE_Grnd_c2.present) {
      map['lv_e_grnd_c2'] = Variable<double>(lvE_Grnd_c2.value);
    }
    if (lvE_Grnd_c3.present) {
      map['lv_e_grnd_c3'] = Variable<double>(lvE_Grnd_c3.value);
    }
    if (lvE_Grnd_tanD1.present) {
      map['lv_e_grnd_tan_d1'] = Variable<double>(lvE_Grnd_tanD1.value);
    }
    if (lvE_Grnd_tanD2.present) {
      map['lv_e_grnd_tan_d2'] = Variable<double>(lvE_Grnd_tanD2.value);
    }
    if (lvE_Grnd_tanD3.present) {
      map['lv_e_grnd_tan_d3'] = Variable<double>(lvE_Grnd_tanD3.value);
    }
    if (lvE_Grnd_p1.present) {
      map['lv_e_grnd_p1'] = Variable<double>(lvE_Grnd_p1.value);
    }
    if (lvE_Grnd_p2.present) {
      map['lv_e_grnd_p2'] = Variable<double>(lvE_Grnd_p2.value);
    }
    if (lvE_Grnd_p3.present) {
      map['lv_e_grnd_p3'] = Variable<double>(lvE_Grnd_p3.value);
    }
    if (lvE_Grnd_Vdf1.present) {
      map['lv_e_grnd_vdf1'] = Variable<double>(lvE_Grnd_Vdf1.value);
    }
    if (lvE_Grnd_Vdf2.present) {
      map['lv_e_grnd_vdf2'] = Variable<double>(lvE_Grnd_Vdf2.value);
    }
    if (lvE_Grnd_Vdf3.present) {
      map['lv_e_grnd_vdf3'] = Variable<double>(lvE_Grnd_Vdf3.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PowttdLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('ru1: $ru1, ')
          ..write('ru2: $ru2, ')
          ..write('ru3: $ru3, ')
          ..write('ri1: $ri1, ')
          ..write('ri2: $ri2, ')
          ..write('ri3: $ri3, ')
          ..write('rc1: $rc1, ')
          ..write('rc2: $rc2, ')
          ..write('rc3: $rc3, ')
          ..write('rtanD1: $rtanD1, ')
          ..write('rtanD2: $rtanD2, ')
          ..write('rtanD3: $rtanD3, ')
          ..write('rp1: $rp1, ')
          ..write('rp2: $rp2, ')
          ..write('rp3: $rp3, ')
          ..write('rVdf1: $rVdf1, ')
          ..write('rVdf2: $rVdf2, ')
          ..write('rVdf3: $rVdf3, ')
          ..write('yu1: $yu1, ')
          ..write('yu2: $yu2, ')
          ..write('yu3: $yu3, ')
          ..write('yi1: $yi1, ')
          ..write('yi2: $yi2, ')
          ..write('yi3: $yi3, ')
          ..write('yc1: $yc1, ')
          ..write('yc2: $yc2, ')
          ..write('yc3: $yc3, ')
          ..write('ytanD1: $ytanD1, ')
          ..write('ytanD2: $ytanD2, ')
          ..write('ytanD3: $ytanD3, ')
          ..write('yp1: $yp1, ')
          ..write('yp2: $yp2, ')
          ..write('yp3: $yp3, ')
          ..write('yVdf1: $yVdf1, ')
          ..write('yVdf2: $yVdf2, ')
          ..write('yVdf3: $yVdf3, ')
          ..write('bu1: $bu1, ')
          ..write('bu2: $bu2, ')
          ..write('bu3: $bu3, ')
          ..write('bi1: $bi1, ')
          ..write('bi2: $bi2, ')
          ..write('bi3: $bi3, ')
          ..write('bc1: $bc1, ')
          ..write('bc2: $bc2, ')
          ..write('bc3: $bc3, ')
          ..write('btanD1: $btanD1, ')
          ..write('btanD2: $btanD2, ')
          ..write('btanD3: $btanD3, ')
          ..write('bp1: $bp1, ')
          ..write('bp2: $bp2, ')
          ..write('bp3: $bp3, ')
          ..write('bVdf1: $bVdf1, ')
          ..write('bVdf2: $bVdf2, ')
          ..write('bVdf3: $bVdf3, ')
          ..write('hv_lv_u1: $hv_lv_u1, ')
          ..write('hv_lv_u2: $hv_lv_u2, ')
          ..write('hv_lv_u3: $hv_lv_u3, ')
          ..write('hv_lv_i1: $hv_lv_i1, ')
          ..write('hv_lv_i2: $hv_lv_i2, ')
          ..write('hv_lv_i3: $hv_lv_i3, ')
          ..write('hv_lv_c1: $hv_lv_c1, ')
          ..write('hv_lv_c2: $hv_lv_c2, ')
          ..write('hv_lv_c3: $hv_lv_c3, ')
          ..write('hv_lv_tanD1: $hv_lv_tanD1, ')
          ..write('hv_lv_tanD2: $hv_lv_tanD2, ')
          ..write('hv_lv_tanD3: $hv_lv_tanD3, ')
          ..write('hv_lv_p1: $hv_lv_p1, ')
          ..write('hv_lv_p2: $hv_lv_p2, ')
          ..write('hv_lv_p3: $hv_lv_p3, ')
          ..write('hv_lv_Vdf1: $hv_lv_Vdf1, ')
          ..write('hv_lv_Vdf2: $hv_lv_Vdf2, ')
          ..write('hv_lv_Vdf3: $hv_lv_Vdf3, ')
          ..write('hvE_G_u1: $hvE_G_u1, ')
          ..write('hvE_G_u2: $hvE_G_u2, ')
          ..write('hvE_G_u3: $hvE_G_u3, ')
          ..write('hvE_G_i1: $hvE_G_i1, ')
          ..write('hvE_G_i2: $hvE_G_i2, ')
          ..write('hvE_G_i3: $hvE_G_i3, ')
          ..write('hvE_G_c1: $hvE_G_c1, ')
          ..write('hvE_G_c2: $hvE_G_c2, ')
          ..write('hvE_G_c3: $hvE_G_c3, ')
          ..write('hvE_G_tanD1: $hvE_G_tanD1, ')
          ..write('hvE_G_tanD2: $hvE_G_tanD2, ')
          ..write('hvE_G_tanD3: $hvE_G_tanD3, ')
          ..write('hvE_G_p1: $hvE_G_p1, ')
          ..write('hvE_G_p2: $hvE_G_p2, ')
          ..write('hvE_G_p3: $hvE_G_p3, ')
          ..write('hvE_G_Vdf1: $hvE_G_Vdf1, ')
          ..write('hvE_G_Vdf2: $hvE_G_Vdf2, ')
          ..write('hvE_G_Vdf3: $hvE_G_Vdf3, ')
          ..write('hvE_Grnd_u1: $hvE_Grnd_u1, ')
          ..write('hvE_Grnd_u2: $hvE_Grnd_u2, ')
          ..write('hvE_Grnd_u3: $hvE_Grnd_u3, ')
          ..write('hvE_Grnd_i1: $hvE_Grnd_i1, ')
          ..write('hvE_Grnd_i2: $hvE_Grnd_i2, ')
          ..write('hvE_Grnd_i3: $hvE_Grnd_i3, ')
          ..write('hvE_Grnd_c1: $hvE_Grnd_c1, ')
          ..write('hvE_Grnd_c2: $hvE_Grnd_c2, ')
          ..write('hvE_Grnd_c3: $hvE_Grnd_c3, ')
          ..write('hvE_Grnd_tanD1: $hvE_Grnd_tanD1, ')
          ..write('hvE_Grnd_tanD2: $hvE_Grnd_tanD2, ')
          ..write('hvE_Grnd_tanD3: $hvE_Grnd_tanD3, ')
          ..write('hvE_Grnd_p1: $hvE_Grnd_p1, ')
          ..write('hvE_Grnd_p2: $hvE_Grnd_p2, ')
          ..write('hvE_Grnd_p3: $hvE_Grnd_p3, ')
          ..write('hvE_Grnd_Vdf1: $hvE_Grnd_Vdf1, ')
          ..write('hvE_Grnd_Vdf2: $hvE_Grnd_Vdf2, ')
          ..write('hvE_Grnd_Vdf3: $hvE_Grnd_Vdf3, ')
          ..write('lvEu1: $lvEu1, ')
          ..write('lvEu2: $lvEu2, ')
          ..write('lvEu3: $lvEu3, ')
          ..write('lvEi1: $lvEi1, ')
          ..write('lvEi2: $lvEi2, ')
          ..write('lvEi3: $lvEi3, ')
          ..write('lvEc1: $lvEc1, ')
          ..write('lvEc2: $lvEc2, ')
          ..write('lvEc3: $lvEc3, ')
          ..write('lvEtanD1: $lvEtanD1, ')
          ..write('lvEtanD2: $lvEtanD2, ')
          ..write('lvEtanD3: $lvEtanD3, ')
          ..write('lvEp1: $lvEp1, ')
          ..write('lvEp2: $lvEp2, ')
          ..write('lvEp3: $lvEp3, ')
          ..write('lvEVdf1: $lvEVdf1, ')
          ..write('lvEVdf2: $lvEVdf2, ')
          ..write('lvEVdf3: $lvEVdf3, ')
          ..write('lvE_G_u1: $lvE_G_u1, ')
          ..write('lvE_G_u2: $lvE_G_u2, ')
          ..write('lvE_G_u3: $lvE_G_u3, ')
          ..write('lvE_G_i1: $lvE_G_i1, ')
          ..write('lvE_G_i2: $lvE_G_i2, ')
          ..write('lvE_G_i3: $lvE_G_i3, ')
          ..write('lvE_G_c1: $lvE_G_c1, ')
          ..write('lvE_G_c2: $lvE_G_c2, ')
          ..write('lvE_G_c3: $lvE_G_c3, ')
          ..write('lvE_G_tanD1: $lvE_G_tanD1, ')
          ..write('lvE_G_tanD2: $lvE_G_tanD2, ')
          ..write('lvE_G_tanD3: $lvE_G_tanD3, ')
          ..write('lvE_G_p1: $lvE_G_p1, ')
          ..write('lvE_G_p2: $lvE_G_p2, ')
          ..write('lvE_G_p3: $lvE_G_p3, ')
          ..write('lvE_G_Vdf1: $lvE_G_Vdf1, ')
          ..write('lvE_G_Vdf2: $lvE_G_Vdf2, ')
          ..write('lvE_G_Vdf3: $lvE_G_Vdf3, ')
          ..write('lvE_Grnd_u1: $lvE_Grnd_u1, ')
          ..write('lvE_Grnd_u2: $lvE_Grnd_u2, ')
          ..write('lvE_Grnd_u3: $lvE_Grnd_u3, ')
          ..write('lvE_Grnd_i1: $lvE_Grnd_i1, ')
          ..write('lvE_Grnd_i2: $lvE_Grnd_i2, ')
          ..write('lvE_Grnd_i3: $lvE_Grnd_i3, ')
          ..write('lvE_Grnd_c1: $lvE_Grnd_c1, ')
          ..write('lvE_Grnd_c2: $lvE_Grnd_c2, ')
          ..write('lvE_Grnd_c3: $lvE_Grnd_c3, ')
          ..write('lvE_Grnd_tanD1: $lvE_Grnd_tanD1, ')
          ..write('lvE_Grnd_tanD2: $lvE_Grnd_tanD2, ')
          ..write('lvE_Grnd_tanD3: $lvE_Grnd_tanD3, ')
          ..write('lvE_Grnd_p1: $lvE_Grnd_p1, ')
          ..write('lvE_Grnd_p2: $lvE_Grnd_p2, ')
          ..write('lvE_Grnd_p3: $lvE_Grnd_p3, ')
          ..write('lvE_Grnd_Vdf1: $lvE_Grnd_Vdf1, ')
          ..write('lvE_Grnd_Vdf2: $lvE_Grnd_Vdf2, ')
          ..write('lvE_Grnd_Vdf3: $lvE_Grnd_Vdf3')
          ..write(')'))
        .toString();
  }
}

class $PowttdLocalDatasourceImplTable extends PowttdLocalDatasourceImpl
    with TableInfo<$PowttdLocalDatasourceImplTable, PowttdLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PowttdLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _ru1Meta = const VerificationMeta('ru1');
  GeneratedColumn<double> _ru1;
  @override
  GeneratedColumn<double> get ru1 =>
      _ru1 ??= GeneratedColumn<double>('ru1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ru2Meta = const VerificationMeta('ru2');
  GeneratedColumn<double> _ru2;
  @override
  GeneratedColumn<double> get ru2 =>
      _ru2 ??= GeneratedColumn<double>('ru2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ru3Meta = const VerificationMeta('ru3');
  GeneratedColumn<double> _ru3;
  @override
  GeneratedColumn<double> get ru3 =>
      _ru3 ??= GeneratedColumn<double>('ru3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ri1Meta = const VerificationMeta('ri1');
  GeneratedColumn<double> _ri1;
  @override
  GeneratedColumn<double> get ri1 =>
      _ri1 ??= GeneratedColumn<double>('ri1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ri2Meta = const VerificationMeta('ri2');
  GeneratedColumn<double> _ri2;
  @override
  GeneratedColumn<double> get ri2 =>
      _ri2 ??= GeneratedColumn<double>('ri2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ri3Meta = const VerificationMeta('ri3');
  GeneratedColumn<double> _ri3;
  @override
  GeneratedColumn<double> get ri3 =>
      _ri3 ??= GeneratedColumn<double>('ri3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rc1Meta = const VerificationMeta('rc1');
  GeneratedColumn<double> _rc1;
  @override
  GeneratedColumn<double> get rc1 =>
      _rc1 ??= GeneratedColumn<double>('rc1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rc2Meta = const VerificationMeta('rc2');
  GeneratedColumn<double> _rc2;
  @override
  GeneratedColumn<double> get rc2 =>
      _rc2 ??= GeneratedColumn<double>('rc2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rc3Meta = const VerificationMeta('rc3');
  GeneratedColumn<double> _rc3;
  @override
  GeneratedColumn<double> get rc3 =>
      _rc3 ??= GeneratedColumn<double>('rc3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rtanD1Meta = const VerificationMeta('rtanD1');
  GeneratedColumn<double> _rtanD1;
  @override
  GeneratedColumn<double> get rtanD1 =>
      _rtanD1 ??= GeneratedColumn<double>('rtan_d1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rtanD2Meta = const VerificationMeta('rtanD2');
  GeneratedColumn<double> _rtanD2;
  @override
  GeneratedColumn<double> get rtanD2 =>
      _rtanD2 ??= GeneratedColumn<double>('rtan_d2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rtanD3Meta = const VerificationMeta('rtanD3');
  GeneratedColumn<double> _rtanD3;
  @override
  GeneratedColumn<double> get rtanD3 =>
      _rtanD3 ??= GeneratedColumn<double>('rtan_d3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rp1Meta = const VerificationMeta('rp1');
  GeneratedColumn<double> _rp1;
  @override
  GeneratedColumn<double> get rp1 =>
      _rp1 ??= GeneratedColumn<double>('rp1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rp2Meta = const VerificationMeta('rp2');
  GeneratedColumn<double> _rp2;
  @override
  GeneratedColumn<double> get rp2 =>
      _rp2 ??= GeneratedColumn<double>('rp2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rp3Meta = const VerificationMeta('rp3');
  GeneratedColumn<double> _rp3;
  @override
  GeneratedColumn<double> get rp3 =>
      _rp3 ??= GeneratedColumn<double>('rp3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rVdf1Meta = const VerificationMeta('rVdf1');
  GeneratedColumn<double> _rVdf1;
  @override
  GeneratedColumn<double> get rVdf1 =>
      _rVdf1 ??= GeneratedColumn<double>('r_vdf1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rVdf2Meta = const VerificationMeta('rVdf2');
  GeneratedColumn<double> _rVdf2;
  @override
  GeneratedColumn<double> get rVdf2 =>
      _rVdf2 ??= GeneratedColumn<double>('r_vdf2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rVdf3Meta = const VerificationMeta('rVdf3');
  GeneratedColumn<double> _rVdf3;
  @override
  GeneratedColumn<double> get rVdf3 =>
      _rVdf3 ??= GeneratedColumn<double>('r_vdf3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yu1Meta = const VerificationMeta('yu1');
  GeneratedColumn<double> _yu1;
  @override
  GeneratedColumn<double> get yu1 =>
      _yu1 ??= GeneratedColumn<double>('yu1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yu2Meta = const VerificationMeta('yu2');
  GeneratedColumn<double> _yu2;
  @override
  GeneratedColumn<double> get yu2 =>
      _yu2 ??= GeneratedColumn<double>('yu2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yu3Meta = const VerificationMeta('yu3');
  GeneratedColumn<double> _yu3;
  @override
  GeneratedColumn<double> get yu3 =>
      _yu3 ??= GeneratedColumn<double>('yu3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yi1Meta = const VerificationMeta('yi1');
  GeneratedColumn<double> _yi1;
  @override
  GeneratedColumn<double> get yi1 =>
      _yi1 ??= GeneratedColumn<double>('yi1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yi2Meta = const VerificationMeta('yi2');
  GeneratedColumn<double> _yi2;
  @override
  GeneratedColumn<double> get yi2 =>
      _yi2 ??= GeneratedColumn<double>('yi2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yi3Meta = const VerificationMeta('yi3');
  GeneratedColumn<double> _yi3;
  @override
  GeneratedColumn<double> get yi3 =>
      _yi3 ??= GeneratedColumn<double>('yi3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yc1Meta = const VerificationMeta('yc1');
  GeneratedColumn<double> _yc1;
  @override
  GeneratedColumn<double> get yc1 =>
      _yc1 ??= GeneratedColumn<double>('yc1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yc2Meta = const VerificationMeta('yc2');
  GeneratedColumn<double> _yc2;
  @override
  GeneratedColumn<double> get yc2 =>
      _yc2 ??= GeneratedColumn<double>('yc2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yc3Meta = const VerificationMeta('yc3');
  GeneratedColumn<double> _yc3;
  @override
  GeneratedColumn<double> get yc3 =>
      _yc3 ??= GeneratedColumn<double>('yc3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ytanD1Meta = const VerificationMeta('ytanD1');
  GeneratedColumn<double> _ytanD1;
  @override
  GeneratedColumn<double> get ytanD1 =>
      _ytanD1 ??= GeneratedColumn<double>('ytan_d1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ytanD2Meta = const VerificationMeta('ytanD2');
  GeneratedColumn<double> _ytanD2;
  @override
  GeneratedColumn<double> get ytanD2 =>
      _ytanD2 ??= GeneratedColumn<double>('ytan_d2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ytanD3Meta = const VerificationMeta('ytanD3');
  GeneratedColumn<double> _ytanD3;
  @override
  GeneratedColumn<double> get ytanD3 =>
      _ytanD3 ??= GeneratedColumn<double>('ytan_d3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yp1Meta = const VerificationMeta('yp1');
  GeneratedColumn<double> _yp1;
  @override
  GeneratedColumn<double> get yp1 =>
      _yp1 ??= GeneratedColumn<double>('yp1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yp2Meta = const VerificationMeta('yp2');
  GeneratedColumn<double> _yp2;
  @override
  GeneratedColumn<double> get yp2 =>
      _yp2 ??= GeneratedColumn<double>('yp2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yp3Meta = const VerificationMeta('yp3');
  GeneratedColumn<double> _yp3;
  @override
  GeneratedColumn<double> get yp3 =>
      _yp3 ??= GeneratedColumn<double>('yp3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yVdf1Meta = const VerificationMeta('yVdf1');
  GeneratedColumn<double> _yVdf1;
  @override
  GeneratedColumn<double> get yVdf1 =>
      _yVdf1 ??= GeneratedColumn<double>('y_vdf1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yVdf2Meta = const VerificationMeta('yVdf2');
  GeneratedColumn<double> _yVdf2;
  @override
  GeneratedColumn<double> get yVdf2 =>
      _yVdf2 ??= GeneratedColumn<double>('y_vdf2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yVdf3Meta = const VerificationMeta('yVdf3');
  GeneratedColumn<double> _yVdf3;
  @override
  GeneratedColumn<double> get yVdf3 =>
      _yVdf3 ??= GeneratedColumn<double>('y_vdf3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bu1Meta = const VerificationMeta('bu1');
  GeneratedColumn<double> _bu1;
  @override
  GeneratedColumn<double> get bu1 =>
      _bu1 ??= GeneratedColumn<double>('bu1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bu2Meta = const VerificationMeta('bu2');
  GeneratedColumn<double> _bu2;
  @override
  GeneratedColumn<double> get bu2 =>
      _bu2 ??= GeneratedColumn<double>('bu2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bu3Meta = const VerificationMeta('bu3');
  GeneratedColumn<double> _bu3;
  @override
  GeneratedColumn<double> get bu3 =>
      _bu3 ??= GeneratedColumn<double>('bu3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bi1Meta = const VerificationMeta('bi1');
  GeneratedColumn<double> _bi1;
  @override
  GeneratedColumn<double> get bi1 =>
      _bi1 ??= GeneratedColumn<double>('bi1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bi2Meta = const VerificationMeta('bi2');
  GeneratedColumn<double> _bi2;
  @override
  GeneratedColumn<double> get bi2 =>
      _bi2 ??= GeneratedColumn<double>('bi2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bi3Meta = const VerificationMeta('bi3');
  GeneratedColumn<double> _bi3;
  @override
  GeneratedColumn<double> get bi3 =>
      _bi3 ??= GeneratedColumn<double>('bi3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bc1Meta = const VerificationMeta('bc1');
  GeneratedColumn<double> _bc1;
  @override
  GeneratedColumn<double> get bc1 =>
      _bc1 ??= GeneratedColumn<double>('bc1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bc2Meta = const VerificationMeta('bc2');
  GeneratedColumn<double> _bc2;
  @override
  GeneratedColumn<double> get bc2 =>
      _bc2 ??= GeneratedColumn<double>('bc2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bc3Meta = const VerificationMeta('bc3');
  GeneratedColumn<double> _bc3;
  @override
  GeneratedColumn<double> get bc3 =>
      _bc3 ??= GeneratedColumn<double>('bc3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _btanD1Meta = const VerificationMeta('btanD1');
  GeneratedColumn<double> _btanD1;
  @override
  GeneratedColumn<double> get btanD1 =>
      _btanD1 ??= GeneratedColumn<double>('btan_d1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _btanD2Meta = const VerificationMeta('btanD2');
  GeneratedColumn<double> _btanD2;
  @override
  GeneratedColumn<double> get btanD2 =>
      _btanD2 ??= GeneratedColumn<double>('btan_d2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _btanD3Meta = const VerificationMeta('btanD3');
  GeneratedColumn<double> _btanD3;
  @override
  GeneratedColumn<double> get btanD3 =>
      _btanD3 ??= GeneratedColumn<double>('btan_d3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bp1Meta = const VerificationMeta('bp1');
  GeneratedColumn<double> _bp1;
  @override
  GeneratedColumn<double> get bp1 =>
      _bp1 ??= GeneratedColumn<double>('bp1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bp2Meta = const VerificationMeta('bp2');
  GeneratedColumn<double> _bp2;
  @override
  GeneratedColumn<double> get bp2 =>
      _bp2 ??= GeneratedColumn<double>('bp2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bp3Meta = const VerificationMeta('bp3');
  GeneratedColumn<double> _bp3;
  @override
  GeneratedColumn<double> get bp3 =>
      _bp3 ??= GeneratedColumn<double>('bp3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bVdf1Meta = const VerificationMeta('bVdf1');
  GeneratedColumn<double> _bVdf1;
  @override
  GeneratedColumn<double> get bVdf1 =>
      _bVdf1 ??= GeneratedColumn<double>('b_vdf1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bVdf2Meta = const VerificationMeta('bVdf2');
  GeneratedColumn<double> _bVdf2;
  @override
  GeneratedColumn<double> get bVdf2 =>
      _bVdf2 ??= GeneratedColumn<double>('b_vdf2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bVdf3Meta = const VerificationMeta('bVdf3');
  GeneratedColumn<double> _bVdf3;
  @override
  GeneratedColumn<double> get bVdf3 =>
      _bVdf3 ??= GeneratedColumn<double>('b_vdf3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_u1Meta = const VerificationMeta('hv_lv_u1');
  GeneratedColumn<double> _hv_lv_u1;
  @override
  GeneratedColumn<double> get hv_lv_u1 =>
      _hv_lv_u1 ??= GeneratedColumn<double>('hv_lv_u1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_u2Meta = const VerificationMeta('hv_lv_u2');
  GeneratedColumn<double> _hv_lv_u2;
  @override
  GeneratedColumn<double> get hv_lv_u2 =>
      _hv_lv_u2 ??= GeneratedColumn<double>('hv_lv_u2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_u3Meta = const VerificationMeta('hv_lv_u3');
  GeneratedColumn<double> _hv_lv_u3;
  @override
  GeneratedColumn<double> get hv_lv_u3 =>
      _hv_lv_u3 ??= GeneratedColumn<double>('hv_lv_u3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_i1Meta = const VerificationMeta('hv_lv_i1');
  GeneratedColumn<double> _hv_lv_i1;
  @override
  GeneratedColumn<double> get hv_lv_i1 =>
      _hv_lv_i1 ??= GeneratedColumn<double>('hv_lv_i1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_i2Meta = const VerificationMeta('hv_lv_i2');
  GeneratedColumn<double> _hv_lv_i2;
  @override
  GeneratedColumn<double> get hv_lv_i2 =>
      _hv_lv_i2 ??= GeneratedColumn<double>('hv_lv_i2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_i3Meta = const VerificationMeta('hv_lv_i3');
  GeneratedColumn<double> _hv_lv_i3;
  @override
  GeneratedColumn<double> get hv_lv_i3 =>
      _hv_lv_i3 ??= GeneratedColumn<double>('hv_lv_i3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_c1Meta = const VerificationMeta('hv_lv_c1');
  GeneratedColumn<double> _hv_lv_c1;
  @override
  GeneratedColumn<double> get hv_lv_c1 =>
      _hv_lv_c1 ??= GeneratedColumn<double>('hv_lv_c1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_c2Meta = const VerificationMeta('hv_lv_c2');
  GeneratedColumn<double> _hv_lv_c2;
  @override
  GeneratedColumn<double> get hv_lv_c2 =>
      _hv_lv_c2 ??= GeneratedColumn<double>('hv_lv_c2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_c3Meta = const VerificationMeta('hv_lv_c3');
  GeneratedColumn<double> _hv_lv_c3;
  @override
  GeneratedColumn<double> get hv_lv_c3 =>
      _hv_lv_c3 ??= GeneratedColumn<double>('hv_lv_c3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_tanD1Meta =
      const VerificationMeta('hv_lv_tanD1');
  GeneratedColumn<double> _hv_lv_tanD1;
  @override
  GeneratedColumn<double> get hv_lv_tanD1 => _hv_lv_tanD1 ??=
      GeneratedColumn<double>('hv_lv_tan_d1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_tanD2Meta =
      const VerificationMeta('hv_lv_tanD2');
  GeneratedColumn<double> _hv_lv_tanD2;
  @override
  GeneratedColumn<double> get hv_lv_tanD2 => _hv_lv_tanD2 ??=
      GeneratedColumn<double>('hv_lv_tan_d2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_tanD3Meta =
      const VerificationMeta('hv_lv_tanD3');
  GeneratedColumn<double> _hv_lv_tanD3;
  @override
  GeneratedColumn<double> get hv_lv_tanD3 => _hv_lv_tanD3 ??=
      GeneratedColumn<double>('hv_lv_tan_d3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_p1Meta = const VerificationMeta('hv_lv_p1');
  GeneratedColumn<double> _hv_lv_p1;
  @override
  GeneratedColumn<double> get hv_lv_p1 =>
      _hv_lv_p1 ??= GeneratedColumn<double>('hv_lv_p1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_p2Meta = const VerificationMeta('hv_lv_p2');
  GeneratedColumn<double> _hv_lv_p2;
  @override
  GeneratedColumn<double> get hv_lv_p2 =>
      _hv_lv_p2 ??= GeneratedColumn<double>('hv_lv_p2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_p3Meta = const VerificationMeta('hv_lv_p3');
  GeneratedColumn<double> _hv_lv_p3;
  @override
  GeneratedColumn<double> get hv_lv_p3 =>
      _hv_lv_p3 ??= GeneratedColumn<double>('hv_lv_p3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_Vdf1Meta = const VerificationMeta('hv_lv_Vdf1');
  GeneratedColumn<double> _hv_lv_Vdf1;
  @override
  GeneratedColumn<double> get hv_lv_Vdf1 =>
      _hv_lv_Vdf1 ??= GeneratedColumn<double>('hv_lv_vdf1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_Vdf2Meta = const VerificationMeta('hv_lv_Vdf2');
  GeneratedColumn<double> _hv_lv_Vdf2;
  @override
  GeneratedColumn<double> get hv_lv_Vdf2 =>
      _hv_lv_Vdf2 ??= GeneratedColumn<double>('hv_lv_vdf2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_lv_Vdf3Meta = const VerificationMeta('hv_lv_Vdf3');
  GeneratedColumn<double> _hv_lv_Vdf3;
  @override
  GeneratedColumn<double> get hv_lv_Vdf3 =>
      _hv_lv_Vdf3 ??= GeneratedColumn<double>('hv_lv_vdf3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_u1Meta = const VerificationMeta('hvE_G_u1');
  GeneratedColumn<double> _hvE_G_u1;
  @override
  GeneratedColumn<double> get hvE_G_u1 =>
      _hvE_G_u1 ??= GeneratedColumn<double>('hv_e_g_u1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_u2Meta = const VerificationMeta('hvE_G_u2');
  GeneratedColumn<double> _hvE_G_u2;
  @override
  GeneratedColumn<double> get hvE_G_u2 =>
      _hvE_G_u2 ??= GeneratedColumn<double>('hv_e_g_u2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_u3Meta = const VerificationMeta('hvE_G_u3');
  GeneratedColumn<double> _hvE_G_u3;
  @override
  GeneratedColumn<double> get hvE_G_u3 =>
      _hvE_G_u3 ??= GeneratedColumn<double>('hv_e_g_u3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_i1Meta = const VerificationMeta('hvE_G_i1');
  GeneratedColumn<double> _hvE_G_i1;
  @override
  GeneratedColumn<double> get hvE_G_i1 =>
      _hvE_G_i1 ??= GeneratedColumn<double>('hv_e_g_i1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_i2Meta = const VerificationMeta('hvE_G_i2');
  GeneratedColumn<double> _hvE_G_i2;
  @override
  GeneratedColumn<double> get hvE_G_i2 =>
      _hvE_G_i2 ??= GeneratedColumn<double>('hv_e_g_i2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_i3Meta = const VerificationMeta('hvE_G_i3');
  GeneratedColumn<double> _hvE_G_i3;
  @override
  GeneratedColumn<double> get hvE_G_i3 =>
      _hvE_G_i3 ??= GeneratedColumn<double>('hv_e_g_i3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_c1Meta = const VerificationMeta('hvE_G_c1');
  GeneratedColumn<double> _hvE_G_c1;
  @override
  GeneratedColumn<double> get hvE_G_c1 =>
      _hvE_G_c1 ??= GeneratedColumn<double>('hv_e_g_c1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_c2Meta = const VerificationMeta('hvE_G_c2');
  GeneratedColumn<double> _hvE_G_c2;
  @override
  GeneratedColumn<double> get hvE_G_c2 =>
      _hvE_G_c2 ??= GeneratedColumn<double>('hv_e_g_c2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_c3Meta = const VerificationMeta('hvE_G_c3');
  GeneratedColumn<double> _hvE_G_c3;
  @override
  GeneratedColumn<double> get hvE_G_c3 =>
      _hvE_G_c3 ??= GeneratedColumn<double>('hv_e_g_c3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_tanD1Meta =
      const VerificationMeta('hvE_G_tanD1');
  GeneratedColumn<double> _hvE_G_tanD1;
  @override
  GeneratedColumn<double> get hvE_G_tanD1 => _hvE_G_tanD1 ??=
      GeneratedColumn<double>('hv_e_g_tan_d1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_tanD2Meta =
      const VerificationMeta('hvE_G_tanD2');
  GeneratedColumn<double> _hvE_G_tanD2;
  @override
  GeneratedColumn<double> get hvE_G_tanD2 => _hvE_G_tanD2 ??=
      GeneratedColumn<double>('hv_e_g_tan_d2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_tanD3Meta =
      const VerificationMeta('hvE_G_tanD3');
  GeneratedColumn<double> _hvE_G_tanD3;
  @override
  GeneratedColumn<double> get hvE_G_tanD3 => _hvE_G_tanD3 ??=
      GeneratedColumn<double>('hv_e_g_tan_d3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_p1Meta = const VerificationMeta('hvE_G_p1');
  GeneratedColumn<double> _hvE_G_p1;
  @override
  GeneratedColumn<double> get hvE_G_p1 =>
      _hvE_G_p1 ??= GeneratedColumn<double>('hv_e_g_p1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_p2Meta = const VerificationMeta('hvE_G_p2');
  GeneratedColumn<double> _hvE_G_p2;
  @override
  GeneratedColumn<double> get hvE_G_p2 =>
      _hvE_G_p2 ??= GeneratedColumn<double>('hv_e_g_p2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_p3Meta = const VerificationMeta('hvE_G_p3');
  GeneratedColumn<double> _hvE_G_p3;
  @override
  GeneratedColumn<double> get hvE_G_p3 =>
      _hvE_G_p3 ??= GeneratedColumn<double>('hv_e_g_p3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_Vdf1Meta = const VerificationMeta('hvE_G_Vdf1');
  GeneratedColumn<double> _hvE_G_Vdf1;
  @override
  GeneratedColumn<double> get hvE_G_Vdf1 =>
      _hvE_G_Vdf1 ??= GeneratedColumn<double>('hv_e_g_vdf1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_Vdf2Meta = const VerificationMeta('hvE_G_Vdf2');
  GeneratedColumn<double> _hvE_G_Vdf2;
  @override
  GeneratedColumn<double> get hvE_G_Vdf2 =>
      _hvE_G_Vdf2 ??= GeneratedColumn<double>('hv_e_g_vdf2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_G_Vdf3Meta = const VerificationMeta('hvE_G_Vdf3');
  GeneratedColumn<double> _hvE_G_Vdf3;
  @override
  GeneratedColumn<double> get hvE_G_Vdf3 =>
      _hvE_G_Vdf3 ??= GeneratedColumn<double>('hv_e_g_vdf3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_u1Meta =
      const VerificationMeta('hvE_Grnd_u1');
  GeneratedColumn<double> _hvE_Grnd_u1;
  @override
  GeneratedColumn<double> get hvE_Grnd_u1 => _hvE_Grnd_u1 ??=
      GeneratedColumn<double>('hv_e_grnd_u1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_u2Meta =
      const VerificationMeta('hvE_Grnd_u2');
  GeneratedColumn<double> _hvE_Grnd_u2;
  @override
  GeneratedColumn<double> get hvE_Grnd_u2 => _hvE_Grnd_u2 ??=
      GeneratedColumn<double>('hv_e_grnd_u2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_u3Meta =
      const VerificationMeta('hvE_Grnd_u3');
  GeneratedColumn<double> _hvE_Grnd_u3;
  @override
  GeneratedColumn<double> get hvE_Grnd_u3 => _hvE_Grnd_u3 ??=
      GeneratedColumn<double>('hv_e_grnd_u3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_i1Meta =
      const VerificationMeta('hvE_Grnd_i1');
  GeneratedColumn<double> _hvE_Grnd_i1;
  @override
  GeneratedColumn<double> get hvE_Grnd_i1 => _hvE_Grnd_i1 ??=
      GeneratedColumn<double>('hv_e_grnd_i1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_i2Meta =
      const VerificationMeta('hvE_Grnd_i2');
  GeneratedColumn<double> _hvE_Grnd_i2;
  @override
  GeneratedColumn<double> get hvE_Grnd_i2 => _hvE_Grnd_i2 ??=
      GeneratedColumn<double>('hv_e_grnd_i2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_i3Meta =
      const VerificationMeta('hvE_Grnd_i3');
  GeneratedColumn<double> _hvE_Grnd_i3;
  @override
  GeneratedColumn<double> get hvE_Grnd_i3 => _hvE_Grnd_i3 ??=
      GeneratedColumn<double>('hv_e_grnd_i3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_c1Meta =
      const VerificationMeta('hvE_Grnd_c1');
  GeneratedColumn<double> _hvE_Grnd_c1;
  @override
  GeneratedColumn<double> get hvE_Grnd_c1 => _hvE_Grnd_c1 ??=
      GeneratedColumn<double>('hv_e_grnd_c1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_c2Meta =
      const VerificationMeta('hvE_Grnd_c2');
  GeneratedColumn<double> _hvE_Grnd_c2;
  @override
  GeneratedColumn<double> get hvE_Grnd_c2 => _hvE_Grnd_c2 ??=
      GeneratedColumn<double>('hv_e_grnd_c2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_c3Meta =
      const VerificationMeta('hvE_Grnd_c3');
  GeneratedColumn<double> _hvE_Grnd_c3;
  @override
  GeneratedColumn<double> get hvE_Grnd_c3 => _hvE_Grnd_c3 ??=
      GeneratedColumn<double>('hv_e_grnd_c3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_tanD1Meta =
      const VerificationMeta('hvE_Grnd_tanD1');
  GeneratedColumn<double> _hvE_Grnd_tanD1;
  @override
  GeneratedColumn<double> get hvE_Grnd_tanD1 => _hvE_Grnd_tanD1 ??=
      GeneratedColumn<double>('hv_e_grnd_tan_d1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_tanD2Meta =
      const VerificationMeta('hvE_Grnd_tanD2');
  GeneratedColumn<double> _hvE_Grnd_tanD2;
  @override
  GeneratedColumn<double> get hvE_Grnd_tanD2 => _hvE_Grnd_tanD2 ??=
      GeneratedColumn<double>('hv_e_grnd_tan_d2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_tanD3Meta =
      const VerificationMeta('hvE_Grnd_tanD3');
  GeneratedColumn<double> _hvE_Grnd_tanD3;
  @override
  GeneratedColumn<double> get hvE_Grnd_tanD3 => _hvE_Grnd_tanD3 ??=
      GeneratedColumn<double>('hv_e_grnd_tan_d3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_p1Meta =
      const VerificationMeta('hvE_Grnd_p1');
  GeneratedColumn<double> _hvE_Grnd_p1;
  @override
  GeneratedColumn<double> get hvE_Grnd_p1 => _hvE_Grnd_p1 ??=
      GeneratedColumn<double>('hv_e_grnd_p1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_p2Meta =
      const VerificationMeta('hvE_Grnd_p2');
  GeneratedColumn<double> _hvE_Grnd_p2;
  @override
  GeneratedColumn<double> get hvE_Grnd_p2 => _hvE_Grnd_p2 ??=
      GeneratedColumn<double>('hv_e_grnd_p2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_p3Meta =
      const VerificationMeta('hvE_Grnd_p3');
  GeneratedColumn<double> _hvE_Grnd_p3;
  @override
  GeneratedColumn<double> get hvE_Grnd_p3 => _hvE_Grnd_p3 ??=
      GeneratedColumn<double>('hv_e_grnd_p3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_Vdf1Meta =
      const VerificationMeta('hvE_Grnd_Vdf1');
  GeneratedColumn<double> _hvE_Grnd_Vdf1;
  @override
  GeneratedColumn<double> get hvE_Grnd_Vdf1 => _hvE_Grnd_Vdf1 ??=
      GeneratedColumn<double>('hv_e_grnd_vdf1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_Vdf2Meta =
      const VerificationMeta('hvE_Grnd_Vdf2');
  GeneratedColumn<double> _hvE_Grnd_Vdf2;
  @override
  GeneratedColumn<double> get hvE_Grnd_Vdf2 => _hvE_Grnd_Vdf2 ??=
      GeneratedColumn<double>('hv_e_grnd_vdf2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_Grnd_Vdf3Meta =
      const VerificationMeta('hvE_Grnd_Vdf3');
  GeneratedColumn<double> _hvE_Grnd_Vdf3;
  @override
  GeneratedColumn<double> get hvE_Grnd_Vdf3 => _hvE_Grnd_Vdf3 ??=
      GeneratedColumn<double>('hv_e_grnd_vdf3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEu1Meta = const VerificationMeta('lvEu1');
  GeneratedColumn<double> _lvEu1;
  @override
  GeneratedColumn<double> get lvEu1 =>
      _lvEu1 ??= GeneratedColumn<double>('lv_eu1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEu2Meta = const VerificationMeta('lvEu2');
  GeneratedColumn<double> _lvEu2;
  @override
  GeneratedColumn<double> get lvEu2 =>
      _lvEu2 ??= GeneratedColumn<double>('lv_eu2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEu3Meta = const VerificationMeta('lvEu3');
  GeneratedColumn<double> _lvEu3;
  @override
  GeneratedColumn<double> get lvEu3 =>
      _lvEu3 ??= GeneratedColumn<double>('lv_eu3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEi1Meta = const VerificationMeta('lvEi1');
  GeneratedColumn<double> _lvEi1;
  @override
  GeneratedColumn<double> get lvEi1 =>
      _lvEi1 ??= GeneratedColumn<double>('lv_ei1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEi2Meta = const VerificationMeta('lvEi2');
  GeneratedColumn<double> _lvEi2;
  @override
  GeneratedColumn<double> get lvEi2 =>
      _lvEi2 ??= GeneratedColumn<double>('lv_ei2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEi3Meta = const VerificationMeta('lvEi3');
  GeneratedColumn<double> _lvEi3;
  @override
  GeneratedColumn<double> get lvEi3 =>
      _lvEi3 ??= GeneratedColumn<double>('lv_ei3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEc1Meta = const VerificationMeta('lvEc1');
  GeneratedColumn<double> _lvEc1;
  @override
  GeneratedColumn<double> get lvEc1 =>
      _lvEc1 ??= GeneratedColumn<double>('lv_ec1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEc2Meta = const VerificationMeta('lvEc2');
  GeneratedColumn<double> _lvEc2;
  @override
  GeneratedColumn<double> get lvEc2 =>
      _lvEc2 ??= GeneratedColumn<double>('lv_ec2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEc3Meta = const VerificationMeta('lvEc3');
  GeneratedColumn<double> _lvEc3;
  @override
  GeneratedColumn<double> get lvEc3 =>
      _lvEc3 ??= GeneratedColumn<double>('lv_ec3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEtanD1Meta = const VerificationMeta('lvEtanD1');
  GeneratedColumn<double> _lvEtanD1;
  @override
  GeneratedColumn<double> get lvEtanD1 =>
      _lvEtanD1 ??= GeneratedColumn<double>('lv_etan_d1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEtanD2Meta = const VerificationMeta('lvEtanD2');
  GeneratedColumn<double> _lvEtanD2;
  @override
  GeneratedColumn<double> get lvEtanD2 =>
      _lvEtanD2 ??= GeneratedColumn<double>('lv_etan_d2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEtanD3Meta = const VerificationMeta('lvEtanD3');
  GeneratedColumn<double> _lvEtanD3;
  @override
  GeneratedColumn<double> get lvEtanD3 =>
      _lvEtanD3 ??= GeneratedColumn<double>('lv_etan_d3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEp1Meta = const VerificationMeta('lvEp1');
  GeneratedColumn<double> _lvEp1;
  @override
  GeneratedColumn<double> get lvEp1 =>
      _lvEp1 ??= GeneratedColumn<double>('lv_ep1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEp2Meta = const VerificationMeta('lvEp2');
  GeneratedColumn<double> _lvEp2;
  @override
  GeneratedColumn<double> get lvEp2 =>
      _lvEp2 ??= GeneratedColumn<double>('lv_ep2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEp3Meta = const VerificationMeta('lvEp3');
  GeneratedColumn<double> _lvEp3;
  @override
  GeneratedColumn<double> get lvEp3 =>
      _lvEp3 ??= GeneratedColumn<double>('lv_ep3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEVdf1Meta = const VerificationMeta('lvEVdf1');
  GeneratedColumn<double> _lvEVdf1;
  @override
  GeneratedColumn<double> get lvEVdf1 =>
      _lvEVdf1 ??= GeneratedColumn<double>('lv_e_vdf1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEVdf2Meta = const VerificationMeta('lvEVdf2');
  GeneratedColumn<double> _lvEVdf2;
  @override
  GeneratedColumn<double> get lvEVdf2 =>
      _lvEVdf2 ??= GeneratedColumn<double>('lv_e_vdf2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvEVdf3Meta = const VerificationMeta('lvEVdf3');
  GeneratedColumn<double> _lvEVdf3;
  @override
  GeneratedColumn<double> get lvEVdf3 =>
      _lvEVdf3 ??= GeneratedColumn<double>('lv_e_vdf3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_u1Meta = const VerificationMeta('lvE_G_u1');
  GeneratedColumn<double> _lvE_G_u1;
  @override
  GeneratedColumn<double> get lvE_G_u1 =>
      _lvE_G_u1 ??= GeneratedColumn<double>('lv_e_g_u1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_u2Meta = const VerificationMeta('lvE_G_u2');
  GeneratedColumn<double> _lvE_G_u2;
  @override
  GeneratedColumn<double> get lvE_G_u2 =>
      _lvE_G_u2 ??= GeneratedColumn<double>('lv_e_g_u2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_u3Meta = const VerificationMeta('lvE_G_u3');
  GeneratedColumn<double> _lvE_G_u3;
  @override
  GeneratedColumn<double> get lvE_G_u3 =>
      _lvE_G_u3 ??= GeneratedColumn<double>('lv_e_g_u3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_i1Meta = const VerificationMeta('lvE_G_i1');
  GeneratedColumn<double> _lvE_G_i1;
  @override
  GeneratedColumn<double> get lvE_G_i1 =>
      _lvE_G_i1 ??= GeneratedColumn<double>('lv_e_g_i1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_i2Meta = const VerificationMeta('lvE_G_i2');
  GeneratedColumn<double> _lvE_G_i2;
  @override
  GeneratedColumn<double> get lvE_G_i2 =>
      _lvE_G_i2 ??= GeneratedColumn<double>('lv_e_g_i2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_i3Meta = const VerificationMeta('lvE_G_i3');
  GeneratedColumn<double> _lvE_G_i3;
  @override
  GeneratedColumn<double> get lvE_G_i3 =>
      _lvE_G_i3 ??= GeneratedColumn<double>('lv_e_g_i3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_c1Meta = const VerificationMeta('lvE_G_c1');
  GeneratedColumn<double> _lvE_G_c1;
  @override
  GeneratedColumn<double> get lvE_G_c1 =>
      _lvE_G_c1 ??= GeneratedColumn<double>('lv_e_g_c1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_c2Meta = const VerificationMeta('lvE_G_c2');
  GeneratedColumn<double> _lvE_G_c2;
  @override
  GeneratedColumn<double> get lvE_G_c2 =>
      _lvE_G_c2 ??= GeneratedColumn<double>('lv_e_g_c2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_c3Meta = const VerificationMeta('lvE_G_c3');
  GeneratedColumn<double> _lvE_G_c3;
  @override
  GeneratedColumn<double> get lvE_G_c3 =>
      _lvE_G_c3 ??= GeneratedColumn<double>('lv_e_g_c3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_tanD1Meta =
      const VerificationMeta('lvE_G_tanD1');
  GeneratedColumn<double> _lvE_G_tanD1;
  @override
  GeneratedColumn<double> get lvE_G_tanD1 => _lvE_G_tanD1 ??=
      GeneratedColumn<double>('lv_e_g_tan_d1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_tanD2Meta =
      const VerificationMeta('lvE_G_tanD2');
  GeneratedColumn<double> _lvE_G_tanD2;
  @override
  GeneratedColumn<double> get lvE_G_tanD2 => _lvE_G_tanD2 ??=
      GeneratedColumn<double>('lv_e_g_tan_d2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_tanD3Meta =
      const VerificationMeta('lvE_G_tanD3');
  GeneratedColumn<double> _lvE_G_tanD3;
  @override
  GeneratedColumn<double> get lvE_G_tanD3 => _lvE_G_tanD3 ??=
      GeneratedColumn<double>('lv_e_g_tan_d3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_p1Meta = const VerificationMeta('lvE_G_p1');
  GeneratedColumn<double> _lvE_G_p1;
  @override
  GeneratedColumn<double> get lvE_G_p1 =>
      _lvE_G_p1 ??= GeneratedColumn<double>('lv_e_g_p1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_p2Meta = const VerificationMeta('lvE_G_p2');
  GeneratedColumn<double> _lvE_G_p2;
  @override
  GeneratedColumn<double> get lvE_G_p2 =>
      _lvE_G_p2 ??= GeneratedColumn<double>('lv_e_g_p2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_p3Meta = const VerificationMeta('lvE_G_p3');
  GeneratedColumn<double> _lvE_G_p3;
  @override
  GeneratedColumn<double> get lvE_G_p3 =>
      _lvE_G_p3 ??= GeneratedColumn<double>('lv_e_g_p3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_Vdf1Meta = const VerificationMeta('lvE_G_Vdf1');
  GeneratedColumn<double> _lvE_G_Vdf1;
  @override
  GeneratedColumn<double> get lvE_G_Vdf1 =>
      _lvE_G_Vdf1 ??= GeneratedColumn<double>('lv_e_g_vdf1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_Vdf2Meta = const VerificationMeta('lvE_G_Vdf2');
  GeneratedColumn<double> _lvE_G_Vdf2;
  @override
  GeneratedColumn<double> get lvE_G_Vdf2 =>
      _lvE_G_Vdf2 ??= GeneratedColumn<double>('lv_e_g_vdf2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_G_Vdf3Meta = const VerificationMeta('lvE_G_Vdf3');
  GeneratedColumn<double> _lvE_G_Vdf3;
  @override
  GeneratedColumn<double> get lvE_G_Vdf3 =>
      _lvE_G_Vdf3 ??= GeneratedColumn<double>('lv_e_g_vdf3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_u1Meta =
      const VerificationMeta('lvE_Grnd_u1');
  GeneratedColumn<double> _lvE_Grnd_u1;
  @override
  GeneratedColumn<double> get lvE_Grnd_u1 => _lvE_Grnd_u1 ??=
      GeneratedColumn<double>('lv_e_grnd_u1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_u2Meta =
      const VerificationMeta('lvE_Grnd_u2');
  GeneratedColumn<double> _lvE_Grnd_u2;
  @override
  GeneratedColumn<double> get lvE_Grnd_u2 => _lvE_Grnd_u2 ??=
      GeneratedColumn<double>('lv_e_grnd_u2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_u3Meta =
      const VerificationMeta('lvE_Grnd_u3');
  GeneratedColumn<double> _lvE_Grnd_u3;
  @override
  GeneratedColumn<double> get lvE_Grnd_u3 => _lvE_Grnd_u3 ??=
      GeneratedColumn<double>('lv_e_grnd_u3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_i1Meta =
      const VerificationMeta('lvE_Grnd_i1');
  GeneratedColumn<double> _lvE_Grnd_i1;
  @override
  GeneratedColumn<double> get lvE_Grnd_i1 => _lvE_Grnd_i1 ??=
      GeneratedColumn<double>('lv_e_grnd_i1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_i2Meta =
      const VerificationMeta('lvE_Grnd_i2');
  GeneratedColumn<double> _lvE_Grnd_i2;
  @override
  GeneratedColumn<double> get lvE_Grnd_i2 => _lvE_Grnd_i2 ??=
      GeneratedColumn<double>('lv_e_grnd_i2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_i3Meta =
      const VerificationMeta('lvE_Grnd_i3');
  GeneratedColumn<double> _lvE_Grnd_i3;
  @override
  GeneratedColumn<double> get lvE_Grnd_i3 => _lvE_Grnd_i3 ??=
      GeneratedColumn<double>('lv_e_grnd_i3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_c1Meta =
      const VerificationMeta('lvE_Grnd_c1');
  GeneratedColumn<double> _lvE_Grnd_c1;
  @override
  GeneratedColumn<double> get lvE_Grnd_c1 => _lvE_Grnd_c1 ??=
      GeneratedColumn<double>('lv_e_grnd_c1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_c2Meta =
      const VerificationMeta('lvE_Grnd_c2');
  GeneratedColumn<double> _lvE_Grnd_c2;
  @override
  GeneratedColumn<double> get lvE_Grnd_c2 => _lvE_Grnd_c2 ??=
      GeneratedColumn<double>('lv_e_grnd_c2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_c3Meta =
      const VerificationMeta('lvE_Grnd_c3');
  GeneratedColumn<double> _lvE_Grnd_c3;
  @override
  GeneratedColumn<double> get lvE_Grnd_c3 => _lvE_Grnd_c3 ??=
      GeneratedColumn<double>('lv_e_grnd_c3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_tanD1Meta =
      const VerificationMeta('lvE_Grnd_tanD1');
  GeneratedColumn<double> _lvE_Grnd_tanD1;
  @override
  GeneratedColumn<double> get lvE_Grnd_tanD1 => _lvE_Grnd_tanD1 ??=
      GeneratedColumn<double>('lv_e_grnd_tan_d1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_tanD2Meta =
      const VerificationMeta('lvE_Grnd_tanD2');
  GeneratedColumn<double> _lvE_Grnd_tanD2;
  @override
  GeneratedColumn<double> get lvE_Grnd_tanD2 => _lvE_Grnd_tanD2 ??=
      GeneratedColumn<double>('lv_e_grnd_tan_d2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_tanD3Meta =
      const VerificationMeta('lvE_Grnd_tanD3');
  GeneratedColumn<double> _lvE_Grnd_tanD3;
  @override
  GeneratedColumn<double> get lvE_Grnd_tanD3 => _lvE_Grnd_tanD3 ??=
      GeneratedColumn<double>('lv_e_grnd_tan_d3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_p1Meta =
      const VerificationMeta('lvE_Grnd_p1');
  GeneratedColumn<double> _lvE_Grnd_p1;
  @override
  GeneratedColumn<double> get lvE_Grnd_p1 => _lvE_Grnd_p1 ??=
      GeneratedColumn<double>('lv_e_grnd_p1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_p2Meta =
      const VerificationMeta('lvE_Grnd_p2');
  GeneratedColumn<double> _lvE_Grnd_p2;
  @override
  GeneratedColumn<double> get lvE_Grnd_p2 => _lvE_Grnd_p2 ??=
      GeneratedColumn<double>('lv_e_grnd_p2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_p3Meta =
      const VerificationMeta('lvE_Grnd_p3');
  GeneratedColumn<double> _lvE_Grnd_p3;
  @override
  GeneratedColumn<double> get lvE_Grnd_p3 => _lvE_Grnd_p3 ??=
      GeneratedColumn<double>('lv_e_grnd_p3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_Vdf1Meta =
      const VerificationMeta('lvE_Grnd_Vdf1');
  GeneratedColumn<double> _lvE_Grnd_Vdf1;
  @override
  GeneratedColumn<double> get lvE_Grnd_Vdf1 => _lvE_Grnd_Vdf1 ??=
      GeneratedColumn<double>('lv_e_grnd_vdf1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_Vdf2Meta =
      const VerificationMeta('lvE_Grnd_Vdf2');
  GeneratedColumn<double> _lvE_Grnd_Vdf2;
  @override
  GeneratedColumn<double> get lvE_Grnd_Vdf2 => _lvE_Grnd_Vdf2 ??=
      GeneratedColumn<double>('lv_e_grnd_vdf2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_Grnd_Vdf3Meta =
      const VerificationMeta('lvE_Grnd_Vdf3');
  GeneratedColumn<double> _lvE_Grnd_Vdf3;
  @override
  GeneratedColumn<double> get lvE_Grnd_Vdf3 => _lvE_Grnd_Vdf3 ??=
      GeneratedColumn<double>('lv_e_grnd_vdf3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        ru1,
        ru2,
        ru3,
        ri1,
        ri2,
        ri3,
        rc1,
        rc2,
        rc3,
        rtanD1,
        rtanD2,
        rtanD3,
        rp1,
        rp2,
        rp3,
        rVdf1,
        rVdf2,
        rVdf3,
        yu1,
        yu2,
        yu3,
        yi1,
        yi2,
        yi3,
        yc1,
        yc2,
        yc3,
        ytanD1,
        ytanD2,
        ytanD3,
        yp1,
        yp2,
        yp3,
        yVdf1,
        yVdf2,
        yVdf3,
        bu1,
        bu2,
        bu3,
        bi1,
        bi2,
        bi3,
        bc1,
        bc2,
        bc3,
        btanD1,
        btanD2,
        btanD3,
        bp1,
        bp2,
        bp3,
        bVdf1,
        bVdf2,
        bVdf3,
        hv_lv_u1,
        hv_lv_u2,
        hv_lv_u3,
        hv_lv_i1,
        hv_lv_i2,
        hv_lv_i3,
        hv_lv_c1,
        hv_lv_c2,
        hv_lv_c3,
        hv_lv_tanD1,
        hv_lv_tanD2,
        hv_lv_tanD3,
        hv_lv_p1,
        hv_lv_p2,
        hv_lv_p3,
        hv_lv_Vdf1,
        hv_lv_Vdf2,
        hv_lv_Vdf3,
        hvE_G_u1,
        hvE_G_u2,
        hvE_G_u3,
        hvE_G_i1,
        hvE_G_i2,
        hvE_G_i3,
        hvE_G_c1,
        hvE_G_c2,
        hvE_G_c3,
        hvE_G_tanD1,
        hvE_G_tanD2,
        hvE_G_tanD3,
        hvE_G_p1,
        hvE_G_p2,
        hvE_G_p3,
        hvE_G_Vdf1,
        hvE_G_Vdf2,
        hvE_G_Vdf3,
        hvE_Grnd_u1,
        hvE_Grnd_u2,
        hvE_Grnd_u3,
        hvE_Grnd_i1,
        hvE_Grnd_i2,
        hvE_Grnd_i3,
        hvE_Grnd_c1,
        hvE_Grnd_c2,
        hvE_Grnd_c3,
        hvE_Grnd_tanD1,
        hvE_Grnd_tanD2,
        hvE_Grnd_tanD3,
        hvE_Grnd_p1,
        hvE_Grnd_p2,
        hvE_Grnd_p3,
        hvE_Grnd_Vdf1,
        hvE_Grnd_Vdf2,
        hvE_Grnd_Vdf3,
        lvEu1,
        lvEu2,
        lvEu3,
        lvEi1,
        lvEi2,
        lvEi3,
        lvEc1,
        lvEc2,
        lvEc3,
        lvEtanD1,
        lvEtanD2,
        lvEtanD3,
        lvEp1,
        lvEp2,
        lvEp3,
        lvEVdf1,
        lvEVdf2,
        lvEVdf3,
        lvE_G_u1,
        lvE_G_u2,
        lvE_G_u3,
        lvE_G_i1,
        lvE_G_i2,
        lvE_G_i3,
        lvE_G_c1,
        lvE_G_c2,
        lvE_G_c3,
        lvE_G_tanD1,
        lvE_G_tanD2,
        lvE_G_tanD3,
        lvE_G_p1,
        lvE_G_p2,
        lvE_G_p3,
        lvE_G_Vdf1,
        lvE_G_Vdf2,
        lvE_G_Vdf3,
        lvE_Grnd_u1,
        lvE_Grnd_u2,
        lvE_Grnd_u3,
        lvE_Grnd_i1,
        lvE_Grnd_i2,
        lvE_Grnd_i3,
        lvE_Grnd_c1,
        lvE_Grnd_c2,
        lvE_Grnd_c3,
        lvE_Grnd_tanD1,
        lvE_Grnd_tanD2,
        lvE_Grnd_tanD3,
        lvE_Grnd_p1,
        lvE_Grnd_p2,
        lvE_Grnd_p3,
        lvE_Grnd_Vdf1,
        lvE_Grnd_Vdf2,
        lvE_Grnd_Vdf3
      ];
  @override
  String get aliasedName => _alias ?? 'powttd_local_datasource_impl';
  @override
  String get actualTableName => 'powttd_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PowttdLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('ru1')) {
      context.handle(
          _ru1Meta, ru1.isAcceptableOrUnknown(data['ru1'], _ru1Meta));
    } else if (isInserting) {
      context.missing(_ru1Meta);
    }
    if (data.containsKey('ru2')) {
      context.handle(
          _ru2Meta, ru2.isAcceptableOrUnknown(data['ru2'], _ru2Meta));
    } else if (isInserting) {
      context.missing(_ru2Meta);
    }
    if (data.containsKey('ru3')) {
      context.handle(
          _ru3Meta, ru3.isAcceptableOrUnknown(data['ru3'], _ru3Meta));
    } else if (isInserting) {
      context.missing(_ru3Meta);
    }
    if (data.containsKey('ri1')) {
      context.handle(
          _ri1Meta, ri1.isAcceptableOrUnknown(data['ri1'], _ri1Meta));
    } else if (isInserting) {
      context.missing(_ri1Meta);
    }
    if (data.containsKey('ri2')) {
      context.handle(
          _ri2Meta, ri2.isAcceptableOrUnknown(data['ri2'], _ri2Meta));
    } else if (isInserting) {
      context.missing(_ri2Meta);
    }
    if (data.containsKey('ri3')) {
      context.handle(
          _ri3Meta, ri3.isAcceptableOrUnknown(data['ri3'], _ri3Meta));
    } else if (isInserting) {
      context.missing(_ri3Meta);
    }
    if (data.containsKey('rc1')) {
      context.handle(
          _rc1Meta, rc1.isAcceptableOrUnknown(data['rc1'], _rc1Meta));
    } else if (isInserting) {
      context.missing(_rc1Meta);
    }
    if (data.containsKey('rc2')) {
      context.handle(
          _rc2Meta, rc2.isAcceptableOrUnknown(data['rc2'], _rc2Meta));
    } else if (isInserting) {
      context.missing(_rc2Meta);
    }
    if (data.containsKey('rc3')) {
      context.handle(
          _rc3Meta, rc3.isAcceptableOrUnknown(data['rc3'], _rc3Meta));
    } else if (isInserting) {
      context.missing(_rc3Meta);
    }
    if (data.containsKey('rtan_d1')) {
      context.handle(_rtanD1Meta,
          rtanD1.isAcceptableOrUnknown(data['rtan_d1'], _rtanD1Meta));
    } else if (isInserting) {
      context.missing(_rtanD1Meta);
    }
    if (data.containsKey('rtan_d2')) {
      context.handle(_rtanD2Meta,
          rtanD2.isAcceptableOrUnknown(data['rtan_d2'], _rtanD2Meta));
    } else if (isInserting) {
      context.missing(_rtanD2Meta);
    }
    if (data.containsKey('rtan_d3')) {
      context.handle(_rtanD3Meta,
          rtanD3.isAcceptableOrUnknown(data['rtan_d3'], _rtanD3Meta));
    } else if (isInserting) {
      context.missing(_rtanD3Meta);
    }
    if (data.containsKey('rp1')) {
      context.handle(
          _rp1Meta, rp1.isAcceptableOrUnknown(data['rp1'], _rp1Meta));
    } else if (isInserting) {
      context.missing(_rp1Meta);
    }
    if (data.containsKey('rp2')) {
      context.handle(
          _rp2Meta, rp2.isAcceptableOrUnknown(data['rp2'], _rp2Meta));
    } else if (isInserting) {
      context.missing(_rp2Meta);
    }
    if (data.containsKey('rp3')) {
      context.handle(
          _rp3Meta, rp3.isAcceptableOrUnknown(data['rp3'], _rp3Meta));
    } else if (isInserting) {
      context.missing(_rp3Meta);
    }
    if (data.containsKey('r_vdf1')) {
      context.handle(
          _rVdf1Meta, rVdf1.isAcceptableOrUnknown(data['r_vdf1'], _rVdf1Meta));
    } else if (isInserting) {
      context.missing(_rVdf1Meta);
    }
    if (data.containsKey('r_vdf2')) {
      context.handle(
          _rVdf2Meta, rVdf2.isAcceptableOrUnknown(data['r_vdf2'], _rVdf2Meta));
    } else if (isInserting) {
      context.missing(_rVdf2Meta);
    }
    if (data.containsKey('r_vdf3')) {
      context.handle(
          _rVdf3Meta, rVdf3.isAcceptableOrUnknown(data['r_vdf3'], _rVdf3Meta));
    } else if (isInserting) {
      context.missing(_rVdf3Meta);
    }
    if (data.containsKey('yu1')) {
      context.handle(
          _yu1Meta, yu1.isAcceptableOrUnknown(data['yu1'], _yu1Meta));
    } else if (isInserting) {
      context.missing(_yu1Meta);
    }
    if (data.containsKey('yu2')) {
      context.handle(
          _yu2Meta, yu2.isAcceptableOrUnknown(data['yu2'], _yu2Meta));
    } else if (isInserting) {
      context.missing(_yu2Meta);
    }
    if (data.containsKey('yu3')) {
      context.handle(
          _yu3Meta, yu3.isAcceptableOrUnknown(data['yu3'], _yu3Meta));
    } else if (isInserting) {
      context.missing(_yu3Meta);
    }
    if (data.containsKey('yi1')) {
      context.handle(
          _yi1Meta, yi1.isAcceptableOrUnknown(data['yi1'], _yi1Meta));
    } else if (isInserting) {
      context.missing(_yi1Meta);
    }
    if (data.containsKey('yi2')) {
      context.handle(
          _yi2Meta, yi2.isAcceptableOrUnknown(data['yi2'], _yi2Meta));
    } else if (isInserting) {
      context.missing(_yi2Meta);
    }
    if (data.containsKey('yi3')) {
      context.handle(
          _yi3Meta, yi3.isAcceptableOrUnknown(data['yi3'], _yi3Meta));
    } else if (isInserting) {
      context.missing(_yi3Meta);
    }
    if (data.containsKey('yc1')) {
      context.handle(
          _yc1Meta, yc1.isAcceptableOrUnknown(data['yc1'], _yc1Meta));
    } else if (isInserting) {
      context.missing(_yc1Meta);
    }
    if (data.containsKey('yc2')) {
      context.handle(
          _yc2Meta, yc2.isAcceptableOrUnknown(data['yc2'], _yc2Meta));
    } else if (isInserting) {
      context.missing(_yc2Meta);
    }
    if (data.containsKey('yc3')) {
      context.handle(
          _yc3Meta, yc3.isAcceptableOrUnknown(data['yc3'], _yc3Meta));
    } else if (isInserting) {
      context.missing(_yc3Meta);
    }
    if (data.containsKey('ytan_d1')) {
      context.handle(_ytanD1Meta,
          ytanD1.isAcceptableOrUnknown(data['ytan_d1'], _ytanD1Meta));
    } else if (isInserting) {
      context.missing(_ytanD1Meta);
    }
    if (data.containsKey('ytan_d2')) {
      context.handle(_ytanD2Meta,
          ytanD2.isAcceptableOrUnknown(data['ytan_d2'], _ytanD2Meta));
    } else if (isInserting) {
      context.missing(_ytanD2Meta);
    }
    if (data.containsKey('ytan_d3')) {
      context.handle(_ytanD3Meta,
          ytanD3.isAcceptableOrUnknown(data['ytan_d3'], _ytanD3Meta));
    } else if (isInserting) {
      context.missing(_ytanD3Meta);
    }
    if (data.containsKey('yp1')) {
      context.handle(
          _yp1Meta, yp1.isAcceptableOrUnknown(data['yp1'], _yp1Meta));
    } else if (isInserting) {
      context.missing(_yp1Meta);
    }
    if (data.containsKey('yp2')) {
      context.handle(
          _yp2Meta, yp2.isAcceptableOrUnknown(data['yp2'], _yp2Meta));
    } else if (isInserting) {
      context.missing(_yp2Meta);
    }
    if (data.containsKey('yp3')) {
      context.handle(
          _yp3Meta, yp3.isAcceptableOrUnknown(data['yp3'], _yp3Meta));
    } else if (isInserting) {
      context.missing(_yp3Meta);
    }
    if (data.containsKey('y_vdf1')) {
      context.handle(
          _yVdf1Meta, yVdf1.isAcceptableOrUnknown(data['y_vdf1'], _yVdf1Meta));
    } else if (isInserting) {
      context.missing(_yVdf1Meta);
    }
    if (data.containsKey('y_vdf2')) {
      context.handle(
          _yVdf2Meta, yVdf2.isAcceptableOrUnknown(data['y_vdf2'], _yVdf2Meta));
    } else if (isInserting) {
      context.missing(_yVdf2Meta);
    }
    if (data.containsKey('y_vdf3')) {
      context.handle(
          _yVdf3Meta, yVdf3.isAcceptableOrUnknown(data['y_vdf3'], _yVdf3Meta));
    } else if (isInserting) {
      context.missing(_yVdf3Meta);
    }
    if (data.containsKey('bu1')) {
      context.handle(
          _bu1Meta, bu1.isAcceptableOrUnknown(data['bu1'], _bu1Meta));
    } else if (isInserting) {
      context.missing(_bu1Meta);
    }
    if (data.containsKey('bu2')) {
      context.handle(
          _bu2Meta, bu2.isAcceptableOrUnknown(data['bu2'], _bu2Meta));
    } else if (isInserting) {
      context.missing(_bu2Meta);
    }
    if (data.containsKey('bu3')) {
      context.handle(
          _bu3Meta, bu3.isAcceptableOrUnknown(data['bu3'], _bu3Meta));
    } else if (isInserting) {
      context.missing(_bu3Meta);
    }
    if (data.containsKey('bi1')) {
      context.handle(
          _bi1Meta, bi1.isAcceptableOrUnknown(data['bi1'], _bi1Meta));
    } else if (isInserting) {
      context.missing(_bi1Meta);
    }
    if (data.containsKey('bi2')) {
      context.handle(
          _bi2Meta, bi2.isAcceptableOrUnknown(data['bi2'], _bi2Meta));
    } else if (isInserting) {
      context.missing(_bi2Meta);
    }
    if (data.containsKey('bi3')) {
      context.handle(
          _bi3Meta, bi3.isAcceptableOrUnknown(data['bi3'], _bi3Meta));
    } else if (isInserting) {
      context.missing(_bi3Meta);
    }
    if (data.containsKey('bc1')) {
      context.handle(
          _bc1Meta, bc1.isAcceptableOrUnknown(data['bc1'], _bc1Meta));
    } else if (isInserting) {
      context.missing(_bc1Meta);
    }
    if (data.containsKey('bc2')) {
      context.handle(
          _bc2Meta, bc2.isAcceptableOrUnknown(data['bc2'], _bc2Meta));
    } else if (isInserting) {
      context.missing(_bc2Meta);
    }
    if (data.containsKey('bc3')) {
      context.handle(
          _bc3Meta, bc3.isAcceptableOrUnknown(data['bc3'], _bc3Meta));
    } else if (isInserting) {
      context.missing(_bc3Meta);
    }
    if (data.containsKey('btan_d1')) {
      context.handle(_btanD1Meta,
          btanD1.isAcceptableOrUnknown(data['btan_d1'], _btanD1Meta));
    } else if (isInserting) {
      context.missing(_btanD1Meta);
    }
    if (data.containsKey('btan_d2')) {
      context.handle(_btanD2Meta,
          btanD2.isAcceptableOrUnknown(data['btan_d2'], _btanD2Meta));
    } else if (isInserting) {
      context.missing(_btanD2Meta);
    }
    if (data.containsKey('btan_d3')) {
      context.handle(_btanD3Meta,
          btanD3.isAcceptableOrUnknown(data['btan_d3'], _btanD3Meta));
    } else if (isInserting) {
      context.missing(_btanD3Meta);
    }
    if (data.containsKey('bp1')) {
      context.handle(
          _bp1Meta, bp1.isAcceptableOrUnknown(data['bp1'], _bp1Meta));
    } else if (isInserting) {
      context.missing(_bp1Meta);
    }
    if (data.containsKey('bp2')) {
      context.handle(
          _bp2Meta, bp2.isAcceptableOrUnknown(data['bp2'], _bp2Meta));
    } else if (isInserting) {
      context.missing(_bp2Meta);
    }
    if (data.containsKey('bp3')) {
      context.handle(
          _bp3Meta, bp3.isAcceptableOrUnknown(data['bp3'], _bp3Meta));
    } else if (isInserting) {
      context.missing(_bp3Meta);
    }
    if (data.containsKey('b_vdf1')) {
      context.handle(
          _bVdf1Meta, bVdf1.isAcceptableOrUnknown(data['b_vdf1'], _bVdf1Meta));
    } else if (isInserting) {
      context.missing(_bVdf1Meta);
    }
    if (data.containsKey('b_vdf2')) {
      context.handle(
          _bVdf2Meta, bVdf2.isAcceptableOrUnknown(data['b_vdf2'], _bVdf2Meta));
    } else if (isInserting) {
      context.missing(_bVdf2Meta);
    }
    if (data.containsKey('b_vdf3')) {
      context.handle(
          _bVdf3Meta, bVdf3.isAcceptableOrUnknown(data['b_vdf3'], _bVdf3Meta));
    } else if (isInserting) {
      context.missing(_bVdf3Meta);
    }
    if (data.containsKey('hv_lv_u1')) {
      context.handle(_hv_lv_u1Meta,
          hv_lv_u1.isAcceptableOrUnknown(data['hv_lv_u1'], _hv_lv_u1Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_u1Meta);
    }
    if (data.containsKey('hv_lv_u2')) {
      context.handle(_hv_lv_u2Meta,
          hv_lv_u2.isAcceptableOrUnknown(data['hv_lv_u2'], _hv_lv_u2Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_u2Meta);
    }
    if (data.containsKey('hv_lv_u3')) {
      context.handle(_hv_lv_u3Meta,
          hv_lv_u3.isAcceptableOrUnknown(data['hv_lv_u3'], _hv_lv_u3Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_u3Meta);
    }
    if (data.containsKey('hv_lv_i1')) {
      context.handle(_hv_lv_i1Meta,
          hv_lv_i1.isAcceptableOrUnknown(data['hv_lv_i1'], _hv_lv_i1Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_i1Meta);
    }
    if (data.containsKey('hv_lv_i2')) {
      context.handle(_hv_lv_i2Meta,
          hv_lv_i2.isAcceptableOrUnknown(data['hv_lv_i2'], _hv_lv_i2Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_i2Meta);
    }
    if (data.containsKey('hv_lv_i3')) {
      context.handle(_hv_lv_i3Meta,
          hv_lv_i3.isAcceptableOrUnknown(data['hv_lv_i3'], _hv_lv_i3Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_i3Meta);
    }
    if (data.containsKey('hv_lv_c1')) {
      context.handle(_hv_lv_c1Meta,
          hv_lv_c1.isAcceptableOrUnknown(data['hv_lv_c1'], _hv_lv_c1Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_c1Meta);
    }
    if (data.containsKey('hv_lv_c2')) {
      context.handle(_hv_lv_c2Meta,
          hv_lv_c2.isAcceptableOrUnknown(data['hv_lv_c2'], _hv_lv_c2Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_c2Meta);
    }
    if (data.containsKey('hv_lv_c3')) {
      context.handle(_hv_lv_c3Meta,
          hv_lv_c3.isAcceptableOrUnknown(data['hv_lv_c3'], _hv_lv_c3Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_c3Meta);
    }
    if (data.containsKey('hv_lv_tan_d1')) {
      context.handle(
          _hv_lv_tanD1Meta,
          hv_lv_tanD1.isAcceptableOrUnknown(
              data['hv_lv_tan_d1'], _hv_lv_tanD1Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_tanD1Meta);
    }
    if (data.containsKey('hv_lv_tan_d2')) {
      context.handle(
          _hv_lv_tanD2Meta,
          hv_lv_tanD2.isAcceptableOrUnknown(
              data['hv_lv_tan_d2'], _hv_lv_tanD2Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_tanD2Meta);
    }
    if (data.containsKey('hv_lv_tan_d3')) {
      context.handle(
          _hv_lv_tanD3Meta,
          hv_lv_tanD3.isAcceptableOrUnknown(
              data['hv_lv_tan_d3'], _hv_lv_tanD3Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_tanD3Meta);
    }
    if (data.containsKey('hv_lv_p1')) {
      context.handle(_hv_lv_p1Meta,
          hv_lv_p1.isAcceptableOrUnknown(data['hv_lv_p1'], _hv_lv_p1Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_p1Meta);
    }
    if (data.containsKey('hv_lv_p2')) {
      context.handle(_hv_lv_p2Meta,
          hv_lv_p2.isAcceptableOrUnknown(data['hv_lv_p2'], _hv_lv_p2Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_p2Meta);
    }
    if (data.containsKey('hv_lv_p3')) {
      context.handle(_hv_lv_p3Meta,
          hv_lv_p3.isAcceptableOrUnknown(data['hv_lv_p3'], _hv_lv_p3Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_p3Meta);
    }
    if (data.containsKey('hv_lv_vdf1')) {
      context.handle(
          _hv_lv_Vdf1Meta,
          hv_lv_Vdf1.isAcceptableOrUnknown(
              data['hv_lv_vdf1'], _hv_lv_Vdf1Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_Vdf1Meta);
    }
    if (data.containsKey('hv_lv_vdf2')) {
      context.handle(
          _hv_lv_Vdf2Meta,
          hv_lv_Vdf2.isAcceptableOrUnknown(
              data['hv_lv_vdf2'], _hv_lv_Vdf2Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_Vdf2Meta);
    }
    if (data.containsKey('hv_lv_vdf3')) {
      context.handle(
          _hv_lv_Vdf3Meta,
          hv_lv_Vdf3.isAcceptableOrUnknown(
              data['hv_lv_vdf3'], _hv_lv_Vdf3Meta));
    } else if (isInserting) {
      context.missing(_hv_lv_Vdf3Meta);
    }
    if (data.containsKey('hv_e_g_u1')) {
      context.handle(_hvE_G_u1Meta,
          hvE_G_u1.isAcceptableOrUnknown(data['hv_e_g_u1'], _hvE_G_u1Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_u1Meta);
    }
    if (data.containsKey('hv_e_g_u2')) {
      context.handle(_hvE_G_u2Meta,
          hvE_G_u2.isAcceptableOrUnknown(data['hv_e_g_u2'], _hvE_G_u2Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_u2Meta);
    }
    if (data.containsKey('hv_e_g_u3')) {
      context.handle(_hvE_G_u3Meta,
          hvE_G_u3.isAcceptableOrUnknown(data['hv_e_g_u3'], _hvE_G_u3Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_u3Meta);
    }
    if (data.containsKey('hv_e_g_i1')) {
      context.handle(_hvE_G_i1Meta,
          hvE_G_i1.isAcceptableOrUnknown(data['hv_e_g_i1'], _hvE_G_i1Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_i1Meta);
    }
    if (data.containsKey('hv_e_g_i2')) {
      context.handle(_hvE_G_i2Meta,
          hvE_G_i2.isAcceptableOrUnknown(data['hv_e_g_i2'], _hvE_G_i2Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_i2Meta);
    }
    if (data.containsKey('hv_e_g_i3')) {
      context.handle(_hvE_G_i3Meta,
          hvE_G_i3.isAcceptableOrUnknown(data['hv_e_g_i3'], _hvE_G_i3Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_i3Meta);
    }
    if (data.containsKey('hv_e_g_c1')) {
      context.handle(_hvE_G_c1Meta,
          hvE_G_c1.isAcceptableOrUnknown(data['hv_e_g_c1'], _hvE_G_c1Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_c1Meta);
    }
    if (data.containsKey('hv_e_g_c2')) {
      context.handle(_hvE_G_c2Meta,
          hvE_G_c2.isAcceptableOrUnknown(data['hv_e_g_c2'], _hvE_G_c2Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_c2Meta);
    }
    if (data.containsKey('hv_e_g_c3')) {
      context.handle(_hvE_G_c3Meta,
          hvE_G_c3.isAcceptableOrUnknown(data['hv_e_g_c3'], _hvE_G_c3Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_c3Meta);
    }
    if (data.containsKey('hv_e_g_tan_d1')) {
      context.handle(
          _hvE_G_tanD1Meta,
          hvE_G_tanD1.isAcceptableOrUnknown(
              data['hv_e_g_tan_d1'], _hvE_G_tanD1Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_tanD1Meta);
    }
    if (data.containsKey('hv_e_g_tan_d2')) {
      context.handle(
          _hvE_G_tanD2Meta,
          hvE_G_tanD2.isAcceptableOrUnknown(
              data['hv_e_g_tan_d2'], _hvE_G_tanD2Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_tanD2Meta);
    }
    if (data.containsKey('hv_e_g_tan_d3')) {
      context.handle(
          _hvE_G_tanD3Meta,
          hvE_G_tanD3.isAcceptableOrUnknown(
              data['hv_e_g_tan_d3'], _hvE_G_tanD3Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_tanD3Meta);
    }
    if (data.containsKey('hv_e_g_p1')) {
      context.handle(_hvE_G_p1Meta,
          hvE_G_p1.isAcceptableOrUnknown(data['hv_e_g_p1'], _hvE_G_p1Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_p1Meta);
    }
    if (data.containsKey('hv_e_g_p2')) {
      context.handle(_hvE_G_p2Meta,
          hvE_G_p2.isAcceptableOrUnknown(data['hv_e_g_p2'], _hvE_G_p2Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_p2Meta);
    }
    if (data.containsKey('hv_e_g_p3')) {
      context.handle(_hvE_G_p3Meta,
          hvE_G_p3.isAcceptableOrUnknown(data['hv_e_g_p3'], _hvE_G_p3Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_p3Meta);
    }
    if (data.containsKey('hv_e_g_vdf1')) {
      context.handle(
          _hvE_G_Vdf1Meta,
          hvE_G_Vdf1.isAcceptableOrUnknown(
              data['hv_e_g_vdf1'], _hvE_G_Vdf1Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_Vdf1Meta);
    }
    if (data.containsKey('hv_e_g_vdf2')) {
      context.handle(
          _hvE_G_Vdf2Meta,
          hvE_G_Vdf2.isAcceptableOrUnknown(
              data['hv_e_g_vdf2'], _hvE_G_Vdf2Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_Vdf2Meta);
    }
    if (data.containsKey('hv_e_g_vdf3')) {
      context.handle(
          _hvE_G_Vdf3Meta,
          hvE_G_Vdf3.isAcceptableOrUnknown(
              data['hv_e_g_vdf3'], _hvE_G_Vdf3Meta));
    } else if (isInserting) {
      context.missing(_hvE_G_Vdf3Meta);
    }
    if (data.containsKey('hv_e_grnd_u1')) {
      context.handle(
          _hvE_Grnd_u1Meta,
          hvE_Grnd_u1.isAcceptableOrUnknown(
              data['hv_e_grnd_u1'], _hvE_Grnd_u1Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_u1Meta);
    }
    if (data.containsKey('hv_e_grnd_u2')) {
      context.handle(
          _hvE_Grnd_u2Meta,
          hvE_Grnd_u2.isAcceptableOrUnknown(
              data['hv_e_grnd_u2'], _hvE_Grnd_u2Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_u2Meta);
    }
    if (data.containsKey('hv_e_grnd_u3')) {
      context.handle(
          _hvE_Grnd_u3Meta,
          hvE_Grnd_u3.isAcceptableOrUnknown(
              data['hv_e_grnd_u3'], _hvE_Grnd_u3Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_u3Meta);
    }
    if (data.containsKey('hv_e_grnd_i1')) {
      context.handle(
          _hvE_Grnd_i1Meta,
          hvE_Grnd_i1.isAcceptableOrUnknown(
              data['hv_e_grnd_i1'], _hvE_Grnd_i1Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_i1Meta);
    }
    if (data.containsKey('hv_e_grnd_i2')) {
      context.handle(
          _hvE_Grnd_i2Meta,
          hvE_Grnd_i2.isAcceptableOrUnknown(
              data['hv_e_grnd_i2'], _hvE_Grnd_i2Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_i2Meta);
    }
    if (data.containsKey('hv_e_grnd_i3')) {
      context.handle(
          _hvE_Grnd_i3Meta,
          hvE_Grnd_i3.isAcceptableOrUnknown(
              data['hv_e_grnd_i3'], _hvE_Grnd_i3Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_i3Meta);
    }
    if (data.containsKey('hv_e_grnd_c1')) {
      context.handle(
          _hvE_Grnd_c1Meta,
          hvE_Grnd_c1.isAcceptableOrUnknown(
              data['hv_e_grnd_c1'], _hvE_Grnd_c1Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_c1Meta);
    }
    if (data.containsKey('hv_e_grnd_c2')) {
      context.handle(
          _hvE_Grnd_c2Meta,
          hvE_Grnd_c2.isAcceptableOrUnknown(
              data['hv_e_grnd_c2'], _hvE_Grnd_c2Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_c2Meta);
    }
    if (data.containsKey('hv_e_grnd_c3')) {
      context.handle(
          _hvE_Grnd_c3Meta,
          hvE_Grnd_c3.isAcceptableOrUnknown(
              data['hv_e_grnd_c3'], _hvE_Grnd_c3Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_c3Meta);
    }
    if (data.containsKey('hv_e_grnd_tan_d1')) {
      context.handle(
          _hvE_Grnd_tanD1Meta,
          hvE_Grnd_tanD1.isAcceptableOrUnknown(
              data['hv_e_grnd_tan_d1'], _hvE_Grnd_tanD1Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_tanD1Meta);
    }
    if (data.containsKey('hv_e_grnd_tan_d2')) {
      context.handle(
          _hvE_Grnd_tanD2Meta,
          hvE_Grnd_tanD2.isAcceptableOrUnknown(
              data['hv_e_grnd_tan_d2'], _hvE_Grnd_tanD2Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_tanD2Meta);
    }
    if (data.containsKey('hv_e_grnd_tan_d3')) {
      context.handle(
          _hvE_Grnd_tanD3Meta,
          hvE_Grnd_tanD3.isAcceptableOrUnknown(
              data['hv_e_grnd_tan_d3'], _hvE_Grnd_tanD3Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_tanD3Meta);
    }
    if (data.containsKey('hv_e_grnd_p1')) {
      context.handle(
          _hvE_Grnd_p1Meta,
          hvE_Grnd_p1.isAcceptableOrUnknown(
              data['hv_e_grnd_p1'], _hvE_Grnd_p1Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_p1Meta);
    }
    if (data.containsKey('hv_e_grnd_p2')) {
      context.handle(
          _hvE_Grnd_p2Meta,
          hvE_Grnd_p2.isAcceptableOrUnknown(
              data['hv_e_grnd_p2'], _hvE_Grnd_p2Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_p2Meta);
    }
    if (data.containsKey('hv_e_grnd_p3')) {
      context.handle(
          _hvE_Grnd_p3Meta,
          hvE_Grnd_p3.isAcceptableOrUnknown(
              data['hv_e_grnd_p3'], _hvE_Grnd_p3Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_p3Meta);
    }
    if (data.containsKey('hv_e_grnd_vdf1')) {
      context.handle(
          _hvE_Grnd_Vdf1Meta,
          hvE_Grnd_Vdf1.isAcceptableOrUnknown(
              data['hv_e_grnd_vdf1'], _hvE_Grnd_Vdf1Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_Vdf1Meta);
    }
    if (data.containsKey('hv_e_grnd_vdf2')) {
      context.handle(
          _hvE_Grnd_Vdf2Meta,
          hvE_Grnd_Vdf2.isAcceptableOrUnknown(
              data['hv_e_grnd_vdf2'], _hvE_Grnd_Vdf2Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_Vdf2Meta);
    }
    if (data.containsKey('hv_e_grnd_vdf3')) {
      context.handle(
          _hvE_Grnd_Vdf3Meta,
          hvE_Grnd_Vdf3.isAcceptableOrUnknown(
              data['hv_e_grnd_vdf3'], _hvE_Grnd_Vdf3Meta));
    } else if (isInserting) {
      context.missing(_hvE_Grnd_Vdf3Meta);
    }
    if (data.containsKey('lv_eu1')) {
      context.handle(
          _lvEu1Meta, lvEu1.isAcceptableOrUnknown(data['lv_eu1'], _lvEu1Meta));
    } else if (isInserting) {
      context.missing(_lvEu1Meta);
    }
    if (data.containsKey('lv_eu2')) {
      context.handle(
          _lvEu2Meta, lvEu2.isAcceptableOrUnknown(data['lv_eu2'], _lvEu2Meta));
    } else if (isInserting) {
      context.missing(_lvEu2Meta);
    }
    if (data.containsKey('lv_eu3')) {
      context.handle(
          _lvEu3Meta, lvEu3.isAcceptableOrUnknown(data['lv_eu3'], _lvEu3Meta));
    } else if (isInserting) {
      context.missing(_lvEu3Meta);
    }
    if (data.containsKey('lv_ei1')) {
      context.handle(
          _lvEi1Meta, lvEi1.isAcceptableOrUnknown(data['lv_ei1'], _lvEi1Meta));
    } else if (isInserting) {
      context.missing(_lvEi1Meta);
    }
    if (data.containsKey('lv_ei2')) {
      context.handle(
          _lvEi2Meta, lvEi2.isAcceptableOrUnknown(data['lv_ei2'], _lvEi2Meta));
    } else if (isInserting) {
      context.missing(_lvEi2Meta);
    }
    if (data.containsKey('lv_ei3')) {
      context.handle(
          _lvEi3Meta, lvEi3.isAcceptableOrUnknown(data['lv_ei3'], _lvEi3Meta));
    } else if (isInserting) {
      context.missing(_lvEi3Meta);
    }
    if (data.containsKey('lv_ec1')) {
      context.handle(
          _lvEc1Meta, lvEc1.isAcceptableOrUnknown(data['lv_ec1'], _lvEc1Meta));
    } else if (isInserting) {
      context.missing(_lvEc1Meta);
    }
    if (data.containsKey('lv_ec2')) {
      context.handle(
          _lvEc2Meta, lvEc2.isAcceptableOrUnknown(data['lv_ec2'], _lvEc2Meta));
    } else if (isInserting) {
      context.missing(_lvEc2Meta);
    }
    if (data.containsKey('lv_ec3')) {
      context.handle(
          _lvEc3Meta, lvEc3.isAcceptableOrUnknown(data['lv_ec3'], _lvEc3Meta));
    } else if (isInserting) {
      context.missing(_lvEc3Meta);
    }
    if (data.containsKey('lv_etan_d1')) {
      context.handle(_lvEtanD1Meta,
          lvEtanD1.isAcceptableOrUnknown(data['lv_etan_d1'], _lvEtanD1Meta));
    } else if (isInserting) {
      context.missing(_lvEtanD1Meta);
    }
    if (data.containsKey('lv_etan_d2')) {
      context.handle(_lvEtanD2Meta,
          lvEtanD2.isAcceptableOrUnknown(data['lv_etan_d2'], _lvEtanD2Meta));
    } else if (isInserting) {
      context.missing(_lvEtanD2Meta);
    }
    if (data.containsKey('lv_etan_d3')) {
      context.handle(_lvEtanD3Meta,
          lvEtanD3.isAcceptableOrUnknown(data['lv_etan_d3'], _lvEtanD3Meta));
    } else if (isInserting) {
      context.missing(_lvEtanD3Meta);
    }
    if (data.containsKey('lv_ep1')) {
      context.handle(
          _lvEp1Meta, lvEp1.isAcceptableOrUnknown(data['lv_ep1'], _lvEp1Meta));
    } else if (isInserting) {
      context.missing(_lvEp1Meta);
    }
    if (data.containsKey('lv_ep2')) {
      context.handle(
          _lvEp2Meta, lvEp2.isAcceptableOrUnknown(data['lv_ep2'], _lvEp2Meta));
    } else if (isInserting) {
      context.missing(_lvEp2Meta);
    }
    if (data.containsKey('lv_ep3')) {
      context.handle(
          _lvEp3Meta, lvEp3.isAcceptableOrUnknown(data['lv_ep3'], _lvEp3Meta));
    } else if (isInserting) {
      context.missing(_lvEp3Meta);
    }
    if (data.containsKey('lv_e_vdf1')) {
      context.handle(_lvEVdf1Meta,
          lvEVdf1.isAcceptableOrUnknown(data['lv_e_vdf1'], _lvEVdf1Meta));
    } else if (isInserting) {
      context.missing(_lvEVdf1Meta);
    }
    if (data.containsKey('lv_e_vdf2')) {
      context.handle(_lvEVdf2Meta,
          lvEVdf2.isAcceptableOrUnknown(data['lv_e_vdf2'], _lvEVdf2Meta));
    } else if (isInserting) {
      context.missing(_lvEVdf2Meta);
    }
    if (data.containsKey('lv_e_vdf3')) {
      context.handle(_lvEVdf3Meta,
          lvEVdf3.isAcceptableOrUnknown(data['lv_e_vdf3'], _lvEVdf3Meta));
    } else if (isInserting) {
      context.missing(_lvEVdf3Meta);
    }
    if (data.containsKey('lv_e_g_u1')) {
      context.handle(_lvE_G_u1Meta,
          lvE_G_u1.isAcceptableOrUnknown(data['lv_e_g_u1'], _lvE_G_u1Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_u1Meta);
    }
    if (data.containsKey('lv_e_g_u2')) {
      context.handle(_lvE_G_u2Meta,
          lvE_G_u2.isAcceptableOrUnknown(data['lv_e_g_u2'], _lvE_G_u2Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_u2Meta);
    }
    if (data.containsKey('lv_e_g_u3')) {
      context.handle(_lvE_G_u3Meta,
          lvE_G_u3.isAcceptableOrUnknown(data['lv_e_g_u3'], _lvE_G_u3Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_u3Meta);
    }
    if (data.containsKey('lv_e_g_i1')) {
      context.handle(_lvE_G_i1Meta,
          lvE_G_i1.isAcceptableOrUnknown(data['lv_e_g_i1'], _lvE_G_i1Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_i1Meta);
    }
    if (data.containsKey('lv_e_g_i2')) {
      context.handle(_lvE_G_i2Meta,
          lvE_G_i2.isAcceptableOrUnknown(data['lv_e_g_i2'], _lvE_G_i2Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_i2Meta);
    }
    if (data.containsKey('lv_e_g_i3')) {
      context.handle(_lvE_G_i3Meta,
          lvE_G_i3.isAcceptableOrUnknown(data['lv_e_g_i3'], _lvE_G_i3Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_i3Meta);
    }
    if (data.containsKey('lv_e_g_c1')) {
      context.handle(_lvE_G_c1Meta,
          lvE_G_c1.isAcceptableOrUnknown(data['lv_e_g_c1'], _lvE_G_c1Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_c1Meta);
    }
    if (data.containsKey('lv_e_g_c2')) {
      context.handle(_lvE_G_c2Meta,
          lvE_G_c2.isAcceptableOrUnknown(data['lv_e_g_c2'], _lvE_G_c2Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_c2Meta);
    }
    if (data.containsKey('lv_e_g_c3')) {
      context.handle(_lvE_G_c3Meta,
          lvE_G_c3.isAcceptableOrUnknown(data['lv_e_g_c3'], _lvE_G_c3Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_c3Meta);
    }
    if (data.containsKey('lv_e_g_tan_d1')) {
      context.handle(
          _lvE_G_tanD1Meta,
          lvE_G_tanD1.isAcceptableOrUnknown(
              data['lv_e_g_tan_d1'], _lvE_G_tanD1Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_tanD1Meta);
    }
    if (data.containsKey('lv_e_g_tan_d2')) {
      context.handle(
          _lvE_G_tanD2Meta,
          lvE_G_tanD2.isAcceptableOrUnknown(
              data['lv_e_g_tan_d2'], _lvE_G_tanD2Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_tanD2Meta);
    }
    if (data.containsKey('lv_e_g_tan_d3')) {
      context.handle(
          _lvE_G_tanD3Meta,
          lvE_G_tanD3.isAcceptableOrUnknown(
              data['lv_e_g_tan_d3'], _lvE_G_tanD3Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_tanD3Meta);
    }
    if (data.containsKey('lv_e_g_p1')) {
      context.handle(_lvE_G_p1Meta,
          lvE_G_p1.isAcceptableOrUnknown(data['lv_e_g_p1'], _lvE_G_p1Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_p1Meta);
    }
    if (data.containsKey('lv_e_g_p2')) {
      context.handle(_lvE_G_p2Meta,
          lvE_G_p2.isAcceptableOrUnknown(data['lv_e_g_p2'], _lvE_G_p2Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_p2Meta);
    }
    if (data.containsKey('lv_e_g_p3')) {
      context.handle(_lvE_G_p3Meta,
          lvE_G_p3.isAcceptableOrUnknown(data['lv_e_g_p3'], _lvE_G_p3Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_p3Meta);
    }
    if (data.containsKey('lv_e_g_vdf1')) {
      context.handle(
          _lvE_G_Vdf1Meta,
          lvE_G_Vdf1.isAcceptableOrUnknown(
              data['lv_e_g_vdf1'], _lvE_G_Vdf1Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_Vdf1Meta);
    }
    if (data.containsKey('lv_e_g_vdf2')) {
      context.handle(
          _lvE_G_Vdf2Meta,
          lvE_G_Vdf2.isAcceptableOrUnknown(
              data['lv_e_g_vdf2'], _lvE_G_Vdf2Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_Vdf2Meta);
    }
    if (data.containsKey('lv_e_g_vdf3')) {
      context.handle(
          _lvE_G_Vdf3Meta,
          lvE_G_Vdf3.isAcceptableOrUnknown(
              data['lv_e_g_vdf3'], _lvE_G_Vdf3Meta));
    } else if (isInserting) {
      context.missing(_lvE_G_Vdf3Meta);
    }
    if (data.containsKey('lv_e_grnd_u1')) {
      context.handle(
          _lvE_Grnd_u1Meta,
          lvE_Grnd_u1.isAcceptableOrUnknown(
              data['lv_e_grnd_u1'], _lvE_Grnd_u1Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_u1Meta);
    }
    if (data.containsKey('lv_e_grnd_u2')) {
      context.handle(
          _lvE_Grnd_u2Meta,
          lvE_Grnd_u2.isAcceptableOrUnknown(
              data['lv_e_grnd_u2'], _lvE_Grnd_u2Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_u2Meta);
    }
    if (data.containsKey('lv_e_grnd_u3')) {
      context.handle(
          _lvE_Grnd_u3Meta,
          lvE_Grnd_u3.isAcceptableOrUnknown(
              data['lv_e_grnd_u3'], _lvE_Grnd_u3Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_u3Meta);
    }
    if (data.containsKey('lv_e_grnd_i1')) {
      context.handle(
          _lvE_Grnd_i1Meta,
          lvE_Grnd_i1.isAcceptableOrUnknown(
              data['lv_e_grnd_i1'], _lvE_Grnd_i1Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_i1Meta);
    }
    if (data.containsKey('lv_e_grnd_i2')) {
      context.handle(
          _lvE_Grnd_i2Meta,
          lvE_Grnd_i2.isAcceptableOrUnknown(
              data['lv_e_grnd_i2'], _lvE_Grnd_i2Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_i2Meta);
    }
    if (data.containsKey('lv_e_grnd_i3')) {
      context.handle(
          _lvE_Grnd_i3Meta,
          lvE_Grnd_i3.isAcceptableOrUnknown(
              data['lv_e_grnd_i3'], _lvE_Grnd_i3Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_i3Meta);
    }
    if (data.containsKey('lv_e_grnd_c1')) {
      context.handle(
          _lvE_Grnd_c1Meta,
          lvE_Grnd_c1.isAcceptableOrUnknown(
              data['lv_e_grnd_c1'], _lvE_Grnd_c1Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_c1Meta);
    }
    if (data.containsKey('lv_e_grnd_c2')) {
      context.handle(
          _lvE_Grnd_c2Meta,
          lvE_Grnd_c2.isAcceptableOrUnknown(
              data['lv_e_grnd_c2'], _lvE_Grnd_c2Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_c2Meta);
    }
    if (data.containsKey('lv_e_grnd_c3')) {
      context.handle(
          _lvE_Grnd_c3Meta,
          lvE_Grnd_c3.isAcceptableOrUnknown(
              data['lv_e_grnd_c3'], _lvE_Grnd_c3Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_c3Meta);
    }
    if (data.containsKey('lv_e_grnd_tan_d1')) {
      context.handle(
          _lvE_Grnd_tanD1Meta,
          lvE_Grnd_tanD1.isAcceptableOrUnknown(
              data['lv_e_grnd_tan_d1'], _lvE_Grnd_tanD1Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_tanD1Meta);
    }
    if (data.containsKey('lv_e_grnd_tan_d2')) {
      context.handle(
          _lvE_Grnd_tanD2Meta,
          lvE_Grnd_tanD2.isAcceptableOrUnknown(
              data['lv_e_grnd_tan_d2'], _lvE_Grnd_tanD2Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_tanD2Meta);
    }
    if (data.containsKey('lv_e_grnd_tan_d3')) {
      context.handle(
          _lvE_Grnd_tanD3Meta,
          lvE_Grnd_tanD3.isAcceptableOrUnknown(
              data['lv_e_grnd_tan_d3'], _lvE_Grnd_tanD3Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_tanD3Meta);
    }
    if (data.containsKey('lv_e_grnd_p1')) {
      context.handle(
          _lvE_Grnd_p1Meta,
          lvE_Grnd_p1.isAcceptableOrUnknown(
              data['lv_e_grnd_p1'], _lvE_Grnd_p1Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_p1Meta);
    }
    if (data.containsKey('lv_e_grnd_p2')) {
      context.handle(
          _lvE_Grnd_p2Meta,
          lvE_Grnd_p2.isAcceptableOrUnknown(
              data['lv_e_grnd_p2'], _lvE_Grnd_p2Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_p2Meta);
    }
    if (data.containsKey('lv_e_grnd_p3')) {
      context.handle(
          _lvE_Grnd_p3Meta,
          lvE_Grnd_p3.isAcceptableOrUnknown(
              data['lv_e_grnd_p3'], _lvE_Grnd_p3Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_p3Meta);
    }
    if (data.containsKey('lv_e_grnd_vdf1')) {
      context.handle(
          _lvE_Grnd_Vdf1Meta,
          lvE_Grnd_Vdf1.isAcceptableOrUnknown(
              data['lv_e_grnd_vdf1'], _lvE_Grnd_Vdf1Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_Vdf1Meta);
    }
    if (data.containsKey('lv_e_grnd_vdf2')) {
      context.handle(
          _lvE_Grnd_Vdf2Meta,
          lvE_Grnd_Vdf2.isAcceptableOrUnknown(
              data['lv_e_grnd_vdf2'], _lvE_Grnd_Vdf2Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_Vdf2Meta);
    }
    if (data.containsKey('lv_e_grnd_vdf3')) {
      context.handle(
          _lvE_Grnd_Vdf3Meta,
          lvE_Grnd_Vdf3.isAcceptableOrUnknown(
              data['lv_e_grnd_vdf3'], _lvE_Grnd_Vdf3Meta));
    } else if (isInserting) {
      context.missing(_lvE_Grnd_Vdf3Meta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PowttdLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PowttdLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PowttdLocalDatasourceImplTable createAlias(String alias) {
    return $PowttdLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class IsoLocalData extends DataClass implements Insertable<IsoLocalData> {
  final DateTime lastUpdated;
  final String TestedBy;
  final String VerifiedBy;
  final String WitnessedBy;
  final int databaseID;
  final int id;
  final String etype;
  final String designation;
  final String location;
  final String rating;
  final String make;
  final String EquipmentType;
  final String serialNo;
  final int yom;
  final int trNo;
  final DateTime dateOfTesting;
  IsoLocalData(
      {@required this.lastUpdated,
      @required this.TestedBy,
      @required this.VerifiedBy,
      @required this.WitnessedBy,
      @required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.designation,
      @required this.location,
      @required this.rating,
      @required this.make,
      @required this.EquipmentType,
      @required this.serialNo,
      @required this.yom,
      @required this.trNo,
      @required this.dateOfTesting});
  factory IsoLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return IsoLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      TestedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      VerifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      rating: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rating']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || TestedBy != null) {
      map['tested_by'] = Variable<String>(TestedBy);
    }
    if (!nullToAbsent || VerifiedBy != null) {
      map['verified_by'] = Variable<String>(VerifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || rating != null) {
      map['rating'] = Variable<String>(rating);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    return map;
  }

  IsoLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return IsoLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      TestedBy: TestedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(TestedBy),
      VerifiedBy: VerifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(VerifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      rating:
          rating == null && nullToAbsent ? const Value.absent() : Value(rating),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
    );
  }

  factory IsoLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return IsoLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      TestedBy: serializer.fromJson<String>(json['TestedBy']),
      VerifiedBy: serializer.fromJson<String>(json['VerifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      rating: serializer.fromJson<String>(json['rating']),
      make: serializer.fromJson<String>(json['make']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      yom: serializer.fromJson<int>(json['yom']),
      trNo: serializer.fromJson<int>(json['trNo']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'TestedBy': serializer.toJson<String>(TestedBy),
      'VerifiedBy': serializer.toJson<String>(VerifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'rating': serializer.toJson<String>(rating),
      'make': serializer.toJson<String>(make),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'serialNo': serializer.toJson<String>(serialNo),
      'yom': serializer.toJson<int>(yom),
      'trNo': serializer.toJson<int>(trNo),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
    };
  }

  IsoLocalData copyWith(
          {DateTime lastUpdated,
          String TestedBy,
          String VerifiedBy,
          String WitnessedBy,
          int databaseID,
          int id,
          String etype,
          String designation,
          String location,
          String rating,
          String make,
          String EquipmentType,
          String serialNo,
          int yom,
          int trNo,
          DateTime dateOfTesting}) =>
      IsoLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        TestedBy: TestedBy ?? this.TestedBy,
        VerifiedBy: VerifiedBy ?? this.VerifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        rating: rating ?? this.rating,
        make: make ?? this.make,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        serialNo: serialNo ?? this.serialNo,
        yom: yom ?? this.yom,
        trNo: trNo ?? this.trNo,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      );
  @override
  String toString() {
    return (StringBuffer('IsoLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('rating: $rating, ')
          ..write('make: $make, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('serialNo: $serialNo, ')
          ..write('yom: $yom, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      TestedBy,
      VerifiedBy,
      WitnessedBy,
      databaseID,
      id,
      etype,
      designation,
      location,
      rating,
      make,
      EquipmentType,
      serialNo,
      yom,
      trNo,
      dateOfTesting);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is IsoLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.TestedBy == this.TestedBy &&
          other.VerifiedBy == this.VerifiedBy &&
          other.WitnessedBy == this.WitnessedBy &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.rating == this.rating &&
          other.make == this.make &&
          other.EquipmentType == this.EquipmentType &&
          other.serialNo == this.serialNo &&
          other.yom == this.yom &&
          other.trNo == this.trNo &&
          other.dateOfTesting == this.dateOfTesting);
}

class IsoLocalDatasourceImplCompanion extends UpdateCompanion<IsoLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> TestedBy;
  final Value<String> VerifiedBy;
  final Value<String> WitnessedBy;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> rating;
  final Value<String> make;
  final Value<String> EquipmentType;
  final Value<String> serialNo;
  final Value<int> yom;
  final Value<int> trNo;
  final Value<DateTime> dateOfTesting;
  const IsoLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.TestedBy = const Value.absent(),
    this.VerifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.rating = const Value.absent(),
    this.make = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.yom = const Value.absent(),
    this.trNo = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
  });
  IsoLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String TestedBy,
    @required String VerifiedBy,
    @required String WitnessedBy,
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required String designation,
    @required String location,
    @required String rating,
    @required String make,
    @required String EquipmentType,
    @required String serialNo,
    @required int yom,
    @required int trNo,
    this.dateOfTesting = const Value.absent(),
  })  : TestedBy = Value(TestedBy),
        VerifiedBy = Value(VerifiedBy),
        WitnessedBy = Value(WitnessedBy),
        databaseID = Value(databaseID),
        etype = Value(etype),
        designation = Value(designation),
        location = Value(location),
        rating = Value(rating),
        make = Value(make),
        EquipmentType = Value(EquipmentType),
        serialNo = Value(serialNo),
        yom = Value(yom),
        trNo = Value(trNo);
  static Insertable<IsoLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> TestedBy,
    Expression<String> VerifiedBy,
    Expression<String> WitnessedBy,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> rating,
    Expression<String> make,
    Expression<String> EquipmentType,
    Expression<String> serialNo,
    Expression<int> yom,
    Expression<int> trNo,
    Expression<DateTime> dateOfTesting,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (TestedBy != null) 'tested_by': TestedBy,
      if (VerifiedBy != null) 'verified_by': VerifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (rating != null) 'rating': rating,
      if (make != null) 'make': make,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (serialNo != null) 'serial_no': serialNo,
      if (yom != null) 'yom': yom,
      if (trNo != null) 'tr_no': trNo,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
    });
  }

  IsoLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> TestedBy,
      Value<String> VerifiedBy,
      Value<String> WitnessedBy,
      Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<String> designation,
      Value<String> location,
      Value<String> rating,
      Value<String> make,
      Value<String> EquipmentType,
      Value<String> serialNo,
      Value<int> yom,
      Value<int> trNo,
      Value<DateTime> dateOfTesting}) {
    return IsoLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      TestedBy: TestedBy ?? this.TestedBy,
      VerifiedBy: VerifiedBy ?? this.VerifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      rating: rating ?? this.rating,
      make: make ?? this.make,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      serialNo: serialNo ?? this.serialNo,
      yom: yom ?? this.yom,
      trNo: trNo ?? this.trNo,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (TestedBy.present) {
      map['tested_by'] = Variable<String>(TestedBy.value);
    }
    if (VerifiedBy.present) {
      map['verified_by'] = Variable<String>(VerifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (rating.present) {
      map['rating'] = Variable<String>(rating.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('IsoLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('rating: $rating, ')
          ..write('make: $make, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('serialNo: $serialNo, ')
          ..write('yom: $yom, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }
}

class $IsoLocalDatasourceImplTable extends IsoLocalDatasourceImpl
    with TableInfo<$IsoLocalDatasourceImplTable, IsoLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $IsoLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _TestedByMeta = const VerificationMeta('TestedBy');
  GeneratedColumn<String> _TestedBy;
  @override
  GeneratedColumn<String> get TestedBy => _TestedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _VerifiedByMeta = const VerificationMeta('VerifiedBy');
  GeneratedColumn<String> _VerifiedBy;
  @override
  GeneratedColumn<String> get VerifiedBy =>
      _VerifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratingMeta = const VerificationMeta('rating');
  GeneratedColumn<String> _rating;
  @override
  GeneratedColumn<String> get rating => _rating ??= GeneratedColumn<String>(
      'rating', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        TestedBy,
        VerifiedBy,
        WitnessedBy,
        databaseID,
        id,
        etype,
        designation,
        location,
        rating,
        make,
        EquipmentType,
        serialNo,
        yom,
        trNo,
        dateOfTesting
      ];
  @override
  String get aliasedName => _alias ?? 'iso_local_datasource_impl';
  @override
  String get actualTableName => 'iso_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<IsoLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_TestedByMeta,
          TestedBy.isAcceptableOrUnknown(data['tested_by'], _TestedByMeta));
    } else if (isInserting) {
      context.missing(_TestedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _VerifiedByMeta,
          VerifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _VerifiedByMeta));
    } else if (isInserting) {
      context.missing(_VerifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('rating')) {
      context.handle(_ratingMeta,
          rating.isAcceptableOrUnknown(data['rating'], _ratingMeta));
    } else if (isInserting) {
      context.missing(_ratingMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  IsoLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return IsoLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $IsoLocalDatasourceImplTable createAlias(String alias) {
    return $IsoLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class IsoIrLocalData extends DataClass implements Insertable<IsoIrLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double rr;
  final double yy;
  final double bb;
  final double re;
  final double ye;
  final double be;
  final double ry;
  final double yb;
  final double br;
  IsoIrLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.rr,
      @required this.yy,
      @required this.bb,
      @required this.re,
      @required this.ye,
      @required this.be,
      @required this.ry,
      @required this.yb,
      @required this.br});
  factory IsoIrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return IsoIrLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      rr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rr']),
      yy: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yy']),
      bb: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bb']),
      re: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}re']),
      ye: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ye']),
      be: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}be']),
      ry: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry']),
      yb: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb']),
      br: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || rr != null) {
      map['rr'] = Variable<double>(rr);
    }
    if (!nullToAbsent || yy != null) {
      map['yy'] = Variable<double>(yy);
    }
    if (!nullToAbsent || bb != null) {
      map['bb'] = Variable<double>(bb);
    }
    if (!nullToAbsent || re != null) {
      map['re'] = Variable<double>(re);
    }
    if (!nullToAbsent || ye != null) {
      map['ye'] = Variable<double>(ye);
    }
    if (!nullToAbsent || be != null) {
      map['be'] = Variable<double>(be);
    }
    if (!nullToAbsent || ry != null) {
      map['ry'] = Variable<double>(ry);
    }
    if (!nullToAbsent || yb != null) {
      map['yb'] = Variable<double>(yb);
    }
    if (!nullToAbsent || br != null) {
      map['br'] = Variable<double>(br);
    }
    return map;
  }

  IsoIrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return IsoIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      rr: rr == null && nullToAbsent ? const Value.absent() : Value(rr),
      yy: yy == null && nullToAbsent ? const Value.absent() : Value(yy),
      bb: bb == null && nullToAbsent ? const Value.absent() : Value(bb),
      re: re == null && nullToAbsent ? const Value.absent() : Value(re),
      ye: ye == null && nullToAbsent ? const Value.absent() : Value(ye),
      be: be == null && nullToAbsent ? const Value.absent() : Value(be),
      ry: ry == null && nullToAbsent ? const Value.absent() : Value(ry),
      yb: yb == null && nullToAbsent ? const Value.absent() : Value(yb),
      br: br == null && nullToAbsent ? const Value.absent() : Value(br),
    );
  }

  factory IsoIrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return IsoIrLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      rr: serializer.fromJson<double>(json['rr']),
      yy: serializer.fromJson<double>(json['yy']),
      bb: serializer.fromJson<double>(json['bb']),
      re: serializer.fromJson<double>(json['re']),
      ye: serializer.fromJson<double>(json['ye']),
      be: serializer.fromJson<double>(json['be']),
      ry: serializer.fromJson<double>(json['ry']),
      yb: serializer.fromJson<double>(json['yb']),
      br: serializer.fromJson<double>(json['br']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'rr': serializer.toJson<double>(rr),
      'yy': serializer.toJson<double>(yy),
      'bb': serializer.toJson<double>(bb),
      're': serializer.toJson<double>(re),
      'ye': serializer.toJson<double>(ye),
      'be': serializer.toJson<double>(be),
      'ry': serializer.toJson<double>(ry),
      'yb': serializer.toJson<double>(yb),
      'br': serializer.toJson<double>(br),
    };
  }

  IsoIrLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double rr,
          double yy,
          double bb,
          double re,
          double ye,
          double be,
          double ry,
          double yb,
          double br}) =>
      IsoIrLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        rr: rr ?? this.rr,
        yy: yy ?? this.yy,
        bb: bb ?? this.bb,
        re: re ?? this.re,
        ye: ye ?? this.ye,
        be: be ?? this.be,
        ry: ry ?? this.ry,
        yb: yb ?? this.yb,
        br: br ?? this.br,
      );
  @override
  String toString() {
    return (StringBuffer('IsoIrLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rr: $rr, ')
          ..write('yy: $yy, ')
          ..write('bb: $bb, ')
          ..write('re: $re, ')
          ..write('ye: $ye, ')
          ..write('be: $be, ')
          ..write('ry: $ry, ')
          ..write('yb: $yb, ')
          ..write('br: $br')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, serialNo, rr, yy, bb, re, ye, be, ry, yb, br);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is IsoIrLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.rr == this.rr &&
          other.yy == this.yy &&
          other.bb == this.bb &&
          other.re == this.re &&
          other.ye == this.ye &&
          other.be == this.be &&
          other.ry == this.ry &&
          other.yb == this.yb &&
          other.br == this.br);
}

class IsoIrLocalDatasourceImplCompanion
    extends UpdateCompanion<IsoIrLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> rr;
  final Value<double> yy;
  final Value<double> bb;
  final Value<double> re;
  final Value<double> ye;
  final Value<double> be;
  final Value<double> ry;
  final Value<double> yb;
  final Value<double> br;
  const IsoIrLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.rr = const Value.absent(),
    this.yy = const Value.absent(),
    this.bb = const Value.absent(),
    this.re = const Value.absent(),
    this.ye = const Value.absent(),
    this.be = const Value.absent(),
    this.ry = const Value.absent(),
    this.yb = const Value.absent(),
    this.br = const Value.absent(),
  });
  IsoIrLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double rr,
    @required double yy,
    @required double bb,
    @required double re,
    @required double ye,
    @required double be,
    @required double ry,
    @required double yb,
    @required double br,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        rr = Value(rr),
        yy = Value(yy),
        bb = Value(bb),
        re = Value(re),
        ye = Value(ye),
        be = Value(be),
        ry = Value(ry),
        yb = Value(yb),
        br = Value(br);
  static Insertable<IsoIrLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> rr,
    Expression<double> yy,
    Expression<double> bb,
    Expression<double> re,
    Expression<double> ye,
    Expression<double> be,
    Expression<double> ry,
    Expression<double> yb,
    Expression<double> br,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (rr != null) 'rr': rr,
      if (yy != null) 'yy': yy,
      if (bb != null) 'bb': bb,
      if (re != null) 're': re,
      if (ye != null) 'ye': ye,
      if (be != null) 'be': be,
      if (ry != null) 'ry': ry,
      if (yb != null) 'yb': yb,
      if (br != null) 'br': br,
    });
  }

  IsoIrLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> rr,
      Value<double> yy,
      Value<double> bb,
      Value<double> re,
      Value<double> ye,
      Value<double> be,
      Value<double> ry,
      Value<double> yb,
      Value<double> br}) {
    return IsoIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      rr: rr ?? this.rr,
      yy: yy ?? this.yy,
      bb: bb ?? this.bb,
      re: re ?? this.re,
      ye: ye ?? this.ye,
      be: be ?? this.be,
      ry: ry ?? this.ry,
      yb: yb ?? this.yb,
      br: br ?? this.br,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (rr.present) {
      map['rr'] = Variable<double>(rr.value);
    }
    if (yy.present) {
      map['yy'] = Variable<double>(yy.value);
    }
    if (bb.present) {
      map['bb'] = Variable<double>(bb.value);
    }
    if (re.present) {
      map['re'] = Variable<double>(re.value);
    }
    if (ye.present) {
      map['ye'] = Variable<double>(ye.value);
    }
    if (be.present) {
      map['be'] = Variable<double>(be.value);
    }
    if (ry.present) {
      map['ry'] = Variable<double>(ry.value);
    }
    if (yb.present) {
      map['yb'] = Variable<double>(yb.value);
    }
    if (br.present) {
      map['br'] = Variable<double>(br.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('IsoIrLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rr: $rr, ')
          ..write('yy: $yy, ')
          ..write('bb: $bb, ')
          ..write('re: $re, ')
          ..write('ye: $ye, ')
          ..write('be: $be, ')
          ..write('ry: $ry, ')
          ..write('yb: $yb, ')
          ..write('br: $br')
          ..write(')'))
        .toString();
  }
}

class $IsoIrLocalDatasourceImplTable extends IsoIrLocalDatasourceImpl
    with TableInfo<$IsoIrLocalDatasourceImplTable, IsoIrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $IsoIrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rrMeta = const VerificationMeta('rr');
  GeneratedColumn<double> _rr;
  @override
  GeneratedColumn<double> get rr =>
      _rr ??= GeneratedColumn<double>('rr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yyMeta = const VerificationMeta('yy');
  GeneratedColumn<double> _yy;
  @override
  GeneratedColumn<double> get yy =>
      _yy ??= GeneratedColumn<double>('yy', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bbMeta = const VerificationMeta('bb');
  GeneratedColumn<double> _bb;
  @override
  GeneratedColumn<double> get bb =>
      _bb ??= GeneratedColumn<double>('bb', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _reMeta = const VerificationMeta('re');
  GeneratedColumn<double> _re;
  @override
  GeneratedColumn<double> get re =>
      _re ??= GeneratedColumn<double>('re', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yeMeta = const VerificationMeta('ye');
  GeneratedColumn<double> _ye;
  @override
  GeneratedColumn<double> get ye =>
      _ye ??= GeneratedColumn<double>('ye', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _beMeta = const VerificationMeta('be');
  GeneratedColumn<double> _be;
  @override
  GeneratedColumn<double> get be =>
      _be ??= GeneratedColumn<double>('be', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ryMeta = const VerificationMeta('ry');
  GeneratedColumn<double> _ry;
  @override
  GeneratedColumn<double> get ry =>
      _ry ??= GeneratedColumn<double>('ry', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ybMeta = const VerificationMeta('yb');
  GeneratedColumn<double> _yb;
  @override
  GeneratedColumn<double> get yb =>
      _yb ??= GeneratedColumn<double>('yb', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _brMeta = const VerificationMeta('br');
  GeneratedColumn<double> _br;
  @override
  GeneratedColumn<double> get br =>
      _br ??= GeneratedColumn<double>('br', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        rr,
        yy,
        bb,
        re,
        ye,
        be,
        ry,
        yb,
        br
      ];
  @override
  String get aliasedName => _alias ?? 'iso_ir_local_datasource_impl';
  @override
  String get actualTableName => 'iso_ir_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<IsoIrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('rr')) {
      context.handle(_rrMeta, rr.isAcceptableOrUnknown(data['rr'], _rrMeta));
    } else if (isInserting) {
      context.missing(_rrMeta);
    }
    if (data.containsKey('yy')) {
      context.handle(_yyMeta, yy.isAcceptableOrUnknown(data['yy'], _yyMeta));
    } else if (isInserting) {
      context.missing(_yyMeta);
    }
    if (data.containsKey('bb')) {
      context.handle(_bbMeta, bb.isAcceptableOrUnknown(data['bb'], _bbMeta));
    } else if (isInserting) {
      context.missing(_bbMeta);
    }
    if (data.containsKey('re')) {
      context.handle(_reMeta, re.isAcceptableOrUnknown(data['re'], _reMeta));
    } else if (isInserting) {
      context.missing(_reMeta);
    }
    if (data.containsKey('ye')) {
      context.handle(_yeMeta, ye.isAcceptableOrUnknown(data['ye'], _yeMeta));
    } else if (isInserting) {
      context.missing(_yeMeta);
    }
    if (data.containsKey('be')) {
      context.handle(_beMeta, be.isAcceptableOrUnknown(data['be'], _beMeta));
    } else if (isInserting) {
      context.missing(_beMeta);
    }
    if (data.containsKey('ry')) {
      context.handle(_ryMeta, ry.isAcceptableOrUnknown(data['ry'], _ryMeta));
    } else if (isInserting) {
      context.missing(_ryMeta);
    }
    if (data.containsKey('yb')) {
      context.handle(_ybMeta, yb.isAcceptableOrUnknown(data['yb'], _ybMeta));
    } else if (isInserting) {
      context.missing(_ybMeta);
    }
    if (data.containsKey('br')) {
      context.handle(_brMeta, br.isAcceptableOrUnknown(data['br'], _brMeta));
    } else if (isInserting) {
      context.missing(_brMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  IsoIrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return IsoIrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $IsoIrLocalDatasourceImplTable createAlias(String alias) {
    return $IsoIrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class IsoCrLocalData extends DataClass implements Insertable<IsoCrLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double rr;
  final double yy;
  final double bb;
  IsoCrLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.rr,
      @required this.yy,
      @required this.bb});
  factory IsoCrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return IsoCrLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      rr: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rr']),
      yy: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yy']),
      bb: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bb']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || rr != null) {
      map['rr'] = Variable<double>(rr);
    }
    if (!nullToAbsent || yy != null) {
      map['yy'] = Variable<double>(yy);
    }
    if (!nullToAbsent || bb != null) {
      map['bb'] = Variable<double>(bb);
    }
    return map;
  }

  IsoCrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return IsoCrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      rr: rr == null && nullToAbsent ? const Value.absent() : Value(rr),
      yy: yy == null && nullToAbsent ? const Value.absent() : Value(yy),
      bb: bb == null && nullToAbsent ? const Value.absent() : Value(bb),
    );
  }

  factory IsoCrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return IsoCrLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      rr: serializer.fromJson<double>(json['rr']),
      yy: serializer.fromJson<double>(json['yy']),
      bb: serializer.fromJson<double>(json['bb']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'rr': serializer.toJson<double>(rr),
      'yy': serializer.toJson<double>(yy),
      'bb': serializer.toJson<double>(bb),
    };
  }

  IsoCrLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double rr,
          double yy,
          double bb}) =>
      IsoCrLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        rr: rr ?? this.rr,
        yy: yy ?? this.yy,
        bb: bb ?? this.bb,
      );
  @override
  String toString() {
    return (StringBuffer('IsoCrLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rr: $rr, ')
          ..write('yy: $yy, ')
          ..write('bb: $bb')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated, EquipmentType, databaseID, id, trNo, serialNo, rr, yy, bb);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is IsoCrLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.rr == this.rr &&
          other.yy == this.yy &&
          other.bb == this.bb);
}

class IsoCrLocalDatasourceImplCompanion
    extends UpdateCompanion<IsoCrLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> rr;
  final Value<double> yy;
  final Value<double> bb;
  const IsoCrLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.rr = const Value.absent(),
    this.yy = const Value.absent(),
    this.bb = const Value.absent(),
  });
  IsoCrLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double rr,
    @required double yy,
    @required double bb,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        rr = Value(rr),
        yy = Value(yy),
        bb = Value(bb);
  static Insertable<IsoCrLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> rr,
    Expression<double> yy,
    Expression<double> bb,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (rr != null) 'rr': rr,
      if (yy != null) 'yy': yy,
      if (bb != null) 'bb': bb,
    });
  }

  IsoCrLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> rr,
      Value<double> yy,
      Value<double> bb}) {
    return IsoCrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      rr: rr ?? this.rr,
      yy: yy ?? this.yy,
      bb: bb ?? this.bb,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (rr.present) {
      map['rr'] = Variable<double>(rr.value);
    }
    if (yy.present) {
      map['yy'] = Variable<double>(yy.value);
    }
    if (bb.present) {
      map['bb'] = Variable<double>(bb.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('IsoCrLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rr: $rr, ')
          ..write('yy: $yy, ')
          ..write('bb: $bb')
          ..write(')'))
        .toString();
  }
}

class $IsoCrLocalDatasourceImplTable extends IsoCrLocalDatasourceImpl
    with TableInfo<$IsoCrLocalDatasourceImplTable, IsoCrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $IsoCrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rrMeta = const VerificationMeta('rr');
  GeneratedColumn<double> _rr;
  @override
  GeneratedColumn<double> get rr =>
      _rr ??= GeneratedColumn<double>('rr', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yyMeta = const VerificationMeta('yy');
  GeneratedColumn<double> _yy;
  @override
  GeneratedColumn<double> get yy =>
      _yy ??= GeneratedColumn<double>('yy', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bbMeta = const VerificationMeta('bb');
  GeneratedColumn<double> _bb;
  @override
  GeneratedColumn<double> get bb =>
      _bb ??= GeneratedColumn<double>('bb', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [lastUpdated, EquipmentType, databaseID, id, trNo, serialNo, rr, yy, bb];
  @override
  String get aliasedName => _alias ?? 'iso_cr_local_datasource_impl';
  @override
  String get actualTableName => 'iso_cr_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<IsoCrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('rr')) {
      context.handle(_rrMeta, rr.isAcceptableOrUnknown(data['rr'], _rrMeta));
    } else if (isInserting) {
      context.missing(_rrMeta);
    }
    if (data.containsKey('yy')) {
      context.handle(_yyMeta, yy.isAcceptableOrUnknown(data['yy'], _yyMeta));
    } else if (isInserting) {
      context.missing(_yyMeta);
    }
    if (data.containsKey('bb')) {
      context.handle(_bbMeta, bb.isAcceptableOrUnknown(data['bb'], _bbMeta));
    } else if (isInserting) {
      context.missing(_bbMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  IsoCrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return IsoCrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $IsoCrLocalDatasourceImplTable createAlias(String alias) {
    return $IsoCrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class LaLocalData extends DataClass implements Insertable<LaLocalData> {
  final DateTime lastUpdated;
  final String TestedBy;
  final String VerifiedBy;
  final String WitnessedBy;
  final int databaseID;
  final int id;
  final String etype;
  final String designation;
  final String location;
  final String rating;
  final String make;
  final String EquipmentType;
  final String serialNo;
  final int yom;
  final int trNo;
  final DateTime dateOfTesting;
  LaLocalData(
      {@required this.lastUpdated,
      @required this.TestedBy,
      @required this.VerifiedBy,
      @required this.WitnessedBy,
      @required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.designation,
      @required this.location,
      @required this.rating,
      @required this.make,
      @required this.EquipmentType,
      @required this.serialNo,
      @required this.yom,
      @required this.trNo,
      @required this.dateOfTesting});
  factory LaLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return LaLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      TestedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      VerifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      rating: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rating']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || TestedBy != null) {
      map['tested_by'] = Variable<String>(TestedBy);
    }
    if (!nullToAbsent || VerifiedBy != null) {
      map['verified_by'] = Variable<String>(VerifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || rating != null) {
      map['rating'] = Variable<String>(rating);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    return map;
  }

  LaLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return LaLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      TestedBy: TestedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(TestedBy),
      VerifiedBy: VerifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(VerifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      rating:
          rating == null && nullToAbsent ? const Value.absent() : Value(rating),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
    );
  }

  factory LaLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return LaLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      TestedBy: serializer.fromJson<String>(json['TestedBy']),
      VerifiedBy: serializer.fromJson<String>(json['VerifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      rating: serializer.fromJson<String>(json['rating']),
      make: serializer.fromJson<String>(json['make']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      yom: serializer.fromJson<int>(json['yom']),
      trNo: serializer.fromJson<int>(json['trNo']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'TestedBy': serializer.toJson<String>(TestedBy),
      'VerifiedBy': serializer.toJson<String>(VerifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'rating': serializer.toJson<String>(rating),
      'make': serializer.toJson<String>(make),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'serialNo': serializer.toJson<String>(serialNo),
      'yom': serializer.toJson<int>(yom),
      'trNo': serializer.toJson<int>(trNo),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
    };
  }

  LaLocalData copyWith(
          {DateTime lastUpdated,
          String TestedBy,
          String VerifiedBy,
          String WitnessedBy,
          int databaseID,
          int id,
          String etype,
          String designation,
          String location,
          String rating,
          String make,
          String EquipmentType,
          String serialNo,
          int yom,
          int trNo,
          DateTime dateOfTesting}) =>
      LaLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        TestedBy: TestedBy ?? this.TestedBy,
        VerifiedBy: VerifiedBy ?? this.VerifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        rating: rating ?? this.rating,
        make: make ?? this.make,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        serialNo: serialNo ?? this.serialNo,
        yom: yom ?? this.yom,
        trNo: trNo ?? this.trNo,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      );
  @override
  String toString() {
    return (StringBuffer('LaLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('rating: $rating, ')
          ..write('make: $make, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('serialNo: $serialNo, ')
          ..write('yom: $yom, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      TestedBy,
      VerifiedBy,
      WitnessedBy,
      databaseID,
      id,
      etype,
      designation,
      location,
      rating,
      make,
      EquipmentType,
      serialNo,
      yom,
      trNo,
      dateOfTesting);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is LaLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.TestedBy == this.TestedBy &&
          other.VerifiedBy == this.VerifiedBy &&
          other.WitnessedBy == this.WitnessedBy &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.rating == this.rating &&
          other.make == this.make &&
          other.EquipmentType == this.EquipmentType &&
          other.serialNo == this.serialNo &&
          other.yom == this.yom &&
          other.trNo == this.trNo &&
          other.dateOfTesting == this.dateOfTesting);
}

class LaLocalDatasourceImplCompanion extends UpdateCompanion<LaLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> TestedBy;
  final Value<String> VerifiedBy;
  final Value<String> WitnessedBy;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> rating;
  final Value<String> make;
  final Value<String> EquipmentType;
  final Value<String> serialNo;
  final Value<int> yom;
  final Value<int> trNo;
  final Value<DateTime> dateOfTesting;
  const LaLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.TestedBy = const Value.absent(),
    this.VerifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.rating = const Value.absent(),
    this.make = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.yom = const Value.absent(),
    this.trNo = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
  });
  LaLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String TestedBy,
    @required String VerifiedBy,
    @required String WitnessedBy,
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required String designation,
    @required String location,
    @required String rating,
    @required String make,
    @required String EquipmentType,
    @required String serialNo,
    @required int yom,
    @required int trNo,
    this.dateOfTesting = const Value.absent(),
  })  : TestedBy = Value(TestedBy),
        VerifiedBy = Value(VerifiedBy),
        WitnessedBy = Value(WitnessedBy),
        databaseID = Value(databaseID),
        etype = Value(etype),
        designation = Value(designation),
        location = Value(location),
        rating = Value(rating),
        make = Value(make),
        EquipmentType = Value(EquipmentType),
        serialNo = Value(serialNo),
        yom = Value(yom),
        trNo = Value(trNo);
  static Insertable<LaLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> TestedBy,
    Expression<String> VerifiedBy,
    Expression<String> WitnessedBy,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> rating,
    Expression<String> make,
    Expression<String> EquipmentType,
    Expression<String> serialNo,
    Expression<int> yom,
    Expression<int> trNo,
    Expression<DateTime> dateOfTesting,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (TestedBy != null) 'tested_by': TestedBy,
      if (VerifiedBy != null) 'verified_by': VerifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (rating != null) 'rating': rating,
      if (make != null) 'make': make,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (serialNo != null) 'serial_no': serialNo,
      if (yom != null) 'yom': yom,
      if (trNo != null) 'tr_no': trNo,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
    });
  }

  LaLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> TestedBy,
      Value<String> VerifiedBy,
      Value<String> WitnessedBy,
      Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<String> designation,
      Value<String> location,
      Value<String> rating,
      Value<String> make,
      Value<String> EquipmentType,
      Value<String> serialNo,
      Value<int> yom,
      Value<int> trNo,
      Value<DateTime> dateOfTesting}) {
    return LaLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      TestedBy: TestedBy ?? this.TestedBy,
      VerifiedBy: VerifiedBy ?? this.VerifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      rating: rating ?? this.rating,
      make: make ?? this.make,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      serialNo: serialNo ?? this.serialNo,
      yom: yom ?? this.yom,
      trNo: trNo ?? this.trNo,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (TestedBy.present) {
      map['tested_by'] = Variable<String>(TestedBy.value);
    }
    if (VerifiedBy.present) {
      map['verified_by'] = Variable<String>(VerifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (rating.present) {
      map['rating'] = Variable<String>(rating.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('LaLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('rating: $rating, ')
          ..write('make: $make, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('serialNo: $serialNo, ')
          ..write('yom: $yom, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }
}

class $LaLocalDatasourceImplTable extends LaLocalDatasourceImpl
    with TableInfo<$LaLocalDatasourceImplTable, LaLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $LaLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _TestedByMeta = const VerificationMeta('TestedBy');
  GeneratedColumn<String> _TestedBy;
  @override
  GeneratedColumn<String> get TestedBy => _TestedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _VerifiedByMeta = const VerificationMeta('VerifiedBy');
  GeneratedColumn<String> _VerifiedBy;
  @override
  GeneratedColumn<String> get VerifiedBy =>
      _VerifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratingMeta = const VerificationMeta('rating');
  GeneratedColumn<String> _rating;
  @override
  GeneratedColumn<String> get rating => _rating ??= GeneratedColumn<String>(
      'rating', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        TestedBy,
        VerifiedBy,
        WitnessedBy,
        databaseID,
        id,
        etype,
        designation,
        location,
        rating,
        make,
        EquipmentType,
        serialNo,
        yom,
        trNo,
        dateOfTesting
      ];
  @override
  String get aliasedName => _alias ?? 'la_local_datasource_impl';
  @override
  String get actualTableName => 'la_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<LaLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_TestedByMeta,
          TestedBy.isAcceptableOrUnknown(data['tested_by'], _TestedByMeta));
    } else if (isInserting) {
      context.missing(_TestedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _VerifiedByMeta,
          VerifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _VerifiedByMeta));
    } else if (isInserting) {
      context.missing(_VerifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('rating')) {
      context.handle(_ratingMeta,
          rating.isAcceptableOrUnknown(data['rating'], _ratingMeta));
    } else if (isInserting) {
      context.missing(_ratingMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  LaLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return LaLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $LaLocalDatasourceImplTable createAlias(String alias) {
    return $LaLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class LaIrLocalData extends DataClass implements Insertable<LaIrLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double seR;
  final double seY;
  final double seB;
  final double ssR;
  final double ssY;
  final double ssB;
  LaIrLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.seR,
      @required this.seY,
      @required this.seB,
      @required this.ssR,
      @required this.ssY,
      @required this.ssB});
  factory LaIrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return LaIrLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      seR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}se_r']),
      seY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}se_y']),
      seB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}se_b']),
      ssR: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ss_r']),
      ssY: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ss_y']),
      ssB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ss_b']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || seR != null) {
      map['se_r'] = Variable<double>(seR);
    }
    if (!nullToAbsent || seY != null) {
      map['se_y'] = Variable<double>(seY);
    }
    if (!nullToAbsent || seB != null) {
      map['se_b'] = Variable<double>(seB);
    }
    if (!nullToAbsent || ssR != null) {
      map['ss_r'] = Variable<double>(ssR);
    }
    if (!nullToAbsent || ssY != null) {
      map['ss_y'] = Variable<double>(ssY);
    }
    if (!nullToAbsent || ssB != null) {
      map['ss_b'] = Variable<double>(ssB);
    }
    return map;
  }

  LaIrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return LaIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      seR: seR == null && nullToAbsent ? const Value.absent() : Value(seR),
      seY: seY == null && nullToAbsent ? const Value.absent() : Value(seY),
      seB: seB == null && nullToAbsent ? const Value.absent() : Value(seB),
      ssR: ssR == null && nullToAbsent ? const Value.absent() : Value(ssR),
      ssY: ssY == null && nullToAbsent ? const Value.absent() : Value(ssY),
      ssB: ssB == null && nullToAbsent ? const Value.absent() : Value(ssB),
    );
  }

  factory LaIrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return LaIrLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      seR: serializer.fromJson<double>(json['seR']),
      seY: serializer.fromJson<double>(json['seY']),
      seB: serializer.fromJson<double>(json['seB']),
      ssR: serializer.fromJson<double>(json['ssR']),
      ssY: serializer.fromJson<double>(json['ssY']),
      ssB: serializer.fromJson<double>(json['ssB']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'seR': serializer.toJson<double>(seR),
      'seY': serializer.toJson<double>(seY),
      'seB': serializer.toJson<double>(seB),
      'ssR': serializer.toJson<double>(ssR),
      'ssY': serializer.toJson<double>(ssY),
      'ssB': serializer.toJson<double>(ssB),
    };
  }

  LaIrLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double seR,
          double seY,
          double seB,
          double ssR,
          double ssY,
          double ssB}) =>
      LaIrLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        seR: seR ?? this.seR,
        seY: seY ?? this.seY,
        seB: seB ?? this.seB,
        ssR: ssR ?? this.ssR,
        ssY: ssY ?? this.ssY,
        ssB: ssB ?? this.ssB,
      );
  @override
  String toString() {
    return (StringBuffer('LaIrLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('seR: $seR, ')
          ..write('seY: $seY, ')
          ..write('seB: $seB, ')
          ..write('ssR: $ssR, ')
          ..write('ssY: $ssY, ')
          ..write('ssB: $ssB')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, serialNo, seR, seY, seB, ssR, ssY, ssB);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is LaIrLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.seR == this.seR &&
          other.seY == this.seY &&
          other.seB == this.seB &&
          other.ssR == this.ssR &&
          other.ssY == this.ssY &&
          other.ssB == this.ssB);
}

class LaIrLocalDatasourceImplCompanion extends UpdateCompanion<LaIrLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> seR;
  final Value<double> seY;
  final Value<double> seB;
  final Value<double> ssR;
  final Value<double> ssY;
  final Value<double> ssB;
  const LaIrLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.seR = const Value.absent(),
    this.seY = const Value.absent(),
    this.seB = const Value.absent(),
    this.ssR = const Value.absent(),
    this.ssY = const Value.absent(),
    this.ssB = const Value.absent(),
  });
  LaIrLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double seR,
    @required double seY,
    @required double seB,
    @required double ssR,
    @required double ssY,
    @required double ssB,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        seR = Value(seR),
        seY = Value(seY),
        seB = Value(seB),
        ssR = Value(ssR),
        ssY = Value(ssY),
        ssB = Value(ssB);
  static Insertable<LaIrLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> seR,
    Expression<double> seY,
    Expression<double> seB,
    Expression<double> ssR,
    Expression<double> ssY,
    Expression<double> ssB,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (seR != null) 'se_r': seR,
      if (seY != null) 'se_y': seY,
      if (seB != null) 'se_b': seB,
      if (ssR != null) 'ss_r': ssR,
      if (ssY != null) 'ss_y': ssY,
      if (ssB != null) 'ss_b': ssB,
    });
  }

  LaIrLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> seR,
      Value<double> seY,
      Value<double> seB,
      Value<double> ssR,
      Value<double> ssY,
      Value<double> ssB}) {
    return LaIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      seR: seR ?? this.seR,
      seY: seY ?? this.seY,
      seB: seB ?? this.seB,
      ssR: ssR ?? this.ssR,
      ssY: ssY ?? this.ssY,
      ssB: ssB ?? this.ssB,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (seR.present) {
      map['se_r'] = Variable<double>(seR.value);
    }
    if (seY.present) {
      map['se_y'] = Variable<double>(seY.value);
    }
    if (seB.present) {
      map['se_b'] = Variable<double>(seB.value);
    }
    if (ssR.present) {
      map['ss_r'] = Variable<double>(ssR.value);
    }
    if (ssY.present) {
      map['ss_y'] = Variable<double>(ssY.value);
    }
    if (ssB.present) {
      map['ss_b'] = Variable<double>(ssB.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('LaIrLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('seR: $seR, ')
          ..write('seY: $seY, ')
          ..write('seB: $seB, ')
          ..write('ssR: $ssR, ')
          ..write('ssY: $ssY, ')
          ..write('ssB: $ssB')
          ..write(')'))
        .toString();
  }
}

class $LaIrLocalDatasourceImplTable extends LaIrLocalDatasourceImpl
    with TableInfo<$LaIrLocalDatasourceImplTable, LaIrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $LaIrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _seRMeta = const VerificationMeta('seR');
  GeneratedColumn<double> _seR;
  @override
  GeneratedColumn<double> get seR =>
      _seR ??= GeneratedColumn<double>('se_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _seYMeta = const VerificationMeta('seY');
  GeneratedColumn<double> _seY;
  @override
  GeneratedColumn<double> get seY =>
      _seY ??= GeneratedColumn<double>('se_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _seBMeta = const VerificationMeta('seB');
  GeneratedColumn<double> _seB;
  @override
  GeneratedColumn<double> get seB =>
      _seB ??= GeneratedColumn<double>('se_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ssRMeta = const VerificationMeta('ssR');
  GeneratedColumn<double> _ssR;
  @override
  GeneratedColumn<double> get ssR =>
      _ssR ??= GeneratedColumn<double>('ss_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ssYMeta = const VerificationMeta('ssY');
  GeneratedColumn<double> _ssY;
  @override
  GeneratedColumn<double> get ssY =>
      _ssY ??= GeneratedColumn<double>('ss_y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ssBMeta = const VerificationMeta('ssB');
  GeneratedColumn<double> _ssB;
  @override
  GeneratedColumn<double> get ssB =>
      _ssB ??= GeneratedColumn<double>('ss_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        seR,
        seY,
        seB,
        ssR,
        ssY,
        ssB
      ];
  @override
  String get aliasedName => _alias ?? 'la_ir_local_datasource_impl';
  @override
  String get actualTableName => 'la_ir_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<LaIrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('se_r')) {
      context.handle(
          _seRMeta, seR.isAcceptableOrUnknown(data['se_r'], _seRMeta));
    } else if (isInserting) {
      context.missing(_seRMeta);
    }
    if (data.containsKey('se_y')) {
      context.handle(
          _seYMeta, seY.isAcceptableOrUnknown(data['se_y'], _seYMeta));
    } else if (isInserting) {
      context.missing(_seYMeta);
    }
    if (data.containsKey('se_b')) {
      context.handle(
          _seBMeta, seB.isAcceptableOrUnknown(data['se_b'], _seBMeta));
    } else if (isInserting) {
      context.missing(_seBMeta);
    }
    if (data.containsKey('ss_r')) {
      context.handle(
          _ssRMeta, ssR.isAcceptableOrUnknown(data['ss_r'], _ssRMeta));
    } else if (isInserting) {
      context.missing(_ssRMeta);
    }
    if (data.containsKey('ss_y')) {
      context.handle(
          _ssYMeta, ssY.isAcceptableOrUnknown(data['ss_y'], _ssYMeta));
    } else if (isInserting) {
      context.missing(_ssYMeta);
    }
    if (data.containsKey('ss_b')) {
      context.handle(
          _ssBMeta, ssB.isAcceptableOrUnknown(data['ss_b'], _ssBMeta));
    } else if (isInserting) {
      context.missing(_ssBMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  LaIrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return LaIrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $LaIrLocalDatasourceImplTable createAlias(String alias) {
    return $LaIrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ScLocalData extends DataClass implements Insertable<ScLocalData> {
  final DateTime lastUpdated;
  final String TestedBy;
  final String VerifiedBy;
  final String WitnessedBy;
  final int databaseID;
  final int id;
  final String etype;
  final String designation;
  final String location;
  final String make;
  final String EquipmentType;
  final String serialNo;
  final int yom;
  final int trNo;
  final DateTime dateOfTesting;
  ScLocalData(
      {@required this.lastUpdated,
      @required this.TestedBy,
      @required this.VerifiedBy,
      @required this.WitnessedBy,
      @required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.designation,
      @required this.location,
      @required this.make,
      @required this.EquipmentType,
      @required this.serialNo,
      @required this.yom,
      @required this.trNo,
      @required this.dateOfTesting});
  factory ScLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ScLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      TestedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      VerifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || TestedBy != null) {
      map['tested_by'] = Variable<String>(TestedBy);
    }
    if (!nullToAbsent || VerifiedBy != null) {
      map['verified_by'] = Variable<String>(VerifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    return map;
  }

  ScLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ScLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      TestedBy: TestedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(TestedBy),
      VerifiedBy: VerifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(VerifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
    );
  }

  factory ScLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ScLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      TestedBy: serializer.fromJson<String>(json['TestedBy']),
      VerifiedBy: serializer.fromJson<String>(json['VerifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      make: serializer.fromJson<String>(json['make']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      yom: serializer.fromJson<int>(json['yom']),
      trNo: serializer.fromJson<int>(json['trNo']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'TestedBy': serializer.toJson<String>(TestedBy),
      'VerifiedBy': serializer.toJson<String>(VerifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'make': serializer.toJson<String>(make),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'serialNo': serializer.toJson<String>(serialNo),
      'yom': serializer.toJson<int>(yom),
      'trNo': serializer.toJson<int>(trNo),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
    };
  }

  ScLocalData copyWith(
          {DateTime lastUpdated,
          String TestedBy,
          String VerifiedBy,
          String WitnessedBy,
          int databaseID,
          int id,
          String etype,
          String designation,
          String location,
          String make,
          String EquipmentType,
          String serialNo,
          int yom,
          int trNo,
          DateTime dateOfTesting}) =>
      ScLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        TestedBy: TestedBy ?? this.TestedBy,
        VerifiedBy: VerifiedBy ?? this.VerifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        make: make ?? this.make,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        serialNo: serialNo ?? this.serialNo,
        yom: yom ?? this.yom,
        trNo: trNo ?? this.trNo,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      );
  @override
  String toString() {
    return (StringBuffer('ScLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('make: $make, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('serialNo: $serialNo, ')
          ..write('yom: $yom, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      TestedBy,
      VerifiedBy,
      WitnessedBy,
      databaseID,
      id,
      etype,
      designation,
      location,
      make,
      EquipmentType,
      serialNo,
      yom,
      trNo,
      dateOfTesting);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ScLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.TestedBy == this.TestedBy &&
          other.VerifiedBy == this.VerifiedBy &&
          other.WitnessedBy == this.WitnessedBy &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.make == this.make &&
          other.EquipmentType == this.EquipmentType &&
          other.serialNo == this.serialNo &&
          other.yom == this.yom &&
          other.trNo == this.trNo &&
          other.dateOfTesting == this.dateOfTesting);
}

class ScLocalDatasourceImplCompanion extends UpdateCompanion<ScLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> TestedBy;
  final Value<String> VerifiedBy;
  final Value<String> WitnessedBy;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> make;
  final Value<String> EquipmentType;
  final Value<String> serialNo;
  final Value<int> yom;
  final Value<int> trNo;
  final Value<DateTime> dateOfTesting;
  const ScLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.TestedBy = const Value.absent(),
    this.VerifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.make = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.yom = const Value.absent(),
    this.trNo = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
  });
  ScLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String TestedBy,
    @required String VerifiedBy,
    @required String WitnessedBy,
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required String designation,
    @required String location,
    @required String make,
    @required String EquipmentType,
    @required String serialNo,
    @required int yom,
    @required int trNo,
    this.dateOfTesting = const Value.absent(),
  })  : TestedBy = Value(TestedBy),
        VerifiedBy = Value(VerifiedBy),
        WitnessedBy = Value(WitnessedBy),
        databaseID = Value(databaseID),
        etype = Value(etype),
        designation = Value(designation),
        location = Value(location),
        make = Value(make),
        EquipmentType = Value(EquipmentType),
        serialNo = Value(serialNo),
        yom = Value(yom),
        trNo = Value(trNo);
  static Insertable<ScLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> TestedBy,
    Expression<String> VerifiedBy,
    Expression<String> WitnessedBy,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> make,
    Expression<String> EquipmentType,
    Expression<String> serialNo,
    Expression<int> yom,
    Expression<int> trNo,
    Expression<DateTime> dateOfTesting,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (TestedBy != null) 'tested_by': TestedBy,
      if (VerifiedBy != null) 'verified_by': VerifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (make != null) 'make': make,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (serialNo != null) 'serial_no': serialNo,
      if (yom != null) 'yom': yom,
      if (trNo != null) 'tr_no': trNo,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
    });
  }

  ScLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> TestedBy,
      Value<String> VerifiedBy,
      Value<String> WitnessedBy,
      Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<String> designation,
      Value<String> location,
      Value<String> make,
      Value<String> EquipmentType,
      Value<String> serialNo,
      Value<int> yom,
      Value<int> trNo,
      Value<DateTime> dateOfTesting}) {
    return ScLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      TestedBy: TestedBy ?? this.TestedBy,
      VerifiedBy: VerifiedBy ?? this.VerifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      make: make ?? this.make,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      serialNo: serialNo ?? this.serialNo,
      yom: yom ?? this.yom,
      trNo: trNo ?? this.trNo,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (TestedBy.present) {
      map['tested_by'] = Variable<String>(TestedBy.value);
    }
    if (VerifiedBy.present) {
      map['verified_by'] = Variable<String>(VerifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ScLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('make: $make, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('serialNo: $serialNo, ')
          ..write('yom: $yom, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }
}

class $ScLocalDatasourceImplTable extends ScLocalDatasourceImpl
    with TableInfo<$ScLocalDatasourceImplTable, ScLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ScLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _TestedByMeta = const VerificationMeta('TestedBy');
  GeneratedColumn<String> _TestedBy;
  @override
  GeneratedColumn<String> get TestedBy => _TestedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _VerifiedByMeta = const VerificationMeta('VerifiedBy');
  GeneratedColumn<String> _VerifiedBy;
  @override
  GeneratedColumn<String> get VerifiedBy =>
      _VerifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        TestedBy,
        VerifiedBy,
        WitnessedBy,
        databaseID,
        id,
        etype,
        designation,
        location,
        make,
        EquipmentType,
        serialNo,
        yom,
        trNo,
        dateOfTesting
      ];
  @override
  String get aliasedName => _alias ?? 'sc_local_datasource_impl';
  @override
  String get actualTableName => 'sc_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ScLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_TestedByMeta,
          TestedBy.isAcceptableOrUnknown(data['tested_by'], _TestedByMeta));
    } else if (isInserting) {
      context.missing(_TestedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _VerifiedByMeta,
          VerifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _VerifiedByMeta));
    } else if (isInserting) {
      context.missing(_VerifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ScLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ScLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ScLocalDatasourceImplTable createAlias(String alias) {
    return $ScLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ScCLocalData extends DataClass implements Insertable<ScCLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double rA;
  final double rB;
  final double yA;
  final double yB;
  final double bA;
  final double bB;
  ScCLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.rA,
      @required this.rB,
      @required this.yA,
      @required this.yB,
      @required this.bA,
      @required this.bB});
  factory ScCLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ScCLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      rA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_a']),
      rB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_b']),
      yA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_a']),
      yB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_b']),
      bA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_a']),
      bB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_b']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || rA != null) {
      map['r_a'] = Variable<double>(rA);
    }
    if (!nullToAbsent || rB != null) {
      map['r_b'] = Variable<double>(rB);
    }
    if (!nullToAbsent || yA != null) {
      map['y_a'] = Variable<double>(yA);
    }
    if (!nullToAbsent || yB != null) {
      map['y_b'] = Variable<double>(yB);
    }
    if (!nullToAbsent || bA != null) {
      map['b_a'] = Variable<double>(bA);
    }
    if (!nullToAbsent || bB != null) {
      map['b_b'] = Variable<double>(bB);
    }
    return map;
  }

  ScCLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ScCLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      rA: rA == null && nullToAbsent ? const Value.absent() : Value(rA),
      rB: rB == null && nullToAbsent ? const Value.absent() : Value(rB),
      yA: yA == null && nullToAbsent ? const Value.absent() : Value(yA),
      yB: yB == null && nullToAbsent ? const Value.absent() : Value(yB),
      bA: bA == null && nullToAbsent ? const Value.absent() : Value(bA),
      bB: bB == null && nullToAbsent ? const Value.absent() : Value(bB),
    );
  }

  factory ScCLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ScCLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      rA: serializer.fromJson<double>(json['rA']),
      rB: serializer.fromJson<double>(json['rB']),
      yA: serializer.fromJson<double>(json['yA']),
      yB: serializer.fromJson<double>(json['yB']),
      bA: serializer.fromJson<double>(json['bA']),
      bB: serializer.fromJson<double>(json['bB']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'rA': serializer.toJson<double>(rA),
      'rB': serializer.toJson<double>(rB),
      'yA': serializer.toJson<double>(yA),
      'yB': serializer.toJson<double>(yB),
      'bA': serializer.toJson<double>(bA),
      'bB': serializer.toJson<double>(bB),
    };
  }

  ScCLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double rA,
          double rB,
          double yA,
          double yB,
          double bA,
          double bB}) =>
      ScCLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        rA: rA ?? this.rA,
        rB: rB ?? this.rB,
        yA: yA ?? this.yA,
        yB: yB ?? this.yB,
        bA: bA ?? this.bA,
        bB: bB ?? this.bB,
      );
  @override
  String toString() {
    return (StringBuffer('ScCLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rA: $rA, ')
          ..write('rB: $rB, ')
          ..write('yA: $yA, ')
          ..write('yB: $yB, ')
          ..write('bA: $bA, ')
          ..write('bB: $bB')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, serialNo, rA, rB, yA, yB, bA, bB);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ScCLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.rA == this.rA &&
          other.rB == this.rB &&
          other.yA == this.yA &&
          other.yB == this.yB &&
          other.bA == this.bA &&
          other.bB == this.bB);
}

class ScCLocalDatasourceImplCompanion extends UpdateCompanion<ScCLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> rA;
  final Value<double> rB;
  final Value<double> yA;
  final Value<double> yB;
  final Value<double> bA;
  final Value<double> bB;
  const ScCLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.rA = const Value.absent(),
    this.rB = const Value.absent(),
    this.yA = const Value.absent(),
    this.yB = const Value.absent(),
    this.bA = const Value.absent(),
    this.bB = const Value.absent(),
  });
  ScCLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double rA,
    @required double rB,
    @required double yA,
    @required double yB,
    @required double bA,
    @required double bB,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        rA = Value(rA),
        rB = Value(rB),
        yA = Value(yA),
        yB = Value(yB),
        bA = Value(bA),
        bB = Value(bB);
  static Insertable<ScCLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> rA,
    Expression<double> rB,
    Expression<double> yA,
    Expression<double> yB,
    Expression<double> bA,
    Expression<double> bB,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (rA != null) 'r_a': rA,
      if (rB != null) 'r_b': rB,
      if (yA != null) 'y_a': yA,
      if (yB != null) 'y_b': yB,
      if (bA != null) 'b_a': bA,
      if (bB != null) 'b_b': bB,
    });
  }

  ScCLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> rA,
      Value<double> rB,
      Value<double> yA,
      Value<double> yB,
      Value<double> bA,
      Value<double> bB}) {
    return ScCLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      rA: rA ?? this.rA,
      rB: rB ?? this.rB,
      yA: yA ?? this.yA,
      yB: yB ?? this.yB,
      bA: bA ?? this.bA,
      bB: bB ?? this.bB,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (rA.present) {
      map['r_a'] = Variable<double>(rA.value);
    }
    if (rB.present) {
      map['r_b'] = Variable<double>(rB.value);
    }
    if (yA.present) {
      map['y_a'] = Variable<double>(yA.value);
    }
    if (yB.present) {
      map['y_b'] = Variable<double>(yB.value);
    }
    if (bA.present) {
      map['b_a'] = Variable<double>(bA.value);
    }
    if (bB.present) {
      map['b_b'] = Variable<double>(bB.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ScCLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rA: $rA, ')
          ..write('rB: $rB, ')
          ..write('yA: $yA, ')
          ..write('yB: $yB, ')
          ..write('bA: $bA, ')
          ..write('bB: $bB')
          ..write(')'))
        .toString();
  }
}

class $ScCLocalDatasourceImplTable extends ScCLocalDatasourceImpl
    with TableInfo<$ScCLocalDatasourceImplTable, ScCLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ScCLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rAMeta = const VerificationMeta('rA');
  GeneratedColumn<double> _rA;
  @override
  GeneratedColumn<double> get rA =>
      _rA ??= GeneratedColumn<double>('r_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rBMeta = const VerificationMeta('rB');
  GeneratedColumn<double> _rB;
  @override
  GeneratedColumn<double> get rB =>
      _rB ??= GeneratedColumn<double>('r_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yAMeta = const VerificationMeta('yA');
  GeneratedColumn<double> _yA;
  @override
  GeneratedColumn<double> get yA =>
      _yA ??= GeneratedColumn<double>('y_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yBMeta = const VerificationMeta('yB');
  GeneratedColumn<double> _yB;
  @override
  GeneratedColumn<double> get yB =>
      _yB ??= GeneratedColumn<double>('y_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bAMeta = const VerificationMeta('bA');
  GeneratedColumn<double> _bA;
  @override
  GeneratedColumn<double> get bA =>
      _bA ??= GeneratedColumn<double>('b_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bBMeta = const VerificationMeta('bB');
  GeneratedColumn<double> _bB;
  @override
  GeneratedColumn<double> get bB =>
      _bB ??= GeneratedColumn<double>('b_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        rA,
        rB,
        yA,
        yB,
        bA,
        bB
      ];
  @override
  String get aliasedName => _alias ?? 'sc_c_local_datasource_impl';
  @override
  String get actualTableName => 'sc_c_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ScCLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('r_a')) {
      context.handle(_rAMeta, rA.isAcceptableOrUnknown(data['r_a'], _rAMeta));
    } else if (isInserting) {
      context.missing(_rAMeta);
    }
    if (data.containsKey('r_b')) {
      context.handle(_rBMeta, rB.isAcceptableOrUnknown(data['r_b'], _rBMeta));
    } else if (isInserting) {
      context.missing(_rBMeta);
    }
    if (data.containsKey('y_a')) {
      context.handle(_yAMeta, yA.isAcceptableOrUnknown(data['y_a'], _yAMeta));
    } else if (isInserting) {
      context.missing(_yAMeta);
    }
    if (data.containsKey('y_b')) {
      context.handle(_yBMeta, yB.isAcceptableOrUnknown(data['y_b'], _yBMeta));
    } else if (isInserting) {
      context.missing(_yBMeta);
    }
    if (data.containsKey('b_a')) {
      context.handle(_bAMeta, bA.isAcceptableOrUnknown(data['b_a'], _bAMeta));
    } else if (isInserting) {
      context.missing(_bAMeta);
    }
    if (data.containsKey('b_b')) {
      context.handle(_bBMeta, bB.isAcceptableOrUnknown(data['b_b'], _bBMeta));
    } else if (isInserting) {
      context.missing(_bBMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ScCLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ScCLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ScCLocalDatasourceImplTable createAlias(String alias) {
    return $ScCLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PcLocalData extends DataClass implements Insertable<PcLocalData> {
  final DateTime lastUpdated;
  final String TestedBy;
  final String VerifiedBy;
  final String WitnessedBy;
  final int databaseID;
  final int id;
  final String etype;
  final String designation;
  final String location;
  final String panel;
  final String rating;
  final String make;
  final String size;
  final String length;
  final int trNo;
  final DateTime dateOfTesting;
  PcLocalData(
      {@required this.lastUpdated,
      @required this.TestedBy,
      @required this.VerifiedBy,
      @required this.WitnessedBy,
      @required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.designation,
      @required this.location,
      @required this.panel,
      @required this.rating,
      @required this.make,
      @required this.size,
      @required this.length,
      @required this.trNo,
      @required this.dateOfTesting});
  factory PcLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PcLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      TestedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      VerifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      rating: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rating']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      size: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}size']),
      length: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}length']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || TestedBy != null) {
      map['tested_by'] = Variable<String>(TestedBy);
    }
    if (!nullToAbsent || VerifiedBy != null) {
      map['verified_by'] = Variable<String>(VerifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || rating != null) {
      map['rating'] = Variable<String>(rating);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || size != null) {
      map['size'] = Variable<String>(size);
    }
    if (!nullToAbsent || length != null) {
      map['length'] = Variable<String>(length);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    return map;
  }

  PcLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PcLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      TestedBy: TestedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(TestedBy),
      VerifiedBy: VerifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(VerifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      rating:
          rating == null && nullToAbsent ? const Value.absent() : Value(rating),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      size: size == null && nullToAbsent ? const Value.absent() : Value(size),
      length:
          length == null && nullToAbsent ? const Value.absent() : Value(length),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
    );
  }

  factory PcLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PcLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      TestedBy: serializer.fromJson<String>(json['TestedBy']),
      VerifiedBy: serializer.fromJson<String>(json['VerifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      panel: serializer.fromJson<String>(json['panel']),
      rating: serializer.fromJson<String>(json['rating']),
      make: serializer.fromJson<String>(json['make']),
      size: serializer.fromJson<String>(json['size']),
      length: serializer.fromJson<String>(json['length']),
      trNo: serializer.fromJson<int>(json['trNo']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'TestedBy': serializer.toJson<String>(TestedBy),
      'VerifiedBy': serializer.toJson<String>(VerifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'panel': serializer.toJson<String>(panel),
      'rating': serializer.toJson<String>(rating),
      'make': serializer.toJson<String>(make),
      'size': serializer.toJson<String>(size),
      'length': serializer.toJson<String>(length),
      'trNo': serializer.toJson<int>(trNo),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
    };
  }

  PcLocalData copyWith(
          {DateTime lastUpdated,
          String TestedBy,
          String VerifiedBy,
          String WitnessedBy,
          int databaseID,
          int id,
          String etype,
          String designation,
          String location,
          String panel,
          String rating,
          String make,
          String size,
          String length,
          int trNo,
          DateTime dateOfTesting}) =>
      PcLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        TestedBy: TestedBy ?? this.TestedBy,
        VerifiedBy: VerifiedBy ?? this.VerifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        panel: panel ?? this.panel,
        rating: rating ?? this.rating,
        make: make ?? this.make,
        size: size ?? this.size,
        length: length ?? this.length,
        trNo: trNo ?? this.trNo,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      );
  @override
  String toString() {
    return (StringBuffer('PcLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('panel: $panel, ')
          ..write('rating: $rating, ')
          ..write('make: $make, ')
          ..write('size: $size, ')
          ..write('length: $length, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      TestedBy,
      VerifiedBy,
      WitnessedBy,
      databaseID,
      id,
      etype,
      designation,
      location,
      panel,
      rating,
      make,
      size,
      length,
      trNo,
      dateOfTesting);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PcLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.TestedBy == this.TestedBy &&
          other.VerifiedBy == this.VerifiedBy &&
          other.WitnessedBy == this.WitnessedBy &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.panel == this.panel &&
          other.rating == this.rating &&
          other.make == this.make &&
          other.size == this.size &&
          other.length == this.length &&
          other.trNo == this.trNo &&
          other.dateOfTesting == this.dateOfTesting);
}

class PcLocalDatasourceImplCompanion extends UpdateCompanion<PcLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> TestedBy;
  final Value<String> VerifiedBy;
  final Value<String> WitnessedBy;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> panel;
  final Value<String> rating;
  final Value<String> make;
  final Value<String> size;
  final Value<String> length;
  final Value<int> trNo;
  final Value<DateTime> dateOfTesting;
  const PcLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.TestedBy = const Value.absent(),
    this.VerifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.panel = const Value.absent(),
    this.rating = const Value.absent(),
    this.make = const Value.absent(),
    this.size = const Value.absent(),
    this.length = const Value.absent(),
    this.trNo = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
  });
  PcLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String TestedBy,
    @required String VerifiedBy,
    @required String WitnessedBy,
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required String designation,
    @required String location,
    @required String panel,
    @required String rating,
    @required String make,
    @required String size,
    @required String length,
    @required int trNo,
    this.dateOfTesting = const Value.absent(),
  })  : TestedBy = Value(TestedBy),
        VerifiedBy = Value(VerifiedBy),
        WitnessedBy = Value(WitnessedBy),
        databaseID = Value(databaseID),
        etype = Value(etype),
        designation = Value(designation),
        location = Value(location),
        panel = Value(panel),
        rating = Value(rating),
        make = Value(make),
        size = Value(size),
        length = Value(length),
        trNo = Value(trNo);
  static Insertable<PcLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> TestedBy,
    Expression<String> VerifiedBy,
    Expression<String> WitnessedBy,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> panel,
    Expression<String> rating,
    Expression<String> make,
    Expression<String> size,
    Expression<String> length,
    Expression<int> trNo,
    Expression<DateTime> dateOfTesting,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (TestedBy != null) 'tested_by': TestedBy,
      if (VerifiedBy != null) 'verified_by': VerifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (panel != null) 'panel': panel,
      if (rating != null) 'rating': rating,
      if (make != null) 'make': make,
      if (size != null) 'size': size,
      if (length != null) 'length': length,
      if (trNo != null) 'tr_no': trNo,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
    });
  }

  PcLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> TestedBy,
      Value<String> VerifiedBy,
      Value<String> WitnessedBy,
      Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<String> designation,
      Value<String> location,
      Value<String> panel,
      Value<String> rating,
      Value<String> make,
      Value<String> size,
      Value<String> length,
      Value<int> trNo,
      Value<DateTime> dateOfTesting}) {
    return PcLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      TestedBy: TestedBy ?? this.TestedBy,
      VerifiedBy: VerifiedBy ?? this.VerifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      panel: panel ?? this.panel,
      rating: rating ?? this.rating,
      make: make ?? this.make,
      size: size ?? this.size,
      length: length ?? this.length,
      trNo: trNo ?? this.trNo,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (TestedBy.present) {
      map['tested_by'] = Variable<String>(TestedBy.value);
    }
    if (VerifiedBy.present) {
      map['verified_by'] = Variable<String>(VerifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (rating.present) {
      map['rating'] = Variable<String>(rating.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (size.present) {
      map['size'] = Variable<String>(size.value);
    }
    if (length.present) {
      map['length'] = Variable<String>(length.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PcLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('panel: $panel, ')
          ..write('rating: $rating, ')
          ..write('make: $make, ')
          ..write('size: $size, ')
          ..write('length: $length, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }
}

class $PcLocalDatasourceImplTable extends PcLocalDatasourceImpl
    with TableInfo<$PcLocalDatasourceImplTable, PcLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PcLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _TestedByMeta = const VerificationMeta('TestedBy');
  GeneratedColumn<String> _TestedBy;
  @override
  GeneratedColumn<String> get TestedBy => _TestedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _VerifiedByMeta = const VerificationMeta('VerifiedBy');
  GeneratedColumn<String> _VerifiedBy;
  @override
  GeneratedColumn<String> get VerifiedBy =>
      _VerifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratingMeta = const VerificationMeta('rating');
  GeneratedColumn<String> _rating;
  @override
  GeneratedColumn<String> get rating => _rating ??= GeneratedColumn<String>(
      'rating', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _sizeMeta = const VerificationMeta('size');
  GeneratedColumn<String> _size;
  @override
  GeneratedColumn<String> get size => _size ??= GeneratedColumn<String>(
      'size', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _lengthMeta = const VerificationMeta('length');
  GeneratedColumn<String> _length;
  @override
  GeneratedColumn<String> get length => _length ??= GeneratedColumn<String>(
      'length', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        TestedBy,
        VerifiedBy,
        WitnessedBy,
        databaseID,
        id,
        etype,
        designation,
        location,
        panel,
        rating,
        make,
        size,
        length,
        trNo,
        dateOfTesting
      ];
  @override
  String get aliasedName => _alias ?? 'pc_local_datasource_impl';
  @override
  String get actualTableName => 'pc_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PcLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_TestedByMeta,
          TestedBy.isAcceptableOrUnknown(data['tested_by'], _TestedByMeta));
    } else if (isInserting) {
      context.missing(_TestedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _VerifiedByMeta,
          VerifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _VerifiedByMeta));
    } else if (isInserting) {
      context.missing(_VerifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('rating')) {
      context.handle(_ratingMeta,
          rating.isAcceptableOrUnknown(data['rating'], _ratingMeta));
    } else if (isInserting) {
      context.missing(_ratingMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('size')) {
      context.handle(
          _sizeMeta, size.isAcceptableOrUnknown(data['size'], _sizeMeta));
    } else if (isInserting) {
      context.missing(_sizeMeta);
    }
    if (data.containsKey('length')) {
      context.handle(_lengthMeta,
          length.isAcceptableOrUnknown(data['length'], _lengthMeta));
    } else if (isInserting) {
      context.missing(_lengthMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PcLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PcLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PcLocalDatasourceImplTable createAlias(String alias) {
    return $PcLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PcIrLocalData extends DataClass implements Insertable<PcIrLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final int pcRefId;
  final double rA;
  final double yA;
  final double bA;
  final double rB;
  final double yB;
  final double bB;
  final double ryA;
  final double ybA;
  final double brA;
  final double ryB;
  final double ybB;
  final double brB;
  PcIrLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.pcRefId,
      @required this.rA,
      @required this.yA,
      @required this.bA,
      @required this.rB,
      @required this.yB,
      @required this.bB,
      @required this.ryA,
      @required this.ybA,
      @required this.brA,
      @required this.ryB,
      @required this.ybB,
      @required this.brB});
  factory PcIrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PcIrLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      pcRefId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc_ref_id']),
      rA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_a']),
      yA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_a']),
      bA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_a']),
      rB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_b']),
      yB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_b']),
      bB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_b']),
      ryA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_a']),
      ybA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_a']),
      brA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_a']),
      ryB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_b']),
      ybB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_b']),
      brB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_b']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || pcRefId != null) {
      map['pc_ref_id'] = Variable<int>(pcRefId);
    }
    if (!nullToAbsent || rA != null) {
      map['r_a'] = Variable<double>(rA);
    }
    if (!nullToAbsent || yA != null) {
      map['y_a'] = Variable<double>(yA);
    }
    if (!nullToAbsent || bA != null) {
      map['b_a'] = Variable<double>(bA);
    }
    if (!nullToAbsent || rB != null) {
      map['r_b'] = Variable<double>(rB);
    }
    if (!nullToAbsent || yB != null) {
      map['y_b'] = Variable<double>(yB);
    }
    if (!nullToAbsent || bB != null) {
      map['b_b'] = Variable<double>(bB);
    }
    if (!nullToAbsent || ryA != null) {
      map['ry_a'] = Variable<double>(ryA);
    }
    if (!nullToAbsent || ybA != null) {
      map['yb_a'] = Variable<double>(ybA);
    }
    if (!nullToAbsent || brA != null) {
      map['br_a'] = Variable<double>(brA);
    }
    if (!nullToAbsent || ryB != null) {
      map['ry_b'] = Variable<double>(ryB);
    }
    if (!nullToAbsent || ybB != null) {
      map['yb_b'] = Variable<double>(ybB);
    }
    if (!nullToAbsent || brB != null) {
      map['br_b'] = Variable<double>(brB);
    }
    return map;
  }

  PcIrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PcIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      pcRefId: pcRefId == null && nullToAbsent
          ? const Value.absent()
          : Value(pcRefId),
      rA: rA == null && nullToAbsent ? const Value.absent() : Value(rA),
      yA: yA == null && nullToAbsent ? const Value.absent() : Value(yA),
      bA: bA == null && nullToAbsent ? const Value.absent() : Value(bA),
      rB: rB == null && nullToAbsent ? const Value.absent() : Value(rB),
      yB: yB == null && nullToAbsent ? const Value.absent() : Value(yB),
      bB: bB == null && nullToAbsent ? const Value.absent() : Value(bB),
      ryA: ryA == null && nullToAbsent ? const Value.absent() : Value(ryA),
      ybA: ybA == null && nullToAbsent ? const Value.absent() : Value(ybA),
      brA: brA == null && nullToAbsent ? const Value.absent() : Value(brA),
      ryB: ryB == null && nullToAbsent ? const Value.absent() : Value(ryB),
      ybB: ybB == null && nullToAbsent ? const Value.absent() : Value(ybB),
      brB: brB == null && nullToAbsent ? const Value.absent() : Value(brB),
    );
  }

  factory PcIrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PcIrLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      pcRefId: serializer.fromJson<int>(json['pcRefId']),
      rA: serializer.fromJson<double>(json['rA']),
      yA: serializer.fromJson<double>(json['yA']),
      bA: serializer.fromJson<double>(json['bA']),
      rB: serializer.fromJson<double>(json['rB']),
      yB: serializer.fromJson<double>(json['yB']),
      bB: serializer.fromJson<double>(json['bB']),
      ryA: serializer.fromJson<double>(json['ryA']),
      ybA: serializer.fromJson<double>(json['ybA']),
      brA: serializer.fromJson<double>(json['brA']),
      ryB: serializer.fromJson<double>(json['ryB']),
      ybB: serializer.fromJson<double>(json['ybB']),
      brB: serializer.fromJson<double>(json['brB']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'pcRefId': serializer.toJson<int>(pcRefId),
      'rA': serializer.toJson<double>(rA),
      'yA': serializer.toJson<double>(yA),
      'bA': serializer.toJson<double>(bA),
      'rB': serializer.toJson<double>(rB),
      'yB': serializer.toJson<double>(yB),
      'bB': serializer.toJson<double>(bB),
      'ryA': serializer.toJson<double>(ryA),
      'ybA': serializer.toJson<double>(ybA),
      'brA': serializer.toJson<double>(brA),
      'ryB': serializer.toJson<double>(ryB),
      'ybB': serializer.toJson<double>(ybB),
      'brB': serializer.toJson<double>(brB),
    };
  }

  PcIrLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          int pcRefId,
          double rA,
          double yA,
          double bA,
          double rB,
          double yB,
          double bB,
          double ryA,
          double ybA,
          double brA,
          double ryB,
          double ybB,
          double brB}) =>
      PcIrLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        pcRefId: pcRefId ?? this.pcRefId,
        rA: rA ?? this.rA,
        yA: yA ?? this.yA,
        bA: bA ?? this.bA,
        rB: rB ?? this.rB,
        yB: yB ?? this.yB,
        bB: bB ?? this.bB,
        ryA: ryA ?? this.ryA,
        ybA: ybA ?? this.ybA,
        brA: brA ?? this.brA,
        ryB: ryB ?? this.ryB,
        ybB: ybB ?? this.ybB,
        brB: brB ?? this.brB,
      );
  @override
  String toString() {
    return (StringBuffer('PcIrLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('pcRefId: $pcRefId, ')
          ..write('rA: $rA, ')
          ..write('yA: $yA, ')
          ..write('bA: $bA, ')
          ..write('rB: $rB, ')
          ..write('yB: $yB, ')
          ..write('bB: $bB, ')
          ..write('ryA: $ryA, ')
          ..write('ybA: $ybA, ')
          ..write('brA: $brA, ')
          ..write('ryB: $ryB, ')
          ..write('ybB: $ybB, ')
          ..write('brB: $brB')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, pcRefId, rA, yA, bA, rB, yB, bB, ryA, ybA, brA, ryB, ybB, brB);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PcIrLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.pcRefId == this.pcRefId &&
          other.rA == this.rA &&
          other.yA == this.yA &&
          other.bA == this.bA &&
          other.rB == this.rB &&
          other.yB == this.yB &&
          other.bB == this.bB &&
          other.ryA == this.ryA &&
          other.ybA == this.ybA &&
          other.brA == this.brA &&
          other.ryB == this.ryB &&
          other.ybB == this.ybB &&
          other.brB == this.brB);
}

class PcIrLocalDatasourceImplCompanion extends UpdateCompanion<PcIrLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<int> pcRefId;
  final Value<double> rA;
  final Value<double> yA;
  final Value<double> bA;
  final Value<double> rB;
  final Value<double> yB;
  final Value<double> bB;
  final Value<double> ryA;
  final Value<double> ybA;
  final Value<double> brA;
  final Value<double> ryB;
  final Value<double> ybB;
  final Value<double> brB;
  const PcIrLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.pcRefId = const Value.absent(),
    this.rA = const Value.absent(),
    this.yA = const Value.absent(),
    this.bA = const Value.absent(),
    this.rB = const Value.absent(),
    this.yB = const Value.absent(),
    this.bB = const Value.absent(),
    this.ryA = const Value.absent(),
    this.ybA = const Value.absent(),
    this.brA = const Value.absent(),
    this.ryB = const Value.absent(),
    this.ybB = const Value.absent(),
    this.brB = const Value.absent(),
  });
  PcIrLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required int pcRefId,
    @required double rA,
    @required double yA,
    @required double bA,
    @required double rB,
    @required double yB,
    @required double bB,
    @required double ryA,
    @required double ybA,
    @required double brA,
    @required double ryB,
    @required double ybB,
    @required double brB,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        pcRefId = Value(pcRefId),
        rA = Value(rA),
        yA = Value(yA),
        bA = Value(bA),
        rB = Value(rB),
        yB = Value(yB),
        bB = Value(bB),
        ryA = Value(ryA),
        ybA = Value(ybA),
        brA = Value(brA),
        ryB = Value(ryB),
        ybB = Value(ybB),
        brB = Value(brB);
  static Insertable<PcIrLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<int> pcRefId,
    Expression<double> rA,
    Expression<double> yA,
    Expression<double> bA,
    Expression<double> rB,
    Expression<double> yB,
    Expression<double> bB,
    Expression<double> ryA,
    Expression<double> ybA,
    Expression<double> brA,
    Expression<double> ryB,
    Expression<double> ybB,
    Expression<double> brB,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (pcRefId != null) 'pc_ref_id': pcRefId,
      if (rA != null) 'r_a': rA,
      if (yA != null) 'y_a': yA,
      if (bA != null) 'b_a': bA,
      if (rB != null) 'r_b': rB,
      if (yB != null) 'y_b': yB,
      if (bB != null) 'b_b': bB,
      if (ryA != null) 'ry_a': ryA,
      if (ybA != null) 'yb_a': ybA,
      if (brA != null) 'br_a': brA,
      if (ryB != null) 'ry_b': ryB,
      if (ybB != null) 'yb_b': ybB,
      if (brB != null) 'br_b': brB,
    });
  }

  PcIrLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<int> pcRefId,
      Value<double> rA,
      Value<double> yA,
      Value<double> bA,
      Value<double> rB,
      Value<double> yB,
      Value<double> bB,
      Value<double> ryA,
      Value<double> ybA,
      Value<double> brA,
      Value<double> ryB,
      Value<double> ybB,
      Value<double> brB}) {
    return PcIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      pcRefId: pcRefId ?? this.pcRefId,
      rA: rA ?? this.rA,
      yA: yA ?? this.yA,
      bA: bA ?? this.bA,
      rB: rB ?? this.rB,
      yB: yB ?? this.yB,
      bB: bB ?? this.bB,
      ryA: ryA ?? this.ryA,
      ybA: ybA ?? this.ybA,
      brA: brA ?? this.brA,
      ryB: ryB ?? this.ryB,
      ybB: ybB ?? this.ybB,
      brB: brB ?? this.brB,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (pcRefId.present) {
      map['pc_ref_id'] = Variable<int>(pcRefId.value);
    }
    if (rA.present) {
      map['r_a'] = Variable<double>(rA.value);
    }
    if (yA.present) {
      map['y_a'] = Variable<double>(yA.value);
    }
    if (bA.present) {
      map['b_a'] = Variable<double>(bA.value);
    }
    if (rB.present) {
      map['r_b'] = Variable<double>(rB.value);
    }
    if (yB.present) {
      map['y_b'] = Variable<double>(yB.value);
    }
    if (bB.present) {
      map['b_b'] = Variable<double>(bB.value);
    }
    if (ryA.present) {
      map['ry_a'] = Variable<double>(ryA.value);
    }
    if (ybA.present) {
      map['yb_a'] = Variable<double>(ybA.value);
    }
    if (brA.present) {
      map['br_a'] = Variable<double>(brA.value);
    }
    if (ryB.present) {
      map['ry_b'] = Variable<double>(ryB.value);
    }
    if (ybB.present) {
      map['yb_b'] = Variable<double>(ybB.value);
    }
    if (brB.present) {
      map['br_b'] = Variable<double>(brB.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PcIrLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('pcRefId: $pcRefId, ')
          ..write('rA: $rA, ')
          ..write('yA: $yA, ')
          ..write('bA: $bA, ')
          ..write('rB: $rB, ')
          ..write('yB: $yB, ')
          ..write('bB: $bB, ')
          ..write('ryA: $ryA, ')
          ..write('ybA: $ybA, ')
          ..write('brA: $brA, ')
          ..write('ryB: $ryB, ')
          ..write('ybB: $ybB, ')
          ..write('brB: $brB')
          ..write(')'))
        .toString();
  }
}

class $PcIrLocalDatasourceImplTable extends PcIrLocalDatasourceImpl
    with TableInfo<$PcIrLocalDatasourceImplTable, PcIrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PcIrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _pcRefIdMeta = const VerificationMeta('pcRefId');
  GeneratedColumn<int> _pcRefId;
  @override
  GeneratedColumn<int> get pcRefId =>
      _pcRefId ??= GeneratedColumn<int>('pc_ref_id', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _rAMeta = const VerificationMeta('rA');
  GeneratedColumn<double> _rA;
  @override
  GeneratedColumn<double> get rA =>
      _rA ??= GeneratedColumn<double>('r_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yAMeta = const VerificationMeta('yA');
  GeneratedColumn<double> _yA;
  @override
  GeneratedColumn<double> get yA =>
      _yA ??= GeneratedColumn<double>('y_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bAMeta = const VerificationMeta('bA');
  GeneratedColumn<double> _bA;
  @override
  GeneratedColumn<double> get bA =>
      _bA ??= GeneratedColumn<double>('b_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rBMeta = const VerificationMeta('rB');
  GeneratedColumn<double> _rB;
  @override
  GeneratedColumn<double> get rB =>
      _rB ??= GeneratedColumn<double>('r_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yBMeta = const VerificationMeta('yB');
  GeneratedColumn<double> _yB;
  @override
  GeneratedColumn<double> get yB =>
      _yB ??= GeneratedColumn<double>('y_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bBMeta = const VerificationMeta('bB');
  GeneratedColumn<double> _bB;
  @override
  GeneratedColumn<double> get bB =>
      _bB ??= GeneratedColumn<double>('b_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ryAMeta = const VerificationMeta('ryA');
  GeneratedColumn<double> _ryA;
  @override
  GeneratedColumn<double> get ryA =>
      _ryA ??= GeneratedColumn<double>('ry_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ybAMeta = const VerificationMeta('ybA');
  GeneratedColumn<double> _ybA;
  @override
  GeneratedColumn<double> get ybA =>
      _ybA ??= GeneratedColumn<double>('yb_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _brAMeta = const VerificationMeta('brA');
  GeneratedColumn<double> _brA;
  @override
  GeneratedColumn<double> get brA =>
      _brA ??= GeneratedColumn<double>('br_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ryBMeta = const VerificationMeta('ryB');
  GeneratedColumn<double> _ryB;
  @override
  GeneratedColumn<double> get ryB =>
      _ryB ??= GeneratedColumn<double>('ry_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ybBMeta = const VerificationMeta('ybB');
  GeneratedColumn<double> _ybB;
  @override
  GeneratedColumn<double> get ybB =>
      _ybB ??= GeneratedColumn<double>('yb_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _brBMeta = const VerificationMeta('brB');
  GeneratedColumn<double> _brB;
  @override
  GeneratedColumn<double> get brB =>
      _brB ??= GeneratedColumn<double>('br_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        pcRefId,
        rA,
        yA,
        bA,
        rB,
        yB,
        bB,
        ryA,
        ybA,
        brA,
        ryB,
        ybB,
        brB
      ];
  @override
  String get aliasedName => _alias ?? 'pc_ir_local_datasource_impl';
  @override
  String get actualTableName => 'pc_ir_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PcIrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('pc_ref_id')) {
      context.handle(_pcRefIdMeta,
          pcRefId.isAcceptableOrUnknown(data['pc_ref_id'], _pcRefIdMeta));
    } else if (isInserting) {
      context.missing(_pcRefIdMeta);
    }
    if (data.containsKey('r_a')) {
      context.handle(_rAMeta, rA.isAcceptableOrUnknown(data['r_a'], _rAMeta));
    } else if (isInserting) {
      context.missing(_rAMeta);
    }
    if (data.containsKey('y_a')) {
      context.handle(_yAMeta, yA.isAcceptableOrUnknown(data['y_a'], _yAMeta));
    } else if (isInserting) {
      context.missing(_yAMeta);
    }
    if (data.containsKey('b_a')) {
      context.handle(_bAMeta, bA.isAcceptableOrUnknown(data['b_a'], _bAMeta));
    } else if (isInserting) {
      context.missing(_bAMeta);
    }
    if (data.containsKey('r_b')) {
      context.handle(_rBMeta, rB.isAcceptableOrUnknown(data['r_b'], _rBMeta));
    } else if (isInserting) {
      context.missing(_rBMeta);
    }
    if (data.containsKey('y_b')) {
      context.handle(_yBMeta, yB.isAcceptableOrUnknown(data['y_b'], _yBMeta));
    } else if (isInserting) {
      context.missing(_yBMeta);
    }
    if (data.containsKey('b_b')) {
      context.handle(_bBMeta, bB.isAcceptableOrUnknown(data['b_b'], _bBMeta));
    } else if (isInserting) {
      context.missing(_bBMeta);
    }
    if (data.containsKey('ry_a')) {
      context.handle(
          _ryAMeta, ryA.isAcceptableOrUnknown(data['ry_a'], _ryAMeta));
    } else if (isInserting) {
      context.missing(_ryAMeta);
    }
    if (data.containsKey('yb_a')) {
      context.handle(
          _ybAMeta, ybA.isAcceptableOrUnknown(data['yb_a'], _ybAMeta));
    } else if (isInserting) {
      context.missing(_ybAMeta);
    }
    if (data.containsKey('br_a')) {
      context.handle(
          _brAMeta, brA.isAcceptableOrUnknown(data['br_a'], _brAMeta));
    } else if (isInserting) {
      context.missing(_brAMeta);
    }
    if (data.containsKey('ry_b')) {
      context.handle(
          _ryBMeta, ryB.isAcceptableOrUnknown(data['ry_b'], _ryBMeta));
    } else if (isInserting) {
      context.missing(_ryBMeta);
    }
    if (data.containsKey('yb_b')) {
      context.handle(
          _ybBMeta, ybB.isAcceptableOrUnknown(data['yb_b'], _ybBMeta));
    } else if (isInserting) {
      context.missing(_ybBMeta);
    }
    if (data.containsKey('br_b')) {
      context.handle(
          _brBMeta, brB.isAcceptableOrUnknown(data['br_b'], _brBMeta));
    } else if (isInserting) {
      context.missing(_brBMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PcIrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PcIrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PcIrLocalDatasourceImplTable createAlias(String alias) {
    return $PcIrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class PcHvLocalData extends DataClass implements Insertable<PcHvLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final int pcRefId;
  final double rVoltage;
  final double yVoltage;
  final double bVoltage;
  final double rCurrent;
  final double yCurrent;
  final double bCurrent;
  PcHvLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.pcRefId,
      @required this.rVoltage,
      @required this.yVoltage,
      @required this.bVoltage,
      @required this.rCurrent,
      @required this.yCurrent,
      @required this.bCurrent});
  factory PcHvLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return PcHvLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      pcRefId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pc_ref_id']),
      rVoltage: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_voltage']),
      yVoltage: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_voltage']),
      bVoltage: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_voltage']),
      rCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_current']),
      yCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_current']),
      bCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_current']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || pcRefId != null) {
      map['pc_ref_id'] = Variable<int>(pcRefId);
    }
    if (!nullToAbsent || rVoltage != null) {
      map['r_voltage'] = Variable<double>(rVoltage);
    }
    if (!nullToAbsent || yVoltage != null) {
      map['y_voltage'] = Variable<double>(yVoltage);
    }
    if (!nullToAbsent || bVoltage != null) {
      map['b_voltage'] = Variable<double>(bVoltage);
    }
    if (!nullToAbsent || rCurrent != null) {
      map['r_current'] = Variable<double>(rCurrent);
    }
    if (!nullToAbsent || yCurrent != null) {
      map['y_current'] = Variable<double>(yCurrent);
    }
    if (!nullToAbsent || bCurrent != null) {
      map['b_current'] = Variable<double>(bCurrent);
    }
    return map;
  }

  PcHvLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return PcHvLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      pcRefId: pcRefId == null && nullToAbsent
          ? const Value.absent()
          : Value(pcRefId),
      rVoltage: rVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(rVoltage),
      yVoltage: yVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(yVoltage),
      bVoltage: bVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(bVoltage),
      rCurrent: rCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(rCurrent),
      yCurrent: yCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(yCurrent),
      bCurrent: bCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(bCurrent),
    );
  }

  factory PcHvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PcHvLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      pcRefId: serializer.fromJson<int>(json['pcRefId']),
      rVoltage: serializer.fromJson<double>(json['rVoltage']),
      yVoltage: serializer.fromJson<double>(json['yVoltage']),
      bVoltage: serializer.fromJson<double>(json['bVoltage']),
      rCurrent: serializer.fromJson<double>(json['rCurrent']),
      yCurrent: serializer.fromJson<double>(json['yCurrent']),
      bCurrent: serializer.fromJson<double>(json['bCurrent']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'pcRefId': serializer.toJson<int>(pcRefId),
      'rVoltage': serializer.toJson<double>(rVoltage),
      'yVoltage': serializer.toJson<double>(yVoltage),
      'bVoltage': serializer.toJson<double>(bVoltage),
      'rCurrent': serializer.toJson<double>(rCurrent),
      'yCurrent': serializer.toJson<double>(yCurrent),
      'bCurrent': serializer.toJson<double>(bCurrent),
    };
  }

  PcHvLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          int pcRefId,
          double rVoltage,
          double yVoltage,
          double bVoltage,
          double rCurrent,
          double yCurrent,
          double bCurrent}) =>
      PcHvLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        pcRefId: pcRefId ?? this.pcRefId,
        rVoltage: rVoltage ?? this.rVoltage,
        yVoltage: yVoltage ?? this.yVoltage,
        bVoltage: bVoltage ?? this.bVoltage,
        rCurrent: rCurrent ?? this.rCurrent,
        yCurrent: yCurrent ?? this.yCurrent,
        bCurrent: bCurrent ?? this.bCurrent,
      );
  @override
  String toString() {
    return (StringBuffer('PcHvLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('pcRefId: $pcRefId, ')
          ..write('rVoltage: $rVoltage, ')
          ..write('yVoltage: $yVoltage, ')
          ..write('bVoltage: $bVoltage, ')
          ..write('rCurrent: $rCurrent, ')
          ..write('yCurrent: $yCurrent, ')
          ..write('bCurrent: $bCurrent')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      EquipmentType,
      databaseID,
      id,
      trNo,
      pcRefId,
      rVoltage,
      yVoltage,
      bVoltage,
      rCurrent,
      yCurrent,
      bCurrent);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PcHvLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.pcRefId == this.pcRefId &&
          other.rVoltage == this.rVoltage &&
          other.yVoltage == this.yVoltage &&
          other.bVoltage == this.bVoltage &&
          other.rCurrent == this.rCurrent &&
          other.yCurrent == this.yCurrent &&
          other.bCurrent == this.bCurrent);
}

class PcHvLocalDatasourceImplCompanion extends UpdateCompanion<PcHvLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<int> pcRefId;
  final Value<double> rVoltage;
  final Value<double> yVoltage;
  final Value<double> bVoltage;
  final Value<double> rCurrent;
  final Value<double> yCurrent;
  final Value<double> bCurrent;
  const PcHvLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.pcRefId = const Value.absent(),
    this.rVoltage = const Value.absent(),
    this.yVoltage = const Value.absent(),
    this.bVoltage = const Value.absent(),
    this.rCurrent = const Value.absent(),
    this.yCurrent = const Value.absent(),
    this.bCurrent = const Value.absent(),
  });
  PcHvLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required int pcRefId,
    @required double rVoltage,
    @required double yVoltage,
    @required double bVoltage,
    @required double rCurrent,
    @required double yCurrent,
    @required double bCurrent,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        pcRefId = Value(pcRefId),
        rVoltage = Value(rVoltage),
        yVoltage = Value(yVoltage),
        bVoltage = Value(bVoltage),
        rCurrent = Value(rCurrent),
        yCurrent = Value(yCurrent),
        bCurrent = Value(bCurrent);
  static Insertable<PcHvLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<int> pcRefId,
    Expression<double> rVoltage,
    Expression<double> yVoltage,
    Expression<double> bVoltage,
    Expression<double> rCurrent,
    Expression<double> yCurrent,
    Expression<double> bCurrent,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (pcRefId != null) 'pc_ref_id': pcRefId,
      if (rVoltage != null) 'r_voltage': rVoltage,
      if (yVoltage != null) 'y_voltage': yVoltage,
      if (bVoltage != null) 'b_voltage': bVoltage,
      if (rCurrent != null) 'r_current': rCurrent,
      if (yCurrent != null) 'y_current': yCurrent,
      if (bCurrent != null) 'b_current': bCurrent,
    });
  }

  PcHvLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<int> pcRefId,
      Value<double> rVoltage,
      Value<double> yVoltage,
      Value<double> bVoltage,
      Value<double> rCurrent,
      Value<double> yCurrent,
      Value<double> bCurrent}) {
    return PcHvLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      pcRefId: pcRefId ?? this.pcRefId,
      rVoltage: rVoltage ?? this.rVoltage,
      yVoltage: yVoltage ?? this.yVoltage,
      bVoltage: bVoltage ?? this.bVoltage,
      rCurrent: rCurrent ?? this.rCurrent,
      yCurrent: yCurrent ?? this.yCurrent,
      bCurrent: bCurrent ?? this.bCurrent,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (pcRefId.present) {
      map['pc_ref_id'] = Variable<int>(pcRefId.value);
    }
    if (rVoltage.present) {
      map['r_voltage'] = Variable<double>(rVoltage.value);
    }
    if (yVoltage.present) {
      map['y_voltage'] = Variable<double>(yVoltage.value);
    }
    if (bVoltage.present) {
      map['b_voltage'] = Variable<double>(bVoltage.value);
    }
    if (rCurrent.present) {
      map['r_current'] = Variable<double>(rCurrent.value);
    }
    if (yCurrent.present) {
      map['y_current'] = Variable<double>(yCurrent.value);
    }
    if (bCurrent.present) {
      map['b_current'] = Variable<double>(bCurrent.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PcHvLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('pcRefId: $pcRefId, ')
          ..write('rVoltage: $rVoltage, ')
          ..write('yVoltage: $yVoltage, ')
          ..write('bVoltage: $bVoltage, ')
          ..write('rCurrent: $rCurrent, ')
          ..write('yCurrent: $yCurrent, ')
          ..write('bCurrent: $bCurrent')
          ..write(')'))
        .toString();
  }
}

class $PcHvLocalDatasourceImplTable extends PcHvLocalDatasourceImpl
    with TableInfo<$PcHvLocalDatasourceImplTable, PcHvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $PcHvLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _pcRefIdMeta = const VerificationMeta('pcRefId');
  GeneratedColumn<int> _pcRefId;
  @override
  GeneratedColumn<int> get pcRefId =>
      _pcRefId ??= GeneratedColumn<int>('pc_ref_id', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _rVoltageMeta = const VerificationMeta('rVoltage');
  GeneratedColumn<double> _rVoltage;
  @override
  GeneratedColumn<double> get rVoltage =>
      _rVoltage ??= GeneratedColumn<double>('r_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yVoltageMeta = const VerificationMeta('yVoltage');
  GeneratedColumn<double> _yVoltage;
  @override
  GeneratedColumn<double> get yVoltage =>
      _yVoltage ??= GeneratedColumn<double>('y_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bVoltageMeta = const VerificationMeta('bVoltage');
  GeneratedColumn<double> _bVoltage;
  @override
  GeneratedColumn<double> get bVoltage =>
      _bVoltage ??= GeneratedColumn<double>('b_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rCurrentMeta = const VerificationMeta('rCurrent');
  GeneratedColumn<double> _rCurrent;
  @override
  GeneratedColumn<double> get rCurrent =>
      _rCurrent ??= GeneratedColumn<double>('r_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yCurrentMeta = const VerificationMeta('yCurrent');
  GeneratedColumn<double> _yCurrent;
  @override
  GeneratedColumn<double> get yCurrent =>
      _yCurrent ??= GeneratedColumn<double>('y_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bCurrentMeta = const VerificationMeta('bCurrent');
  GeneratedColumn<double> _bCurrent;
  @override
  GeneratedColumn<double> get bCurrent =>
      _bCurrent ??= GeneratedColumn<double>('b_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        pcRefId,
        rVoltage,
        yVoltage,
        bVoltage,
        rCurrent,
        yCurrent,
        bCurrent
      ];
  @override
  String get aliasedName => _alias ?? 'pc_hv_local_datasource_impl';
  @override
  String get actualTableName => 'pc_hv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<PcHvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('pc_ref_id')) {
      context.handle(_pcRefIdMeta,
          pcRefId.isAcceptableOrUnknown(data['pc_ref_id'], _pcRefIdMeta));
    } else if (isInserting) {
      context.missing(_pcRefIdMeta);
    }
    if (data.containsKey('r_voltage')) {
      context.handle(_rVoltageMeta,
          rVoltage.isAcceptableOrUnknown(data['r_voltage'], _rVoltageMeta));
    } else if (isInserting) {
      context.missing(_rVoltageMeta);
    }
    if (data.containsKey('y_voltage')) {
      context.handle(_yVoltageMeta,
          yVoltage.isAcceptableOrUnknown(data['y_voltage'], _yVoltageMeta));
    } else if (isInserting) {
      context.missing(_yVoltageMeta);
    }
    if (data.containsKey('b_voltage')) {
      context.handle(_bVoltageMeta,
          bVoltage.isAcceptableOrUnknown(data['b_voltage'], _bVoltageMeta));
    } else if (isInserting) {
      context.missing(_bVoltageMeta);
    }
    if (data.containsKey('r_current')) {
      context.handle(_rCurrentMeta,
          rCurrent.isAcceptableOrUnknown(data['r_current'], _rCurrentMeta));
    } else if (isInserting) {
      context.missing(_rCurrentMeta);
    }
    if (data.containsKey('y_current')) {
      context.handle(_yCurrentMeta,
          yCurrent.isAcceptableOrUnknown(data['y_current'], _yCurrentMeta));
    } else if (isInserting) {
      context.missing(_yCurrentMeta);
    }
    if (data.containsKey('b_current')) {
      context.handle(_bCurrentMeta,
          bCurrent.isAcceptableOrUnknown(data['b_current'], _bCurrentMeta));
    } else if (isInserting) {
      context.missing(_bCurrentMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PcHvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return PcHvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PcHvLocalDatasourceImplTable createAlias(String alias) {
    return $PcHvLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EELocalData extends DataClass implements Insertable<EELocalData> {
  final DateTime lastUpdated;
  final String TestedBy;
  final String VerifiedBy;
  final String WitnessedBy;
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final DateTime dateOfTesting;
  EELocalData(
      {@required this.lastUpdated,
      @required this.TestedBy,
      @required this.VerifiedBy,
      @required this.WitnessedBy,
      @required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.dateOfTesting});
  factory EELocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EELocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      TestedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      VerifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || TestedBy != null) {
      map['tested_by'] = Variable<String>(TestedBy);
    }
    if (!nullToAbsent || VerifiedBy != null) {
      map['verified_by'] = Variable<String>(VerifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    return map;
  }

  EELocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EELocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      TestedBy: TestedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(TestedBy),
      VerifiedBy: VerifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(VerifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
    );
  }

  factory EELocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EELocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      TestedBy: serializer.fromJson<String>(json['TestedBy']),
      VerifiedBy: serializer.fromJson<String>(json['VerifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'TestedBy': serializer.toJson<String>(TestedBy),
      'VerifiedBy': serializer.toJson<String>(VerifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
    };
  }

  EELocalData copyWith(
          {DateTime lastUpdated,
          String TestedBy,
          String VerifiedBy,
          String WitnessedBy,
          int databaseID,
          int id,
          String etype,
          int trNo,
          DateTime dateOfTesting}) =>
      EELocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        TestedBy: TestedBy ?? this.TestedBy,
        VerifiedBy: VerifiedBy ?? this.VerifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      );
  @override
  String toString() {
    return (StringBuffer('EELocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, TestedBy, VerifiedBy,
      WitnessedBy, databaseID, id, etype, trNo, dateOfTesting);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EELocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.TestedBy == this.TestedBy &&
          other.VerifiedBy == this.VerifiedBy &&
          other.WitnessedBy == this.WitnessedBy &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.dateOfTesting == this.dateOfTesting);
}

class EELocalDatasourceImplCompanion extends UpdateCompanion<EELocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> TestedBy;
  final Value<String> VerifiedBy;
  final Value<String> WitnessedBy;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<DateTime> dateOfTesting;
  const EELocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.TestedBy = const Value.absent(),
    this.VerifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
  });
  EELocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String TestedBy,
    @required String VerifiedBy,
    @required String WitnessedBy,
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    this.dateOfTesting = const Value.absent(),
  })  : TestedBy = Value(TestedBy),
        VerifiedBy = Value(VerifiedBy),
        WitnessedBy = Value(WitnessedBy),
        databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo);
  static Insertable<EELocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> TestedBy,
    Expression<String> VerifiedBy,
    Expression<String> WitnessedBy,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<DateTime> dateOfTesting,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (TestedBy != null) 'tested_by': TestedBy,
      if (VerifiedBy != null) 'verified_by': VerifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
    });
  }

  EELocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> TestedBy,
      Value<String> VerifiedBy,
      Value<String> WitnessedBy,
      Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<DateTime> dateOfTesting}) {
    return EELocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      TestedBy: TestedBy ?? this.TestedBy,
      VerifiedBy: VerifiedBy ?? this.VerifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (TestedBy.present) {
      map['tested_by'] = Variable<String>(TestedBy.value);
    }
    if (VerifiedBy.present) {
      map['verified_by'] = Variable<String>(VerifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EELocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }
}

class $EELocalDatasourceImplTable extends EELocalDatasourceImpl
    with TableInfo<$EELocalDatasourceImplTable, EELocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EELocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _TestedByMeta = const VerificationMeta('TestedBy');
  GeneratedColumn<String> _TestedBy;
  @override
  GeneratedColumn<String> get TestedBy => _TestedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _VerifiedByMeta = const VerificationMeta('VerifiedBy');
  GeneratedColumn<String> _VerifiedBy;
  @override
  GeneratedColumn<String> get VerifiedBy =>
      _VerifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        TestedBy,
        VerifiedBy,
        WitnessedBy,
        databaseID,
        id,
        etype,
        trNo,
        dateOfTesting
      ];
  @override
  String get aliasedName => _alias ?? 'e_e_local_datasource_impl';
  @override
  String get actualTableName => 'e_e_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<EELocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_TestedByMeta,
          TestedBy.isAcceptableOrUnknown(data['tested_by'], _TestedByMeta));
    } else if (isInserting) {
      context.missing(_TestedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _VerifiedByMeta,
          VerifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _VerifiedByMeta));
    } else if (isInserting) {
      context.missing(_VerifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EELocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EELocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EELocalDatasourceImplTable createAlias(String alias) {
    return $EELocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EELocLocalData extends DataClass implements Insertable<EELocLocalData> {
  final int databaseID;
  final int id;
  final int eeRef;
  final String location;
  final DateTime updateDate;
  EELocLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.eeRef,
      @required this.location,
      @required this.updateDate});
  factory EELocLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EELocLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      eeRef: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ee_ref']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || eeRef != null) {
      map['ee_ref'] = Variable<int>(eeRef);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  EE_Loc_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EE_Loc_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      eeRef:
          eeRef == null && nullToAbsent ? const Value.absent() : Value(eeRef),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory EELocLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EELocLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      eeRef: serializer.fromJson<int>(json['eeRef']),
      location: serializer.fromJson<String>(json['location']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'eeRef': serializer.toJson<int>(eeRef),
      'location': serializer.toJson<String>(location),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  EELocLocalData copyWith(
          {int databaseID,
          int id,
          int eeRef,
          String location,
          DateTime updateDate}) =>
      EELocLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        eeRef: eeRef ?? this.eeRef,
        location: location ?? this.location,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('EELocLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('eeRef: $eeRef, ')
          ..write('location: $location, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, eeRef, location, updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EELocLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.eeRef == this.eeRef &&
          other.location == this.location &&
          other.updateDate == this.updateDate);
}

class EE_Loc_LocalDatasourceImplCompanion
    extends UpdateCompanion<EELocLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> eeRef;
  final Value<String> location;
  final Value<DateTime> updateDate;
  const EE_Loc_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.eeRef = const Value.absent(),
    this.location = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  EE_Loc_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int eeRef,
    @required String location,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        eeRef = Value(eeRef),
        location = Value(location);
  static Insertable<EELocLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> eeRef,
    Expression<String> location,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (eeRef != null) 'ee_ref': eeRef,
      if (location != null) 'location': location,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  EE_Loc_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> eeRef,
      Value<String> location,
      Value<DateTime> updateDate}) {
    return EE_Loc_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      eeRef: eeRef ?? this.eeRef,
      location: location ?? this.location,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (eeRef.present) {
      map['ee_ref'] = Variable<int>(eeRef.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EE_Loc_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('eeRef: $eeRef, ')
          ..write('location: $location, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $EE_Loc_LocalDatasourceImplTable extends EE_Loc_LocalDatasourceImpl
    with TableInfo<$EE_Loc_LocalDatasourceImplTable, EELocLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EE_Loc_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _eeRefMeta = const VerificationMeta('eeRef');
  GeneratedColumn<int> _eeRef;
  @override
  GeneratedColumn<int> get eeRef =>
      _eeRef ??= GeneratedColumn<int>('ee_ref', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns =>
      [databaseID, id, eeRef, location, updateDate];
  @override
  String get aliasedName => _alias ?? 'e_e_loc_local_datasource_impl';
  @override
  String get actualTableName => 'e_e_loc_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<EELocLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('ee_ref')) {
      context.handle(
          _eeRefMeta, eeRef.isAcceptableOrUnknown(data['ee_ref'], _eeRefMeta));
    } else if (isInserting) {
      context.missing(_eeRefMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EELocLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EELocLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EE_Loc_LocalDatasourceImplTable createAlias(String alias) {
    return $EE_Loc_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EETestLocalData extends DataClass implements Insertable<EETestLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String eeName;
  final int locNo;
  final double resistanceValue;
  EETestLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.eeName,
      @required this.locNo,
      @required this.resistanceValue});
  factory EETestLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EETestLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      eeName: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ee_name']),
      locNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}loc_no']),
      resistanceValue: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}resistance_value']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || eeName != null) {
      map['ee_name'] = Variable<String>(eeName);
    }
    if (!nullToAbsent || locNo != null) {
      map['loc_no'] = Variable<int>(locNo);
    }
    if (!nullToAbsent || resistanceValue != null) {
      map['resistance_value'] = Variable<double>(resistanceValue);
    }
    return map;
  }

  EETestLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EETestLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      eeName:
          eeName == null && nullToAbsent ? const Value.absent() : Value(eeName),
      locNo:
          locNo == null && nullToAbsent ? const Value.absent() : Value(locNo),
      resistanceValue: resistanceValue == null && nullToAbsent
          ? const Value.absent()
          : Value(resistanceValue),
    );
  }

  factory EETestLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EETestLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      eeName: serializer.fromJson<String>(json['eeName']),
      locNo: serializer.fromJson<int>(json['locNo']),
      resistanceValue: serializer.fromJson<double>(json['resistanceValue']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'eeName': serializer.toJson<String>(eeName),
      'locNo': serializer.toJson<int>(locNo),
      'resistanceValue': serializer.toJson<double>(resistanceValue),
    };
  }

  EETestLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String eeName,
          int locNo,
          double resistanceValue}) =>
      EETestLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        eeName: eeName ?? this.eeName,
        locNo: locNo ?? this.locNo,
        resistanceValue: resistanceValue ?? this.resistanceValue,
      );
  @override
  String toString() {
    return (StringBuffer('EETestLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('eeName: $eeName, ')
          ..write('locNo: $locNo, ')
          ..write('resistanceValue: $resistanceValue')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, eeName, locNo, resistanceValue);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EETestLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.eeName == this.eeName &&
          other.locNo == this.locNo &&
          other.resistanceValue == this.resistanceValue);
}

class EETestLocalDatasourceImplCompanion
    extends UpdateCompanion<EETestLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> eeName;
  final Value<int> locNo;
  final Value<double> resistanceValue;
  const EETestLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.eeName = const Value.absent(),
    this.locNo = const Value.absent(),
    this.resistanceValue = const Value.absent(),
  });
  EETestLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String eeName,
    @required int locNo,
    @required double resistanceValue,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        eeName = Value(eeName),
        locNo = Value(locNo),
        resistanceValue = Value(resistanceValue);
  static Insertable<EETestLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> eeName,
    Expression<int> locNo,
    Expression<double> resistanceValue,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (eeName != null) 'ee_name': eeName,
      if (locNo != null) 'loc_no': locNo,
      if (resistanceValue != null) 'resistance_value': resistanceValue,
    });
  }

  EETestLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> eeName,
      Value<int> locNo,
      Value<double> resistanceValue}) {
    return EETestLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      eeName: eeName ?? this.eeName,
      locNo: locNo ?? this.locNo,
      resistanceValue: resistanceValue ?? this.resistanceValue,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (eeName.present) {
      map['ee_name'] = Variable<String>(eeName.value);
    }
    if (locNo.present) {
      map['loc_no'] = Variable<int>(locNo.value);
    }
    if (resistanceValue.present) {
      map['resistance_value'] = Variable<double>(resistanceValue.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EETestLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('eeName: $eeName, ')
          ..write('locNo: $locNo, ')
          ..write('resistanceValue: $resistanceValue')
          ..write(')'))
        .toString();
  }
}

class $EETestLocalDatasourceImplTable extends EETestLocalDatasourceImpl
    with TableInfo<$EETestLocalDatasourceImplTable, EETestLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EETestLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _eeNameMeta = const VerificationMeta('eeName');
  GeneratedColumn<String> _eeName;
  @override
  GeneratedColumn<String> get eeName => _eeName ??= GeneratedColumn<String>(
      'ee_name', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _locNoMeta = const VerificationMeta('locNo');
  GeneratedColumn<int> _locNo;
  @override
  GeneratedColumn<int> get locNo =>
      _locNo ??= GeneratedColumn<int>('loc_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _resistanceValueMeta =
      const VerificationMeta('resistanceValue');
  GeneratedColumn<double> _resistanceValue;
  @override
  GeneratedColumn<double> get resistanceValue => _resistanceValue ??=
      GeneratedColumn<double>('resistance_value', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        eeName,
        locNo,
        resistanceValue
      ];
  @override
  String get aliasedName => _alias ?? 'e_e_test_local_datasource_impl';
  @override
  String get actualTableName => 'e_e_test_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<EETestLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('ee_name')) {
      context.handle(_eeNameMeta,
          eeName.isAcceptableOrUnknown(data['ee_name'], _eeNameMeta));
    } else if (isInserting) {
      context.missing(_eeNameMeta);
    }
    if (data.containsKey('loc_no')) {
      context.handle(
          _locNoMeta, locNo.isAcceptableOrUnknown(data['loc_no'], _locNoMeta));
    } else if (isInserting) {
      context.missing(_locNoMeta);
    }
    if (data.containsKey('resistance_value')) {
      context.handle(
          _resistanceValueMeta,
          resistanceValue.isAcceptableOrUnknown(
              data['resistance_value'], _resistanceValueMeta));
    } else if (isInserting) {
      context.missing(_resistanceValueMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EETestLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EETestLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EETestLocalDatasourceImplTable createAlias(String alias) {
    return $EETestLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EERTestLocalData extends DataClass
    implements Insertable<EERTestLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String eeName;
  final int locNo;
  final double resistanceValue_BR;
  final double resistanceValue_AR;
  EERTestLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.eeName,
      @required this.locNo,
      @required this.resistanceValue_BR,
      @required this.resistanceValue_AR});
  factory EERTestLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EERTestLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      eeName: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ee_name']),
      locNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}loc_no']),
      resistanceValue_BR: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}resistance_value_b_r']),
      resistanceValue_AR: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}resistance_value_a_r']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || eeName != null) {
      map['ee_name'] = Variable<String>(eeName);
    }
    if (!nullToAbsent || locNo != null) {
      map['loc_no'] = Variable<int>(locNo);
    }
    if (!nullToAbsent || resistanceValue_BR != null) {
      map['resistance_value_b_r'] = Variable<double>(resistanceValue_BR);
    }
    if (!nullToAbsent || resistanceValue_AR != null) {
      map['resistance_value_a_r'] = Variable<double>(resistanceValue_AR);
    }
    return map;
  }

  EERTestLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EERTestLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      eeName:
          eeName == null && nullToAbsent ? const Value.absent() : Value(eeName),
      locNo:
          locNo == null && nullToAbsent ? const Value.absent() : Value(locNo),
      resistanceValue_BR: resistanceValue_BR == null && nullToAbsent
          ? const Value.absent()
          : Value(resistanceValue_BR),
      resistanceValue_AR: resistanceValue_AR == null && nullToAbsent
          ? const Value.absent()
          : Value(resistanceValue_AR),
    );
  }

  factory EERTestLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EERTestLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      eeName: serializer.fromJson<String>(json['eeName']),
      locNo: serializer.fromJson<int>(json['locNo']),
      resistanceValue_BR:
          serializer.fromJson<double>(json['resistanceValue_BR']),
      resistanceValue_AR:
          serializer.fromJson<double>(json['resistanceValue_AR']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'eeName': serializer.toJson<String>(eeName),
      'locNo': serializer.toJson<int>(locNo),
      'resistanceValue_BR': serializer.toJson<double>(resistanceValue_BR),
      'resistanceValue_AR': serializer.toJson<double>(resistanceValue_AR),
    };
  }

  EERTestLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String eeName,
          int locNo,
          double resistanceValue_BR,
          double resistanceValue_AR}) =>
      EERTestLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        eeName: eeName ?? this.eeName,
        locNo: locNo ?? this.locNo,
        resistanceValue_BR: resistanceValue_BR ?? this.resistanceValue_BR,
        resistanceValue_AR: resistanceValue_AR ?? this.resistanceValue_AR,
      );
  @override
  String toString() {
    return (StringBuffer('EERTestLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('eeName: $eeName, ')
          ..write('locNo: $locNo, ')
          ..write('resistanceValue_BR: $resistanceValue_BR, ')
          ..write('resistanceValue_AR: $resistanceValue_AR')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, eeName, locNo, resistanceValue_BR, resistanceValue_AR);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EERTestLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.eeName == this.eeName &&
          other.locNo == this.locNo &&
          other.resistanceValue_BR == this.resistanceValue_BR &&
          other.resistanceValue_AR == this.resistanceValue_AR);
}

class EERTestLocalDatasourceImplCompanion
    extends UpdateCompanion<EERTestLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> eeName;
  final Value<int> locNo;
  final Value<double> resistanceValue_BR;
  final Value<double> resistanceValue_AR;
  const EERTestLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.eeName = const Value.absent(),
    this.locNo = const Value.absent(),
    this.resistanceValue_BR = const Value.absent(),
    this.resistanceValue_AR = const Value.absent(),
  });
  EERTestLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String eeName,
    @required int locNo,
    @required double resistanceValue_BR,
    @required double resistanceValue_AR,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        eeName = Value(eeName),
        locNo = Value(locNo),
        resistanceValue_BR = Value(resistanceValue_BR),
        resistanceValue_AR = Value(resistanceValue_AR);
  static Insertable<EERTestLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> eeName,
    Expression<int> locNo,
    Expression<double> resistanceValue_BR,
    Expression<double> resistanceValue_AR,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (eeName != null) 'ee_name': eeName,
      if (locNo != null) 'loc_no': locNo,
      if (resistanceValue_BR != null)
        'resistance_value_b_r': resistanceValue_BR,
      if (resistanceValue_AR != null)
        'resistance_value_a_r': resistanceValue_AR,
    });
  }

  EERTestLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> eeName,
      Value<int> locNo,
      Value<double> resistanceValue_BR,
      Value<double> resistanceValue_AR}) {
    return EERTestLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      eeName: eeName ?? this.eeName,
      locNo: locNo ?? this.locNo,
      resistanceValue_BR: resistanceValue_BR ?? this.resistanceValue_BR,
      resistanceValue_AR: resistanceValue_AR ?? this.resistanceValue_AR,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (eeName.present) {
      map['ee_name'] = Variable<String>(eeName.value);
    }
    if (locNo.present) {
      map['loc_no'] = Variable<int>(locNo.value);
    }
    if (resistanceValue_BR.present) {
      map['resistance_value_b_r'] = Variable<double>(resistanceValue_BR.value);
    }
    if (resistanceValue_AR.present) {
      map['resistance_value_a_r'] = Variable<double>(resistanceValue_AR.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EERTestLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('eeName: $eeName, ')
          ..write('locNo: $locNo, ')
          ..write('resistanceValue_BR: $resistanceValue_BR, ')
          ..write('resistanceValue_AR: $resistanceValue_AR')
          ..write(')'))
        .toString();
  }
}

class $EERTestLocalDatasourceImplTable extends EERTestLocalDatasourceImpl
    with TableInfo<$EERTestLocalDatasourceImplTable, EERTestLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EERTestLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _eeNameMeta = const VerificationMeta('eeName');
  GeneratedColumn<String> _eeName;
  @override
  GeneratedColumn<String> get eeName => _eeName ??= GeneratedColumn<String>(
      'ee_name', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _locNoMeta = const VerificationMeta('locNo');
  GeneratedColumn<int> _locNo;
  @override
  GeneratedColumn<int> get locNo =>
      _locNo ??= GeneratedColumn<int>('loc_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _resistanceValue_BRMeta =
      const VerificationMeta('resistanceValue_BR');
  GeneratedColumn<double> _resistanceValue_BR;
  @override
  GeneratedColumn<double> get resistanceValue_BR => _resistanceValue_BR ??=
      GeneratedColumn<double>('resistance_value_b_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _resistanceValue_ARMeta =
      const VerificationMeta('resistanceValue_AR');
  GeneratedColumn<double> _resistanceValue_AR;
  @override
  GeneratedColumn<double> get resistanceValue_AR => _resistanceValue_AR ??=
      GeneratedColumn<double>('resistance_value_a_r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        eeName,
        locNo,
        resistanceValue_BR,
        resistanceValue_AR
      ];
  @override
  String get aliasedName => _alias ?? 'e_e_r_test_local_datasource_impl';
  @override
  String get actualTableName => 'e_e_r_test_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<EERTestLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('ee_name')) {
      context.handle(_eeNameMeta,
          eeName.isAcceptableOrUnknown(data['ee_name'], _eeNameMeta));
    } else if (isInserting) {
      context.missing(_eeNameMeta);
    }
    if (data.containsKey('loc_no')) {
      context.handle(
          _locNoMeta, locNo.isAcceptableOrUnknown(data['loc_no'], _locNoMeta));
    } else if (isInserting) {
      context.missing(_locNoMeta);
    }
    if (data.containsKey('resistance_value_b_r')) {
      context.handle(
          _resistanceValue_BRMeta,
          resistanceValue_BR.isAcceptableOrUnknown(
              data['resistance_value_b_r'], _resistanceValue_BRMeta));
    } else if (isInserting) {
      context.missing(_resistanceValue_BRMeta);
    }
    if (data.containsKey('resistance_value_a_r')) {
      context.handle(
          _resistanceValue_ARMeta,
          resistanceValue_AR.isAcceptableOrUnknown(
              data['resistance_value_a_r'], _resistanceValue_ARMeta));
    } else if (isInserting) {
      context.missing(_resistanceValue_ARMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EERTestLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EERTestLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EERTestLocalDatasourceImplTable createAlias(String alias) {
    return $EERTestLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class BbLocalData extends DataClass implements Insertable<BbLocalData> {
  final DateTime lastUpdated;
  final String TestedBy;
  final String VerifiedBy;
  final String WitnessedBy;
  final int databaseID;
  final int id;
  final String etype;
  final String designation;
  final String location;
  final String panel;
  final String rating;
  final int noOfBar;
  final int trNo;
  final DateTime dateOfTesting;
  BbLocalData(
      {@required this.lastUpdated,
      @required this.TestedBy,
      @required this.VerifiedBy,
      @required this.WitnessedBy,
      @required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.designation,
      @required this.location,
      @required this.panel,
      @required this.rating,
      @required this.noOfBar,
      @required this.trNo,
      @required this.dateOfTesting});
  factory BbLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return BbLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      TestedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      VerifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      rating: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rating']),
      noOfBar: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_bar']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || TestedBy != null) {
      map['tested_by'] = Variable<String>(TestedBy);
    }
    if (!nullToAbsent || VerifiedBy != null) {
      map['verified_by'] = Variable<String>(VerifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || rating != null) {
      map['rating'] = Variable<String>(rating);
    }
    if (!nullToAbsent || noOfBar != null) {
      map['no_of_bar'] = Variable<int>(noOfBar);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    return map;
  }

  BbLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return BbLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      TestedBy: TestedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(TestedBy),
      VerifiedBy: VerifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(VerifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      rating:
          rating == null && nullToAbsent ? const Value.absent() : Value(rating),
      noOfBar: noOfBar == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfBar),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
    );
  }

  factory BbLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return BbLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      TestedBy: serializer.fromJson<String>(json['TestedBy']),
      VerifiedBy: serializer.fromJson<String>(json['VerifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      panel: serializer.fromJson<String>(json['panel']),
      rating: serializer.fromJson<String>(json['rating']),
      noOfBar: serializer.fromJson<int>(json['noOfBar']),
      trNo: serializer.fromJson<int>(json['trNo']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'TestedBy': serializer.toJson<String>(TestedBy),
      'VerifiedBy': serializer.toJson<String>(VerifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'panel': serializer.toJson<String>(panel),
      'rating': serializer.toJson<String>(rating),
      'noOfBar': serializer.toJson<int>(noOfBar),
      'trNo': serializer.toJson<int>(trNo),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
    };
  }

  BbLocalData copyWith(
          {DateTime lastUpdated,
          String TestedBy,
          String VerifiedBy,
          String WitnessedBy,
          int databaseID,
          int id,
          String etype,
          String designation,
          String location,
          String panel,
          String rating,
          int noOfBar,
          int trNo,
          DateTime dateOfTesting}) =>
      BbLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        TestedBy: TestedBy ?? this.TestedBy,
        VerifiedBy: VerifiedBy ?? this.VerifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        panel: panel ?? this.panel,
        rating: rating ?? this.rating,
        noOfBar: noOfBar ?? this.noOfBar,
        trNo: trNo ?? this.trNo,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      );
  @override
  String toString() {
    return (StringBuffer('BbLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('panel: $panel, ')
          ..write('rating: $rating, ')
          ..write('noOfBar: $noOfBar, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      TestedBy,
      VerifiedBy,
      WitnessedBy,
      databaseID,
      id,
      etype,
      designation,
      location,
      panel,
      rating,
      noOfBar,
      trNo,
      dateOfTesting);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is BbLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.TestedBy == this.TestedBy &&
          other.VerifiedBy == this.VerifiedBy &&
          other.WitnessedBy == this.WitnessedBy &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.panel == this.panel &&
          other.rating == this.rating &&
          other.noOfBar == this.noOfBar &&
          other.trNo == this.trNo &&
          other.dateOfTesting == this.dateOfTesting);
}

class BbLocalDatasourceImplCompanion extends UpdateCompanion<BbLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> TestedBy;
  final Value<String> VerifiedBy;
  final Value<String> WitnessedBy;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> panel;
  final Value<String> rating;
  final Value<int> noOfBar;
  final Value<int> trNo;
  final Value<DateTime> dateOfTesting;
  const BbLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.TestedBy = const Value.absent(),
    this.VerifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.panel = const Value.absent(),
    this.rating = const Value.absent(),
    this.noOfBar = const Value.absent(),
    this.trNo = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
  });
  BbLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String TestedBy,
    @required String VerifiedBy,
    @required String WitnessedBy,
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required String designation,
    @required String location,
    @required String panel,
    @required String rating,
    @required int noOfBar,
    @required int trNo,
    this.dateOfTesting = const Value.absent(),
  })  : TestedBy = Value(TestedBy),
        VerifiedBy = Value(VerifiedBy),
        WitnessedBy = Value(WitnessedBy),
        databaseID = Value(databaseID),
        etype = Value(etype),
        designation = Value(designation),
        location = Value(location),
        panel = Value(panel),
        rating = Value(rating),
        noOfBar = Value(noOfBar),
        trNo = Value(trNo);
  static Insertable<BbLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> TestedBy,
    Expression<String> VerifiedBy,
    Expression<String> WitnessedBy,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> panel,
    Expression<String> rating,
    Expression<int> noOfBar,
    Expression<int> trNo,
    Expression<DateTime> dateOfTesting,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (TestedBy != null) 'tested_by': TestedBy,
      if (VerifiedBy != null) 'verified_by': VerifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (panel != null) 'panel': panel,
      if (rating != null) 'rating': rating,
      if (noOfBar != null) 'no_of_bar': noOfBar,
      if (trNo != null) 'tr_no': trNo,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
    });
  }

  BbLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> TestedBy,
      Value<String> VerifiedBy,
      Value<String> WitnessedBy,
      Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<String> designation,
      Value<String> location,
      Value<String> panel,
      Value<String> rating,
      Value<int> noOfBar,
      Value<int> trNo,
      Value<DateTime> dateOfTesting}) {
    return BbLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      TestedBy: TestedBy ?? this.TestedBy,
      VerifiedBy: VerifiedBy ?? this.VerifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      panel: panel ?? this.panel,
      rating: rating ?? this.rating,
      noOfBar: noOfBar ?? this.noOfBar,
      trNo: trNo ?? this.trNo,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (TestedBy.present) {
      map['tested_by'] = Variable<String>(TestedBy.value);
    }
    if (VerifiedBy.present) {
      map['verified_by'] = Variable<String>(VerifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (rating.present) {
      map['rating'] = Variable<String>(rating.value);
    }
    if (noOfBar.present) {
      map['no_of_bar'] = Variable<int>(noOfBar.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('BbLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('panel: $panel, ')
          ..write('rating: $rating, ')
          ..write('noOfBar: $noOfBar, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }
}

class $BbLocalDatasourceImplTable extends BbLocalDatasourceImpl
    with TableInfo<$BbLocalDatasourceImplTable, BbLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $BbLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _TestedByMeta = const VerificationMeta('TestedBy');
  GeneratedColumn<String> _TestedBy;
  @override
  GeneratedColumn<String> get TestedBy => _TestedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _VerifiedByMeta = const VerificationMeta('VerifiedBy');
  GeneratedColumn<String> _VerifiedBy;
  @override
  GeneratedColumn<String> get VerifiedBy =>
      _VerifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratingMeta = const VerificationMeta('rating');
  GeneratedColumn<String> _rating;
  @override
  GeneratedColumn<String> get rating => _rating ??= GeneratedColumn<String>(
      'rating', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _noOfBarMeta = const VerificationMeta('noOfBar');
  GeneratedColumn<int> _noOfBar;
  @override
  GeneratedColumn<int> get noOfBar =>
      _noOfBar ??= GeneratedColumn<int>('no_of_bar', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        TestedBy,
        VerifiedBy,
        WitnessedBy,
        databaseID,
        id,
        etype,
        designation,
        location,
        panel,
        rating,
        noOfBar,
        trNo,
        dateOfTesting
      ];
  @override
  String get aliasedName => _alias ?? 'bb_local_datasource_impl';
  @override
  String get actualTableName => 'bb_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<BbLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_TestedByMeta,
          TestedBy.isAcceptableOrUnknown(data['tested_by'], _TestedByMeta));
    } else if (isInserting) {
      context.missing(_TestedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _VerifiedByMeta,
          VerifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _VerifiedByMeta));
    } else if (isInserting) {
      context.missing(_VerifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('rating')) {
      context.handle(_ratingMeta,
          rating.isAcceptableOrUnknown(data['rating'], _ratingMeta));
    } else if (isInserting) {
      context.missing(_ratingMeta);
    }
    if (data.containsKey('no_of_bar')) {
      context.handle(_noOfBarMeta,
          noOfBar.isAcceptableOrUnknown(data['no_of_bar'], _noOfBarMeta));
    } else if (isInserting) {
      context.missing(_noOfBarMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  BbLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return BbLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $BbLocalDatasourceImplTable createAlias(String alias) {
    return $BbLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class BbIrLocalData extends DataClass implements Insertable<BbIrLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final int bbRefId;
  final double rA;
  final double yA;
  final double bA;
  final double rB;
  final double yB;
  final double bB;
  final double nA;
  final double nB;
  final double ryA;
  final double ybA;
  final double brA;
  final double ryB;
  final double ybB;
  final double brB;
  final double rnA;
  final double rnB;
  final double ynA;
  final double ynB;
  final double bnA;
  final double bnB;
  BbIrLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.bbRefId,
      @required this.rA,
      @required this.yA,
      @required this.bA,
      @required this.rB,
      @required this.yB,
      @required this.bB,
      @required this.nA,
      @required this.nB,
      @required this.ryA,
      @required this.ybA,
      @required this.brA,
      @required this.ryB,
      @required this.ybB,
      @required this.brB,
      @required this.rnA,
      @required this.rnB,
      @required this.ynA,
      @required this.ynB,
      @required this.bnA,
      @required this.bnB});
  factory BbIrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return BbIrLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      bbRefId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bb_ref_id']),
      rA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_a']),
      yA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_a']),
      bA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_a']),
      rB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_b']),
      yB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_b']),
      bB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_b']),
      nA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}n_a']),
      nB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}n_b']),
      ryA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_a']),
      ybA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_a']),
      brA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_a']),
      ryB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ry_b']),
      ybB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yb_b']),
      brB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}br_b']),
      rnA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rn_a']),
      rnB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rn_b']),
      ynA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yn_a']),
      ynB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yn_b']),
      bnA: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bn_a']),
      bnB: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bn_b']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || bbRefId != null) {
      map['bb_ref_id'] = Variable<int>(bbRefId);
    }
    if (!nullToAbsent || rA != null) {
      map['r_a'] = Variable<double>(rA);
    }
    if (!nullToAbsent || yA != null) {
      map['y_a'] = Variable<double>(yA);
    }
    if (!nullToAbsent || bA != null) {
      map['b_a'] = Variable<double>(bA);
    }
    if (!nullToAbsent || rB != null) {
      map['r_b'] = Variable<double>(rB);
    }
    if (!nullToAbsent || yB != null) {
      map['y_b'] = Variable<double>(yB);
    }
    if (!nullToAbsent || bB != null) {
      map['b_b'] = Variable<double>(bB);
    }
    if (!nullToAbsent || nA != null) {
      map['n_a'] = Variable<double>(nA);
    }
    if (!nullToAbsent || nB != null) {
      map['n_b'] = Variable<double>(nB);
    }
    if (!nullToAbsent || ryA != null) {
      map['ry_a'] = Variable<double>(ryA);
    }
    if (!nullToAbsent || ybA != null) {
      map['yb_a'] = Variable<double>(ybA);
    }
    if (!nullToAbsent || brA != null) {
      map['br_a'] = Variable<double>(brA);
    }
    if (!nullToAbsent || ryB != null) {
      map['ry_b'] = Variable<double>(ryB);
    }
    if (!nullToAbsent || ybB != null) {
      map['yb_b'] = Variable<double>(ybB);
    }
    if (!nullToAbsent || brB != null) {
      map['br_b'] = Variable<double>(brB);
    }
    if (!nullToAbsent || rnA != null) {
      map['rn_a'] = Variable<double>(rnA);
    }
    if (!nullToAbsent || rnB != null) {
      map['rn_b'] = Variable<double>(rnB);
    }
    if (!nullToAbsent || ynA != null) {
      map['yn_a'] = Variable<double>(ynA);
    }
    if (!nullToAbsent || ynB != null) {
      map['yn_b'] = Variable<double>(ynB);
    }
    if (!nullToAbsent || bnA != null) {
      map['bn_a'] = Variable<double>(bnA);
    }
    if (!nullToAbsent || bnB != null) {
      map['bn_b'] = Variable<double>(bnB);
    }
    return map;
  }

  BbIrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return BbIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      bbRefId: bbRefId == null && nullToAbsent
          ? const Value.absent()
          : Value(bbRefId),
      rA: rA == null && nullToAbsent ? const Value.absent() : Value(rA),
      yA: yA == null && nullToAbsent ? const Value.absent() : Value(yA),
      bA: bA == null && nullToAbsent ? const Value.absent() : Value(bA),
      rB: rB == null && nullToAbsent ? const Value.absent() : Value(rB),
      yB: yB == null && nullToAbsent ? const Value.absent() : Value(yB),
      bB: bB == null && nullToAbsent ? const Value.absent() : Value(bB),
      nA: nA == null && nullToAbsent ? const Value.absent() : Value(nA),
      nB: nB == null && nullToAbsent ? const Value.absent() : Value(nB),
      ryA: ryA == null && nullToAbsent ? const Value.absent() : Value(ryA),
      ybA: ybA == null && nullToAbsent ? const Value.absent() : Value(ybA),
      brA: brA == null && nullToAbsent ? const Value.absent() : Value(brA),
      ryB: ryB == null && nullToAbsent ? const Value.absent() : Value(ryB),
      ybB: ybB == null && nullToAbsent ? const Value.absent() : Value(ybB),
      brB: brB == null && nullToAbsent ? const Value.absent() : Value(brB),
      rnA: rnA == null && nullToAbsent ? const Value.absent() : Value(rnA),
      rnB: rnB == null && nullToAbsent ? const Value.absent() : Value(rnB),
      ynA: ynA == null && nullToAbsent ? const Value.absent() : Value(ynA),
      ynB: ynB == null && nullToAbsent ? const Value.absent() : Value(ynB),
      bnA: bnA == null && nullToAbsent ? const Value.absent() : Value(bnA),
      bnB: bnB == null && nullToAbsent ? const Value.absent() : Value(bnB),
    );
  }

  factory BbIrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return BbIrLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      bbRefId: serializer.fromJson<int>(json['bbRefId']),
      rA: serializer.fromJson<double>(json['rA']),
      yA: serializer.fromJson<double>(json['yA']),
      bA: serializer.fromJson<double>(json['bA']),
      rB: serializer.fromJson<double>(json['rB']),
      yB: serializer.fromJson<double>(json['yB']),
      bB: serializer.fromJson<double>(json['bB']),
      nA: serializer.fromJson<double>(json['nA']),
      nB: serializer.fromJson<double>(json['nB']),
      ryA: serializer.fromJson<double>(json['ryA']),
      ybA: serializer.fromJson<double>(json['ybA']),
      brA: serializer.fromJson<double>(json['brA']),
      ryB: serializer.fromJson<double>(json['ryB']),
      ybB: serializer.fromJson<double>(json['ybB']),
      brB: serializer.fromJson<double>(json['brB']),
      rnA: serializer.fromJson<double>(json['rnA']),
      rnB: serializer.fromJson<double>(json['rnB']),
      ynA: serializer.fromJson<double>(json['ynA']),
      ynB: serializer.fromJson<double>(json['ynB']),
      bnA: serializer.fromJson<double>(json['bnA']),
      bnB: serializer.fromJson<double>(json['bnB']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'bbRefId': serializer.toJson<int>(bbRefId),
      'rA': serializer.toJson<double>(rA),
      'yA': serializer.toJson<double>(yA),
      'bA': serializer.toJson<double>(bA),
      'rB': serializer.toJson<double>(rB),
      'yB': serializer.toJson<double>(yB),
      'bB': serializer.toJson<double>(bB),
      'nA': serializer.toJson<double>(nA),
      'nB': serializer.toJson<double>(nB),
      'ryA': serializer.toJson<double>(ryA),
      'ybA': serializer.toJson<double>(ybA),
      'brA': serializer.toJson<double>(brA),
      'ryB': serializer.toJson<double>(ryB),
      'ybB': serializer.toJson<double>(ybB),
      'brB': serializer.toJson<double>(brB),
      'rnA': serializer.toJson<double>(rnA),
      'rnB': serializer.toJson<double>(rnB),
      'ynA': serializer.toJson<double>(ynA),
      'ynB': serializer.toJson<double>(ynB),
      'bnA': serializer.toJson<double>(bnA),
      'bnB': serializer.toJson<double>(bnB),
    };
  }

  BbIrLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          int bbRefId,
          double rA,
          double yA,
          double bA,
          double rB,
          double yB,
          double bB,
          double nA,
          double nB,
          double ryA,
          double ybA,
          double brA,
          double ryB,
          double ybB,
          double brB,
          double rnA,
          double rnB,
          double ynA,
          double ynB,
          double bnA,
          double bnB}) =>
      BbIrLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        bbRefId: bbRefId ?? this.bbRefId,
        rA: rA ?? this.rA,
        yA: yA ?? this.yA,
        bA: bA ?? this.bA,
        rB: rB ?? this.rB,
        yB: yB ?? this.yB,
        bB: bB ?? this.bB,
        nA: nA ?? this.nA,
        nB: nB ?? this.nB,
        ryA: ryA ?? this.ryA,
        ybA: ybA ?? this.ybA,
        brA: brA ?? this.brA,
        ryB: ryB ?? this.ryB,
        ybB: ybB ?? this.ybB,
        brB: brB ?? this.brB,
        rnA: rnA ?? this.rnA,
        rnB: rnB ?? this.rnB,
        ynA: ynA ?? this.ynA,
        ynB: ynB ?? this.ynB,
        bnA: bnA ?? this.bnA,
        bnB: bnB ?? this.bnB,
      );
  @override
  String toString() {
    return (StringBuffer('BbIrLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('bbRefId: $bbRefId, ')
          ..write('rA: $rA, ')
          ..write('yA: $yA, ')
          ..write('bA: $bA, ')
          ..write('rB: $rB, ')
          ..write('yB: $yB, ')
          ..write('bB: $bB, ')
          ..write('nA: $nA, ')
          ..write('nB: $nB, ')
          ..write('ryA: $ryA, ')
          ..write('ybA: $ybA, ')
          ..write('brA: $brA, ')
          ..write('ryB: $ryB, ')
          ..write('ybB: $ybB, ')
          ..write('brB: $brB, ')
          ..write('rnA: $rnA, ')
          ..write('rnB: $rnB, ')
          ..write('ynA: $ynA, ')
          ..write('ynB: $ynB, ')
          ..write('bnA: $bnA, ')
          ..write('bnB: $bnB')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        bbRefId,
        rA,
        yA,
        bA,
        rB,
        yB,
        bB,
        nA,
        nB,
        ryA,
        ybA,
        brA,
        ryB,
        ybB,
        brB,
        rnA,
        rnB,
        ynA,
        ynB,
        bnA,
        bnB
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is BbIrLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.bbRefId == this.bbRefId &&
          other.rA == this.rA &&
          other.yA == this.yA &&
          other.bA == this.bA &&
          other.rB == this.rB &&
          other.yB == this.yB &&
          other.bB == this.bB &&
          other.nA == this.nA &&
          other.nB == this.nB &&
          other.ryA == this.ryA &&
          other.ybA == this.ybA &&
          other.brA == this.brA &&
          other.ryB == this.ryB &&
          other.ybB == this.ybB &&
          other.brB == this.brB &&
          other.rnA == this.rnA &&
          other.rnB == this.rnB &&
          other.ynA == this.ynA &&
          other.ynB == this.ynB &&
          other.bnA == this.bnA &&
          other.bnB == this.bnB);
}

class BbIrLocalDatasourceImplCompanion extends UpdateCompanion<BbIrLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<int> bbRefId;
  final Value<double> rA;
  final Value<double> yA;
  final Value<double> bA;
  final Value<double> rB;
  final Value<double> yB;
  final Value<double> bB;
  final Value<double> nA;
  final Value<double> nB;
  final Value<double> ryA;
  final Value<double> ybA;
  final Value<double> brA;
  final Value<double> ryB;
  final Value<double> ybB;
  final Value<double> brB;
  final Value<double> rnA;
  final Value<double> rnB;
  final Value<double> ynA;
  final Value<double> ynB;
  final Value<double> bnA;
  final Value<double> bnB;
  const BbIrLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.bbRefId = const Value.absent(),
    this.rA = const Value.absent(),
    this.yA = const Value.absent(),
    this.bA = const Value.absent(),
    this.rB = const Value.absent(),
    this.yB = const Value.absent(),
    this.bB = const Value.absent(),
    this.nA = const Value.absent(),
    this.nB = const Value.absent(),
    this.ryA = const Value.absent(),
    this.ybA = const Value.absent(),
    this.brA = const Value.absent(),
    this.ryB = const Value.absent(),
    this.ybB = const Value.absent(),
    this.brB = const Value.absent(),
    this.rnA = const Value.absent(),
    this.rnB = const Value.absent(),
    this.ynA = const Value.absent(),
    this.ynB = const Value.absent(),
    this.bnA = const Value.absent(),
    this.bnB = const Value.absent(),
  });
  BbIrLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required int bbRefId,
    @required double rA,
    @required double yA,
    @required double bA,
    @required double rB,
    @required double yB,
    @required double bB,
    @required double nA,
    @required double nB,
    @required double ryA,
    @required double ybA,
    @required double brA,
    @required double ryB,
    @required double ybB,
    @required double brB,
    @required double rnA,
    @required double rnB,
    @required double ynA,
    @required double ynB,
    @required double bnA,
    @required double bnB,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        bbRefId = Value(bbRefId),
        rA = Value(rA),
        yA = Value(yA),
        bA = Value(bA),
        rB = Value(rB),
        yB = Value(yB),
        bB = Value(bB),
        nA = Value(nA),
        nB = Value(nB),
        ryA = Value(ryA),
        ybA = Value(ybA),
        brA = Value(brA),
        ryB = Value(ryB),
        ybB = Value(ybB),
        brB = Value(brB),
        rnA = Value(rnA),
        rnB = Value(rnB),
        ynA = Value(ynA),
        ynB = Value(ynB),
        bnA = Value(bnA),
        bnB = Value(bnB);
  static Insertable<BbIrLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<int> bbRefId,
    Expression<double> rA,
    Expression<double> yA,
    Expression<double> bA,
    Expression<double> rB,
    Expression<double> yB,
    Expression<double> bB,
    Expression<double> nA,
    Expression<double> nB,
    Expression<double> ryA,
    Expression<double> ybA,
    Expression<double> brA,
    Expression<double> ryB,
    Expression<double> ybB,
    Expression<double> brB,
    Expression<double> rnA,
    Expression<double> rnB,
    Expression<double> ynA,
    Expression<double> ynB,
    Expression<double> bnA,
    Expression<double> bnB,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (bbRefId != null) 'bb_ref_id': bbRefId,
      if (rA != null) 'r_a': rA,
      if (yA != null) 'y_a': yA,
      if (bA != null) 'b_a': bA,
      if (rB != null) 'r_b': rB,
      if (yB != null) 'y_b': yB,
      if (bB != null) 'b_b': bB,
      if (nA != null) 'n_a': nA,
      if (nB != null) 'n_b': nB,
      if (ryA != null) 'ry_a': ryA,
      if (ybA != null) 'yb_a': ybA,
      if (brA != null) 'br_a': brA,
      if (ryB != null) 'ry_b': ryB,
      if (ybB != null) 'yb_b': ybB,
      if (brB != null) 'br_b': brB,
      if (rnA != null) 'rn_a': rnA,
      if (rnB != null) 'rn_b': rnB,
      if (ynA != null) 'yn_a': ynA,
      if (ynB != null) 'yn_b': ynB,
      if (bnA != null) 'bn_a': bnA,
      if (bnB != null) 'bn_b': bnB,
    });
  }

  BbIrLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<int> bbRefId,
      Value<double> rA,
      Value<double> yA,
      Value<double> bA,
      Value<double> rB,
      Value<double> yB,
      Value<double> bB,
      Value<double> nA,
      Value<double> nB,
      Value<double> ryA,
      Value<double> ybA,
      Value<double> brA,
      Value<double> ryB,
      Value<double> ybB,
      Value<double> brB,
      Value<double> rnA,
      Value<double> rnB,
      Value<double> ynA,
      Value<double> ynB,
      Value<double> bnA,
      Value<double> bnB}) {
    return BbIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      bbRefId: bbRefId ?? this.bbRefId,
      rA: rA ?? this.rA,
      yA: yA ?? this.yA,
      bA: bA ?? this.bA,
      rB: rB ?? this.rB,
      yB: yB ?? this.yB,
      bB: bB ?? this.bB,
      nA: nA ?? this.nA,
      nB: nB ?? this.nB,
      ryA: ryA ?? this.ryA,
      ybA: ybA ?? this.ybA,
      brA: brA ?? this.brA,
      ryB: ryB ?? this.ryB,
      ybB: ybB ?? this.ybB,
      brB: brB ?? this.brB,
      rnA: rnA ?? this.rnA,
      rnB: rnB ?? this.rnB,
      ynA: ynA ?? this.ynA,
      ynB: ynB ?? this.ynB,
      bnA: bnA ?? this.bnA,
      bnB: bnB ?? this.bnB,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (bbRefId.present) {
      map['bb_ref_id'] = Variable<int>(bbRefId.value);
    }
    if (rA.present) {
      map['r_a'] = Variable<double>(rA.value);
    }
    if (yA.present) {
      map['y_a'] = Variable<double>(yA.value);
    }
    if (bA.present) {
      map['b_a'] = Variable<double>(bA.value);
    }
    if (rB.present) {
      map['r_b'] = Variable<double>(rB.value);
    }
    if (yB.present) {
      map['y_b'] = Variable<double>(yB.value);
    }
    if (bB.present) {
      map['b_b'] = Variable<double>(bB.value);
    }
    if (nA.present) {
      map['n_a'] = Variable<double>(nA.value);
    }
    if (nB.present) {
      map['n_b'] = Variable<double>(nB.value);
    }
    if (ryA.present) {
      map['ry_a'] = Variable<double>(ryA.value);
    }
    if (ybA.present) {
      map['yb_a'] = Variable<double>(ybA.value);
    }
    if (brA.present) {
      map['br_a'] = Variable<double>(brA.value);
    }
    if (ryB.present) {
      map['ry_b'] = Variable<double>(ryB.value);
    }
    if (ybB.present) {
      map['yb_b'] = Variable<double>(ybB.value);
    }
    if (brB.present) {
      map['br_b'] = Variable<double>(brB.value);
    }
    if (rnA.present) {
      map['rn_a'] = Variable<double>(rnA.value);
    }
    if (rnB.present) {
      map['rn_b'] = Variable<double>(rnB.value);
    }
    if (ynA.present) {
      map['yn_a'] = Variable<double>(ynA.value);
    }
    if (ynB.present) {
      map['yn_b'] = Variable<double>(ynB.value);
    }
    if (bnA.present) {
      map['bn_a'] = Variable<double>(bnA.value);
    }
    if (bnB.present) {
      map['bn_b'] = Variable<double>(bnB.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('BbIrLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('bbRefId: $bbRefId, ')
          ..write('rA: $rA, ')
          ..write('yA: $yA, ')
          ..write('bA: $bA, ')
          ..write('rB: $rB, ')
          ..write('yB: $yB, ')
          ..write('bB: $bB, ')
          ..write('nA: $nA, ')
          ..write('nB: $nB, ')
          ..write('ryA: $ryA, ')
          ..write('ybA: $ybA, ')
          ..write('brA: $brA, ')
          ..write('ryB: $ryB, ')
          ..write('ybB: $ybB, ')
          ..write('brB: $brB, ')
          ..write('rnA: $rnA, ')
          ..write('rnB: $rnB, ')
          ..write('ynA: $ynA, ')
          ..write('ynB: $ynB, ')
          ..write('bnA: $bnA, ')
          ..write('bnB: $bnB')
          ..write(')'))
        .toString();
  }
}

class $BbIrLocalDatasourceImplTable extends BbIrLocalDatasourceImpl
    with TableInfo<$BbIrLocalDatasourceImplTable, BbIrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $BbIrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _bbRefIdMeta = const VerificationMeta('bbRefId');
  GeneratedColumn<int> _bbRefId;
  @override
  GeneratedColumn<int> get bbRefId =>
      _bbRefId ??= GeneratedColumn<int>('bb_ref_id', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _rAMeta = const VerificationMeta('rA');
  GeneratedColumn<double> _rA;
  @override
  GeneratedColumn<double> get rA =>
      _rA ??= GeneratedColumn<double>('r_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yAMeta = const VerificationMeta('yA');
  GeneratedColumn<double> _yA;
  @override
  GeneratedColumn<double> get yA =>
      _yA ??= GeneratedColumn<double>('y_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bAMeta = const VerificationMeta('bA');
  GeneratedColumn<double> _bA;
  @override
  GeneratedColumn<double> get bA =>
      _bA ??= GeneratedColumn<double>('b_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rBMeta = const VerificationMeta('rB');
  GeneratedColumn<double> _rB;
  @override
  GeneratedColumn<double> get rB =>
      _rB ??= GeneratedColumn<double>('r_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yBMeta = const VerificationMeta('yB');
  GeneratedColumn<double> _yB;
  @override
  GeneratedColumn<double> get yB =>
      _yB ??= GeneratedColumn<double>('y_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bBMeta = const VerificationMeta('bB');
  GeneratedColumn<double> _bB;
  @override
  GeneratedColumn<double> get bB =>
      _bB ??= GeneratedColumn<double>('b_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _nAMeta = const VerificationMeta('nA');
  GeneratedColumn<double> _nA;
  @override
  GeneratedColumn<double> get nA =>
      _nA ??= GeneratedColumn<double>('n_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _nBMeta = const VerificationMeta('nB');
  GeneratedColumn<double> _nB;
  @override
  GeneratedColumn<double> get nB =>
      _nB ??= GeneratedColumn<double>('n_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ryAMeta = const VerificationMeta('ryA');
  GeneratedColumn<double> _ryA;
  @override
  GeneratedColumn<double> get ryA =>
      _ryA ??= GeneratedColumn<double>('ry_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ybAMeta = const VerificationMeta('ybA');
  GeneratedColumn<double> _ybA;
  @override
  GeneratedColumn<double> get ybA =>
      _ybA ??= GeneratedColumn<double>('yb_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _brAMeta = const VerificationMeta('brA');
  GeneratedColumn<double> _brA;
  @override
  GeneratedColumn<double> get brA =>
      _brA ??= GeneratedColumn<double>('br_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ryBMeta = const VerificationMeta('ryB');
  GeneratedColumn<double> _ryB;
  @override
  GeneratedColumn<double> get ryB =>
      _ryB ??= GeneratedColumn<double>('ry_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ybBMeta = const VerificationMeta('ybB');
  GeneratedColumn<double> _ybB;
  @override
  GeneratedColumn<double> get ybB =>
      _ybB ??= GeneratedColumn<double>('yb_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _brBMeta = const VerificationMeta('brB');
  GeneratedColumn<double> _brB;
  @override
  GeneratedColumn<double> get brB =>
      _brB ??= GeneratedColumn<double>('br_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rnAMeta = const VerificationMeta('rnA');
  GeneratedColumn<double> _rnA;
  @override
  GeneratedColumn<double> get rnA =>
      _rnA ??= GeneratedColumn<double>('rn_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rnBMeta = const VerificationMeta('rnB');
  GeneratedColumn<double> _rnB;
  @override
  GeneratedColumn<double> get rnB =>
      _rnB ??= GeneratedColumn<double>('rn_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ynAMeta = const VerificationMeta('ynA');
  GeneratedColumn<double> _ynA;
  @override
  GeneratedColumn<double> get ynA =>
      _ynA ??= GeneratedColumn<double>('yn_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ynBMeta = const VerificationMeta('ynB');
  GeneratedColumn<double> _ynB;
  @override
  GeneratedColumn<double> get ynB =>
      _ynB ??= GeneratedColumn<double>('yn_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bnAMeta = const VerificationMeta('bnA');
  GeneratedColumn<double> _bnA;
  @override
  GeneratedColumn<double> get bnA =>
      _bnA ??= GeneratedColumn<double>('bn_a', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bnBMeta = const VerificationMeta('bnB');
  GeneratedColumn<double> _bnB;
  @override
  GeneratedColumn<double> get bnB =>
      _bnB ??= GeneratedColumn<double>('bn_b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        bbRefId,
        rA,
        yA,
        bA,
        rB,
        yB,
        bB,
        nA,
        nB,
        ryA,
        ybA,
        brA,
        ryB,
        ybB,
        brB,
        rnA,
        rnB,
        ynA,
        ynB,
        bnA,
        bnB
      ];
  @override
  String get aliasedName => _alias ?? 'bb_ir_local_datasource_impl';
  @override
  String get actualTableName => 'bb_ir_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<BbIrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('bb_ref_id')) {
      context.handle(_bbRefIdMeta,
          bbRefId.isAcceptableOrUnknown(data['bb_ref_id'], _bbRefIdMeta));
    } else if (isInserting) {
      context.missing(_bbRefIdMeta);
    }
    if (data.containsKey('r_a')) {
      context.handle(_rAMeta, rA.isAcceptableOrUnknown(data['r_a'], _rAMeta));
    } else if (isInserting) {
      context.missing(_rAMeta);
    }
    if (data.containsKey('y_a')) {
      context.handle(_yAMeta, yA.isAcceptableOrUnknown(data['y_a'], _yAMeta));
    } else if (isInserting) {
      context.missing(_yAMeta);
    }
    if (data.containsKey('b_a')) {
      context.handle(_bAMeta, bA.isAcceptableOrUnknown(data['b_a'], _bAMeta));
    } else if (isInserting) {
      context.missing(_bAMeta);
    }
    if (data.containsKey('r_b')) {
      context.handle(_rBMeta, rB.isAcceptableOrUnknown(data['r_b'], _rBMeta));
    } else if (isInserting) {
      context.missing(_rBMeta);
    }
    if (data.containsKey('y_b')) {
      context.handle(_yBMeta, yB.isAcceptableOrUnknown(data['y_b'], _yBMeta));
    } else if (isInserting) {
      context.missing(_yBMeta);
    }
    if (data.containsKey('b_b')) {
      context.handle(_bBMeta, bB.isAcceptableOrUnknown(data['b_b'], _bBMeta));
    } else if (isInserting) {
      context.missing(_bBMeta);
    }
    if (data.containsKey('n_a')) {
      context.handle(_nAMeta, nA.isAcceptableOrUnknown(data['n_a'], _nAMeta));
    } else if (isInserting) {
      context.missing(_nAMeta);
    }
    if (data.containsKey('n_b')) {
      context.handle(_nBMeta, nB.isAcceptableOrUnknown(data['n_b'], _nBMeta));
    } else if (isInserting) {
      context.missing(_nBMeta);
    }
    if (data.containsKey('ry_a')) {
      context.handle(
          _ryAMeta, ryA.isAcceptableOrUnknown(data['ry_a'], _ryAMeta));
    } else if (isInserting) {
      context.missing(_ryAMeta);
    }
    if (data.containsKey('yb_a')) {
      context.handle(
          _ybAMeta, ybA.isAcceptableOrUnknown(data['yb_a'], _ybAMeta));
    } else if (isInserting) {
      context.missing(_ybAMeta);
    }
    if (data.containsKey('br_a')) {
      context.handle(
          _brAMeta, brA.isAcceptableOrUnknown(data['br_a'], _brAMeta));
    } else if (isInserting) {
      context.missing(_brAMeta);
    }
    if (data.containsKey('ry_b')) {
      context.handle(
          _ryBMeta, ryB.isAcceptableOrUnknown(data['ry_b'], _ryBMeta));
    } else if (isInserting) {
      context.missing(_ryBMeta);
    }
    if (data.containsKey('yb_b')) {
      context.handle(
          _ybBMeta, ybB.isAcceptableOrUnknown(data['yb_b'], _ybBMeta));
    } else if (isInserting) {
      context.missing(_ybBMeta);
    }
    if (data.containsKey('br_b')) {
      context.handle(
          _brBMeta, brB.isAcceptableOrUnknown(data['br_b'], _brBMeta));
    } else if (isInserting) {
      context.missing(_brBMeta);
    }
    if (data.containsKey('rn_a')) {
      context.handle(
          _rnAMeta, rnA.isAcceptableOrUnknown(data['rn_a'], _rnAMeta));
    } else if (isInserting) {
      context.missing(_rnAMeta);
    }
    if (data.containsKey('rn_b')) {
      context.handle(
          _rnBMeta, rnB.isAcceptableOrUnknown(data['rn_b'], _rnBMeta));
    } else if (isInserting) {
      context.missing(_rnBMeta);
    }
    if (data.containsKey('yn_a')) {
      context.handle(
          _ynAMeta, ynA.isAcceptableOrUnknown(data['yn_a'], _ynAMeta));
    } else if (isInserting) {
      context.missing(_ynAMeta);
    }
    if (data.containsKey('yn_b')) {
      context.handle(
          _ynBMeta, ynB.isAcceptableOrUnknown(data['yn_b'], _ynBMeta));
    } else if (isInserting) {
      context.missing(_ynBMeta);
    }
    if (data.containsKey('bn_a')) {
      context.handle(
          _bnAMeta, bnA.isAcceptableOrUnknown(data['bn_a'], _bnAMeta));
    } else if (isInserting) {
      context.missing(_bnAMeta);
    }
    if (data.containsKey('bn_b')) {
      context.handle(
          _bnBMeta, bnB.isAcceptableOrUnknown(data['bn_b'], _bnBMeta));
    } else if (isInserting) {
      context.missing(_bnBMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  BbIrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return BbIrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $BbIrLocalDatasourceImplTable createAlias(String alias) {
    return $BbIrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class BbHvLocalData extends DataClass implements Insertable<BbHvLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final int bbRefId;
  final double r;
  final double y;
  final double b;
  final double n;
  BbHvLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.bbRefId,
      @required this.r,
      @required this.y,
      @required this.b,
      @required this.n});
  factory BbHvLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return BbHvLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      bbRefId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bb_ref_id']),
      r: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}r']),
      y: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}y']),
      b: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}b']),
      n: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}n']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || bbRefId != null) {
      map['bb_ref_id'] = Variable<int>(bbRefId);
    }
    if (!nullToAbsent || r != null) {
      map['r'] = Variable<double>(r);
    }
    if (!nullToAbsent || y != null) {
      map['y'] = Variable<double>(y);
    }
    if (!nullToAbsent || b != null) {
      map['b'] = Variable<double>(b);
    }
    if (!nullToAbsent || n != null) {
      map['n'] = Variable<double>(n);
    }
    return map;
  }

  BbHvLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return BbHvLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      bbRefId: bbRefId == null && nullToAbsent
          ? const Value.absent()
          : Value(bbRefId),
      r: r == null && nullToAbsent ? const Value.absent() : Value(r),
      y: y == null && nullToAbsent ? const Value.absent() : Value(y),
      b: b == null && nullToAbsent ? const Value.absent() : Value(b),
      n: n == null && nullToAbsent ? const Value.absent() : Value(n),
    );
  }

  factory BbHvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return BbHvLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      bbRefId: serializer.fromJson<int>(json['bbRefId']),
      r: serializer.fromJson<double>(json['r']),
      y: serializer.fromJson<double>(json['y']),
      b: serializer.fromJson<double>(json['b']),
      n: serializer.fromJson<double>(json['n']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'bbRefId': serializer.toJson<int>(bbRefId),
      'r': serializer.toJson<double>(r),
      'y': serializer.toJson<double>(y),
      'b': serializer.toJson<double>(b),
      'n': serializer.toJson<double>(n),
    };
  }

  BbHvLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          int bbRefId,
          double r,
          double y,
          double b,
          double n}) =>
      BbHvLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        bbRefId: bbRefId ?? this.bbRefId,
        r: r ?? this.r,
        y: y ?? this.y,
        b: b ?? this.b,
        n: n ?? this.n,
      );
  @override
  String toString() {
    return (StringBuffer('BbHvLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('bbRefId: $bbRefId, ')
          ..write('r: $r, ')
          ..write('y: $y, ')
          ..write('b: $b, ')
          ..write('n: $n')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated, EquipmentType, databaseID, id, trNo, bbRefId, r, y, b, n);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is BbHvLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.bbRefId == this.bbRefId &&
          other.r == this.r &&
          other.y == this.y &&
          other.b == this.b &&
          other.n == this.n);
}

class BbHvLocalDatasourceImplCompanion extends UpdateCompanion<BbHvLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<int> bbRefId;
  final Value<double> r;
  final Value<double> y;
  final Value<double> b;
  final Value<double> n;
  const BbHvLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.bbRefId = const Value.absent(),
    this.r = const Value.absent(),
    this.y = const Value.absent(),
    this.b = const Value.absent(),
    this.n = const Value.absent(),
  });
  BbHvLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required int bbRefId,
    @required double r,
    @required double y,
    @required double b,
    @required double n,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        bbRefId = Value(bbRefId),
        r = Value(r),
        y = Value(y),
        b = Value(b),
        n = Value(n);
  static Insertable<BbHvLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<int> bbRefId,
    Expression<double> r,
    Expression<double> y,
    Expression<double> b,
    Expression<double> n,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (bbRefId != null) 'bb_ref_id': bbRefId,
      if (r != null) 'r': r,
      if (y != null) 'y': y,
      if (b != null) 'b': b,
      if (n != null) 'n': n,
    });
  }

  BbHvLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<int> bbRefId,
      Value<double> r,
      Value<double> y,
      Value<double> b,
      Value<double> n}) {
    return BbHvLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      bbRefId: bbRefId ?? this.bbRefId,
      r: r ?? this.r,
      y: y ?? this.y,
      b: b ?? this.b,
      n: n ?? this.n,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (bbRefId.present) {
      map['bb_ref_id'] = Variable<int>(bbRefId.value);
    }
    if (r.present) {
      map['r'] = Variable<double>(r.value);
    }
    if (y.present) {
      map['y'] = Variable<double>(y.value);
    }
    if (b.present) {
      map['b'] = Variable<double>(b.value);
    }
    if (n.present) {
      map['n'] = Variable<double>(n.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('BbHvLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('bbRefId: $bbRefId, ')
          ..write('r: $r, ')
          ..write('y: $y, ')
          ..write('b: $b, ')
          ..write('n: $n')
          ..write(')'))
        .toString();
  }
}

class $BbHvLocalDatasourceImplTable extends BbHvLocalDatasourceImpl
    with TableInfo<$BbHvLocalDatasourceImplTable, BbHvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $BbHvLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _bbRefIdMeta = const VerificationMeta('bbRefId');
  GeneratedColumn<int> _bbRefId;
  @override
  GeneratedColumn<int> get bbRefId =>
      _bbRefId ??= GeneratedColumn<int>('bb_ref_id', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _rMeta = const VerificationMeta('r');
  GeneratedColumn<double> _r;
  @override
  GeneratedColumn<double> get r =>
      _r ??= GeneratedColumn<double>('r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yMeta = const VerificationMeta('y');
  GeneratedColumn<double> _y;
  @override
  GeneratedColumn<double> get y =>
      _y ??= GeneratedColumn<double>('y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bMeta = const VerificationMeta('b');
  GeneratedColumn<double> _b;
  @override
  GeneratedColumn<double> get b =>
      _b ??= GeneratedColumn<double>('b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _nMeta = const VerificationMeta('n');
  GeneratedColumn<double> _n;
  @override
  GeneratedColumn<double> get n =>
      _n ??= GeneratedColumn<double>('n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [lastUpdated, EquipmentType, databaseID, id, trNo, bbRefId, r, y, b, n];
  @override
  String get aliasedName => _alias ?? 'bb_hv_local_datasource_impl';
  @override
  String get actualTableName => 'bb_hv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<BbHvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('bb_ref_id')) {
      context.handle(_bbRefIdMeta,
          bbRefId.isAcceptableOrUnknown(data['bb_ref_id'], _bbRefIdMeta));
    } else if (isInserting) {
      context.missing(_bbRefIdMeta);
    }
    if (data.containsKey('r')) {
      context.handle(_rMeta, r.isAcceptableOrUnknown(data['r'], _rMeta));
    } else if (isInserting) {
      context.missing(_rMeta);
    }
    if (data.containsKey('y')) {
      context.handle(_yMeta, y.isAcceptableOrUnknown(data['y'], _yMeta));
    } else if (isInserting) {
      context.missing(_yMeta);
    }
    if (data.containsKey('b')) {
      context.handle(_bMeta, b.isAcceptableOrUnknown(data['b'], _bMeta));
    } else if (isInserting) {
      context.missing(_bMeta);
    }
    if (data.containsKey('n')) {
      context.handle(_nMeta, n.isAcceptableOrUnknown(data['n'], _nMeta));
    } else if (isInserting) {
      context.missing(_nMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  BbHvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return BbHvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $BbHvLocalDatasourceImplTable createAlias(String alias) {
    return $BbHvLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class BbCrLocalData extends DataClass implements Insertable<BbCrLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final int bbRefId;
  final double r;
  final double y;
  final double b;
  final double n;
  BbCrLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.bbRefId,
      @required this.r,
      @required this.y,
      @required this.b,
      @required this.n});
  factory BbCrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return BbCrLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      bbRefId: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bb_ref_id']),
      r: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}r']),
      y: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}y']),
      b: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}b']),
      n: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}n']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || bbRefId != null) {
      map['bb_ref_id'] = Variable<int>(bbRefId);
    }
    if (!nullToAbsent || r != null) {
      map['r'] = Variable<double>(r);
    }
    if (!nullToAbsent || y != null) {
      map['y'] = Variable<double>(y);
    }
    if (!nullToAbsent || b != null) {
      map['b'] = Variable<double>(b);
    }
    if (!nullToAbsent || n != null) {
      map['n'] = Variable<double>(n);
    }
    return map;
  }

  BbCrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return BbCrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      bbRefId: bbRefId == null && nullToAbsent
          ? const Value.absent()
          : Value(bbRefId),
      r: r == null && nullToAbsent ? const Value.absent() : Value(r),
      y: y == null && nullToAbsent ? const Value.absent() : Value(y),
      b: b == null && nullToAbsent ? const Value.absent() : Value(b),
      n: n == null && nullToAbsent ? const Value.absent() : Value(n),
    );
  }

  factory BbCrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return BbCrLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      bbRefId: serializer.fromJson<int>(json['bbRefId']),
      r: serializer.fromJson<double>(json['r']),
      y: serializer.fromJson<double>(json['y']),
      b: serializer.fromJson<double>(json['b']),
      n: serializer.fromJson<double>(json['n']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'bbRefId': serializer.toJson<int>(bbRefId),
      'r': serializer.toJson<double>(r),
      'y': serializer.toJson<double>(y),
      'b': serializer.toJson<double>(b),
      'n': serializer.toJson<double>(n),
    };
  }

  BbCrLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          int bbRefId,
          double r,
          double y,
          double b,
          double n}) =>
      BbCrLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        bbRefId: bbRefId ?? this.bbRefId,
        r: r ?? this.r,
        y: y ?? this.y,
        b: b ?? this.b,
        n: n ?? this.n,
      );
  @override
  String toString() {
    return (StringBuffer('BbCrLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('bbRefId: $bbRefId, ')
          ..write('r: $r, ')
          ..write('y: $y, ')
          ..write('b: $b, ')
          ..write('n: $n')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated, EquipmentType, databaseID, id, trNo, bbRefId, r, y, b, n);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is BbCrLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.bbRefId == this.bbRefId &&
          other.r == this.r &&
          other.y == this.y &&
          other.b == this.b &&
          other.n == this.n);
}

class BbCrLocalDatasourceImplCompanion extends UpdateCompanion<BbCrLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<int> bbRefId;
  final Value<double> r;
  final Value<double> y;
  final Value<double> b;
  final Value<double> n;
  const BbCrLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.bbRefId = const Value.absent(),
    this.r = const Value.absent(),
    this.y = const Value.absent(),
    this.b = const Value.absent(),
    this.n = const Value.absent(),
  });
  BbCrLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required int bbRefId,
    @required double r,
    @required double y,
    @required double b,
    @required double n,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        bbRefId = Value(bbRefId),
        r = Value(r),
        y = Value(y),
        b = Value(b),
        n = Value(n);
  static Insertable<BbCrLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<int> bbRefId,
    Expression<double> r,
    Expression<double> y,
    Expression<double> b,
    Expression<double> n,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (bbRefId != null) 'bb_ref_id': bbRefId,
      if (r != null) 'r': r,
      if (y != null) 'y': y,
      if (b != null) 'b': b,
      if (n != null) 'n': n,
    });
  }

  BbCrLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<int> bbRefId,
      Value<double> r,
      Value<double> y,
      Value<double> b,
      Value<double> n}) {
    return BbCrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      bbRefId: bbRefId ?? this.bbRefId,
      r: r ?? this.r,
      y: y ?? this.y,
      b: b ?? this.b,
      n: n ?? this.n,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (bbRefId.present) {
      map['bb_ref_id'] = Variable<int>(bbRefId.value);
    }
    if (r.present) {
      map['r'] = Variable<double>(r.value);
    }
    if (y.present) {
      map['y'] = Variable<double>(y.value);
    }
    if (b.present) {
      map['b'] = Variable<double>(b.value);
    }
    if (n.present) {
      map['n'] = Variable<double>(n.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('BbCrLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('bbRefId: $bbRefId, ')
          ..write('r: $r, ')
          ..write('y: $y, ')
          ..write('b: $b, ')
          ..write('n: $n')
          ..write(')'))
        .toString();
  }
}

class $BbCrLocalDatasourceImplTable extends BbCrLocalDatasourceImpl
    with TableInfo<$BbCrLocalDatasourceImplTable, BbCrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $BbCrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _bbRefIdMeta = const VerificationMeta('bbRefId');
  GeneratedColumn<int> _bbRefId;
  @override
  GeneratedColumn<int> get bbRefId =>
      _bbRefId ??= GeneratedColumn<int>('bb_ref_id', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _rMeta = const VerificationMeta('r');
  GeneratedColumn<double> _r;
  @override
  GeneratedColumn<double> get r =>
      _r ??= GeneratedColumn<double>('r', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yMeta = const VerificationMeta('y');
  GeneratedColumn<double> _y;
  @override
  GeneratedColumn<double> get y =>
      _y ??= GeneratedColumn<double>('y', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bMeta = const VerificationMeta('b');
  GeneratedColumn<double> _b;
  @override
  GeneratedColumn<double> get b =>
      _b ??= GeneratedColumn<double>('b', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _nMeta = const VerificationMeta('n');
  GeneratedColumn<double> _n;
  @override
  GeneratedColumn<double> get n =>
      _n ??= GeneratedColumn<double>('n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [lastUpdated, EquipmentType, databaseID, id, trNo, bbRefId, r, y, b, n];
  @override
  String get aliasedName => _alias ?? 'bb_cr_local_datasource_impl';
  @override
  String get actualTableName => 'bb_cr_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<BbCrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('bb_ref_id')) {
      context.handle(_bbRefIdMeta,
          bbRefId.isAcceptableOrUnknown(data['bb_ref_id'], _bbRefIdMeta));
    } else if (isInserting) {
      context.missing(_bbRefIdMeta);
    }
    if (data.containsKey('r')) {
      context.handle(_rMeta, r.isAcceptableOrUnknown(data['r'], _rMeta));
    } else if (isInserting) {
      context.missing(_rMeta);
    }
    if (data.containsKey('y')) {
      context.handle(_yMeta, y.isAcceptableOrUnknown(data['y'], _yMeta));
    } else if (isInserting) {
      context.missing(_yMeta);
    }
    if (data.containsKey('b')) {
      context.handle(_bMeta, b.isAcceptableOrUnknown(data['b'], _bMeta));
    } else if (isInserting) {
      context.missing(_bMeta);
    }
    if (data.containsKey('n')) {
      context.handle(_nMeta, n.isAcceptableOrUnknown(data['n'], _nMeta));
    } else if (isInserting) {
      context.missing(_nMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  BbCrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return BbCrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $BbCrLocalDatasourceImplTable createAlias(String alias) {
    return $BbCrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3WindingLocalData extends DataClass
    implements Insertable<Powt3WindingLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String serialNo;
  final String rating;
  final int ratedVoltage_HV;
  final int ratedVoltage_LV;
  final int ratedVoltage_TS;
  final String ratedCurrent_TS;
  final String ratedCurrent_HV;
  final String ratedCurrent_LV;
  final String vectorGroup;
  final double impedanceVoltageLTap;
  final double impedanceVoltageRTap;
  final double impedanceVoltageHTap;
  final int frequency;
  final String typeOfCooling;
  final int noOfPhases;
  final String make;
  final int yom;
  final int noOfTaps;
  final int onOfNominalTaps;
  final int oilTemp;
  final int windingTemp;
  final int ambientTemp;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  Powt3WindingLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.serialNo,
      @required this.rating,
      @required this.ratedVoltage_HV,
      @required this.ratedVoltage_LV,
      @required this.ratedVoltage_TS,
      @required this.ratedCurrent_TS,
      @required this.ratedCurrent_HV,
      @required this.ratedCurrent_LV,
      @required this.vectorGroup,
      @required this.impedanceVoltageLTap,
      @required this.impedanceVoltageRTap,
      @required this.impedanceVoltageHTap,
      @required this.frequency,
      @required this.typeOfCooling,
      @required this.noOfPhases,
      @required this.make,
      @required this.yom,
      @required this.noOfTaps,
      @required this.onOfNominalTaps,
      @required this.oilTemp,
      @required this.windingTemp,
      @required this.ambientTemp,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory Powt3WindingLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3WindingLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      rating: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rating']),
      ratedVoltage_HV: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage_h_v']),
      ratedVoltage_LV: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage_l_v']),
      ratedVoltage_TS: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage_t_s']),
      ratedCurrent_TS: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_current_t_s']),
      ratedCurrent_HV: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_current_h_v']),
      ratedCurrent_LV: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_current_l_v']),
      vectorGroup: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}vector_group']),
      impedanceVoltageLTap: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_l_tap']),
      impedanceVoltageRTap: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_r_tap']),
      impedanceVoltageHTap: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_h_tap']),
      frequency: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency']),
      typeOfCooling: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}type_of_cooling']),
      noOfPhases: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_phases']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      noOfTaps: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_taps']),
      onOfNominalTaps: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}on_of_nominal_taps']),
      oilTemp: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}oil_temp']),
      windingTemp: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}winding_temp']),
      ambientTemp: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ambient_temp']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || rating != null) {
      map['rating'] = Variable<String>(rating);
    }
    if (!nullToAbsent || ratedVoltage_HV != null) {
      map['rated_voltage_h_v'] = Variable<int>(ratedVoltage_HV);
    }
    if (!nullToAbsent || ratedVoltage_LV != null) {
      map['rated_voltage_l_v'] = Variable<int>(ratedVoltage_LV);
    }
    if (!nullToAbsent || ratedVoltage_TS != null) {
      map['rated_voltage_t_s'] = Variable<int>(ratedVoltage_TS);
    }
    if (!nullToAbsent || ratedCurrent_TS != null) {
      map['rated_current_t_s'] = Variable<String>(ratedCurrent_TS);
    }
    if (!nullToAbsent || ratedCurrent_HV != null) {
      map['rated_current_h_v'] = Variable<String>(ratedCurrent_HV);
    }
    if (!nullToAbsent || ratedCurrent_LV != null) {
      map['rated_current_l_v'] = Variable<String>(ratedCurrent_LV);
    }
    if (!nullToAbsent || vectorGroup != null) {
      map['vector_group'] = Variable<String>(vectorGroup);
    }
    if (!nullToAbsent || impedanceVoltageLTap != null) {
      map['impedance_voltage_l_tap'] = Variable<double>(impedanceVoltageLTap);
    }
    if (!nullToAbsent || impedanceVoltageRTap != null) {
      map['impedance_voltage_r_tap'] = Variable<double>(impedanceVoltageRTap);
    }
    if (!nullToAbsent || impedanceVoltageHTap != null) {
      map['impedance_voltage_h_tap'] = Variable<double>(impedanceVoltageHTap);
    }
    if (!nullToAbsent || frequency != null) {
      map['frequency'] = Variable<int>(frequency);
    }
    if (!nullToAbsent || typeOfCooling != null) {
      map['type_of_cooling'] = Variable<String>(typeOfCooling);
    }
    if (!nullToAbsent || noOfPhases != null) {
      map['no_of_phases'] = Variable<int>(noOfPhases);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || noOfTaps != null) {
      map['no_of_taps'] = Variable<int>(noOfTaps);
    }
    if (!nullToAbsent || onOfNominalTaps != null) {
      map['on_of_nominal_taps'] = Variable<int>(onOfNominalTaps);
    }
    if (!nullToAbsent || oilTemp != null) {
      map['oil_temp'] = Variable<int>(oilTemp);
    }
    if (!nullToAbsent || windingTemp != null) {
      map['winding_temp'] = Variable<int>(windingTemp);
    }
    if (!nullToAbsent || ambientTemp != null) {
      map['ambient_temp'] = Variable<int>(ambientTemp);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  Powt3WindingLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3WindingLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      rating:
          rating == null && nullToAbsent ? const Value.absent() : Value(rating),
      ratedVoltage_HV: ratedVoltage_HV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage_HV),
      ratedVoltage_LV: ratedVoltage_LV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage_LV),
      ratedVoltage_TS: ratedVoltage_TS == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage_TS),
      ratedCurrent_TS: ratedCurrent_TS == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedCurrent_TS),
      ratedCurrent_HV: ratedCurrent_HV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedCurrent_HV),
      ratedCurrent_LV: ratedCurrent_LV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedCurrent_LV),
      vectorGroup: vectorGroup == null && nullToAbsent
          ? const Value.absent()
          : Value(vectorGroup),
      impedanceVoltageLTap: impedanceVoltageLTap == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltageLTap),
      impedanceVoltageRTap: impedanceVoltageRTap == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltageRTap),
      impedanceVoltageHTap: impedanceVoltageHTap == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltageHTap),
      frequency: frequency == null && nullToAbsent
          ? const Value.absent()
          : Value(frequency),
      typeOfCooling: typeOfCooling == null && nullToAbsent
          ? const Value.absent()
          : Value(typeOfCooling),
      noOfPhases: noOfPhases == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfPhases),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      noOfTaps: noOfTaps == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfTaps),
      onOfNominalTaps: onOfNominalTaps == null && nullToAbsent
          ? const Value.absent()
          : Value(onOfNominalTaps),
      oilTemp: oilTemp == null && nullToAbsent
          ? const Value.absent()
          : Value(oilTemp),
      windingTemp: windingTemp == null && nullToAbsent
          ? const Value.absent()
          : Value(windingTemp),
      ambientTemp: ambientTemp == null && nullToAbsent
          ? const Value.absent()
          : Value(ambientTemp),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory Powt3WindingLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3WindingLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      rating: serializer.fromJson<String>(json['rating']),
      ratedVoltage_HV: serializer.fromJson<int>(json['ratedVoltage_HV']),
      ratedVoltage_LV: serializer.fromJson<int>(json['ratedVoltage_LV']),
      ratedVoltage_TS: serializer.fromJson<int>(json['ratedVoltage_TS']),
      ratedCurrent_TS: serializer.fromJson<String>(json['ratedCurrent_TS']),
      ratedCurrent_HV: serializer.fromJson<String>(json['ratedCurrent_HV']),
      ratedCurrent_LV: serializer.fromJson<String>(json['ratedCurrent_LV']),
      vectorGroup: serializer.fromJson<String>(json['vectorGroup']),
      impedanceVoltageLTap:
          serializer.fromJson<double>(json['impedanceVoltageLTap']),
      impedanceVoltageRTap:
          serializer.fromJson<double>(json['impedanceVoltageRTap']),
      impedanceVoltageHTap:
          serializer.fromJson<double>(json['impedanceVoltageHTap']),
      frequency: serializer.fromJson<int>(json['frequency']),
      typeOfCooling: serializer.fromJson<String>(json['typeOfCooling']),
      noOfPhases: serializer.fromJson<int>(json['noOfPhases']),
      make: serializer.fromJson<String>(json['make']),
      yom: serializer.fromJson<int>(json['yom']),
      noOfTaps: serializer.fromJson<int>(json['noOfTaps']),
      onOfNominalTaps: serializer.fromJson<int>(json['onOfNominalTaps']),
      oilTemp: serializer.fromJson<int>(json['oilTemp']),
      windingTemp: serializer.fromJson<int>(json['windingTemp']),
      ambientTemp: serializer.fromJson<int>(json['ambientTemp']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'serialNo': serializer.toJson<String>(serialNo),
      'rating': serializer.toJson<String>(rating),
      'ratedVoltage_HV': serializer.toJson<int>(ratedVoltage_HV),
      'ratedVoltage_LV': serializer.toJson<int>(ratedVoltage_LV),
      'ratedVoltage_TS': serializer.toJson<int>(ratedVoltage_TS),
      'ratedCurrent_TS': serializer.toJson<String>(ratedCurrent_TS),
      'ratedCurrent_HV': serializer.toJson<String>(ratedCurrent_HV),
      'ratedCurrent_LV': serializer.toJson<String>(ratedCurrent_LV),
      'vectorGroup': serializer.toJson<String>(vectorGroup),
      'impedanceVoltageLTap': serializer.toJson<double>(impedanceVoltageLTap),
      'impedanceVoltageRTap': serializer.toJson<double>(impedanceVoltageRTap),
      'impedanceVoltageHTap': serializer.toJson<double>(impedanceVoltageHTap),
      'frequency': serializer.toJson<int>(frequency),
      'typeOfCooling': serializer.toJson<String>(typeOfCooling),
      'noOfPhases': serializer.toJson<int>(noOfPhases),
      'make': serializer.toJson<String>(make),
      'yom': serializer.toJson<int>(yom),
      'noOfTaps': serializer.toJson<int>(noOfTaps),
      'onOfNominalTaps': serializer.toJson<int>(onOfNominalTaps),
      'oilTemp': serializer.toJson<int>(oilTemp),
      'windingTemp': serializer.toJson<int>(windingTemp),
      'ambientTemp': serializer.toJson<int>(ambientTemp),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  Powt3WindingLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String serialNo,
          String rating,
          int ratedVoltage_HV,
          int ratedVoltage_LV,
          int ratedVoltage_TS,
          String ratedCurrent_TS,
          String ratedCurrent_HV,
          String ratedCurrent_LV,
          String vectorGroup,
          double impedanceVoltageLTap,
          double impedanceVoltageRTap,
          double impedanceVoltageHTap,
          int frequency,
          String typeOfCooling,
          int noOfPhases,
          String make,
          int yom,
          int noOfTaps,
          int onOfNominalTaps,
          int oilTemp,
          int windingTemp,
          int ambientTemp,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      Powt3WindingLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        serialNo: serialNo ?? this.serialNo,
        rating: rating ?? this.rating,
        ratedVoltage_HV: ratedVoltage_HV ?? this.ratedVoltage_HV,
        ratedVoltage_LV: ratedVoltage_LV ?? this.ratedVoltage_LV,
        ratedVoltage_TS: ratedVoltage_TS ?? this.ratedVoltage_TS,
        ratedCurrent_TS: ratedCurrent_TS ?? this.ratedCurrent_TS,
        ratedCurrent_HV: ratedCurrent_HV ?? this.ratedCurrent_HV,
        ratedCurrent_LV: ratedCurrent_LV ?? this.ratedCurrent_LV,
        vectorGroup: vectorGroup ?? this.vectorGroup,
        impedanceVoltageLTap: impedanceVoltageLTap ?? this.impedanceVoltageLTap,
        impedanceVoltageRTap: impedanceVoltageRTap ?? this.impedanceVoltageRTap,
        impedanceVoltageHTap: impedanceVoltageHTap ?? this.impedanceVoltageHTap,
        frequency: frequency ?? this.frequency,
        typeOfCooling: typeOfCooling ?? this.typeOfCooling,
        noOfPhases: noOfPhases ?? this.noOfPhases,
        make: make ?? this.make,
        yom: yom ?? this.yom,
        noOfTaps: noOfTaps ?? this.noOfTaps,
        onOfNominalTaps: onOfNominalTaps ?? this.onOfNominalTaps,
        oilTemp: oilTemp ?? this.oilTemp,
        windingTemp: windingTemp ?? this.windingTemp,
        ambientTemp: ambientTemp ?? this.ambientTemp,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3WindingLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('rating: $rating, ')
          ..write('ratedVoltage_HV: $ratedVoltage_HV, ')
          ..write('ratedVoltage_LV: $ratedVoltage_LV, ')
          ..write('ratedVoltage_TS: $ratedVoltage_TS, ')
          ..write('ratedCurrent_TS: $ratedCurrent_TS, ')
          ..write('ratedCurrent_HV: $ratedCurrent_HV, ')
          ..write('ratedCurrent_LV: $ratedCurrent_LV, ')
          ..write('vectorGroup: $vectorGroup, ')
          ..write('impedanceVoltageLTap: $impedanceVoltageLTap, ')
          ..write('impedanceVoltageRTap: $impedanceVoltageRTap, ')
          ..write('impedanceVoltageHTap: $impedanceVoltageHTap, ')
          ..write('frequency: $frequency, ')
          ..write('typeOfCooling: $typeOfCooling, ')
          ..write('noOfPhases: $noOfPhases, ')
          ..write('make: $make, ')
          ..write('yom: $yom, ')
          ..write('noOfTaps: $noOfTaps, ')
          ..write('onOfNominalTaps: $onOfNominalTaps, ')
          ..write('oilTemp: $oilTemp, ')
          ..write('windingTemp: $windingTemp, ')
          ..write('ambientTemp: $ambientTemp, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        rating,
        ratedVoltage_HV,
        ratedVoltage_LV,
        ratedVoltage_TS,
        ratedCurrent_TS,
        ratedCurrent_HV,
        ratedCurrent_LV,
        vectorGroup,
        impedanceVoltageLTap,
        impedanceVoltageRTap,
        impedanceVoltageHTap,
        frequency,
        typeOfCooling,
        noOfPhases,
        make,
        yom,
        noOfTaps,
        onOfNominalTaps,
        oilTemp,
        windingTemp,
        ambientTemp,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3WindingLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.serialNo == this.serialNo &&
          other.rating == this.rating &&
          other.ratedVoltage_HV == this.ratedVoltage_HV &&
          other.ratedVoltage_LV == this.ratedVoltage_LV &&
          other.ratedVoltage_TS == this.ratedVoltage_TS &&
          other.ratedCurrent_TS == this.ratedCurrent_TS &&
          other.ratedCurrent_HV == this.ratedCurrent_HV &&
          other.ratedCurrent_LV == this.ratedCurrent_LV &&
          other.vectorGroup == this.vectorGroup &&
          other.impedanceVoltageLTap == this.impedanceVoltageLTap &&
          other.impedanceVoltageRTap == this.impedanceVoltageRTap &&
          other.impedanceVoltageHTap == this.impedanceVoltageHTap &&
          other.frequency == this.frequency &&
          other.typeOfCooling == this.typeOfCooling &&
          other.noOfPhases == this.noOfPhases &&
          other.make == this.make &&
          other.yom == this.yom &&
          other.noOfTaps == this.noOfTaps &&
          other.onOfNominalTaps == this.onOfNominalTaps &&
          other.oilTemp == this.oilTemp &&
          other.windingTemp == this.windingTemp &&
          other.ambientTemp == this.ambientTemp &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class Powt3WindingLocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3WindingLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> serialNo;
  final Value<String> rating;
  final Value<int> ratedVoltage_HV;
  final Value<int> ratedVoltage_LV;
  final Value<int> ratedVoltage_TS;
  final Value<String> ratedCurrent_TS;
  final Value<String> ratedCurrent_HV;
  final Value<String> ratedCurrent_LV;
  final Value<String> vectorGroup;
  final Value<double> impedanceVoltageLTap;
  final Value<double> impedanceVoltageRTap;
  final Value<double> impedanceVoltageHTap;
  final Value<int> frequency;
  final Value<String> typeOfCooling;
  final Value<int> noOfPhases;
  final Value<String> make;
  final Value<int> yom;
  final Value<int> noOfTaps;
  final Value<int> onOfNominalTaps;
  final Value<int> oilTemp;
  final Value<int> windingTemp;
  final Value<int> ambientTemp;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const Powt3WindingLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.rating = const Value.absent(),
    this.ratedVoltage_HV = const Value.absent(),
    this.ratedVoltage_LV = const Value.absent(),
    this.ratedVoltage_TS = const Value.absent(),
    this.ratedCurrent_TS = const Value.absent(),
    this.ratedCurrent_HV = const Value.absent(),
    this.ratedCurrent_LV = const Value.absent(),
    this.vectorGroup = const Value.absent(),
    this.impedanceVoltageLTap = const Value.absent(),
    this.impedanceVoltageRTap = const Value.absent(),
    this.impedanceVoltageHTap = const Value.absent(),
    this.frequency = const Value.absent(),
    this.typeOfCooling = const Value.absent(),
    this.noOfPhases = const Value.absent(),
    this.make = const Value.absent(),
    this.yom = const Value.absent(),
    this.noOfTaps = const Value.absent(),
    this.onOfNominalTaps = const Value.absent(),
    this.oilTemp = const Value.absent(),
    this.windingTemp = const Value.absent(),
    this.ambientTemp = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  Powt3WindingLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String serialNo,
    @required String rating,
    @required int ratedVoltage_HV,
    @required int ratedVoltage_LV,
    @required int ratedVoltage_TS,
    @required String ratedCurrent_TS,
    @required String ratedCurrent_HV,
    @required String ratedCurrent_LV,
    @required String vectorGroup,
    @required double impedanceVoltageLTap,
    @required double impedanceVoltageRTap,
    @required double impedanceVoltageHTap,
    @required int frequency,
    @required String typeOfCooling,
    @required int noOfPhases,
    @required String make,
    @required int yom,
    @required int noOfTaps,
    @required int onOfNominalTaps,
    @required int oilTemp,
    @required int windingTemp,
    @required int ambientTemp,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        serialNo = Value(serialNo),
        rating = Value(rating),
        ratedVoltage_HV = Value(ratedVoltage_HV),
        ratedVoltage_LV = Value(ratedVoltage_LV),
        ratedVoltage_TS = Value(ratedVoltage_TS),
        ratedCurrent_TS = Value(ratedCurrent_TS),
        ratedCurrent_HV = Value(ratedCurrent_HV),
        ratedCurrent_LV = Value(ratedCurrent_LV),
        vectorGroup = Value(vectorGroup),
        impedanceVoltageLTap = Value(impedanceVoltageLTap),
        impedanceVoltageRTap = Value(impedanceVoltageRTap),
        impedanceVoltageHTap = Value(impedanceVoltageHTap),
        frequency = Value(frequency),
        typeOfCooling = Value(typeOfCooling),
        noOfPhases = Value(noOfPhases),
        make = Value(make),
        yom = Value(yom),
        noOfTaps = Value(noOfTaps),
        onOfNominalTaps = Value(onOfNominalTaps),
        oilTemp = Value(oilTemp),
        windingTemp = Value(windingTemp),
        ambientTemp = Value(ambientTemp),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<Powt3WindingLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> serialNo,
    Expression<String> rating,
    Expression<int> ratedVoltage_HV,
    Expression<int> ratedVoltage_LV,
    Expression<int> ratedVoltage_TS,
    Expression<String> ratedCurrent_TS,
    Expression<String> ratedCurrent_HV,
    Expression<String> ratedCurrent_LV,
    Expression<String> vectorGroup,
    Expression<double> impedanceVoltageLTap,
    Expression<double> impedanceVoltageRTap,
    Expression<double> impedanceVoltageHTap,
    Expression<int> frequency,
    Expression<String> typeOfCooling,
    Expression<int> noOfPhases,
    Expression<String> make,
    Expression<int> yom,
    Expression<int> noOfTaps,
    Expression<int> onOfNominalTaps,
    Expression<int> oilTemp,
    Expression<int> windingTemp,
    Expression<int> ambientTemp,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (serialNo != null) 'serial_no': serialNo,
      if (rating != null) 'rating': rating,
      if (ratedVoltage_HV != null) 'rated_voltage_h_v': ratedVoltage_HV,
      if (ratedVoltage_LV != null) 'rated_voltage_l_v': ratedVoltage_LV,
      if (ratedVoltage_TS != null) 'rated_voltage_t_s': ratedVoltage_TS,
      if (ratedCurrent_TS != null) 'rated_current_t_s': ratedCurrent_TS,
      if (ratedCurrent_HV != null) 'rated_current_h_v': ratedCurrent_HV,
      if (ratedCurrent_LV != null) 'rated_current_l_v': ratedCurrent_LV,
      if (vectorGroup != null) 'vector_group': vectorGroup,
      if (impedanceVoltageLTap != null)
        'impedance_voltage_l_tap': impedanceVoltageLTap,
      if (impedanceVoltageRTap != null)
        'impedance_voltage_r_tap': impedanceVoltageRTap,
      if (impedanceVoltageHTap != null)
        'impedance_voltage_h_tap': impedanceVoltageHTap,
      if (frequency != null) 'frequency': frequency,
      if (typeOfCooling != null) 'type_of_cooling': typeOfCooling,
      if (noOfPhases != null) 'no_of_phases': noOfPhases,
      if (make != null) 'make': make,
      if (yom != null) 'yom': yom,
      if (noOfTaps != null) 'no_of_taps': noOfTaps,
      if (onOfNominalTaps != null) 'on_of_nominal_taps': onOfNominalTaps,
      if (oilTemp != null) 'oil_temp': oilTemp,
      if (windingTemp != null) 'winding_temp': windingTemp,
      if (ambientTemp != null) 'ambient_temp': ambientTemp,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  Powt3WindingLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> serialNo,
      Value<String> rating,
      Value<int> ratedVoltage_HV,
      Value<int> ratedVoltage_LV,
      Value<int> ratedVoltage_TS,
      Value<String> ratedCurrent_TS,
      Value<String> ratedCurrent_HV,
      Value<String> ratedCurrent_LV,
      Value<String> vectorGroup,
      Value<double> impedanceVoltageLTap,
      Value<double> impedanceVoltageRTap,
      Value<double> impedanceVoltageHTap,
      Value<int> frequency,
      Value<String> typeOfCooling,
      Value<int> noOfPhases,
      Value<String> make,
      Value<int> yom,
      Value<int> noOfTaps,
      Value<int> onOfNominalTaps,
      Value<int> oilTemp,
      Value<int> windingTemp,
      Value<int> ambientTemp,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return Powt3WindingLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      serialNo: serialNo ?? this.serialNo,
      rating: rating ?? this.rating,
      ratedVoltage_HV: ratedVoltage_HV ?? this.ratedVoltage_HV,
      ratedVoltage_LV: ratedVoltage_LV ?? this.ratedVoltage_LV,
      ratedVoltage_TS: ratedVoltage_TS ?? this.ratedVoltage_TS,
      ratedCurrent_TS: ratedCurrent_TS ?? this.ratedCurrent_TS,
      ratedCurrent_HV: ratedCurrent_HV ?? this.ratedCurrent_HV,
      ratedCurrent_LV: ratedCurrent_LV ?? this.ratedCurrent_LV,
      vectorGroup: vectorGroup ?? this.vectorGroup,
      impedanceVoltageLTap: impedanceVoltageLTap ?? this.impedanceVoltageLTap,
      impedanceVoltageRTap: impedanceVoltageRTap ?? this.impedanceVoltageRTap,
      impedanceVoltageHTap: impedanceVoltageHTap ?? this.impedanceVoltageHTap,
      frequency: frequency ?? this.frequency,
      typeOfCooling: typeOfCooling ?? this.typeOfCooling,
      noOfPhases: noOfPhases ?? this.noOfPhases,
      make: make ?? this.make,
      yom: yom ?? this.yom,
      noOfTaps: noOfTaps ?? this.noOfTaps,
      onOfNominalTaps: onOfNominalTaps ?? this.onOfNominalTaps,
      oilTemp: oilTemp ?? this.oilTemp,
      windingTemp: windingTemp ?? this.windingTemp,
      ambientTemp: ambientTemp ?? this.ambientTemp,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (rating.present) {
      map['rating'] = Variable<String>(rating.value);
    }
    if (ratedVoltage_HV.present) {
      map['rated_voltage_h_v'] = Variable<int>(ratedVoltage_HV.value);
    }
    if (ratedVoltage_LV.present) {
      map['rated_voltage_l_v'] = Variable<int>(ratedVoltage_LV.value);
    }
    if (ratedVoltage_TS.present) {
      map['rated_voltage_t_s'] = Variable<int>(ratedVoltage_TS.value);
    }
    if (ratedCurrent_TS.present) {
      map['rated_current_t_s'] = Variable<String>(ratedCurrent_TS.value);
    }
    if (ratedCurrent_HV.present) {
      map['rated_current_h_v'] = Variable<String>(ratedCurrent_HV.value);
    }
    if (ratedCurrent_LV.present) {
      map['rated_current_l_v'] = Variable<String>(ratedCurrent_LV.value);
    }
    if (vectorGroup.present) {
      map['vector_group'] = Variable<String>(vectorGroup.value);
    }
    if (impedanceVoltageLTap.present) {
      map['impedance_voltage_l_tap'] =
          Variable<double>(impedanceVoltageLTap.value);
    }
    if (impedanceVoltageRTap.present) {
      map['impedance_voltage_r_tap'] =
          Variable<double>(impedanceVoltageRTap.value);
    }
    if (impedanceVoltageHTap.present) {
      map['impedance_voltage_h_tap'] =
          Variable<double>(impedanceVoltageHTap.value);
    }
    if (frequency.present) {
      map['frequency'] = Variable<int>(frequency.value);
    }
    if (typeOfCooling.present) {
      map['type_of_cooling'] = Variable<String>(typeOfCooling.value);
    }
    if (noOfPhases.present) {
      map['no_of_phases'] = Variable<int>(noOfPhases.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (noOfTaps.present) {
      map['no_of_taps'] = Variable<int>(noOfTaps.value);
    }
    if (onOfNominalTaps.present) {
      map['on_of_nominal_taps'] = Variable<int>(onOfNominalTaps.value);
    }
    if (oilTemp.present) {
      map['oil_temp'] = Variable<int>(oilTemp.value);
    }
    if (windingTemp.present) {
      map['winding_temp'] = Variable<int>(windingTemp.value);
    }
    if (ambientTemp.present) {
      map['ambient_temp'] = Variable<int>(ambientTemp.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3WindingLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('rating: $rating, ')
          ..write('ratedVoltage_HV: $ratedVoltage_HV, ')
          ..write('ratedVoltage_LV: $ratedVoltage_LV, ')
          ..write('ratedVoltage_TS: $ratedVoltage_TS, ')
          ..write('ratedCurrent_TS: $ratedCurrent_TS, ')
          ..write('ratedCurrent_HV: $ratedCurrent_HV, ')
          ..write('ratedCurrent_LV: $ratedCurrent_LV, ')
          ..write('vectorGroup: $vectorGroup, ')
          ..write('impedanceVoltageLTap: $impedanceVoltageLTap, ')
          ..write('impedanceVoltageRTap: $impedanceVoltageRTap, ')
          ..write('impedanceVoltageHTap: $impedanceVoltageHTap, ')
          ..write('frequency: $frequency, ')
          ..write('typeOfCooling: $typeOfCooling, ')
          ..write('noOfPhases: $noOfPhases, ')
          ..write('make: $make, ')
          ..write('yom: $yom, ')
          ..write('noOfTaps: $noOfTaps, ')
          ..write('onOfNominalTaps: $onOfNominalTaps, ')
          ..write('oilTemp: $oilTemp, ')
          ..write('windingTemp: $windingTemp, ')
          ..write('ambientTemp: $ambientTemp, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $Powt3WindingLocalDatasourceImplTable
    extends Powt3WindingLocalDatasourceImpl
    with
        TableInfo<$Powt3WindingLocalDatasourceImplTable,
            Powt3WindingLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3WindingLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratingMeta = const VerificationMeta('rating');
  GeneratedColumn<String> _rating;
  @override
  GeneratedColumn<String> get rating => _rating ??= GeneratedColumn<String>(
      'rating', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratedVoltage_HVMeta =
      const VerificationMeta('ratedVoltage_HV');
  GeneratedColumn<int> _ratedVoltage_HV;
  @override
  GeneratedColumn<int> get ratedVoltage_HV => _ratedVoltage_HV ??=
      GeneratedColumn<int>('rated_voltage_h_v', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedVoltage_LVMeta =
      const VerificationMeta('ratedVoltage_LV');
  GeneratedColumn<int> _ratedVoltage_LV;
  @override
  GeneratedColumn<int> get ratedVoltage_LV => _ratedVoltage_LV ??=
      GeneratedColumn<int>('rated_voltage_l_v', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedVoltage_TSMeta =
      const VerificationMeta('ratedVoltage_TS');
  GeneratedColumn<int> _ratedVoltage_TS;
  @override
  GeneratedColumn<int> get ratedVoltage_TS => _ratedVoltage_TS ??=
      GeneratedColumn<int>('rated_voltage_t_s', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedCurrent_TSMeta =
      const VerificationMeta('ratedCurrent_TS');
  GeneratedColumn<String> _ratedCurrent_TS;
  @override
  GeneratedColumn<String> get ratedCurrent_TS => _ratedCurrent_TS ??=
      GeneratedColumn<String>('rated_current_t_s', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _ratedCurrent_HVMeta =
      const VerificationMeta('ratedCurrent_HV');
  GeneratedColumn<String> _ratedCurrent_HV;
  @override
  GeneratedColumn<String> get ratedCurrent_HV => _ratedCurrent_HV ??=
      GeneratedColumn<String>('rated_current_h_v', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _ratedCurrent_LVMeta =
      const VerificationMeta('ratedCurrent_LV');
  GeneratedColumn<String> _ratedCurrent_LV;
  @override
  GeneratedColumn<String> get ratedCurrent_LV => _ratedCurrent_LV ??=
      GeneratedColumn<String>('rated_current_l_v', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _vectorGroupMeta =
      const VerificationMeta('vectorGroup');
  GeneratedColumn<String> _vectorGroup;
  @override
  GeneratedColumn<String> get vectorGroup => _vectorGroup ??=
      GeneratedColumn<String>('vector_group', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltageLTapMeta =
      const VerificationMeta('impedanceVoltageLTap');
  GeneratedColumn<double> _impedanceVoltageLTap;
  @override
  GeneratedColumn<double> get impedanceVoltageLTap => _impedanceVoltageLTap ??=
      GeneratedColumn<double>('impedance_voltage_l_tap', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltageRTapMeta =
      const VerificationMeta('impedanceVoltageRTap');
  GeneratedColumn<double> _impedanceVoltageRTap;
  @override
  GeneratedColumn<double> get impedanceVoltageRTap => _impedanceVoltageRTap ??=
      GeneratedColumn<double>('impedance_voltage_r_tap', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltageHTapMeta =
      const VerificationMeta('impedanceVoltageHTap');
  GeneratedColumn<double> _impedanceVoltageHTap;
  @override
  GeneratedColumn<double> get impedanceVoltageHTap => _impedanceVoltageHTap ??=
      GeneratedColumn<double>('impedance_voltage_h_tap', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _frequencyMeta = const VerificationMeta('frequency');
  GeneratedColumn<int> _frequency;
  @override
  GeneratedColumn<int> get frequency =>
      _frequency ??= GeneratedColumn<int>('frequency', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _typeOfCoolingMeta =
      const VerificationMeta('typeOfCooling');
  GeneratedColumn<String> _typeOfCooling;
  @override
  GeneratedColumn<String> get typeOfCooling => _typeOfCooling ??=
      GeneratedColumn<String>('type_of_cooling', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _noOfPhasesMeta = const VerificationMeta('noOfPhases');
  GeneratedColumn<int> _noOfPhases;
  @override
  GeneratedColumn<int> get noOfPhases =>
      _noOfPhases ??= GeneratedColumn<int>('no_of_phases', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _noOfTapsMeta = const VerificationMeta('noOfTaps');
  GeneratedColumn<int> _noOfTaps;
  @override
  GeneratedColumn<int> get noOfTaps =>
      _noOfTaps ??= GeneratedColumn<int>('no_of_taps', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _onOfNominalTapsMeta =
      const VerificationMeta('onOfNominalTaps');
  GeneratedColumn<int> _onOfNominalTaps;
  @override
  GeneratedColumn<int> get onOfNominalTaps => _onOfNominalTaps ??=
      GeneratedColumn<int>('on_of_nominal_taps', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _oilTempMeta = const VerificationMeta('oilTemp');
  GeneratedColumn<int> _oilTemp;
  @override
  GeneratedColumn<int> get oilTemp =>
      _oilTemp ??= GeneratedColumn<int>('oil_temp', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _windingTempMeta =
      const VerificationMeta('windingTemp');
  GeneratedColumn<int> _windingTemp;
  @override
  GeneratedColumn<int> get windingTemp =>
      _windingTemp ??= GeneratedColumn<int>('winding_temp', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ambientTempMeta =
      const VerificationMeta('ambientTemp');
  GeneratedColumn<int> _ambientTemp;
  @override
  GeneratedColumn<int> get ambientTemp =>
      _ambientTemp ??= GeneratedColumn<int>('ambient_temp', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        rating,
        ratedVoltage_HV,
        ratedVoltage_LV,
        ratedVoltage_TS,
        ratedCurrent_TS,
        ratedCurrent_HV,
        ratedCurrent_LV,
        vectorGroup,
        impedanceVoltageLTap,
        impedanceVoltageRTap,
        impedanceVoltageHTap,
        frequency,
        typeOfCooling,
        noOfPhases,
        make,
        yom,
        noOfTaps,
        onOfNominalTaps,
        oilTemp,
        windingTemp,
        ambientTemp,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'powt3_winding_local_datasource_impl';
  @override
  String get actualTableName => 'powt3_winding_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3WindingLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('rating')) {
      context.handle(_ratingMeta,
          rating.isAcceptableOrUnknown(data['rating'], _ratingMeta));
    } else if (isInserting) {
      context.missing(_ratingMeta);
    }
    if (data.containsKey('rated_voltage_h_v')) {
      context.handle(
          _ratedVoltage_HVMeta,
          ratedVoltage_HV.isAcceptableOrUnknown(
              data['rated_voltage_h_v'], _ratedVoltage_HVMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltage_HVMeta);
    }
    if (data.containsKey('rated_voltage_l_v')) {
      context.handle(
          _ratedVoltage_LVMeta,
          ratedVoltage_LV.isAcceptableOrUnknown(
              data['rated_voltage_l_v'], _ratedVoltage_LVMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltage_LVMeta);
    }
    if (data.containsKey('rated_voltage_t_s')) {
      context.handle(
          _ratedVoltage_TSMeta,
          ratedVoltage_TS.isAcceptableOrUnknown(
              data['rated_voltage_t_s'], _ratedVoltage_TSMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltage_TSMeta);
    }
    if (data.containsKey('rated_current_t_s')) {
      context.handle(
          _ratedCurrent_TSMeta,
          ratedCurrent_TS.isAcceptableOrUnknown(
              data['rated_current_t_s'], _ratedCurrent_TSMeta));
    } else if (isInserting) {
      context.missing(_ratedCurrent_TSMeta);
    }
    if (data.containsKey('rated_current_h_v')) {
      context.handle(
          _ratedCurrent_HVMeta,
          ratedCurrent_HV.isAcceptableOrUnknown(
              data['rated_current_h_v'], _ratedCurrent_HVMeta));
    } else if (isInserting) {
      context.missing(_ratedCurrent_HVMeta);
    }
    if (data.containsKey('rated_current_l_v')) {
      context.handle(
          _ratedCurrent_LVMeta,
          ratedCurrent_LV.isAcceptableOrUnknown(
              data['rated_current_l_v'], _ratedCurrent_LVMeta));
    } else if (isInserting) {
      context.missing(_ratedCurrent_LVMeta);
    }
    if (data.containsKey('vector_group')) {
      context.handle(
          _vectorGroupMeta,
          vectorGroup.isAcceptableOrUnknown(
              data['vector_group'], _vectorGroupMeta));
    } else if (isInserting) {
      context.missing(_vectorGroupMeta);
    }
    if (data.containsKey('impedance_voltage_l_tap')) {
      context.handle(
          _impedanceVoltageLTapMeta,
          impedanceVoltageLTap.isAcceptableOrUnknown(
              data['impedance_voltage_l_tap'], _impedanceVoltageLTapMeta));
    } else if (isInserting) {
      context.missing(_impedanceVoltageLTapMeta);
    }
    if (data.containsKey('impedance_voltage_r_tap')) {
      context.handle(
          _impedanceVoltageRTapMeta,
          impedanceVoltageRTap.isAcceptableOrUnknown(
              data['impedance_voltage_r_tap'], _impedanceVoltageRTapMeta));
    } else if (isInserting) {
      context.missing(_impedanceVoltageRTapMeta);
    }
    if (data.containsKey('impedance_voltage_h_tap')) {
      context.handle(
          _impedanceVoltageHTapMeta,
          impedanceVoltageHTap.isAcceptableOrUnknown(
              data['impedance_voltage_h_tap'], _impedanceVoltageHTapMeta));
    } else if (isInserting) {
      context.missing(_impedanceVoltageHTapMeta);
    }
    if (data.containsKey('frequency')) {
      context.handle(_frequencyMeta,
          frequency.isAcceptableOrUnknown(data['frequency'], _frequencyMeta));
    } else if (isInserting) {
      context.missing(_frequencyMeta);
    }
    if (data.containsKey('type_of_cooling')) {
      context.handle(
          _typeOfCoolingMeta,
          typeOfCooling.isAcceptableOrUnknown(
              data['type_of_cooling'], _typeOfCoolingMeta));
    } else if (isInserting) {
      context.missing(_typeOfCoolingMeta);
    }
    if (data.containsKey('no_of_phases')) {
      context.handle(
          _noOfPhasesMeta,
          noOfPhases.isAcceptableOrUnknown(
              data['no_of_phases'], _noOfPhasesMeta));
    } else if (isInserting) {
      context.missing(_noOfPhasesMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('no_of_taps')) {
      context.handle(_noOfTapsMeta,
          noOfTaps.isAcceptableOrUnknown(data['no_of_taps'], _noOfTapsMeta));
    } else if (isInserting) {
      context.missing(_noOfTapsMeta);
    }
    if (data.containsKey('on_of_nominal_taps')) {
      context.handle(
          _onOfNominalTapsMeta,
          onOfNominalTaps.isAcceptableOrUnknown(
              data['on_of_nominal_taps'], _onOfNominalTapsMeta));
    } else if (isInserting) {
      context.missing(_onOfNominalTapsMeta);
    }
    if (data.containsKey('oil_temp')) {
      context.handle(_oilTempMeta,
          oilTemp.isAcceptableOrUnknown(data['oil_temp'], _oilTempMeta));
    } else if (isInserting) {
      context.missing(_oilTempMeta);
    }
    if (data.containsKey('winding_temp')) {
      context.handle(
          _windingTempMeta,
          windingTemp.isAcceptableOrUnknown(
              data['winding_temp'], _windingTempMeta));
    } else if (isInserting) {
      context.missing(_windingTempMeta);
    }
    if (data.containsKey('ambient_temp')) {
      context.handle(
          _ambientTempMeta,
          ambientTemp.isAcceptableOrUnknown(
              data['ambient_temp'], _ambientTempMeta));
    } else if (isInserting) {
      context.missing(_ambientTempMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3WindingLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3WindingLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3WindingLocalDatasourceImplTable createAlias(String alias) {
    return $Powt3WindingLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winIRLocalData extends DataClass
    implements Insertable<Powt3winIRLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double hvE_60;
  final double hvE_600;
  final double hvLv_60;
  final double hvLv_600;
  final double hvT_60;
  final double hvT_600;
  final double lvE_60;
  final double lvE_600;
  final double lvT_60;
  final double lvT_600;
  final double tE_60;
  final double tE_600;
  final double cF_60;
  final double cT_60;
  final double fT_60;
  Powt3winIRLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.hvE_60,
      @required this.hvE_600,
      @required this.hvLv_60,
      @required this.hvLv_600,
      @required this.hvT_60,
      @required this.hvT_600,
      @required this.lvE_60,
      @required this.lvE_600,
      @required this.lvT_60,
      @required this.lvT_600,
      @required this.tE_60,
      @required this.tE_600,
      @required this.cF_60,
      @required this.cT_60,
      @required this.fT_60});
  factory Powt3winIRLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winIRLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      hvE_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_60']),
      hvE_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_600']),
      hvLv_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_60']),
      hvLv_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_600']),
      hvT_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_t_60']),
      hvT_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_t_600']),
      lvE_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_60']),
      lvE_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_e_600']),
      lvT_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_t_60']),
      lvT_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_t_600']),
      tE_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}t_e_60']),
      tE_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}t_e_600']),
      cF_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c_f_60']),
      cT_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}c_t_60']),
      fT_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}f_t_60']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || hvE_60 != null) {
      map['hv_e_60'] = Variable<double>(hvE_60);
    }
    if (!nullToAbsent || hvE_600 != null) {
      map['hv_e_600'] = Variable<double>(hvE_600);
    }
    if (!nullToAbsent || hvLv_60 != null) {
      map['hv_lv_60'] = Variable<double>(hvLv_60);
    }
    if (!nullToAbsent || hvLv_600 != null) {
      map['hv_lv_600'] = Variable<double>(hvLv_600);
    }
    if (!nullToAbsent || hvT_60 != null) {
      map['hv_t_60'] = Variable<double>(hvT_60);
    }
    if (!nullToAbsent || hvT_600 != null) {
      map['hv_t_600'] = Variable<double>(hvT_600);
    }
    if (!nullToAbsent || lvE_60 != null) {
      map['lv_e_60'] = Variable<double>(lvE_60);
    }
    if (!nullToAbsent || lvE_600 != null) {
      map['lv_e_600'] = Variable<double>(lvE_600);
    }
    if (!nullToAbsent || lvT_60 != null) {
      map['lv_t_60'] = Variable<double>(lvT_60);
    }
    if (!nullToAbsent || lvT_600 != null) {
      map['lv_t_600'] = Variable<double>(lvT_600);
    }
    if (!nullToAbsent || tE_60 != null) {
      map['t_e_60'] = Variable<double>(tE_60);
    }
    if (!nullToAbsent || tE_600 != null) {
      map['t_e_600'] = Variable<double>(tE_600);
    }
    if (!nullToAbsent || cF_60 != null) {
      map['c_f_60'] = Variable<double>(cF_60);
    }
    if (!nullToAbsent || cT_60 != null) {
      map['c_t_60'] = Variable<double>(cT_60);
    }
    if (!nullToAbsent || fT_60 != null) {
      map['f_t_60'] = Variable<double>(fT_60);
    }
    return map;
  }

  Powt3winIRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3winIRLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      hvE_60:
          hvE_60 == null && nullToAbsent ? const Value.absent() : Value(hvE_60),
      hvE_600: hvE_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_600),
      hvLv_60: hvLv_60 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLv_60),
      hvLv_600: hvLv_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLv_600),
      hvT_60:
          hvT_60 == null && nullToAbsent ? const Value.absent() : Value(hvT_60),
      hvT_600: hvT_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvT_600),
      lvE_60:
          lvE_60 == null && nullToAbsent ? const Value.absent() : Value(lvE_60),
      lvE_600: lvE_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvE_600),
      lvT_60:
          lvT_60 == null && nullToAbsent ? const Value.absent() : Value(lvT_60),
      lvT_600: lvT_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(lvT_600),
      tE_60:
          tE_60 == null && nullToAbsent ? const Value.absent() : Value(tE_60),
      tE_600:
          tE_600 == null && nullToAbsent ? const Value.absent() : Value(tE_600),
      cF_60:
          cF_60 == null && nullToAbsent ? const Value.absent() : Value(cF_60),
      cT_60:
          cT_60 == null && nullToAbsent ? const Value.absent() : Value(cT_60),
      fT_60:
          fT_60 == null && nullToAbsent ? const Value.absent() : Value(fT_60),
    );
  }

  factory Powt3winIRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winIRLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      hvE_60: serializer.fromJson<double>(json['hvE_60']),
      hvE_600: serializer.fromJson<double>(json['hvE_600']),
      hvLv_60: serializer.fromJson<double>(json['hvLv_60']),
      hvLv_600: serializer.fromJson<double>(json['hvLv_600']),
      hvT_60: serializer.fromJson<double>(json['hvT_60']),
      hvT_600: serializer.fromJson<double>(json['hvT_600']),
      lvE_60: serializer.fromJson<double>(json['lvE_60']),
      lvE_600: serializer.fromJson<double>(json['lvE_600']),
      lvT_60: serializer.fromJson<double>(json['lvT_60']),
      lvT_600: serializer.fromJson<double>(json['lvT_600']),
      tE_60: serializer.fromJson<double>(json['tE_60']),
      tE_600: serializer.fromJson<double>(json['tE_600']),
      cF_60: serializer.fromJson<double>(json['cF_60']),
      cT_60: serializer.fromJson<double>(json['cT_60']),
      fT_60: serializer.fromJson<double>(json['fT_60']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'hvE_60': serializer.toJson<double>(hvE_60),
      'hvE_600': serializer.toJson<double>(hvE_600),
      'hvLv_60': serializer.toJson<double>(hvLv_60),
      'hvLv_600': serializer.toJson<double>(hvLv_600),
      'hvT_60': serializer.toJson<double>(hvT_60),
      'hvT_600': serializer.toJson<double>(hvT_600),
      'lvE_60': serializer.toJson<double>(lvE_60),
      'lvE_600': serializer.toJson<double>(lvE_600),
      'lvT_60': serializer.toJson<double>(lvT_60),
      'lvT_600': serializer.toJson<double>(lvT_600),
      'tE_60': serializer.toJson<double>(tE_60),
      'tE_600': serializer.toJson<double>(tE_600),
      'cF_60': serializer.toJson<double>(cF_60),
      'cT_60': serializer.toJson<double>(cT_60),
      'fT_60': serializer.toJson<double>(fT_60),
    };
  }

  Powt3winIRLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double hvE_60,
          double hvE_600,
          double hvLv_60,
          double hvLv_600,
          double hvT_60,
          double hvT_600,
          double lvE_60,
          double lvE_600,
          double lvT_60,
          double lvT_600,
          double tE_60,
          double tE_600,
          double cF_60,
          double cT_60,
          double fT_60}) =>
      Powt3winIRLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        hvE_60: hvE_60 ?? this.hvE_60,
        hvE_600: hvE_600 ?? this.hvE_600,
        hvLv_60: hvLv_60 ?? this.hvLv_60,
        hvLv_600: hvLv_600 ?? this.hvLv_600,
        hvT_60: hvT_60 ?? this.hvT_60,
        hvT_600: hvT_600 ?? this.hvT_600,
        lvE_60: lvE_60 ?? this.lvE_60,
        lvE_600: lvE_600 ?? this.lvE_600,
        lvT_60: lvT_60 ?? this.lvT_60,
        lvT_600: lvT_600 ?? this.lvT_600,
        tE_60: tE_60 ?? this.tE_60,
        tE_600: tE_600 ?? this.tE_600,
        cF_60: cF_60 ?? this.cF_60,
        cT_60: cT_60 ?? this.cT_60,
        fT_60: fT_60 ?? this.fT_60,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winIRLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('hvE_60: $hvE_60, ')
          ..write('hvE_600: $hvE_600, ')
          ..write('hvLv_60: $hvLv_60, ')
          ..write('hvLv_600: $hvLv_600, ')
          ..write('hvT_60: $hvT_60, ')
          ..write('hvT_600: $hvT_600, ')
          ..write('lvE_60: $lvE_60, ')
          ..write('lvE_600: $lvE_600, ')
          ..write('lvT_60: $lvT_60, ')
          ..write('lvT_600: $lvT_600, ')
          ..write('tE_60: $tE_60, ')
          ..write('tE_600: $tE_600, ')
          ..write('cF_60: $cF_60, ')
          ..write('cT_60: $cT_60, ')
          ..write('fT_60: $fT_60')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        hvE_60,
        hvE_600,
        hvLv_60,
        hvLv_600,
        hvT_60,
        hvT_600,
        lvE_60,
        lvE_600,
        lvT_60,
        lvT_600,
        tE_60,
        tE_600,
        cF_60,
        cT_60,
        fT_60
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winIRLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.hvE_60 == this.hvE_60 &&
          other.hvE_600 == this.hvE_600 &&
          other.hvLv_60 == this.hvLv_60 &&
          other.hvLv_600 == this.hvLv_600 &&
          other.hvT_60 == this.hvT_60 &&
          other.hvT_600 == this.hvT_600 &&
          other.lvE_60 == this.lvE_60 &&
          other.lvE_600 == this.lvE_600 &&
          other.lvT_60 == this.lvT_60 &&
          other.lvT_600 == this.lvT_600 &&
          other.tE_60 == this.tE_60 &&
          other.tE_600 == this.tE_600 &&
          other.cF_60 == this.cF_60 &&
          other.cT_60 == this.cT_60 &&
          other.fT_60 == this.fT_60);
}

class Powt3winIRLocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winIRLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> hvE_60;
  final Value<double> hvE_600;
  final Value<double> hvLv_60;
  final Value<double> hvLv_600;
  final Value<double> hvT_60;
  final Value<double> hvT_600;
  final Value<double> lvE_60;
  final Value<double> lvE_600;
  final Value<double> lvT_60;
  final Value<double> lvT_600;
  final Value<double> tE_60;
  final Value<double> tE_600;
  final Value<double> cF_60;
  final Value<double> cT_60;
  final Value<double> fT_60;
  const Powt3winIRLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.hvE_60 = const Value.absent(),
    this.hvE_600 = const Value.absent(),
    this.hvLv_60 = const Value.absent(),
    this.hvLv_600 = const Value.absent(),
    this.hvT_60 = const Value.absent(),
    this.hvT_600 = const Value.absent(),
    this.lvE_60 = const Value.absent(),
    this.lvE_600 = const Value.absent(),
    this.lvT_60 = const Value.absent(),
    this.lvT_600 = const Value.absent(),
    this.tE_60 = const Value.absent(),
    this.tE_600 = const Value.absent(),
    this.cF_60 = const Value.absent(),
    this.cT_60 = const Value.absent(),
    this.fT_60 = const Value.absent(),
  });
  Powt3winIRLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double hvE_60,
    @required double hvE_600,
    @required double hvLv_60,
    @required double hvLv_600,
    @required double hvT_60,
    @required double hvT_600,
    @required double lvE_60,
    @required double lvE_600,
    @required double lvT_60,
    @required double lvT_600,
    @required double tE_60,
    @required double tE_600,
    @required double cF_60,
    @required double cT_60,
    @required double fT_60,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        hvE_60 = Value(hvE_60),
        hvE_600 = Value(hvE_600),
        hvLv_60 = Value(hvLv_60),
        hvLv_600 = Value(hvLv_600),
        hvT_60 = Value(hvT_60),
        hvT_600 = Value(hvT_600),
        lvE_60 = Value(lvE_60),
        lvE_600 = Value(lvE_600),
        lvT_60 = Value(lvT_60),
        lvT_600 = Value(lvT_600),
        tE_60 = Value(tE_60),
        tE_600 = Value(tE_600),
        cF_60 = Value(cF_60),
        cT_60 = Value(cT_60),
        fT_60 = Value(fT_60);
  static Insertable<Powt3winIRLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> hvE_60,
    Expression<double> hvE_600,
    Expression<double> hvLv_60,
    Expression<double> hvLv_600,
    Expression<double> hvT_60,
    Expression<double> hvT_600,
    Expression<double> lvE_60,
    Expression<double> lvE_600,
    Expression<double> lvT_60,
    Expression<double> lvT_600,
    Expression<double> tE_60,
    Expression<double> tE_600,
    Expression<double> cF_60,
    Expression<double> cT_60,
    Expression<double> fT_60,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (hvE_60 != null) 'hv_e_60': hvE_60,
      if (hvE_600 != null) 'hv_e_600': hvE_600,
      if (hvLv_60 != null) 'hv_lv_60': hvLv_60,
      if (hvLv_600 != null) 'hv_lv_600': hvLv_600,
      if (hvT_60 != null) 'hv_t_60': hvT_60,
      if (hvT_600 != null) 'hv_t_600': hvT_600,
      if (lvE_60 != null) 'lv_e_60': lvE_60,
      if (lvE_600 != null) 'lv_e_600': lvE_600,
      if (lvT_60 != null) 'lv_t_60': lvT_60,
      if (lvT_600 != null) 'lv_t_600': lvT_600,
      if (tE_60 != null) 't_e_60': tE_60,
      if (tE_600 != null) 't_e_600': tE_600,
      if (cF_60 != null) 'c_f_60': cF_60,
      if (cT_60 != null) 'c_t_60': cT_60,
      if (fT_60 != null) 'f_t_60': fT_60,
    });
  }

  Powt3winIRLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> hvE_60,
      Value<double> hvE_600,
      Value<double> hvLv_60,
      Value<double> hvLv_600,
      Value<double> hvT_60,
      Value<double> hvT_600,
      Value<double> lvE_60,
      Value<double> lvE_600,
      Value<double> lvT_60,
      Value<double> lvT_600,
      Value<double> tE_60,
      Value<double> tE_600,
      Value<double> cF_60,
      Value<double> cT_60,
      Value<double> fT_60}) {
    return Powt3winIRLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      hvE_60: hvE_60 ?? this.hvE_60,
      hvE_600: hvE_600 ?? this.hvE_600,
      hvLv_60: hvLv_60 ?? this.hvLv_60,
      hvLv_600: hvLv_600 ?? this.hvLv_600,
      hvT_60: hvT_60 ?? this.hvT_60,
      hvT_600: hvT_600 ?? this.hvT_600,
      lvE_60: lvE_60 ?? this.lvE_60,
      lvE_600: lvE_600 ?? this.lvE_600,
      lvT_60: lvT_60 ?? this.lvT_60,
      lvT_600: lvT_600 ?? this.lvT_600,
      tE_60: tE_60 ?? this.tE_60,
      tE_600: tE_600 ?? this.tE_600,
      cF_60: cF_60 ?? this.cF_60,
      cT_60: cT_60 ?? this.cT_60,
      fT_60: fT_60 ?? this.fT_60,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (hvE_60.present) {
      map['hv_e_60'] = Variable<double>(hvE_60.value);
    }
    if (hvE_600.present) {
      map['hv_e_600'] = Variable<double>(hvE_600.value);
    }
    if (hvLv_60.present) {
      map['hv_lv_60'] = Variable<double>(hvLv_60.value);
    }
    if (hvLv_600.present) {
      map['hv_lv_600'] = Variable<double>(hvLv_600.value);
    }
    if (hvT_60.present) {
      map['hv_t_60'] = Variable<double>(hvT_60.value);
    }
    if (hvT_600.present) {
      map['hv_t_600'] = Variable<double>(hvT_600.value);
    }
    if (lvE_60.present) {
      map['lv_e_60'] = Variable<double>(lvE_60.value);
    }
    if (lvE_600.present) {
      map['lv_e_600'] = Variable<double>(lvE_600.value);
    }
    if (lvT_60.present) {
      map['lv_t_60'] = Variable<double>(lvT_60.value);
    }
    if (lvT_600.present) {
      map['lv_t_600'] = Variable<double>(lvT_600.value);
    }
    if (tE_60.present) {
      map['t_e_60'] = Variable<double>(tE_60.value);
    }
    if (tE_600.present) {
      map['t_e_600'] = Variable<double>(tE_600.value);
    }
    if (cF_60.present) {
      map['c_f_60'] = Variable<double>(cF_60.value);
    }
    if (cT_60.present) {
      map['c_t_60'] = Variable<double>(cT_60.value);
    }
    if (fT_60.present) {
      map['f_t_60'] = Variable<double>(fT_60.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3winIRLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('hvE_60: $hvE_60, ')
          ..write('hvE_600: $hvE_600, ')
          ..write('hvLv_60: $hvLv_60, ')
          ..write('hvLv_600: $hvLv_600, ')
          ..write('hvT_60: $hvT_60, ')
          ..write('hvT_600: $hvT_600, ')
          ..write('lvE_60: $lvE_60, ')
          ..write('lvE_600: $lvE_600, ')
          ..write('lvT_60: $lvT_60, ')
          ..write('lvT_600: $lvT_600, ')
          ..write('tE_60: $tE_60, ')
          ..write('tE_600: $tE_600, ')
          ..write('cF_60: $cF_60, ')
          ..write('cT_60: $cT_60, ')
          ..write('fT_60: $fT_60')
          ..write(')'))
        .toString();
  }
}

class $Powt3winIRLocalDatasourceImplTable extends Powt3winIRLocalDatasourceImpl
    with TableInfo<$Powt3winIRLocalDatasourceImplTable, Powt3winIRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3winIRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _hvE_60Meta = const VerificationMeta('hvE_60');
  GeneratedColumn<double> _hvE_60;
  @override
  GeneratedColumn<double> get hvE_60 =>
      _hvE_60 ??= GeneratedColumn<double>('hv_e_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_600Meta = const VerificationMeta('hvE_600');
  GeneratedColumn<double> _hvE_600;
  @override
  GeneratedColumn<double> get hvE_600 =>
      _hvE_600 ??= GeneratedColumn<double>('hv_e_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLv_60Meta = const VerificationMeta('hvLv_60');
  GeneratedColumn<double> _hvLv_60;
  @override
  GeneratedColumn<double> get hvLv_60 =>
      _hvLv_60 ??= GeneratedColumn<double>('hv_lv_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLv_600Meta = const VerificationMeta('hvLv_600');
  GeneratedColumn<double> _hvLv_600;
  @override
  GeneratedColumn<double> get hvLv_600 =>
      _hvLv_600 ??= GeneratedColumn<double>('hv_lv_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvT_60Meta = const VerificationMeta('hvT_60');
  GeneratedColumn<double> _hvT_60;
  @override
  GeneratedColumn<double> get hvT_60 =>
      _hvT_60 ??= GeneratedColumn<double>('hv_t_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvT_600Meta = const VerificationMeta('hvT_600');
  GeneratedColumn<double> _hvT_600;
  @override
  GeneratedColumn<double> get hvT_600 =>
      _hvT_600 ??= GeneratedColumn<double>('hv_t_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_60Meta = const VerificationMeta('lvE_60');
  GeneratedColumn<double> _lvE_60;
  @override
  GeneratedColumn<double> get lvE_60 =>
      _lvE_60 ??= GeneratedColumn<double>('lv_e_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvE_600Meta = const VerificationMeta('lvE_600');
  GeneratedColumn<double> _lvE_600;
  @override
  GeneratedColumn<double> get lvE_600 =>
      _lvE_600 ??= GeneratedColumn<double>('lv_e_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvT_60Meta = const VerificationMeta('lvT_60');
  GeneratedColumn<double> _lvT_60;
  @override
  GeneratedColumn<double> get lvT_60 =>
      _lvT_60 ??= GeneratedColumn<double>('lv_t_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lvT_600Meta = const VerificationMeta('lvT_600');
  GeneratedColumn<double> _lvT_600;
  @override
  GeneratedColumn<double> get lvT_600 =>
      _lvT_600 ??= GeneratedColumn<double>('lv_t_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tE_60Meta = const VerificationMeta('tE_60');
  GeneratedColumn<double> _tE_60;
  @override
  GeneratedColumn<double> get tE_60 =>
      _tE_60 ??= GeneratedColumn<double>('t_e_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tE_600Meta = const VerificationMeta('tE_600');
  GeneratedColumn<double> _tE_600;
  @override
  GeneratedColumn<double> get tE_600 =>
      _tE_600 ??= GeneratedColumn<double>('t_e_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _cF_60Meta = const VerificationMeta('cF_60');
  GeneratedColumn<double> _cF_60;
  @override
  GeneratedColumn<double> get cF_60 =>
      _cF_60 ??= GeneratedColumn<double>('c_f_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _cT_60Meta = const VerificationMeta('cT_60');
  GeneratedColumn<double> _cT_60;
  @override
  GeneratedColumn<double> get cT_60 =>
      _cT_60 ??= GeneratedColumn<double>('c_t_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _fT_60Meta = const VerificationMeta('fT_60');
  GeneratedColumn<double> _fT_60;
  @override
  GeneratedColumn<double> get fT_60 =>
      _fT_60 ??= GeneratedColumn<double>('f_t_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        hvE_60,
        hvE_600,
        hvLv_60,
        hvLv_600,
        hvT_60,
        hvT_600,
        lvE_60,
        lvE_600,
        lvT_60,
        lvT_600,
        tE_60,
        tE_600,
        cF_60,
        cT_60,
        fT_60
      ];
  @override
  String get aliasedName => _alias ?? 'powt3win_i_r_local_datasource_impl';
  @override
  String get actualTableName => 'powt3win_i_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3winIRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('hv_e_60')) {
      context.handle(_hvE_60Meta,
          hvE_60.isAcceptableOrUnknown(data['hv_e_60'], _hvE_60Meta));
    } else if (isInserting) {
      context.missing(_hvE_60Meta);
    }
    if (data.containsKey('hv_e_600')) {
      context.handle(_hvE_600Meta,
          hvE_600.isAcceptableOrUnknown(data['hv_e_600'], _hvE_600Meta));
    } else if (isInserting) {
      context.missing(_hvE_600Meta);
    }
    if (data.containsKey('hv_lv_60')) {
      context.handle(_hvLv_60Meta,
          hvLv_60.isAcceptableOrUnknown(data['hv_lv_60'], _hvLv_60Meta));
    } else if (isInserting) {
      context.missing(_hvLv_60Meta);
    }
    if (data.containsKey('hv_lv_600')) {
      context.handle(_hvLv_600Meta,
          hvLv_600.isAcceptableOrUnknown(data['hv_lv_600'], _hvLv_600Meta));
    } else if (isInserting) {
      context.missing(_hvLv_600Meta);
    }
    if (data.containsKey('hv_t_60')) {
      context.handle(_hvT_60Meta,
          hvT_60.isAcceptableOrUnknown(data['hv_t_60'], _hvT_60Meta));
    } else if (isInserting) {
      context.missing(_hvT_60Meta);
    }
    if (data.containsKey('hv_t_600')) {
      context.handle(_hvT_600Meta,
          hvT_600.isAcceptableOrUnknown(data['hv_t_600'], _hvT_600Meta));
    } else if (isInserting) {
      context.missing(_hvT_600Meta);
    }
    if (data.containsKey('lv_e_60')) {
      context.handle(_lvE_60Meta,
          lvE_60.isAcceptableOrUnknown(data['lv_e_60'], _lvE_60Meta));
    } else if (isInserting) {
      context.missing(_lvE_60Meta);
    }
    if (data.containsKey('lv_e_600')) {
      context.handle(_lvE_600Meta,
          lvE_600.isAcceptableOrUnknown(data['lv_e_600'], _lvE_600Meta));
    } else if (isInserting) {
      context.missing(_lvE_600Meta);
    }
    if (data.containsKey('lv_t_60')) {
      context.handle(_lvT_60Meta,
          lvT_60.isAcceptableOrUnknown(data['lv_t_60'], _lvT_60Meta));
    } else if (isInserting) {
      context.missing(_lvT_60Meta);
    }
    if (data.containsKey('lv_t_600')) {
      context.handle(_lvT_600Meta,
          lvT_600.isAcceptableOrUnknown(data['lv_t_600'], _lvT_600Meta));
    } else if (isInserting) {
      context.missing(_lvT_600Meta);
    }
    if (data.containsKey('t_e_60')) {
      context.handle(
          _tE_60Meta, tE_60.isAcceptableOrUnknown(data['t_e_60'], _tE_60Meta));
    } else if (isInserting) {
      context.missing(_tE_60Meta);
    }
    if (data.containsKey('t_e_600')) {
      context.handle(_tE_600Meta,
          tE_600.isAcceptableOrUnknown(data['t_e_600'], _tE_600Meta));
    } else if (isInserting) {
      context.missing(_tE_600Meta);
    }
    if (data.containsKey('c_f_60')) {
      context.handle(
          _cF_60Meta, cF_60.isAcceptableOrUnknown(data['c_f_60'], _cF_60Meta));
    } else if (isInserting) {
      context.missing(_cF_60Meta);
    }
    if (data.containsKey('c_t_60')) {
      context.handle(
          _cT_60Meta, cT_60.isAcceptableOrUnknown(data['c_t_60'], _cT_60Meta));
    } else if (isInserting) {
      context.missing(_cT_60Meta);
    }
    if (data.containsKey('f_t_60')) {
      context.handle(
          _fT_60Meta, fT_60.isAcceptableOrUnknown(data['f_t_60'], _fT_60Meta));
    } else if (isInserting) {
      context.missing(_fT_60Meta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winIRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3winIRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3winIRLocalDatasourceImplTable createAlias(String alias) {
    return $Powt3winIRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3wintscLocalData extends DataClass
    implements Insertable<Powt3wintscLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final int hv_voltage;
  final double hv_current_Onan;
  final double hv_current_Onaf;
  final double hv_current_Ofaf;
  final String equipmentUsed;
  final DateTime updateDate;
  Powt3wintscLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_voltage,
      @required this.hv_current_Onan,
      @required this.hv_current_Onaf,
      @required this.hv_current_Ofaf,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory Powt3wintscLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3wintscLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_voltage: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_voltage']),
      hv_current_Onan: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_current_onan']),
      hv_current_Onaf: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_current_onaf']),
      hv_current_Ofaf: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_current_ofaf']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_voltage != null) {
      map['hv_voltage'] = Variable<int>(hv_voltage);
    }
    if (!nullToAbsent || hv_current_Onan != null) {
      map['hv_current_onan'] = Variable<double>(hv_current_Onan);
    }
    if (!nullToAbsent || hv_current_Onaf != null) {
      map['hv_current_onaf'] = Variable<double>(hv_current_Onaf);
    }
    if (!nullToAbsent || hv_current_Ofaf != null) {
      map['hv_current_ofaf'] = Variable<double>(hv_current_Ofaf);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  Powt3wintscLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3wintscLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_voltage: hv_voltage == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_voltage),
      hv_current_Onan: hv_current_Onan == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_current_Onan),
      hv_current_Onaf: hv_current_Onaf == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_current_Onaf),
      hv_current_Ofaf: hv_current_Ofaf == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_current_Ofaf),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory Powt3wintscLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3wintscLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_voltage: serializer.fromJson<int>(json['hv_voltage']),
      hv_current_Onan: serializer.fromJson<double>(json['hv_current_Onan']),
      hv_current_Onaf: serializer.fromJson<double>(json['hv_current_Onaf']),
      hv_current_Ofaf: serializer.fromJson<double>(json['hv_current_Ofaf']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_voltage': serializer.toJson<int>(hv_voltage),
      'hv_current_Onan': serializer.toJson<double>(hv_current_Onan),
      'hv_current_Onaf': serializer.toJson<double>(hv_current_Onaf),
      'hv_current_Ofaf': serializer.toJson<double>(hv_current_Ofaf),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  Powt3wintscLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          int hv_voltage,
          double hv_current_Onan,
          double hv_current_Onaf,
          double hv_current_Ofaf,
          String equipmentUsed,
          DateTime updateDate}) =>
      Powt3wintscLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_voltage: hv_voltage ?? this.hv_voltage,
        hv_current_Onan: hv_current_Onan ?? this.hv_current_Onan,
        hv_current_Onaf: hv_current_Onaf ?? this.hv_current_Onaf,
        hv_current_Ofaf: hv_current_Ofaf ?? this.hv_current_Ofaf,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3wintscLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_voltage: $hv_voltage, ')
          ..write('hv_current_Onan: $hv_current_Onan, ')
          ..write('hv_current_Onaf: $hv_current_Onaf, ')
          ..write('hv_current_Ofaf: $hv_current_Ofaf, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      tapPosition,
      hv_voltage,
      hv_current_Onan,
      hv_current_Onaf,
      hv_current_Ofaf,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3wintscLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_voltage == this.hv_voltage &&
          other.hv_current_Onan == this.hv_current_Onan &&
          other.hv_current_Onaf == this.hv_current_Onaf &&
          other.hv_current_Ofaf == this.hv_current_Ofaf &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class Powt3wintscLocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3wintscLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<int> hv_voltage;
  final Value<double> hv_current_Onan;
  final Value<double> hv_current_Onaf;
  final Value<double> hv_current_Ofaf;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const Powt3wintscLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_voltage = const Value.absent(),
    this.hv_current_Onan = const Value.absent(),
    this.hv_current_Onaf = const Value.absent(),
    this.hv_current_Ofaf = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  Powt3wintscLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required int hv_voltage,
    @required double hv_current_Onan,
    @required double hv_current_Onaf,
    @required double hv_current_Ofaf,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_voltage = Value(hv_voltage),
        hv_current_Onan = Value(hv_current_Onan),
        hv_current_Onaf = Value(hv_current_Onaf),
        hv_current_Ofaf = Value(hv_current_Ofaf),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<Powt3wintscLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<int> hv_voltage,
    Expression<double> hv_current_Onan,
    Expression<double> hv_current_Onaf,
    Expression<double> hv_current_Ofaf,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_voltage != null) 'hv_voltage': hv_voltage,
      if (hv_current_Onan != null) 'hv_current_onan': hv_current_Onan,
      if (hv_current_Onaf != null) 'hv_current_onaf': hv_current_Onaf,
      if (hv_current_Ofaf != null) 'hv_current_ofaf': hv_current_Ofaf,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  Powt3wintscLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<int> hv_voltage,
      Value<double> hv_current_Onan,
      Value<double> hv_current_Onaf,
      Value<double> hv_current_Ofaf,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return Powt3wintscLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_voltage: hv_voltage ?? this.hv_voltage,
      hv_current_Onan: hv_current_Onan ?? this.hv_current_Onan,
      hv_current_Onaf: hv_current_Onaf ?? this.hv_current_Onaf,
      hv_current_Ofaf: hv_current_Ofaf ?? this.hv_current_Ofaf,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_voltage.present) {
      map['hv_voltage'] = Variable<int>(hv_voltage.value);
    }
    if (hv_current_Onan.present) {
      map['hv_current_onan'] = Variable<double>(hv_current_Onan.value);
    }
    if (hv_current_Onaf.present) {
      map['hv_current_onaf'] = Variable<double>(hv_current_Onaf.value);
    }
    if (hv_current_Ofaf.present) {
      map['hv_current_ofaf'] = Variable<double>(hv_current_Ofaf.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3wintscLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_voltage: $hv_voltage, ')
          ..write('hv_current_Onan: $hv_current_Onan, ')
          ..write('hv_current_Onaf: $hv_current_Onaf, ')
          ..write('hv_current_Ofaf: $hv_current_Ofaf, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $Powt3wintscLocalDatasourceImplTable
    extends Powt3wintscLocalDatasourceImpl
    with TableInfo<$Powt3wintscLocalDatasourceImplTable, Powt3wintscLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3wintscLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_voltageMeta = const VerificationMeta('hv_voltage');
  GeneratedColumn<int> _hv_voltage;
  @override
  GeneratedColumn<int> get hv_voltage =>
      _hv_voltage ??= GeneratedColumn<int>('hv_voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_current_OnanMeta =
      const VerificationMeta('hv_current_Onan');
  GeneratedColumn<double> _hv_current_Onan;
  @override
  GeneratedColumn<double> get hv_current_Onan => _hv_current_Onan ??=
      GeneratedColumn<double>('hv_current_onan', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_current_OnafMeta =
      const VerificationMeta('hv_current_Onaf');
  GeneratedColumn<double> _hv_current_Onaf;
  @override
  GeneratedColumn<double> get hv_current_Onaf => _hv_current_Onaf ??=
      GeneratedColumn<double>('hv_current_onaf', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_current_OfafMeta =
      const VerificationMeta('hv_current_Ofaf');
  GeneratedColumn<double> _hv_current_Ofaf;
  @override
  GeneratedColumn<double> get hv_current_Ofaf => _hv_current_Ofaf ??=
      GeneratedColumn<double>('hv_current_ofaf', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_voltage,
        hv_current_Onan,
        hv_current_Onaf,
        hv_current_Ofaf,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powt3wintsc_local_datasource_impl';
  @override
  String get actualTableName => 'powt3wintsc_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3wintscLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_voltage')) {
      context.handle(
          _hv_voltageMeta,
          hv_voltage.isAcceptableOrUnknown(
              data['hv_voltage'], _hv_voltageMeta));
    } else if (isInserting) {
      context.missing(_hv_voltageMeta);
    }
    if (data.containsKey('hv_current_onan')) {
      context.handle(
          _hv_current_OnanMeta,
          hv_current_Onan.isAcceptableOrUnknown(
              data['hv_current_onan'], _hv_current_OnanMeta));
    } else if (isInserting) {
      context.missing(_hv_current_OnanMeta);
    }
    if (data.containsKey('hv_current_onaf')) {
      context.handle(
          _hv_current_OnafMeta,
          hv_current_Onaf.isAcceptableOrUnknown(
              data['hv_current_onaf'], _hv_current_OnafMeta));
    } else if (isInserting) {
      context.missing(_hv_current_OnafMeta);
    }
    if (data.containsKey('hv_current_ofaf')) {
      context.handle(
          _hv_current_OfafMeta,
          hv_current_Ofaf.isAcceptableOrUnknown(
              data['hv_current_ofaf'], _hv_current_OfafMeta));
    } else if (isInserting) {
      context.missing(_hv_current_OfafMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3wintscLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3wintscLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3wintscLocalDatasourceImplTable createAlias(String alias) {
    return $Powt3wintscLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winwrHvLocalData extends DataClass
    implements Insertable<Powt3winwrHvLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_r_1u_1n;
  final double hv_r_1v_1n;
  final double hv_r_1w_1n;
  Powt3winwrHvLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_r_1u_1n,
      @required this.hv_r_1v_1n,
      @required this.hv_r_1w_1n});
  factory Powt3winwrHvLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winwrHvLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_r_1u_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_r_1u_1n']),
      hv_r_1v_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_r_1v_1n']),
      hv_r_1w_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_r_1w_1n']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_r_1u_1n != null) {
      map['hv_r_1u_1n'] = Variable<double>(hv_r_1u_1n);
    }
    if (!nullToAbsent || hv_r_1v_1n != null) {
      map['hv_r_1v_1n'] = Variable<double>(hv_r_1v_1n);
    }
    if (!nullToAbsent || hv_r_1w_1n != null) {
      map['hv_r_1w_1n'] = Variable<double>(hv_r_1w_1n);
    }
    return map;
  }

  Powt3winwrHvLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3winwrHvLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_r_1u_1n: hv_r_1u_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_r_1u_1n),
      hv_r_1v_1n: hv_r_1v_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_r_1v_1n),
      hv_r_1w_1n: hv_r_1w_1n == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_r_1w_1n),
    );
  }

  factory Powt3winwrHvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winwrHvLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_r_1u_1n: serializer.fromJson<double>(json['hv_r_1u_1n']),
      hv_r_1v_1n: serializer.fromJson<double>(json['hv_r_1v_1n']),
      hv_r_1w_1n: serializer.fromJson<double>(json['hv_r_1w_1n']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_r_1u_1n': serializer.toJson<double>(hv_r_1u_1n),
      'hv_r_1v_1n': serializer.toJson<double>(hv_r_1v_1n),
      'hv_r_1w_1n': serializer.toJson<double>(hv_r_1w_1n),
    };
  }

  Powt3winwrHvLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_r_1u_1n,
          double hv_r_1v_1n,
          double hv_r_1w_1n}) =>
      Powt3winwrHvLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_r_1u_1n: hv_r_1u_1n ?? this.hv_r_1u_1n,
        hv_r_1v_1n: hv_r_1v_1n ?? this.hv_r_1v_1n,
        hv_r_1w_1n: hv_r_1w_1n ?? this.hv_r_1w_1n,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winwrHvLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_r_1u_1n: $hv_r_1u_1n, ')
          ..write('hv_r_1v_1n: $hv_r_1v_1n, ')
          ..write('hv_r_1w_1n: $hv_r_1w_1n')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      hv_r_1u_1n, hv_r_1v_1n, hv_r_1w_1n);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winwrHvLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_r_1u_1n == this.hv_r_1u_1n &&
          other.hv_r_1v_1n == this.hv_r_1v_1n &&
          other.hv_r_1w_1n == this.hv_r_1w_1n);
}

class Powt3winwrHvLocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winwrHvLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_r_1u_1n;
  final Value<double> hv_r_1v_1n;
  final Value<double> hv_r_1w_1n;
  const Powt3winwrHvLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_r_1u_1n = const Value.absent(),
    this.hv_r_1v_1n = const Value.absent(),
    this.hv_r_1w_1n = const Value.absent(),
  });
  Powt3winwrHvLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_r_1u_1n,
    @required double hv_r_1v_1n,
    @required double hv_r_1w_1n,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_r_1u_1n = Value(hv_r_1u_1n),
        hv_r_1v_1n = Value(hv_r_1v_1n),
        hv_r_1w_1n = Value(hv_r_1w_1n);
  static Insertable<Powt3winwrHvLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_r_1u_1n,
    Expression<double> hv_r_1v_1n,
    Expression<double> hv_r_1w_1n,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_r_1u_1n != null) 'hv_r_1u_1n': hv_r_1u_1n,
      if (hv_r_1v_1n != null) 'hv_r_1v_1n': hv_r_1v_1n,
      if (hv_r_1w_1n != null) 'hv_r_1w_1n': hv_r_1w_1n,
    });
  }

  Powt3winwrHvLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_r_1u_1n,
      Value<double> hv_r_1v_1n,
      Value<double> hv_r_1w_1n}) {
    return Powt3winwrHvLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_r_1u_1n: hv_r_1u_1n ?? this.hv_r_1u_1n,
      hv_r_1v_1n: hv_r_1v_1n ?? this.hv_r_1v_1n,
      hv_r_1w_1n: hv_r_1w_1n ?? this.hv_r_1w_1n,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_r_1u_1n.present) {
      map['hv_r_1u_1n'] = Variable<double>(hv_r_1u_1n.value);
    }
    if (hv_r_1v_1n.present) {
      map['hv_r_1v_1n'] = Variable<double>(hv_r_1v_1n.value);
    }
    if (hv_r_1w_1n.present) {
      map['hv_r_1w_1n'] = Variable<double>(hv_r_1w_1n.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3winwrHvLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_r_1u_1n: $hv_r_1u_1n, ')
          ..write('hv_r_1v_1n: $hv_r_1v_1n, ')
          ..write('hv_r_1w_1n: $hv_r_1w_1n')
          ..write(')'))
        .toString();
  }
}

class $Powt3winwrHvLocalDatasourceImplTable
    extends Powt3winwrHvLocalDatasourceImpl
    with
        TableInfo<$Powt3winwrHvLocalDatasourceImplTable,
            Powt3winwrHvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3winwrHvLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_r_1u_1nMeta = const VerificationMeta('hv_r_1u_1n');
  GeneratedColumn<double> _hv_r_1u_1n;
  @override
  GeneratedColumn<double> get hv_r_1u_1n =>
      _hv_r_1u_1n ??= GeneratedColumn<double>('hv_r_1u_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_r_1v_1nMeta = const VerificationMeta('hv_r_1v_1n');
  GeneratedColumn<double> _hv_r_1v_1n;
  @override
  GeneratedColumn<double> get hv_r_1v_1n =>
      _hv_r_1v_1n ??= GeneratedColumn<double>('hv_r_1v_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_r_1w_1nMeta = const VerificationMeta('hv_r_1w_1n');
  GeneratedColumn<double> _hv_r_1w_1n;
  @override
  GeneratedColumn<double> get hv_r_1w_1n =>
      _hv_r_1w_1n ??= GeneratedColumn<double>('hv_r_1w_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_r_1u_1n,
        hv_r_1v_1n,
        hv_r_1w_1n
      ];
  @override
  String get aliasedName => _alias ?? 'powt3winwr_hv_local_datasource_impl';
  @override
  String get actualTableName => 'powt3winwr_hv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3winwrHvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_r_1u_1n')) {
      context.handle(
          _hv_r_1u_1nMeta,
          hv_r_1u_1n.isAcceptableOrUnknown(
              data['hv_r_1u_1n'], _hv_r_1u_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_r_1u_1nMeta);
    }
    if (data.containsKey('hv_r_1v_1n')) {
      context.handle(
          _hv_r_1v_1nMeta,
          hv_r_1v_1n.isAcceptableOrUnknown(
              data['hv_r_1v_1n'], _hv_r_1v_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_r_1v_1nMeta);
    }
    if (data.containsKey('hv_r_1w_1n')) {
      context.handle(
          _hv_r_1w_1nMeta,
          hv_r_1w_1n.isAcceptableOrUnknown(
              data['hv_r_1w_1n'], _hv_r_1w_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_r_1w_1nMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winwrHvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3winwrHvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3winwrHvLocalDatasourceImplTable createAlias(String alias) {
    return $Powt3winwrHvLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winwrLvLocalData extends DataClass
    implements Insertable<Powt3winwrLvLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double lv_r_uv;
  final double lv_r_vw;
  final double lv_r_wu;
  final String equipmentUsed;
  final DateTime updateDate;
  Powt3winwrLvLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.lv_r_uv,
      @required this.lv_r_vw,
      @required this.lv_r_wu,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory Powt3winwrLvLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winwrLvLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      lv_r_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_r_uv']),
      lv_r_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_r_vw']),
      lv_r_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_r_wu']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || lv_r_uv != null) {
      map['lv_r_uv'] = Variable<double>(lv_r_uv);
    }
    if (!nullToAbsent || lv_r_vw != null) {
      map['lv_r_vw'] = Variable<double>(lv_r_vw);
    }
    if (!nullToAbsent || lv_r_wu != null) {
      map['lv_r_wu'] = Variable<double>(lv_r_wu);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  Powt3winwrLvLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3winwrLvLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      lv_r_uv: lv_r_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_r_uv),
      lv_r_vw: lv_r_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_r_vw),
      lv_r_wu: lv_r_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_r_wu),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory Powt3winwrLvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winwrLvLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      lv_r_uv: serializer.fromJson<double>(json['lv_r_uv']),
      lv_r_vw: serializer.fromJson<double>(json['lv_r_vw']),
      lv_r_wu: serializer.fromJson<double>(json['lv_r_wu']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'lv_r_uv': serializer.toJson<double>(lv_r_uv),
      'lv_r_vw': serializer.toJson<double>(lv_r_vw),
      'lv_r_wu': serializer.toJson<double>(lv_r_wu),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  Powt3winwrLvLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double lv_r_uv,
          double lv_r_vw,
          double lv_r_wu,
          String equipmentUsed,
          DateTime updateDate}) =>
      Powt3winwrLvLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        lv_r_uv: lv_r_uv ?? this.lv_r_uv,
        lv_r_vw: lv_r_vw ?? this.lv_r_vw,
        lv_r_wu: lv_r_wu ?? this.lv_r_wu,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winwrLvLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('lv_r_uv: $lv_r_uv, ')
          ..write('lv_r_vw: $lv_r_vw, ')
          ..write('lv_r_wu: $lv_r_wu, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      lv_r_uv, lv_r_vw, lv_r_wu, equipmentUsed, updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winwrLvLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.lv_r_uv == this.lv_r_uv &&
          other.lv_r_vw == this.lv_r_vw &&
          other.lv_r_wu == this.lv_r_wu &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class Powt3winwrLvLocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winwrLvLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> lv_r_uv;
  final Value<double> lv_r_vw;
  final Value<double> lv_r_wu;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const Powt3winwrLvLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.lv_r_uv = const Value.absent(),
    this.lv_r_vw = const Value.absent(),
    this.lv_r_wu = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  Powt3winwrLvLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double lv_r_uv,
    @required double lv_r_vw,
    @required double lv_r_wu,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        lv_r_uv = Value(lv_r_uv),
        lv_r_vw = Value(lv_r_vw),
        lv_r_wu = Value(lv_r_wu),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<Powt3winwrLvLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> lv_r_uv,
    Expression<double> lv_r_vw,
    Expression<double> lv_r_wu,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (lv_r_uv != null) 'lv_r_uv': lv_r_uv,
      if (lv_r_vw != null) 'lv_r_vw': lv_r_vw,
      if (lv_r_wu != null) 'lv_r_wu': lv_r_wu,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  Powt3winwrLvLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> lv_r_uv,
      Value<double> lv_r_vw,
      Value<double> lv_r_wu,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return Powt3winwrLvLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      lv_r_uv: lv_r_uv ?? this.lv_r_uv,
      lv_r_vw: lv_r_vw ?? this.lv_r_vw,
      lv_r_wu: lv_r_wu ?? this.lv_r_wu,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (lv_r_uv.present) {
      map['lv_r_uv'] = Variable<double>(lv_r_uv.value);
    }
    if (lv_r_vw.present) {
      map['lv_r_vw'] = Variable<double>(lv_r_vw.value);
    }
    if (lv_r_wu.present) {
      map['lv_r_wu'] = Variable<double>(lv_r_wu.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3winwrLvLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('lv_r_uv: $lv_r_uv, ')
          ..write('lv_r_vw: $lv_r_vw, ')
          ..write('lv_r_wu: $lv_r_wu, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $Powt3winwrLvLocalDatasourceImplTable
    extends Powt3winwrLvLocalDatasourceImpl
    with
        TableInfo<$Powt3winwrLvLocalDatasourceImplTable,
            Powt3winwrLvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3winwrLvLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _lv_r_uvMeta = const VerificationMeta('lv_r_uv');
  GeneratedColumn<double> _lv_r_uv;
  @override
  GeneratedColumn<double> get lv_r_uv =>
      _lv_r_uv ??= GeneratedColumn<double>('lv_r_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_r_vwMeta = const VerificationMeta('lv_r_vw');
  GeneratedColumn<double> _lv_r_vw;
  @override
  GeneratedColumn<double> get lv_r_vw =>
      _lv_r_vw ??= GeneratedColumn<double>('lv_r_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_r_wuMeta = const VerificationMeta('lv_r_wu');
  GeneratedColumn<double> _lv_r_wu;
  @override
  GeneratedColumn<double> get lv_r_wu =>
      _lv_r_wu ??= GeneratedColumn<double>('lv_r_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        lv_r_uv,
        lv_r_vw,
        lv_r_wu,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powt3winwr_lv_local_datasource_impl';
  @override
  String get actualTableName => 'powt3winwr_lv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3winwrLvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('lv_r_uv')) {
      context.handle(_lv_r_uvMeta,
          lv_r_uv.isAcceptableOrUnknown(data['lv_r_uv'], _lv_r_uvMeta));
    } else if (isInserting) {
      context.missing(_lv_r_uvMeta);
    }
    if (data.containsKey('lv_r_vw')) {
      context.handle(_lv_r_vwMeta,
          lv_r_vw.isAcceptableOrUnknown(data['lv_r_vw'], _lv_r_vwMeta));
    } else if (isInserting) {
      context.missing(_lv_r_vwMeta);
    }
    if (data.containsKey('lv_r_wu')) {
      context.handle(_lv_r_wuMeta,
          lv_r_wu.isAcceptableOrUnknown(data['lv_r_wu'], _lv_r_wuMeta));
    } else if (isInserting) {
      context.missing(_lv_r_wuMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winwrLvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3winwrLvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3winwrLvLocalDatasourceImplTable createAlias(String alias) {
    return $Powt3winwrLvLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winwrIvTLocalData extends DataClass
    implements Insertable<Powt3winwrIvTLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double ivt_r_uvn;
  final double ivt_r_vwn;
  final double ivt_r_wun;
  Powt3winwrIvTLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.ivt_r_uvn,
      @required this.ivt_r_vwn,
      @required this.ivt_r_wun});
  factory Powt3winwrIvTLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winwrIvTLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      ivt_r_uvn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_r_uvn']),
      ivt_r_vwn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_r_vwn']),
      ivt_r_wun: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_r_wun']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || ivt_r_uvn != null) {
      map['ivt_r_uvn'] = Variable<double>(ivt_r_uvn);
    }
    if (!nullToAbsent || ivt_r_vwn != null) {
      map['ivt_r_vwn'] = Variable<double>(ivt_r_vwn);
    }
    if (!nullToAbsent || ivt_r_wun != null) {
      map['ivt_r_wun'] = Variable<double>(ivt_r_wun);
    }
    return map;
  }

  Powt3winwrIvTLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3winwrIvTLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      ivt_r_uvn: ivt_r_uvn == null && nullToAbsent
          ? const Value.absent()
          : Value(ivt_r_uvn),
      ivt_r_vwn: ivt_r_vwn == null && nullToAbsent
          ? const Value.absent()
          : Value(ivt_r_vwn),
      ivt_r_wun: ivt_r_wun == null && nullToAbsent
          ? const Value.absent()
          : Value(ivt_r_wun),
    );
  }

  factory Powt3winwrIvTLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winwrIvTLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      ivt_r_uvn: serializer.fromJson<double>(json['ivt_r_uvn']),
      ivt_r_vwn: serializer.fromJson<double>(json['ivt_r_vwn']),
      ivt_r_wun: serializer.fromJson<double>(json['ivt_r_wun']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'ivt_r_uvn': serializer.toJson<double>(ivt_r_uvn),
      'ivt_r_vwn': serializer.toJson<double>(ivt_r_vwn),
      'ivt_r_wun': serializer.toJson<double>(ivt_r_wun),
    };
  }

  Powt3winwrIvTLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double ivt_r_uvn,
          double ivt_r_vwn,
          double ivt_r_wun}) =>
      Powt3winwrIvTLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        ivt_r_uvn: ivt_r_uvn ?? this.ivt_r_uvn,
        ivt_r_vwn: ivt_r_vwn ?? this.ivt_r_vwn,
        ivt_r_wun: ivt_r_wun ?? this.ivt_r_wun,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winwrIvTLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('ivt_r_uvn: $ivt_r_uvn, ')
          ..write('ivt_r_vwn: $ivt_r_vwn, ')
          ..write('ivt_r_wun: $ivt_r_wun')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      ivt_r_uvn, ivt_r_vwn, ivt_r_wun);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winwrIvTLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.ivt_r_uvn == this.ivt_r_uvn &&
          other.ivt_r_vwn == this.ivt_r_vwn &&
          other.ivt_r_wun == this.ivt_r_wun);
}

class Powt3winwrIvTLocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winwrIvTLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> ivt_r_uvn;
  final Value<double> ivt_r_vwn;
  final Value<double> ivt_r_wun;
  const Powt3winwrIvTLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.ivt_r_uvn = const Value.absent(),
    this.ivt_r_vwn = const Value.absent(),
    this.ivt_r_wun = const Value.absent(),
  });
  Powt3winwrIvTLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double ivt_r_uvn,
    @required double ivt_r_vwn,
    @required double ivt_r_wun,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        ivt_r_uvn = Value(ivt_r_uvn),
        ivt_r_vwn = Value(ivt_r_vwn),
        ivt_r_wun = Value(ivt_r_wun);
  static Insertable<Powt3winwrIvTLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> ivt_r_uvn,
    Expression<double> ivt_r_vwn,
    Expression<double> ivt_r_wun,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (ivt_r_uvn != null) 'ivt_r_uvn': ivt_r_uvn,
      if (ivt_r_vwn != null) 'ivt_r_vwn': ivt_r_vwn,
      if (ivt_r_wun != null) 'ivt_r_wun': ivt_r_wun,
    });
  }

  Powt3winwrIvTLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> ivt_r_uvn,
      Value<double> ivt_r_vwn,
      Value<double> ivt_r_wun}) {
    return Powt3winwrIvTLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      ivt_r_uvn: ivt_r_uvn ?? this.ivt_r_uvn,
      ivt_r_vwn: ivt_r_vwn ?? this.ivt_r_vwn,
      ivt_r_wun: ivt_r_wun ?? this.ivt_r_wun,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (ivt_r_uvn.present) {
      map['ivt_r_uvn'] = Variable<double>(ivt_r_uvn.value);
    }
    if (ivt_r_vwn.present) {
      map['ivt_r_vwn'] = Variable<double>(ivt_r_vwn.value);
    }
    if (ivt_r_wun.present) {
      map['ivt_r_wun'] = Variable<double>(ivt_r_wun.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3winwrIvTLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('ivt_r_uvn: $ivt_r_uvn, ')
          ..write('ivt_r_vwn: $ivt_r_vwn, ')
          ..write('ivt_r_wun: $ivt_r_wun')
          ..write(')'))
        .toString();
  }
}

class $Powt3winwrIvTLocalDatasourceImplTable
    extends Powt3winwrIvTLocalDatasourceImpl
    with
        TableInfo<$Powt3winwrIvTLocalDatasourceImplTable,
            Powt3winwrIvTLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3winwrIvTLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_r_uvnMeta = const VerificationMeta('ivt_r_uvn');
  GeneratedColumn<double> _ivt_r_uvn;
  @override
  GeneratedColumn<double> get ivt_r_uvn =>
      _ivt_r_uvn ??= GeneratedColumn<double>('ivt_r_uvn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_r_vwnMeta = const VerificationMeta('ivt_r_vwn');
  GeneratedColumn<double> _ivt_r_vwn;
  @override
  GeneratedColumn<double> get ivt_r_vwn =>
      _ivt_r_vwn ??= GeneratedColumn<double>('ivt_r_vwn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_r_wunMeta = const VerificationMeta('ivt_r_wun');
  GeneratedColumn<double> _ivt_r_wun;
  @override
  GeneratedColumn<double> get ivt_r_wun =>
      _ivt_r_wun ??= GeneratedColumn<double>('ivt_r_wun', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        ivt_r_uvn,
        ivt_r_vwn,
        ivt_r_wun
      ];
  @override
  String get aliasedName => _alias ?? 'powt3winwr_iv_t_local_datasource_impl';
  @override
  String get actualTableName => 'powt3winwr_iv_t_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3winwrIvTLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('ivt_r_uvn')) {
      context.handle(_ivt_r_uvnMeta,
          ivt_r_uvn.isAcceptableOrUnknown(data['ivt_r_uvn'], _ivt_r_uvnMeta));
    } else if (isInserting) {
      context.missing(_ivt_r_uvnMeta);
    }
    if (data.containsKey('ivt_r_vwn')) {
      context.handle(_ivt_r_vwnMeta,
          ivt_r_vwn.isAcceptableOrUnknown(data['ivt_r_vwn'], _ivt_r_vwnMeta));
    } else if (isInserting) {
      context.missing(_ivt_r_vwnMeta);
    }
    if (data.containsKey('ivt_r_wun')) {
      context.handle(_ivt_r_wunMeta,
          ivt_r_wun.isAcceptableOrUnknown(data['ivt_r_wun'], _ivt_r_wunMeta));
    } else if (isInserting) {
      context.missing(_ivt_r_wunMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winwrIvTLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3winwrIvTLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3winwrIvTLocalDatasourceImplTable createAlias(String alias) {
    return $Powt3winwrIvTLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winrLocalData extends DataClass
    implements Insertable<Powt3winrLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_1u_1vn;
  final double hv_1v_1wn;
  final double hv_1w_1un;
  final double lv_uvn;
  final double lv_vwn;
  final double lv_wun;
  final double ivt_uvn;
  final double ivt_vwn;
  final double ivt_wun;
  final String equipmentUsed;
  final DateTime updateDate;
  Powt3winrLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_1u_1vn,
      @required this.hv_1v_1wn,
      @required this.hv_1w_1un,
      @required this.lv_uvn,
      @required this.lv_vwn,
      @required this.lv_wun,
      @required this.ivt_uvn,
      @required this.ivt_vwn,
      @required this.ivt_wun,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory Powt3winrLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winrLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_1u_1vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u_1vn']),
      hv_1v_1wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v_1wn']),
      hv_1w_1un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w_1un']),
      lv_uvn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_uvn']),
      lv_vwn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_vwn']),
      lv_wun: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_wun']),
      ivt_uvn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_uvn']),
      ivt_vwn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_vwn']),
      ivt_wun: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_wun']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_1u_1vn != null) {
      map['hv_1u_1vn'] = Variable<double>(hv_1u_1vn);
    }
    if (!nullToAbsent || hv_1v_1wn != null) {
      map['hv_1v_1wn'] = Variable<double>(hv_1v_1wn);
    }
    if (!nullToAbsent || hv_1w_1un != null) {
      map['hv_1w_1un'] = Variable<double>(hv_1w_1un);
    }
    if (!nullToAbsent || lv_uvn != null) {
      map['lv_uvn'] = Variable<double>(lv_uvn);
    }
    if (!nullToAbsent || lv_vwn != null) {
      map['lv_vwn'] = Variable<double>(lv_vwn);
    }
    if (!nullToAbsent || lv_wun != null) {
      map['lv_wun'] = Variable<double>(lv_wun);
    }
    if (!nullToAbsent || ivt_uvn != null) {
      map['ivt_uvn'] = Variable<double>(ivt_uvn);
    }
    if (!nullToAbsent || ivt_vwn != null) {
      map['ivt_vwn'] = Variable<double>(ivt_vwn);
    }
    if (!nullToAbsent || ivt_wun != null) {
      map['ivt_wun'] = Variable<double>(ivt_wun);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  Powt3win_R_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3win_R_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_1u_1vn: hv_1u_1vn == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1u_1vn),
      hv_1v_1wn: hv_1v_1wn == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1v_1wn),
      hv_1w_1un: hv_1w_1un == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1w_1un),
      lv_uvn:
          lv_uvn == null && nullToAbsent ? const Value.absent() : Value(lv_uvn),
      lv_vwn:
          lv_vwn == null && nullToAbsent ? const Value.absent() : Value(lv_vwn),
      lv_wun:
          lv_wun == null && nullToAbsent ? const Value.absent() : Value(lv_wun),
      ivt_uvn: ivt_uvn == null && nullToAbsent
          ? const Value.absent()
          : Value(ivt_uvn),
      ivt_vwn: ivt_vwn == null && nullToAbsent
          ? const Value.absent()
          : Value(ivt_vwn),
      ivt_wun: ivt_wun == null && nullToAbsent
          ? const Value.absent()
          : Value(ivt_wun),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory Powt3winrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winrLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_1u_1vn: serializer.fromJson<double>(json['hv_1u_1vn']),
      hv_1v_1wn: serializer.fromJson<double>(json['hv_1v_1wn']),
      hv_1w_1un: serializer.fromJson<double>(json['hv_1w_1un']),
      lv_uvn: serializer.fromJson<double>(json['lv_uvn']),
      lv_vwn: serializer.fromJson<double>(json['lv_vwn']),
      lv_wun: serializer.fromJson<double>(json['lv_wun']),
      ivt_uvn: serializer.fromJson<double>(json['ivt_uvn']),
      ivt_vwn: serializer.fromJson<double>(json['ivt_vwn']),
      ivt_wun: serializer.fromJson<double>(json['ivt_wun']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_1u_1vn': serializer.toJson<double>(hv_1u_1vn),
      'hv_1v_1wn': serializer.toJson<double>(hv_1v_1wn),
      'hv_1w_1un': serializer.toJson<double>(hv_1w_1un),
      'lv_uvn': serializer.toJson<double>(lv_uvn),
      'lv_vwn': serializer.toJson<double>(lv_vwn),
      'lv_wun': serializer.toJson<double>(lv_wun),
      'ivt_uvn': serializer.toJson<double>(ivt_uvn),
      'ivt_vwn': serializer.toJson<double>(ivt_vwn),
      'ivt_wun': serializer.toJson<double>(ivt_wun),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  Powt3winrLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_1u_1vn,
          double hv_1v_1wn,
          double hv_1w_1un,
          double lv_uvn,
          double lv_vwn,
          double lv_wun,
          double ivt_uvn,
          double ivt_vwn,
          double ivt_wun,
          String equipmentUsed,
          DateTime updateDate}) =>
      Powt3winrLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_1u_1vn: hv_1u_1vn ?? this.hv_1u_1vn,
        hv_1v_1wn: hv_1v_1wn ?? this.hv_1v_1wn,
        hv_1w_1un: hv_1w_1un ?? this.hv_1w_1un,
        lv_uvn: lv_uvn ?? this.lv_uvn,
        lv_vwn: lv_vwn ?? this.lv_vwn,
        lv_wun: lv_wun ?? this.lv_wun,
        ivt_uvn: ivt_uvn ?? this.ivt_uvn,
        ivt_vwn: ivt_vwn ?? this.ivt_vwn,
        ivt_wun: ivt_wun ?? this.ivt_wun,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winrLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1vn: $hv_1u_1vn, ')
          ..write('hv_1v_1wn: $hv_1v_1wn, ')
          ..write('hv_1w_1un: $hv_1w_1un, ')
          ..write('lv_uvn: $lv_uvn, ')
          ..write('lv_vwn: $lv_vwn, ')
          ..write('lv_wun: $lv_wun, ')
          ..write('ivt_uvn: $ivt_uvn, ')
          ..write('ivt_vwn: $ivt_vwn, ')
          ..write('ivt_wun: $ivt_wun, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      tapPosition,
      hv_1u_1vn,
      hv_1v_1wn,
      hv_1w_1un,
      lv_uvn,
      lv_vwn,
      lv_wun,
      ivt_uvn,
      ivt_vwn,
      ivt_wun,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winrLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_1u_1vn == this.hv_1u_1vn &&
          other.hv_1v_1wn == this.hv_1v_1wn &&
          other.hv_1w_1un == this.hv_1w_1un &&
          other.lv_uvn == this.lv_uvn &&
          other.lv_vwn == this.lv_vwn &&
          other.lv_wun == this.lv_wun &&
          other.ivt_uvn == this.ivt_uvn &&
          other.ivt_vwn == this.ivt_vwn &&
          other.ivt_wun == this.ivt_wun &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class Powt3win_R_LocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winrLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_1u_1vn;
  final Value<double> hv_1v_1wn;
  final Value<double> hv_1w_1un;
  final Value<double> lv_uvn;
  final Value<double> lv_vwn;
  final Value<double> lv_wun;
  final Value<double> ivt_uvn;
  final Value<double> ivt_vwn;
  final Value<double> ivt_wun;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const Powt3win_R_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_1u_1vn = const Value.absent(),
    this.hv_1v_1wn = const Value.absent(),
    this.hv_1w_1un = const Value.absent(),
    this.lv_uvn = const Value.absent(),
    this.lv_vwn = const Value.absent(),
    this.lv_wun = const Value.absent(),
    this.ivt_uvn = const Value.absent(),
    this.ivt_vwn = const Value.absent(),
    this.ivt_wun = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  Powt3win_R_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_1u_1vn,
    @required double hv_1v_1wn,
    @required double hv_1w_1un,
    @required double lv_uvn,
    @required double lv_vwn,
    @required double lv_wun,
    @required double ivt_uvn,
    @required double ivt_vwn,
    @required double ivt_wun,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_1u_1vn = Value(hv_1u_1vn),
        hv_1v_1wn = Value(hv_1v_1wn),
        hv_1w_1un = Value(hv_1w_1un),
        lv_uvn = Value(lv_uvn),
        lv_vwn = Value(lv_vwn),
        lv_wun = Value(lv_wun),
        ivt_uvn = Value(ivt_uvn),
        ivt_vwn = Value(ivt_vwn),
        ivt_wun = Value(ivt_wun),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<Powt3winrLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_1u_1vn,
    Expression<double> hv_1v_1wn,
    Expression<double> hv_1w_1un,
    Expression<double> lv_uvn,
    Expression<double> lv_vwn,
    Expression<double> lv_wun,
    Expression<double> ivt_uvn,
    Expression<double> ivt_vwn,
    Expression<double> ivt_wun,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_1u_1vn != null) 'hv_1u_1vn': hv_1u_1vn,
      if (hv_1v_1wn != null) 'hv_1v_1wn': hv_1v_1wn,
      if (hv_1w_1un != null) 'hv_1w_1un': hv_1w_1un,
      if (lv_uvn != null) 'lv_uvn': lv_uvn,
      if (lv_vwn != null) 'lv_vwn': lv_vwn,
      if (lv_wun != null) 'lv_wun': lv_wun,
      if (ivt_uvn != null) 'ivt_uvn': ivt_uvn,
      if (ivt_vwn != null) 'ivt_vwn': ivt_vwn,
      if (ivt_wun != null) 'ivt_wun': ivt_wun,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  Powt3win_R_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_1u_1vn,
      Value<double> hv_1v_1wn,
      Value<double> hv_1w_1un,
      Value<double> lv_uvn,
      Value<double> lv_vwn,
      Value<double> lv_wun,
      Value<double> ivt_uvn,
      Value<double> ivt_vwn,
      Value<double> ivt_wun,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return Powt3win_R_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_1u_1vn: hv_1u_1vn ?? this.hv_1u_1vn,
      hv_1v_1wn: hv_1v_1wn ?? this.hv_1v_1wn,
      hv_1w_1un: hv_1w_1un ?? this.hv_1w_1un,
      lv_uvn: lv_uvn ?? this.lv_uvn,
      lv_vwn: lv_vwn ?? this.lv_vwn,
      lv_wun: lv_wun ?? this.lv_wun,
      ivt_uvn: ivt_uvn ?? this.ivt_uvn,
      ivt_vwn: ivt_vwn ?? this.ivt_vwn,
      ivt_wun: ivt_wun ?? this.ivt_wun,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_1u_1vn.present) {
      map['hv_1u_1vn'] = Variable<double>(hv_1u_1vn.value);
    }
    if (hv_1v_1wn.present) {
      map['hv_1v_1wn'] = Variable<double>(hv_1v_1wn.value);
    }
    if (hv_1w_1un.present) {
      map['hv_1w_1un'] = Variable<double>(hv_1w_1un.value);
    }
    if (lv_uvn.present) {
      map['lv_uvn'] = Variable<double>(lv_uvn.value);
    }
    if (lv_vwn.present) {
      map['lv_vwn'] = Variable<double>(lv_vwn.value);
    }
    if (lv_wun.present) {
      map['lv_wun'] = Variable<double>(lv_wun.value);
    }
    if (ivt_uvn.present) {
      map['ivt_uvn'] = Variable<double>(ivt_uvn.value);
    }
    if (ivt_vwn.present) {
      map['ivt_vwn'] = Variable<double>(ivt_vwn.value);
    }
    if (ivt_wun.present) {
      map['ivt_wun'] = Variable<double>(ivt_wun.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3win_R_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1vn: $hv_1u_1vn, ')
          ..write('hv_1v_1wn: $hv_1v_1wn, ')
          ..write('hv_1w_1un: $hv_1w_1un, ')
          ..write('lv_uvn: $lv_uvn, ')
          ..write('lv_vwn: $lv_vwn, ')
          ..write('lv_wun: $lv_wun, ')
          ..write('ivt_uvn: $ivt_uvn, ')
          ..write('ivt_vwn: $ivt_vwn, ')
          ..write('ivt_wun: $ivt_wun, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $Powt3win_R_LocalDatasourceImplTable
    extends Powt3win_R_LocalDatasourceImpl
    with TableInfo<$Powt3win_R_LocalDatasourceImplTable, Powt3winrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3win_R_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1u_1vnMeta = const VerificationMeta('hv_1u_1vn');
  GeneratedColumn<double> _hv_1u_1vn;
  @override
  GeneratedColumn<double> get hv_1u_1vn =>
      _hv_1u_1vn ??= GeneratedColumn<double>('hv_1u_1vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1v_1wnMeta = const VerificationMeta('hv_1v_1wn');
  GeneratedColumn<double> _hv_1v_1wn;
  @override
  GeneratedColumn<double> get hv_1v_1wn =>
      _hv_1v_1wn ??= GeneratedColumn<double>('hv_1v_1wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1w_1unMeta = const VerificationMeta('hv_1w_1un');
  GeneratedColumn<double> _hv_1w_1un;
  @override
  GeneratedColumn<double> get hv_1w_1un =>
      _hv_1w_1un ??= GeneratedColumn<double>('hv_1w_1un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_uvnMeta = const VerificationMeta('lv_uvn');
  GeneratedColumn<double> _lv_uvn;
  @override
  GeneratedColumn<double> get lv_uvn =>
      _lv_uvn ??= GeneratedColumn<double>('lv_uvn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_vwnMeta = const VerificationMeta('lv_vwn');
  GeneratedColumn<double> _lv_vwn;
  @override
  GeneratedColumn<double> get lv_vwn =>
      _lv_vwn ??= GeneratedColumn<double>('lv_vwn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_wunMeta = const VerificationMeta('lv_wun');
  GeneratedColumn<double> _lv_wun;
  @override
  GeneratedColumn<double> get lv_wun =>
      _lv_wun ??= GeneratedColumn<double>('lv_wun', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_uvnMeta = const VerificationMeta('ivt_uvn');
  GeneratedColumn<double> _ivt_uvn;
  @override
  GeneratedColumn<double> get ivt_uvn =>
      _ivt_uvn ??= GeneratedColumn<double>('ivt_uvn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_vwnMeta = const VerificationMeta('ivt_vwn');
  GeneratedColumn<double> _ivt_vwn;
  @override
  GeneratedColumn<double> get ivt_vwn =>
      _ivt_vwn ??= GeneratedColumn<double>('ivt_vwn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_wunMeta = const VerificationMeta('ivt_wun');
  GeneratedColumn<double> _ivt_wun;
  @override
  GeneratedColumn<double> get ivt_wun =>
      _ivt_wun ??= GeneratedColumn<double>('ivt_wun', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_1u_1vn,
        hv_1v_1wn,
        hv_1w_1un,
        lv_uvn,
        lv_vwn,
        lv_wun,
        ivt_uvn,
        ivt_vwn,
        ivt_wun,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powt3win_r_local_datasource_impl';
  @override
  String get actualTableName => 'powt3win_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<Powt3winrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_1u_1vn')) {
      context.handle(_hv_1u_1vnMeta,
          hv_1u_1vn.isAcceptableOrUnknown(data['hv_1u_1vn'], _hv_1u_1vnMeta));
    } else if (isInserting) {
      context.missing(_hv_1u_1vnMeta);
    }
    if (data.containsKey('hv_1v_1wn')) {
      context.handle(_hv_1v_1wnMeta,
          hv_1v_1wn.isAcceptableOrUnknown(data['hv_1v_1wn'], _hv_1v_1wnMeta));
    } else if (isInserting) {
      context.missing(_hv_1v_1wnMeta);
    }
    if (data.containsKey('hv_1w_1un')) {
      context.handle(_hv_1w_1unMeta,
          hv_1w_1un.isAcceptableOrUnknown(data['hv_1w_1un'], _hv_1w_1unMeta));
    } else if (isInserting) {
      context.missing(_hv_1w_1unMeta);
    }
    if (data.containsKey('lv_uvn')) {
      context.handle(_lv_uvnMeta,
          lv_uvn.isAcceptableOrUnknown(data['lv_uvn'], _lv_uvnMeta));
    } else if (isInserting) {
      context.missing(_lv_uvnMeta);
    }
    if (data.containsKey('lv_vwn')) {
      context.handle(_lv_vwnMeta,
          lv_vwn.isAcceptableOrUnknown(data['lv_vwn'], _lv_vwnMeta));
    } else if (isInserting) {
      context.missing(_lv_vwnMeta);
    }
    if (data.containsKey('lv_wun')) {
      context.handle(_lv_wunMeta,
          lv_wun.isAcceptableOrUnknown(data['lv_wun'], _lv_wunMeta));
    } else if (isInserting) {
      context.missing(_lv_wunMeta);
    }
    if (data.containsKey('ivt_uvn')) {
      context.handle(_ivt_uvnMeta,
          ivt_uvn.isAcceptableOrUnknown(data['ivt_uvn'], _ivt_uvnMeta));
    } else if (isInserting) {
      context.missing(_ivt_uvnMeta);
    }
    if (data.containsKey('ivt_vwn')) {
      context.handle(_ivt_vwnMeta,
          ivt_vwn.isAcceptableOrUnknown(data['ivt_vwn'], _ivt_vwnMeta));
    } else if (isInserting) {
      context.missing(_ivt_vwnMeta);
    }
    if (data.containsKey('ivt_wun')) {
      context.handle(_ivt_wunMeta,
          ivt_wun.isAcceptableOrUnknown(data['ivt_wun'], _ivt_wunMeta));
    } else if (isInserting) {
      context.missing(_ivt_wunMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3winrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3win_R_LocalDatasourceImplTable createAlias(String alias) {
    return $Powt3win_R_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winmcHvLocalData extends DataClass
    implements Insertable<Powt3winmcHvLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_1u_1vn;
  final double hv_1v_1wn;
  final double hv_1w_1un;
  final double hv_1u;
  final double hv_1v;
  final double hv_1w;
  final double hv_1n;
  Powt3winmcHvLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_1u_1vn,
      @required this.hv_1v_1wn,
      @required this.hv_1w_1un,
      @required this.hv_1u,
      @required this.hv_1v,
      @required this.hv_1w,
      @required this.hv_1n});
  factory Powt3winmcHvLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winmcHvLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_1u_1vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u_1vn']),
      hv_1v_1wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v_1wn']),
      hv_1w_1un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w_1un']),
      hv_1u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1u']),
      hv_1v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1v']),
      hv_1w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1w']),
      hv_1n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_1n']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_1u_1vn != null) {
      map['hv_1u_1vn'] = Variable<double>(hv_1u_1vn);
    }
    if (!nullToAbsent || hv_1v_1wn != null) {
      map['hv_1v_1wn'] = Variable<double>(hv_1v_1wn);
    }
    if (!nullToAbsent || hv_1w_1un != null) {
      map['hv_1w_1un'] = Variable<double>(hv_1w_1un);
    }
    if (!nullToAbsent || hv_1u != null) {
      map['hv_1u'] = Variable<double>(hv_1u);
    }
    if (!nullToAbsent || hv_1v != null) {
      map['hv_1v'] = Variable<double>(hv_1v);
    }
    if (!nullToAbsent || hv_1w != null) {
      map['hv_1w'] = Variable<double>(hv_1w);
    }
    if (!nullToAbsent || hv_1n != null) {
      map['hv_1n'] = Variable<double>(hv_1n);
    }
    return map;
  }

  Powt3win_mcHv_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3win_mcHv_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_1u_1vn: hv_1u_1vn == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1u_1vn),
      hv_1v_1wn: hv_1v_1wn == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1v_1wn),
      hv_1w_1un: hv_1w_1un == null && nullToAbsent
          ? const Value.absent()
          : Value(hv_1w_1un),
      hv_1u:
          hv_1u == null && nullToAbsent ? const Value.absent() : Value(hv_1u),
      hv_1v:
          hv_1v == null && nullToAbsent ? const Value.absent() : Value(hv_1v),
      hv_1w:
          hv_1w == null && nullToAbsent ? const Value.absent() : Value(hv_1w),
      hv_1n:
          hv_1n == null && nullToAbsent ? const Value.absent() : Value(hv_1n),
    );
  }

  factory Powt3winmcHvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winmcHvLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_1u_1vn: serializer.fromJson<double>(json['hv_1u_1vn']),
      hv_1v_1wn: serializer.fromJson<double>(json['hv_1v_1wn']),
      hv_1w_1un: serializer.fromJson<double>(json['hv_1w_1un']),
      hv_1u: serializer.fromJson<double>(json['hv_1u']),
      hv_1v: serializer.fromJson<double>(json['hv_1v']),
      hv_1w: serializer.fromJson<double>(json['hv_1w']),
      hv_1n: serializer.fromJson<double>(json['hv_1n']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_1u_1vn': serializer.toJson<double>(hv_1u_1vn),
      'hv_1v_1wn': serializer.toJson<double>(hv_1v_1wn),
      'hv_1w_1un': serializer.toJson<double>(hv_1w_1un),
      'hv_1u': serializer.toJson<double>(hv_1u),
      'hv_1v': serializer.toJson<double>(hv_1v),
      'hv_1w': serializer.toJson<double>(hv_1w),
      'hv_1n': serializer.toJson<double>(hv_1n),
    };
  }

  Powt3winmcHvLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_1u_1vn,
          double hv_1v_1wn,
          double hv_1w_1un,
          double hv_1u,
          double hv_1v,
          double hv_1w,
          double hv_1n}) =>
      Powt3winmcHvLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_1u_1vn: hv_1u_1vn ?? this.hv_1u_1vn,
        hv_1v_1wn: hv_1v_1wn ?? this.hv_1v_1wn,
        hv_1w_1un: hv_1w_1un ?? this.hv_1w_1un,
        hv_1u: hv_1u ?? this.hv_1u,
        hv_1v: hv_1v ?? this.hv_1v,
        hv_1w: hv_1w ?? this.hv_1w,
        hv_1n: hv_1n ?? this.hv_1n,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winmcHvLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1vn: $hv_1u_1vn, ')
          ..write('hv_1v_1wn: $hv_1v_1wn, ')
          ..write('hv_1w_1un: $hv_1w_1un, ')
          ..write('hv_1u: $hv_1u, ')
          ..write('hv_1v: $hv_1v, ')
          ..write('hv_1w: $hv_1w, ')
          ..write('hv_1n: $hv_1n')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      hv_1u_1vn, hv_1v_1wn, hv_1w_1un, hv_1u, hv_1v, hv_1w, hv_1n);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winmcHvLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_1u_1vn == this.hv_1u_1vn &&
          other.hv_1v_1wn == this.hv_1v_1wn &&
          other.hv_1w_1un == this.hv_1w_1un &&
          other.hv_1u == this.hv_1u &&
          other.hv_1v == this.hv_1v &&
          other.hv_1w == this.hv_1w &&
          other.hv_1n == this.hv_1n);
}

class Powt3win_mcHv_LocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winmcHvLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_1u_1vn;
  final Value<double> hv_1v_1wn;
  final Value<double> hv_1w_1un;
  final Value<double> hv_1u;
  final Value<double> hv_1v;
  final Value<double> hv_1w;
  final Value<double> hv_1n;
  const Powt3win_mcHv_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_1u_1vn = const Value.absent(),
    this.hv_1v_1wn = const Value.absent(),
    this.hv_1w_1un = const Value.absent(),
    this.hv_1u = const Value.absent(),
    this.hv_1v = const Value.absent(),
    this.hv_1w = const Value.absent(),
    this.hv_1n = const Value.absent(),
  });
  Powt3win_mcHv_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_1u_1vn,
    @required double hv_1v_1wn,
    @required double hv_1w_1un,
    @required double hv_1u,
    @required double hv_1v,
    @required double hv_1w,
    @required double hv_1n,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_1u_1vn = Value(hv_1u_1vn),
        hv_1v_1wn = Value(hv_1v_1wn),
        hv_1w_1un = Value(hv_1w_1un),
        hv_1u = Value(hv_1u),
        hv_1v = Value(hv_1v),
        hv_1w = Value(hv_1w),
        hv_1n = Value(hv_1n);
  static Insertable<Powt3winmcHvLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_1u_1vn,
    Expression<double> hv_1v_1wn,
    Expression<double> hv_1w_1un,
    Expression<double> hv_1u,
    Expression<double> hv_1v,
    Expression<double> hv_1w,
    Expression<double> hv_1n,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_1u_1vn != null) 'hv_1u_1vn': hv_1u_1vn,
      if (hv_1v_1wn != null) 'hv_1v_1wn': hv_1v_1wn,
      if (hv_1w_1un != null) 'hv_1w_1un': hv_1w_1un,
      if (hv_1u != null) 'hv_1u': hv_1u,
      if (hv_1v != null) 'hv_1v': hv_1v,
      if (hv_1w != null) 'hv_1w': hv_1w,
      if (hv_1n != null) 'hv_1n': hv_1n,
    });
  }

  Powt3win_mcHv_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_1u_1vn,
      Value<double> hv_1v_1wn,
      Value<double> hv_1w_1un,
      Value<double> hv_1u,
      Value<double> hv_1v,
      Value<double> hv_1w,
      Value<double> hv_1n}) {
    return Powt3win_mcHv_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_1u_1vn: hv_1u_1vn ?? this.hv_1u_1vn,
      hv_1v_1wn: hv_1v_1wn ?? this.hv_1v_1wn,
      hv_1w_1un: hv_1w_1un ?? this.hv_1w_1un,
      hv_1u: hv_1u ?? this.hv_1u,
      hv_1v: hv_1v ?? this.hv_1v,
      hv_1w: hv_1w ?? this.hv_1w,
      hv_1n: hv_1n ?? this.hv_1n,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_1u_1vn.present) {
      map['hv_1u_1vn'] = Variable<double>(hv_1u_1vn.value);
    }
    if (hv_1v_1wn.present) {
      map['hv_1v_1wn'] = Variable<double>(hv_1v_1wn.value);
    }
    if (hv_1w_1un.present) {
      map['hv_1w_1un'] = Variable<double>(hv_1w_1un.value);
    }
    if (hv_1u.present) {
      map['hv_1u'] = Variable<double>(hv_1u.value);
    }
    if (hv_1v.present) {
      map['hv_1v'] = Variable<double>(hv_1v.value);
    }
    if (hv_1w.present) {
      map['hv_1w'] = Variable<double>(hv_1w.value);
    }
    if (hv_1n.present) {
      map['hv_1n'] = Variable<double>(hv_1n.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3win_mcHv_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_1u_1vn: $hv_1u_1vn, ')
          ..write('hv_1v_1wn: $hv_1v_1wn, ')
          ..write('hv_1w_1un: $hv_1w_1un, ')
          ..write('hv_1u: $hv_1u, ')
          ..write('hv_1v: $hv_1v, ')
          ..write('hv_1w: $hv_1w, ')
          ..write('hv_1n: $hv_1n')
          ..write(')'))
        .toString();
  }
}

class $Powt3win_mcHv_LocalDatasourceImplTable
    extends Powt3win_mcHv_LocalDatasourceImpl
    with
        TableInfo<$Powt3win_mcHv_LocalDatasourceImplTable,
            Powt3winmcHvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3win_mcHv_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1u_1vnMeta = const VerificationMeta('hv_1u_1vn');
  GeneratedColumn<double> _hv_1u_1vn;
  @override
  GeneratedColumn<double> get hv_1u_1vn =>
      _hv_1u_1vn ??= GeneratedColumn<double>('hv_1u_1vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1v_1wnMeta = const VerificationMeta('hv_1v_1wn');
  GeneratedColumn<double> _hv_1v_1wn;
  @override
  GeneratedColumn<double> get hv_1v_1wn =>
      _hv_1v_1wn ??= GeneratedColumn<double>('hv_1v_1wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1w_1unMeta = const VerificationMeta('hv_1w_1un');
  GeneratedColumn<double> _hv_1w_1un;
  @override
  GeneratedColumn<double> get hv_1w_1un =>
      _hv_1w_1un ??= GeneratedColumn<double>('hv_1w_1un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1uMeta = const VerificationMeta('hv_1u');
  GeneratedColumn<double> _hv_1u;
  @override
  GeneratedColumn<double> get hv_1u =>
      _hv_1u ??= GeneratedColumn<double>('hv_1u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1vMeta = const VerificationMeta('hv_1v');
  GeneratedColumn<double> _hv_1v;
  @override
  GeneratedColumn<double> get hv_1v =>
      _hv_1v ??= GeneratedColumn<double>('hv_1v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1wMeta = const VerificationMeta('hv_1w');
  GeneratedColumn<double> _hv_1w;
  @override
  GeneratedColumn<double> get hv_1w =>
      _hv_1w ??= GeneratedColumn<double>('hv_1w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_1nMeta = const VerificationMeta('hv_1n');
  GeneratedColumn<double> _hv_1n;
  @override
  GeneratedColumn<double> get hv_1n =>
      _hv_1n ??= GeneratedColumn<double>('hv_1n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_1u_1vn,
        hv_1v_1wn,
        hv_1w_1un,
        hv_1u,
        hv_1v,
        hv_1w,
        hv_1n
      ];
  @override
  String get aliasedName => _alias ?? 'powt3win_mc_hv_local_datasource_impl';
  @override
  String get actualTableName => 'powt3win_mc_hv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3winmcHvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_1u_1vn')) {
      context.handle(_hv_1u_1vnMeta,
          hv_1u_1vn.isAcceptableOrUnknown(data['hv_1u_1vn'], _hv_1u_1vnMeta));
    } else if (isInserting) {
      context.missing(_hv_1u_1vnMeta);
    }
    if (data.containsKey('hv_1v_1wn')) {
      context.handle(_hv_1v_1wnMeta,
          hv_1v_1wn.isAcceptableOrUnknown(data['hv_1v_1wn'], _hv_1v_1wnMeta));
    } else if (isInserting) {
      context.missing(_hv_1v_1wnMeta);
    }
    if (data.containsKey('hv_1w_1un')) {
      context.handle(_hv_1w_1unMeta,
          hv_1w_1un.isAcceptableOrUnknown(data['hv_1w_1un'], _hv_1w_1unMeta));
    } else if (isInserting) {
      context.missing(_hv_1w_1unMeta);
    }
    if (data.containsKey('hv_1u')) {
      context.handle(
          _hv_1uMeta, hv_1u.isAcceptableOrUnknown(data['hv_1u'], _hv_1uMeta));
    } else if (isInserting) {
      context.missing(_hv_1uMeta);
    }
    if (data.containsKey('hv_1v')) {
      context.handle(
          _hv_1vMeta, hv_1v.isAcceptableOrUnknown(data['hv_1v'], _hv_1vMeta));
    } else if (isInserting) {
      context.missing(_hv_1vMeta);
    }
    if (data.containsKey('hv_1w')) {
      context.handle(
          _hv_1wMeta, hv_1w.isAcceptableOrUnknown(data['hv_1w'], _hv_1wMeta));
    } else if (isInserting) {
      context.missing(_hv_1wMeta);
    }
    if (data.containsKey('hv_1n')) {
      context.handle(
          _hv_1nMeta, hv_1n.isAcceptableOrUnknown(data['hv_1n'], _hv_1nMeta));
    } else if (isInserting) {
      context.missing(_hv_1nMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winmcHvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3winmcHvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3win_mcHv_LocalDatasourceImplTable createAlias(String alias) {
    return $Powt3win_mcHv_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winmcLvLocalData extends DataClass
    implements Insertable<Powt3winmcLvLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double lv_u_vn;
  final double lv_v_wn;
  final double lv_w_un;
  final double lv_u;
  final double lv_v;
  final double lv_w;
  final double lv_n;
  Powt3winmcLvLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.lv_u_vn,
      @required this.lv_v_wn,
      @required this.lv_w_un,
      @required this.lv_u,
      @required this.lv_v,
      @required this.lv_w,
      @required this.lv_n});
  factory Powt3winmcLvLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winmcLvLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      lv_u_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_u_vn']),
      lv_v_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_v_wn']),
      lv_w_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_w_un']),
      lv_u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_u']),
      lv_v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_v']),
      lv_w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_w']),
      lv_n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_n']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || lv_u_vn != null) {
      map['lv_u_vn'] = Variable<double>(lv_u_vn);
    }
    if (!nullToAbsent || lv_v_wn != null) {
      map['lv_v_wn'] = Variable<double>(lv_v_wn);
    }
    if (!nullToAbsent || lv_w_un != null) {
      map['lv_w_un'] = Variable<double>(lv_w_un);
    }
    if (!nullToAbsent || lv_u != null) {
      map['lv_u'] = Variable<double>(lv_u);
    }
    if (!nullToAbsent || lv_v != null) {
      map['lv_v'] = Variable<double>(lv_v);
    }
    if (!nullToAbsent || lv_w != null) {
      map['lv_w'] = Variable<double>(lv_w);
    }
    if (!nullToAbsent || lv_n != null) {
      map['lv_n'] = Variable<double>(lv_n);
    }
    return map;
  }

  Powt3win_mcLv_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3win_mcLv_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      lv_u_vn: lv_u_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_u_vn),
      lv_v_wn: lv_v_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_v_wn),
      lv_w_un: lv_w_un == null && nullToAbsent
          ? const Value.absent()
          : Value(lv_w_un),
      lv_u: lv_u == null && nullToAbsent ? const Value.absent() : Value(lv_u),
      lv_v: lv_v == null && nullToAbsent ? const Value.absent() : Value(lv_v),
      lv_w: lv_w == null && nullToAbsent ? const Value.absent() : Value(lv_w),
      lv_n: lv_n == null && nullToAbsent ? const Value.absent() : Value(lv_n),
    );
  }

  factory Powt3winmcLvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winmcLvLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      lv_u_vn: serializer.fromJson<double>(json['lv_u_vn']),
      lv_v_wn: serializer.fromJson<double>(json['lv_v_wn']),
      lv_w_un: serializer.fromJson<double>(json['lv_w_un']),
      lv_u: serializer.fromJson<double>(json['lv_u']),
      lv_v: serializer.fromJson<double>(json['lv_v']),
      lv_w: serializer.fromJson<double>(json['lv_w']),
      lv_n: serializer.fromJson<double>(json['lv_n']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'lv_u_vn': serializer.toJson<double>(lv_u_vn),
      'lv_v_wn': serializer.toJson<double>(lv_v_wn),
      'lv_w_un': serializer.toJson<double>(lv_w_un),
      'lv_u': serializer.toJson<double>(lv_u),
      'lv_v': serializer.toJson<double>(lv_v),
      'lv_w': serializer.toJson<double>(lv_w),
      'lv_n': serializer.toJson<double>(lv_n),
    };
  }

  Powt3winmcLvLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double lv_u_vn,
          double lv_v_wn,
          double lv_w_un,
          double lv_u,
          double lv_v,
          double lv_w,
          double lv_n}) =>
      Powt3winmcLvLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        lv_u_vn: lv_u_vn ?? this.lv_u_vn,
        lv_v_wn: lv_v_wn ?? this.lv_v_wn,
        lv_w_un: lv_w_un ?? this.lv_w_un,
        lv_u: lv_u ?? this.lv_u,
        lv_v: lv_v ?? this.lv_v,
        lv_w: lv_w ?? this.lv_w,
        lv_n: lv_n ?? this.lv_n,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winmcLvLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('lv_u_vn: $lv_u_vn, ')
          ..write('lv_v_wn: $lv_v_wn, ')
          ..write('lv_w_un: $lv_w_un, ')
          ..write('lv_u: $lv_u, ')
          ..write('lv_v: $lv_v, ')
          ..write('lv_w: $lv_w, ')
          ..write('lv_n: $lv_n')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      lv_u_vn, lv_v_wn, lv_w_un, lv_u, lv_v, lv_w, lv_n);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winmcLvLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.lv_u_vn == this.lv_u_vn &&
          other.lv_v_wn == this.lv_v_wn &&
          other.lv_w_un == this.lv_w_un &&
          other.lv_u == this.lv_u &&
          other.lv_v == this.lv_v &&
          other.lv_w == this.lv_w &&
          other.lv_n == this.lv_n);
}

class Powt3win_mcLv_LocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winmcLvLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> lv_u_vn;
  final Value<double> lv_v_wn;
  final Value<double> lv_w_un;
  final Value<double> lv_u;
  final Value<double> lv_v;
  final Value<double> lv_w;
  final Value<double> lv_n;
  const Powt3win_mcLv_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.lv_u_vn = const Value.absent(),
    this.lv_v_wn = const Value.absent(),
    this.lv_w_un = const Value.absent(),
    this.lv_u = const Value.absent(),
    this.lv_v = const Value.absent(),
    this.lv_w = const Value.absent(),
    this.lv_n = const Value.absent(),
  });
  Powt3win_mcLv_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double lv_u_vn,
    @required double lv_v_wn,
    @required double lv_w_un,
    @required double lv_u,
    @required double lv_v,
    @required double lv_w,
    @required double lv_n,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        lv_u_vn = Value(lv_u_vn),
        lv_v_wn = Value(lv_v_wn),
        lv_w_un = Value(lv_w_un),
        lv_u = Value(lv_u),
        lv_v = Value(lv_v),
        lv_w = Value(lv_w),
        lv_n = Value(lv_n);
  static Insertable<Powt3winmcLvLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> lv_u_vn,
    Expression<double> lv_v_wn,
    Expression<double> lv_w_un,
    Expression<double> lv_u,
    Expression<double> lv_v,
    Expression<double> lv_w,
    Expression<double> lv_n,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (lv_u_vn != null) 'lv_u_vn': lv_u_vn,
      if (lv_v_wn != null) 'lv_v_wn': lv_v_wn,
      if (lv_w_un != null) 'lv_w_un': lv_w_un,
      if (lv_u != null) 'lv_u': lv_u,
      if (lv_v != null) 'lv_v': lv_v,
      if (lv_w != null) 'lv_w': lv_w,
      if (lv_n != null) 'lv_n': lv_n,
    });
  }

  Powt3win_mcLv_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> lv_u_vn,
      Value<double> lv_v_wn,
      Value<double> lv_w_un,
      Value<double> lv_u,
      Value<double> lv_v,
      Value<double> lv_w,
      Value<double> lv_n}) {
    return Powt3win_mcLv_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      lv_u_vn: lv_u_vn ?? this.lv_u_vn,
      lv_v_wn: lv_v_wn ?? this.lv_v_wn,
      lv_w_un: lv_w_un ?? this.lv_w_un,
      lv_u: lv_u ?? this.lv_u,
      lv_v: lv_v ?? this.lv_v,
      lv_w: lv_w ?? this.lv_w,
      lv_n: lv_n ?? this.lv_n,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (lv_u_vn.present) {
      map['lv_u_vn'] = Variable<double>(lv_u_vn.value);
    }
    if (lv_v_wn.present) {
      map['lv_v_wn'] = Variable<double>(lv_v_wn.value);
    }
    if (lv_w_un.present) {
      map['lv_w_un'] = Variable<double>(lv_w_un.value);
    }
    if (lv_u.present) {
      map['lv_u'] = Variable<double>(lv_u.value);
    }
    if (lv_v.present) {
      map['lv_v'] = Variable<double>(lv_v.value);
    }
    if (lv_w.present) {
      map['lv_w'] = Variable<double>(lv_w.value);
    }
    if (lv_n.present) {
      map['lv_n'] = Variable<double>(lv_n.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3win_mcLv_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('lv_u_vn: $lv_u_vn, ')
          ..write('lv_v_wn: $lv_v_wn, ')
          ..write('lv_w_un: $lv_w_un, ')
          ..write('lv_u: $lv_u, ')
          ..write('lv_v: $lv_v, ')
          ..write('lv_w: $lv_w, ')
          ..write('lv_n: $lv_n')
          ..write(')'))
        .toString();
  }
}

class $Powt3win_mcLv_LocalDatasourceImplTable
    extends Powt3win_mcLv_LocalDatasourceImpl
    with
        TableInfo<$Powt3win_mcLv_LocalDatasourceImplTable,
            Powt3winmcLvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3win_mcLv_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _lv_u_vnMeta = const VerificationMeta('lv_u_vn');
  GeneratedColumn<double> _lv_u_vn;
  @override
  GeneratedColumn<double> get lv_u_vn =>
      _lv_u_vn ??= GeneratedColumn<double>('lv_u_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_v_wnMeta = const VerificationMeta('lv_v_wn');
  GeneratedColumn<double> _lv_v_wn;
  @override
  GeneratedColumn<double> get lv_v_wn =>
      _lv_v_wn ??= GeneratedColumn<double>('lv_v_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_w_unMeta = const VerificationMeta('lv_w_un');
  GeneratedColumn<double> _lv_w_un;
  @override
  GeneratedColumn<double> get lv_w_un =>
      _lv_w_un ??= GeneratedColumn<double>('lv_w_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_uMeta = const VerificationMeta('lv_u');
  GeneratedColumn<double> _lv_u;
  @override
  GeneratedColumn<double> get lv_u =>
      _lv_u ??= GeneratedColumn<double>('lv_u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_vMeta = const VerificationMeta('lv_v');
  GeneratedColumn<double> _lv_v;
  @override
  GeneratedColumn<double> get lv_v =>
      _lv_v ??= GeneratedColumn<double>('lv_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_wMeta = const VerificationMeta('lv_w');
  GeneratedColumn<double> _lv_w;
  @override
  GeneratedColumn<double> get lv_w =>
      _lv_w ??= GeneratedColumn<double>('lv_w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_nMeta = const VerificationMeta('lv_n');
  GeneratedColumn<double> _lv_n;
  @override
  GeneratedColumn<double> get lv_n =>
      _lv_n ??= GeneratedColumn<double>('lv_n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        lv_u_vn,
        lv_v_wn,
        lv_w_un,
        lv_u,
        lv_v,
        lv_w,
        lv_n
      ];
  @override
  String get aliasedName => _alias ?? 'powt3win_mc_lv_local_datasource_impl';
  @override
  String get actualTableName => 'powt3win_mc_lv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3winmcLvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('lv_u_vn')) {
      context.handle(_lv_u_vnMeta,
          lv_u_vn.isAcceptableOrUnknown(data['lv_u_vn'], _lv_u_vnMeta));
    } else if (isInserting) {
      context.missing(_lv_u_vnMeta);
    }
    if (data.containsKey('lv_v_wn')) {
      context.handle(_lv_v_wnMeta,
          lv_v_wn.isAcceptableOrUnknown(data['lv_v_wn'], _lv_v_wnMeta));
    } else if (isInserting) {
      context.missing(_lv_v_wnMeta);
    }
    if (data.containsKey('lv_w_un')) {
      context.handle(_lv_w_unMeta,
          lv_w_un.isAcceptableOrUnknown(data['lv_w_un'], _lv_w_unMeta));
    } else if (isInserting) {
      context.missing(_lv_w_unMeta);
    }
    if (data.containsKey('lv_u')) {
      context.handle(
          _lv_uMeta, lv_u.isAcceptableOrUnknown(data['lv_u'], _lv_uMeta));
    } else if (isInserting) {
      context.missing(_lv_uMeta);
    }
    if (data.containsKey('lv_v')) {
      context.handle(
          _lv_vMeta, lv_v.isAcceptableOrUnknown(data['lv_v'], _lv_vMeta));
    } else if (isInserting) {
      context.missing(_lv_vMeta);
    }
    if (data.containsKey('lv_w')) {
      context.handle(
          _lv_wMeta, lv_w.isAcceptableOrUnknown(data['lv_w'], _lv_wMeta));
    } else if (isInserting) {
      context.missing(_lv_wMeta);
    }
    if (data.containsKey('lv_n')) {
      context.handle(
          _lv_nMeta, lv_n.isAcceptableOrUnknown(data['lv_n'], _lv_nMeta));
    } else if (isInserting) {
      context.missing(_lv_nMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winmcLvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3winmcLvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3win_mcLv_LocalDatasourceImplTable createAlias(String alias) {
    return $Powt3win_mcLv_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winmcIvTLocalData extends DataClass
    implements Insertable<Powt3winmcIvTLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double ivt_u_vn;
  final double ivt_v_wn;
  final double ivt_w_un;
  final double ivt_u;
  final double ivt_v;
  final double ivt_w;
  final double ivt_n;
  final String equipmentUsed;
  final DateTime updateDate;
  Powt3winmcIvTLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.ivt_u_vn,
      @required this.ivt_v_wn,
      @required this.ivt_w_un,
      @required this.ivt_u,
      @required this.ivt_v,
      @required this.ivt_w,
      @required this.ivt_n,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory Powt3winmcIvTLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winmcIvTLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      ivt_u_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_u_vn']),
      ivt_v_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_v_wn']),
      ivt_w_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_w_un']),
      ivt_u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_u']),
      ivt_v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_v']),
      ivt_w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_w']),
      ivt_n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_n']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || ivt_u_vn != null) {
      map['ivt_u_vn'] = Variable<double>(ivt_u_vn);
    }
    if (!nullToAbsent || ivt_v_wn != null) {
      map['ivt_v_wn'] = Variable<double>(ivt_v_wn);
    }
    if (!nullToAbsent || ivt_w_un != null) {
      map['ivt_w_un'] = Variable<double>(ivt_w_un);
    }
    if (!nullToAbsent || ivt_u != null) {
      map['ivt_u'] = Variable<double>(ivt_u);
    }
    if (!nullToAbsent || ivt_v != null) {
      map['ivt_v'] = Variable<double>(ivt_v);
    }
    if (!nullToAbsent || ivt_w != null) {
      map['ivt_w'] = Variable<double>(ivt_w);
    }
    if (!nullToAbsent || ivt_n != null) {
      map['ivt_n'] = Variable<double>(ivt_n);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  Powt3winmcIvTLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3winmcIvTLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      ivt_u_vn: ivt_u_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(ivt_u_vn),
      ivt_v_wn: ivt_v_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(ivt_v_wn),
      ivt_w_un: ivt_w_un == null && nullToAbsent
          ? const Value.absent()
          : Value(ivt_w_un),
      ivt_u:
          ivt_u == null && nullToAbsent ? const Value.absent() : Value(ivt_u),
      ivt_v:
          ivt_v == null && nullToAbsent ? const Value.absent() : Value(ivt_v),
      ivt_w:
          ivt_w == null && nullToAbsent ? const Value.absent() : Value(ivt_w),
      ivt_n:
          ivt_n == null && nullToAbsent ? const Value.absent() : Value(ivt_n),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory Powt3winmcIvTLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winmcIvTLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      ivt_u_vn: serializer.fromJson<double>(json['ivt_u_vn']),
      ivt_v_wn: serializer.fromJson<double>(json['ivt_v_wn']),
      ivt_w_un: serializer.fromJson<double>(json['ivt_w_un']),
      ivt_u: serializer.fromJson<double>(json['ivt_u']),
      ivt_v: serializer.fromJson<double>(json['ivt_v']),
      ivt_w: serializer.fromJson<double>(json['ivt_w']),
      ivt_n: serializer.fromJson<double>(json['ivt_n']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'ivt_u_vn': serializer.toJson<double>(ivt_u_vn),
      'ivt_v_wn': serializer.toJson<double>(ivt_v_wn),
      'ivt_w_un': serializer.toJson<double>(ivt_w_un),
      'ivt_u': serializer.toJson<double>(ivt_u),
      'ivt_v': serializer.toJson<double>(ivt_v),
      'ivt_w': serializer.toJson<double>(ivt_w),
      'ivt_n': serializer.toJson<double>(ivt_n),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  Powt3winmcIvTLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double ivt_u_vn,
          double ivt_v_wn,
          double ivt_w_un,
          double ivt_u,
          double ivt_v,
          double ivt_w,
          double ivt_n,
          String equipmentUsed,
          DateTime updateDate}) =>
      Powt3winmcIvTLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        ivt_u_vn: ivt_u_vn ?? this.ivt_u_vn,
        ivt_v_wn: ivt_v_wn ?? this.ivt_v_wn,
        ivt_w_un: ivt_w_un ?? this.ivt_w_un,
        ivt_u: ivt_u ?? this.ivt_u,
        ivt_v: ivt_v ?? this.ivt_v,
        ivt_w: ivt_w ?? this.ivt_w,
        ivt_n: ivt_n ?? this.ivt_n,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winmcIvTLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('ivt_u_vn: $ivt_u_vn, ')
          ..write('ivt_v_wn: $ivt_v_wn, ')
          ..write('ivt_w_un: $ivt_w_un, ')
          ..write('ivt_u: $ivt_u, ')
          ..write('ivt_v: $ivt_v, ')
          ..write('ivt_w: $ivt_w, ')
          ..write('ivt_n: $ivt_n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      tapPosition,
      ivt_u_vn,
      ivt_v_wn,
      ivt_w_un,
      ivt_u,
      ivt_v,
      ivt_w,
      ivt_n,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winmcIvTLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.ivt_u_vn == this.ivt_u_vn &&
          other.ivt_v_wn == this.ivt_v_wn &&
          other.ivt_w_un == this.ivt_w_un &&
          other.ivt_u == this.ivt_u &&
          other.ivt_v == this.ivt_v &&
          other.ivt_w == this.ivt_w &&
          other.ivt_n == this.ivt_n &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class Powt3winmcIvTLocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winmcIvTLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> ivt_u_vn;
  final Value<double> ivt_v_wn;
  final Value<double> ivt_w_un;
  final Value<double> ivt_u;
  final Value<double> ivt_v;
  final Value<double> ivt_w;
  final Value<double> ivt_n;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const Powt3winmcIvTLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.ivt_u_vn = const Value.absent(),
    this.ivt_v_wn = const Value.absent(),
    this.ivt_w_un = const Value.absent(),
    this.ivt_u = const Value.absent(),
    this.ivt_v = const Value.absent(),
    this.ivt_w = const Value.absent(),
    this.ivt_n = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  Powt3winmcIvTLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double ivt_u_vn,
    @required double ivt_v_wn,
    @required double ivt_w_un,
    @required double ivt_u,
    @required double ivt_v,
    @required double ivt_w,
    @required double ivt_n,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        ivt_u_vn = Value(ivt_u_vn),
        ivt_v_wn = Value(ivt_v_wn),
        ivt_w_un = Value(ivt_w_un),
        ivt_u = Value(ivt_u),
        ivt_v = Value(ivt_v),
        ivt_w = Value(ivt_w),
        ivt_n = Value(ivt_n),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<Powt3winmcIvTLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> ivt_u_vn,
    Expression<double> ivt_v_wn,
    Expression<double> ivt_w_un,
    Expression<double> ivt_u,
    Expression<double> ivt_v,
    Expression<double> ivt_w,
    Expression<double> ivt_n,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (ivt_u_vn != null) 'ivt_u_vn': ivt_u_vn,
      if (ivt_v_wn != null) 'ivt_v_wn': ivt_v_wn,
      if (ivt_w_un != null) 'ivt_w_un': ivt_w_un,
      if (ivt_u != null) 'ivt_u': ivt_u,
      if (ivt_v != null) 'ivt_v': ivt_v,
      if (ivt_w != null) 'ivt_w': ivt_w,
      if (ivt_n != null) 'ivt_n': ivt_n,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  Powt3winmcIvTLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> ivt_u_vn,
      Value<double> ivt_v_wn,
      Value<double> ivt_w_un,
      Value<double> ivt_u,
      Value<double> ivt_v,
      Value<double> ivt_w,
      Value<double> ivt_n,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return Powt3winmcIvTLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      ivt_u_vn: ivt_u_vn ?? this.ivt_u_vn,
      ivt_v_wn: ivt_v_wn ?? this.ivt_v_wn,
      ivt_w_un: ivt_w_un ?? this.ivt_w_un,
      ivt_u: ivt_u ?? this.ivt_u,
      ivt_v: ivt_v ?? this.ivt_v,
      ivt_w: ivt_w ?? this.ivt_w,
      ivt_n: ivt_n ?? this.ivt_n,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (ivt_u_vn.present) {
      map['ivt_u_vn'] = Variable<double>(ivt_u_vn.value);
    }
    if (ivt_v_wn.present) {
      map['ivt_v_wn'] = Variable<double>(ivt_v_wn.value);
    }
    if (ivt_w_un.present) {
      map['ivt_w_un'] = Variable<double>(ivt_w_un.value);
    }
    if (ivt_u.present) {
      map['ivt_u'] = Variable<double>(ivt_u.value);
    }
    if (ivt_v.present) {
      map['ivt_v'] = Variable<double>(ivt_v.value);
    }
    if (ivt_w.present) {
      map['ivt_w'] = Variable<double>(ivt_w.value);
    }
    if (ivt_n.present) {
      map['ivt_n'] = Variable<double>(ivt_n.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3winmcIvTLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('ivt_u_vn: $ivt_u_vn, ')
          ..write('ivt_v_wn: $ivt_v_wn, ')
          ..write('ivt_w_un: $ivt_w_un, ')
          ..write('ivt_u: $ivt_u, ')
          ..write('ivt_v: $ivt_v, ')
          ..write('ivt_w: $ivt_w, ')
          ..write('ivt_n: $ivt_n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $Powt3winmcIvTLocalDatasourceImplTable
    extends Powt3winmcIvTLocalDatasourceImpl
    with
        TableInfo<$Powt3winmcIvTLocalDatasourceImplTable,
            Powt3winmcIvTLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3winmcIvTLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_u_vnMeta = const VerificationMeta('ivt_u_vn');
  GeneratedColumn<double> _ivt_u_vn;
  @override
  GeneratedColumn<double> get ivt_u_vn =>
      _ivt_u_vn ??= GeneratedColumn<double>('ivt_u_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_v_wnMeta = const VerificationMeta('ivt_v_wn');
  GeneratedColumn<double> _ivt_v_wn;
  @override
  GeneratedColumn<double> get ivt_v_wn =>
      _ivt_v_wn ??= GeneratedColumn<double>('ivt_v_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_w_unMeta = const VerificationMeta('ivt_w_un');
  GeneratedColumn<double> _ivt_w_un;
  @override
  GeneratedColumn<double> get ivt_w_un =>
      _ivt_w_un ??= GeneratedColumn<double>('ivt_w_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_uMeta = const VerificationMeta('ivt_u');
  GeneratedColumn<double> _ivt_u;
  @override
  GeneratedColumn<double> get ivt_u =>
      _ivt_u ??= GeneratedColumn<double>('ivt_u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_vMeta = const VerificationMeta('ivt_v');
  GeneratedColumn<double> _ivt_v;
  @override
  GeneratedColumn<double> get ivt_v =>
      _ivt_v ??= GeneratedColumn<double>('ivt_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_wMeta = const VerificationMeta('ivt_w');
  GeneratedColumn<double> _ivt_w;
  @override
  GeneratedColumn<double> get ivt_w =>
      _ivt_w ??= GeneratedColumn<double>('ivt_w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_nMeta = const VerificationMeta('ivt_n');
  GeneratedColumn<double> _ivt_n;
  @override
  GeneratedColumn<double> get ivt_n =>
      _ivt_n ??= GeneratedColumn<double>('ivt_n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        ivt_u_vn,
        ivt_v_wn,
        ivt_w_un,
        ivt_u,
        ivt_v,
        ivt_w,
        ivt_n,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powt3winmc_iv_t_local_datasource_impl';
  @override
  String get actualTableName => 'powt3winmc_iv_t_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3winmcIvTLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('ivt_u_vn')) {
      context.handle(_ivt_u_vnMeta,
          ivt_u_vn.isAcceptableOrUnknown(data['ivt_u_vn'], _ivt_u_vnMeta));
    } else if (isInserting) {
      context.missing(_ivt_u_vnMeta);
    }
    if (data.containsKey('ivt_v_wn')) {
      context.handle(_ivt_v_wnMeta,
          ivt_v_wn.isAcceptableOrUnknown(data['ivt_v_wn'], _ivt_v_wnMeta));
    } else if (isInserting) {
      context.missing(_ivt_v_wnMeta);
    }
    if (data.containsKey('ivt_w_un')) {
      context.handle(_ivt_w_unMeta,
          ivt_w_un.isAcceptableOrUnknown(data['ivt_w_un'], _ivt_w_unMeta));
    } else if (isInserting) {
      context.missing(_ivt_w_unMeta);
    }
    if (data.containsKey('ivt_u')) {
      context.handle(
          _ivt_uMeta, ivt_u.isAcceptableOrUnknown(data['ivt_u'], _ivt_uMeta));
    } else if (isInserting) {
      context.missing(_ivt_uMeta);
    }
    if (data.containsKey('ivt_v')) {
      context.handle(
          _ivt_vMeta, ivt_v.isAcceptableOrUnknown(data['ivt_v'], _ivt_vMeta));
    } else if (isInserting) {
      context.missing(_ivt_vMeta);
    }
    if (data.containsKey('ivt_w')) {
      context.handle(
          _ivt_wMeta, ivt_w.isAcceptableOrUnknown(data['ivt_w'], _ivt_wMeta));
    } else if (isInserting) {
      context.missing(_ivt_wMeta);
    }
    if (data.containsKey('ivt_n')) {
      context.handle(
          _ivt_nMeta, ivt_n.isAcceptableOrUnknown(data['ivt_n'], _ivt_nMeta));
    } else if (isInserting) {
      context.missing(_ivt_nMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winmcIvTLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3winmcIvTLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3winmcIvTLocalDatasourceImplTable createAlias(String alias) {
    return $Powt3winmcIvTLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winmbLocalData extends DataClass
    implements Insertable<Powt3winmbLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double r_hv_un;
  final double r_hv_vn;
  final double r_hv_wn;
  final double y_hv_un;
  final double y_hv_vn;
  final double y_hv_wn;
  final double b_hv_un;
  final double b_hv_vn;
  final double b_hv_wn;
  final double r_lv_un;
  final double r_lv_vn;
  final double r_lv_wn;
  final double y_lv_un;
  final double y_lv_vn;
  final double y_lv_wn;
  final double b_lv_un;
  final double b_lv_vn;
  final double b_lv_wn;
  final double r_ivt_un;
  final double r_ivt_vn;
  final double r_ivt_wn;
  final double y_ivt_un;
  final double y_ivt_vn;
  final double y_ivt_wn;
  final double b_ivt_un;
  final double b_ivt_vn;
  final double b_ivt_wn;
  final String equipmentUsed;
  final DateTime updateDate;
  Powt3winmbLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.r_hv_un,
      @required this.r_hv_vn,
      @required this.r_hv_wn,
      @required this.y_hv_un,
      @required this.y_hv_vn,
      @required this.y_hv_wn,
      @required this.b_hv_un,
      @required this.b_hv_vn,
      @required this.b_hv_wn,
      @required this.r_lv_un,
      @required this.r_lv_vn,
      @required this.r_lv_wn,
      @required this.y_lv_un,
      @required this.y_lv_vn,
      @required this.y_lv_wn,
      @required this.b_lv_un,
      @required this.b_lv_vn,
      @required this.b_lv_wn,
      @required this.r_ivt_un,
      @required this.r_ivt_vn,
      @required this.r_ivt_wn,
      @required this.y_ivt_un,
      @required this.y_ivt_vn,
      @required this.y_ivt_wn,
      @required this.b_ivt_un,
      @required this.b_ivt_vn,
      @required this.b_ivt_wn,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory Powt3winmbLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winmbLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      r_hv_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_hv_un']),
      r_hv_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_hv_vn']),
      r_hv_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_hv_wn']),
      y_hv_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_hv_un']),
      y_hv_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_hv_vn']),
      y_hv_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_hv_wn']),
      b_hv_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_hv_un']),
      b_hv_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_hv_vn']),
      b_hv_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_hv_wn']),
      r_lv_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv_un']),
      r_lv_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv_vn']),
      r_lv_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv_wn']),
      y_lv_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv_un']),
      y_lv_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv_vn']),
      y_lv_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv_wn']),
      b_lv_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv_un']),
      b_lv_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv_vn']),
      b_lv_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv_wn']),
      r_ivt_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_ivt_un']),
      r_ivt_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_ivt_vn']),
      r_ivt_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_ivt_wn']),
      y_ivt_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_ivt_un']),
      y_ivt_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_ivt_vn']),
      y_ivt_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_ivt_wn']),
      b_ivt_un: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_ivt_un']),
      b_ivt_vn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_ivt_vn']),
      b_ivt_wn: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_ivt_wn']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || r_hv_un != null) {
      map['r_hv_un'] = Variable<double>(r_hv_un);
    }
    if (!nullToAbsent || r_hv_vn != null) {
      map['r_hv_vn'] = Variable<double>(r_hv_vn);
    }
    if (!nullToAbsent || r_hv_wn != null) {
      map['r_hv_wn'] = Variable<double>(r_hv_wn);
    }
    if (!nullToAbsent || y_hv_un != null) {
      map['y_hv_un'] = Variable<double>(y_hv_un);
    }
    if (!nullToAbsent || y_hv_vn != null) {
      map['y_hv_vn'] = Variable<double>(y_hv_vn);
    }
    if (!nullToAbsent || y_hv_wn != null) {
      map['y_hv_wn'] = Variable<double>(y_hv_wn);
    }
    if (!nullToAbsent || b_hv_un != null) {
      map['b_hv_un'] = Variable<double>(b_hv_un);
    }
    if (!nullToAbsent || b_hv_vn != null) {
      map['b_hv_vn'] = Variable<double>(b_hv_vn);
    }
    if (!nullToAbsent || b_hv_wn != null) {
      map['b_hv_wn'] = Variable<double>(b_hv_wn);
    }
    if (!nullToAbsent || r_lv_un != null) {
      map['r_lv_un'] = Variable<double>(r_lv_un);
    }
    if (!nullToAbsent || r_lv_vn != null) {
      map['r_lv_vn'] = Variable<double>(r_lv_vn);
    }
    if (!nullToAbsent || r_lv_wn != null) {
      map['r_lv_wn'] = Variable<double>(r_lv_wn);
    }
    if (!nullToAbsent || y_lv_un != null) {
      map['y_lv_un'] = Variable<double>(y_lv_un);
    }
    if (!nullToAbsent || y_lv_vn != null) {
      map['y_lv_vn'] = Variable<double>(y_lv_vn);
    }
    if (!nullToAbsent || y_lv_wn != null) {
      map['y_lv_wn'] = Variable<double>(y_lv_wn);
    }
    if (!nullToAbsent || b_lv_un != null) {
      map['b_lv_un'] = Variable<double>(b_lv_un);
    }
    if (!nullToAbsent || b_lv_vn != null) {
      map['b_lv_vn'] = Variable<double>(b_lv_vn);
    }
    if (!nullToAbsent || b_lv_wn != null) {
      map['b_lv_wn'] = Variable<double>(b_lv_wn);
    }
    if (!nullToAbsent || r_ivt_un != null) {
      map['r_ivt_un'] = Variable<double>(r_ivt_un);
    }
    if (!nullToAbsent || r_ivt_vn != null) {
      map['r_ivt_vn'] = Variable<double>(r_ivt_vn);
    }
    if (!nullToAbsent || r_ivt_wn != null) {
      map['r_ivt_wn'] = Variable<double>(r_ivt_wn);
    }
    if (!nullToAbsent || y_ivt_un != null) {
      map['y_ivt_un'] = Variable<double>(y_ivt_un);
    }
    if (!nullToAbsent || y_ivt_vn != null) {
      map['y_ivt_vn'] = Variable<double>(y_ivt_vn);
    }
    if (!nullToAbsent || y_ivt_wn != null) {
      map['y_ivt_wn'] = Variable<double>(y_ivt_wn);
    }
    if (!nullToAbsent || b_ivt_un != null) {
      map['b_ivt_un'] = Variable<double>(b_ivt_un);
    }
    if (!nullToAbsent || b_ivt_vn != null) {
      map['b_ivt_vn'] = Variable<double>(b_ivt_vn);
    }
    if (!nullToAbsent || b_ivt_wn != null) {
      map['b_ivt_wn'] = Variable<double>(b_ivt_wn);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  Powt3win_mb_LocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3win_mb_LocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      r_hv_un: r_hv_un == null && nullToAbsent
          ? const Value.absent()
          : Value(r_hv_un),
      r_hv_vn: r_hv_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(r_hv_vn),
      r_hv_wn: r_hv_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(r_hv_wn),
      y_hv_un: y_hv_un == null && nullToAbsent
          ? const Value.absent()
          : Value(y_hv_un),
      y_hv_vn: y_hv_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(y_hv_vn),
      y_hv_wn: y_hv_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(y_hv_wn),
      b_hv_un: b_hv_un == null && nullToAbsent
          ? const Value.absent()
          : Value(b_hv_un),
      b_hv_vn: b_hv_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(b_hv_vn),
      b_hv_wn: b_hv_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(b_hv_wn),
      r_lv_un: r_lv_un == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv_un),
      r_lv_vn: r_lv_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv_vn),
      r_lv_wn: r_lv_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv_wn),
      y_lv_un: y_lv_un == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv_un),
      y_lv_vn: y_lv_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv_vn),
      y_lv_wn: y_lv_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv_wn),
      b_lv_un: b_lv_un == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv_un),
      b_lv_vn: b_lv_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv_vn),
      b_lv_wn: b_lv_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv_wn),
      r_ivt_un: r_ivt_un == null && nullToAbsent
          ? const Value.absent()
          : Value(r_ivt_un),
      r_ivt_vn: r_ivt_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(r_ivt_vn),
      r_ivt_wn: r_ivt_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(r_ivt_wn),
      y_ivt_un: y_ivt_un == null && nullToAbsent
          ? const Value.absent()
          : Value(y_ivt_un),
      y_ivt_vn: y_ivt_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(y_ivt_vn),
      y_ivt_wn: y_ivt_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(y_ivt_wn),
      b_ivt_un: b_ivt_un == null && nullToAbsent
          ? const Value.absent()
          : Value(b_ivt_un),
      b_ivt_vn: b_ivt_vn == null && nullToAbsent
          ? const Value.absent()
          : Value(b_ivt_vn),
      b_ivt_wn: b_ivt_wn == null && nullToAbsent
          ? const Value.absent()
          : Value(b_ivt_wn),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory Powt3winmbLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winmbLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      r_hv_un: serializer.fromJson<double>(json['r_hv_un']),
      r_hv_vn: serializer.fromJson<double>(json['r_hv_vn']),
      r_hv_wn: serializer.fromJson<double>(json['r_hv_wn']),
      y_hv_un: serializer.fromJson<double>(json['y_hv_un']),
      y_hv_vn: serializer.fromJson<double>(json['y_hv_vn']),
      y_hv_wn: serializer.fromJson<double>(json['y_hv_wn']),
      b_hv_un: serializer.fromJson<double>(json['b_hv_un']),
      b_hv_vn: serializer.fromJson<double>(json['b_hv_vn']),
      b_hv_wn: serializer.fromJson<double>(json['b_hv_wn']),
      r_lv_un: serializer.fromJson<double>(json['r_lv_un']),
      r_lv_vn: serializer.fromJson<double>(json['r_lv_vn']),
      r_lv_wn: serializer.fromJson<double>(json['r_lv_wn']),
      y_lv_un: serializer.fromJson<double>(json['y_lv_un']),
      y_lv_vn: serializer.fromJson<double>(json['y_lv_vn']),
      y_lv_wn: serializer.fromJson<double>(json['y_lv_wn']),
      b_lv_un: serializer.fromJson<double>(json['b_lv_un']),
      b_lv_vn: serializer.fromJson<double>(json['b_lv_vn']),
      b_lv_wn: serializer.fromJson<double>(json['b_lv_wn']),
      r_ivt_un: serializer.fromJson<double>(json['r_ivt_un']),
      r_ivt_vn: serializer.fromJson<double>(json['r_ivt_vn']),
      r_ivt_wn: serializer.fromJson<double>(json['r_ivt_wn']),
      y_ivt_un: serializer.fromJson<double>(json['y_ivt_un']),
      y_ivt_vn: serializer.fromJson<double>(json['y_ivt_vn']),
      y_ivt_wn: serializer.fromJson<double>(json['y_ivt_wn']),
      b_ivt_un: serializer.fromJson<double>(json['b_ivt_un']),
      b_ivt_vn: serializer.fromJson<double>(json['b_ivt_vn']),
      b_ivt_wn: serializer.fromJson<double>(json['b_ivt_wn']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'r_hv_un': serializer.toJson<double>(r_hv_un),
      'r_hv_vn': serializer.toJson<double>(r_hv_vn),
      'r_hv_wn': serializer.toJson<double>(r_hv_wn),
      'y_hv_un': serializer.toJson<double>(y_hv_un),
      'y_hv_vn': serializer.toJson<double>(y_hv_vn),
      'y_hv_wn': serializer.toJson<double>(y_hv_wn),
      'b_hv_un': serializer.toJson<double>(b_hv_un),
      'b_hv_vn': serializer.toJson<double>(b_hv_vn),
      'b_hv_wn': serializer.toJson<double>(b_hv_wn),
      'r_lv_un': serializer.toJson<double>(r_lv_un),
      'r_lv_vn': serializer.toJson<double>(r_lv_vn),
      'r_lv_wn': serializer.toJson<double>(r_lv_wn),
      'y_lv_un': serializer.toJson<double>(y_lv_un),
      'y_lv_vn': serializer.toJson<double>(y_lv_vn),
      'y_lv_wn': serializer.toJson<double>(y_lv_wn),
      'b_lv_un': serializer.toJson<double>(b_lv_un),
      'b_lv_vn': serializer.toJson<double>(b_lv_vn),
      'b_lv_wn': serializer.toJson<double>(b_lv_wn),
      'r_ivt_un': serializer.toJson<double>(r_ivt_un),
      'r_ivt_vn': serializer.toJson<double>(r_ivt_vn),
      'r_ivt_wn': serializer.toJson<double>(r_ivt_wn),
      'y_ivt_un': serializer.toJson<double>(y_ivt_un),
      'y_ivt_vn': serializer.toJson<double>(y_ivt_vn),
      'y_ivt_wn': serializer.toJson<double>(y_ivt_wn),
      'b_ivt_un': serializer.toJson<double>(b_ivt_un),
      'b_ivt_vn': serializer.toJson<double>(b_ivt_vn),
      'b_ivt_wn': serializer.toJson<double>(b_ivt_wn),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  Powt3winmbLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double r_hv_un,
          double r_hv_vn,
          double r_hv_wn,
          double y_hv_un,
          double y_hv_vn,
          double y_hv_wn,
          double b_hv_un,
          double b_hv_vn,
          double b_hv_wn,
          double r_lv_un,
          double r_lv_vn,
          double r_lv_wn,
          double y_lv_un,
          double y_lv_vn,
          double y_lv_wn,
          double b_lv_un,
          double b_lv_vn,
          double b_lv_wn,
          double r_ivt_un,
          double r_ivt_vn,
          double r_ivt_wn,
          double y_ivt_un,
          double y_ivt_vn,
          double y_ivt_wn,
          double b_ivt_un,
          double b_ivt_vn,
          double b_ivt_wn,
          String equipmentUsed,
          DateTime updateDate}) =>
      Powt3winmbLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        r_hv_un: r_hv_un ?? this.r_hv_un,
        r_hv_vn: r_hv_vn ?? this.r_hv_vn,
        r_hv_wn: r_hv_wn ?? this.r_hv_wn,
        y_hv_un: y_hv_un ?? this.y_hv_un,
        y_hv_vn: y_hv_vn ?? this.y_hv_vn,
        y_hv_wn: y_hv_wn ?? this.y_hv_wn,
        b_hv_un: b_hv_un ?? this.b_hv_un,
        b_hv_vn: b_hv_vn ?? this.b_hv_vn,
        b_hv_wn: b_hv_wn ?? this.b_hv_wn,
        r_lv_un: r_lv_un ?? this.r_lv_un,
        r_lv_vn: r_lv_vn ?? this.r_lv_vn,
        r_lv_wn: r_lv_wn ?? this.r_lv_wn,
        y_lv_un: y_lv_un ?? this.y_lv_un,
        y_lv_vn: y_lv_vn ?? this.y_lv_vn,
        y_lv_wn: y_lv_wn ?? this.y_lv_wn,
        b_lv_un: b_lv_un ?? this.b_lv_un,
        b_lv_vn: b_lv_vn ?? this.b_lv_vn,
        b_lv_wn: b_lv_wn ?? this.b_lv_wn,
        r_ivt_un: r_ivt_un ?? this.r_ivt_un,
        r_ivt_vn: r_ivt_vn ?? this.r_ivt_vn,
        r_ivt_wn: r_ivt_wn ?? this.r_ivt_wn,
        y_ivt_un: y_ivt_un ?? this.y_ivt_un,
        y_ivt_vn: y_ivt_vn ?? this.y_ivt_vn,
        y_ivt_wn: y_ivt_wn ?? this.y_ivt_wn,
        b_ivt_un: b_ivt_un ?? this.b_ivt_un,
        b_ivt_vn: b_ivt_vn ?? this.b_ivt_vn,
        b_ivt_wn: b_ivt_wn ?? this.b_ivt_wn,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winmbLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('r_hv_un: $r_hv_un, ')
          ..write('r_hv_vn: $r_hv_vn, ')
          ..write('r_hv_wn: $r_hv_wn, ')
          ..write('y_hv_un: $y_hv_un, ')
          ..write('y_hv_vn: $y_hv_vn, ')
          ..write('y_hv_wn: $y_hv_wn, ')
          ..write('b_hv_un: $b_hv_un, ')
          ..write('b_hv_vn: $b_hv_vn, ')
          ..write('b_hv_wn: $b_hv_wn, ')
          ..write('r_lv_un: $r_lv_un, ')
          ..write('r_lv_vn: $r_lv_vn, ')
          ..write('r_lv_wn: $r_lv_wn, ')
          ..write('y_lv_un: $y_lv_un, ')
          ..write('y_lv_vn: $y_lv_vn, ')
          ..write('y_lv_wn: $y_lv_wn, ')
          ..write('b_lv_un: $b_lv_un, ')
          ..write('b_lv_vn: $b_lv_vn, ')
          ..write('b_lv_wn: $b_lv_wn, ')
          ..write('r_ivt_un: $r_ivt_un, ')
          ..write('r_ivt_vn: $r_ivt_vn, ')
          ..write('r_ivt_wn: $r_ivt_wn, ')
          ..write('y_ivt_un: $y_ivt_un, ')
          ..write('y_ivt_vn: $y_ivt_vn, ')
          ..write('y_ivt_wn: $y_ivt_wn, ')
          ..write('b_ivt_un: $b_ivt_un, ')
          ..write('b_ivt_vn: $b_ivt_vn, ')
          ..write('b_ivt_wn: $b_ivt_wn, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        r_hv_un,
        r_hv_vn,
        r_hv_wn,
        y_hv_un,
        y_hv_vn,
        y_hv_wn,
        b_hv_un,
        b_hv_vn,
        b_hv_wn,
        r_lv_un,
        r_lv_vn,
        r_lv_wn,
        y_lv_un,
        y_lv_vn,
        y_lv_wn,
        b_lv_un,
        b_lv_vn,
        b_lv_wn,
        r_ivt_un,
        r_ivt_vn,
        r_ivt_wn,
        y_ivt_un,
        y_ivt_vn,
        y_ivt_wn,
        b_ivt_un,
        b_ivt_vn,
        b_ivt_wn,
        equipmentUsed,
        updateDate
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winmbLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.r_hv_un == this.r_hv_un &&
          other.r_hv_vn == this.r_hv_vn &&
          other.r_hv_wn == this.r_hv_wn &&
          other.y_hv_un == this.y_hv_un &&
          other.y_hv_vn == this.y_hv_vn &&
          other.y_hv_wn == this.y_hv_wn &&
          other.b_hv_un == this.b_hv_un &&
          other.b_hv_vn == this.b_hv_vn &&
          other.b_hv_wn == this.b_hv_wn &&
          other.r_lv_un == this.r_lv_un &&
          other.r_lv_vn == this.r_lv_vn &&
          other.r_lv_wn == this.r_lv_wn &&
          other.y_lv_un == this.y_lv_un &&
          other.y_lv_vn == this.y_lv_vn &&
          other.y_lv_wn == this.y_lv_wn &&
          other.b_lv_un == this.b_lv_un &&
          other.b_lv_vn == this.b_lv_vn &&
          other.b_lv_wn == this.b_lv_wn &&
          other.r_ivt_un == this.r_ivt_un &&
          other.r_ivt_vn == this.r_ivt_vn &&
          other.r_ivt_wn == this.r_ivt_wn &&
          other.y_ivt_un == this.y_ivt_un &&
          other.y_ivt_vn == this.y_ivt_vn &&
          other.y_ivt_wn == this.y_ivt_wn &&
          other.b_ivt_un == this.b_ivt_un &&
          other.b_ivt_vn == this.b_ivt_vn &&
          other.b_ivt_wn == this.b_ivt_wn &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class Powt3win_mb_LocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winmbLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> r_hv_un;
  final Value<double> r_hv_vn;
  final Value<double> r_hv_wn;
  final Value<double> y_hv_un;
  final Value<double> y_hv_vn;
  final Value<double> y_hv_wn;
  final Value<double> b_hv_un;
  final Value<double> b_hv_vn;
  final Value<double> b_hv_wn;
  final Value<double> r_lv_un;
  final Value<double> r_lv_vn;
  final Value<double> r_lv_wn;
  final Value<double> y_lv_un;
  final Value<double> y_lv_vn;
  final Value<double> y_lv_wn;
  final Value<double> b_lv_un;
  final Value<double> b_lv_vn;
  final Value<double> b_lv_wn;
  final Value<double> r_ivt_un;
  final Value<double> r_ivt_vn;
  final Value<double> r_ivt_wn;
  final Value<double> y_ivt_un;
  final Value<double> y_ivt_vn;
  final Value<double> y_ivt_wn;
  final Value<double> b_ivt_un;
  final Value<double> b_ivt_vn;
  final Value<double> b_ivt_wn;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const Powt3win_mb_LocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.r_hv_un = const Value.absent(),
    this.r_hv_vn = const Value.absent(),
    this.r_hv_wn = const Value.absent(),
    this.y_hv_un = const Value.absent(),
    this.y_hv_vn = const Value.absent(),
    this.y_hv_wn = const Value.absent(),
    this.b_hv_un = const Value.absent(),
    this.b_hv_vn = const Value.absent(),
    this.b_hv_wn = const Value.absent(),
    this.r_lv_un = const Value.absent(),
    this.r_lv_vn = const Value.absent(),
    this.r_lv_wn = const Value.absent(),
    this.y_lv_un = const Value.absent(),
    this.y_lv_vn = const Value.absent(),
    this.y_lv_wn = const Value.absent(),
    this.b_lv_un = const Value.absent(),
    this.b_lv_vn = const Value.absent(),
    this.b_lv_wn = const Value.absent(),
    this.r_ivt_un = const Value.absent(),
    this.r_ivt_vn = const Value.absent(),
    this.r_ivt_wn = const Value.absent(),
    this.y_ivt_un = const Value.absent(),
    this.y_ivt_vn = const Value.absent(),
    this.y_ivt_wn = const Value.absent(),
    this.b_ivt_un = const Value.absent(),
    this.b_ivt_vn = const Value.absent(),
    this.b_ivt_wn = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  Powt3win_mb_LocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double r_hv_un,
    @required double r_hv_vn,
    @required double r_hv_wn,
    @required double y_hv_un,
    @required double y_hv_vn,
    @required double y_hv_wn,
    @required double b_hv_un,
    @required double b_hv_vn,
    @required double b_hv_wn,
    @required double r_lv_un,
    @required double r_lv_vn,
    @required double r_lv_wn,
    @required double y_lv_un,
    @required double y_lv_vn,
    @required double y_lv_wn,
    @required double b_lv_un,
    @required double b_lv_vn,
    @required double b_lv_wn,
    @required double r_ivt_un,
    @required double r_ivt_vn,
    @required double r_ivt_wn,
    @required double y_ivt_un,
    @required double y_ivt_vn,
    @required double y_ivt_wn,
    @required double b_ivt_un,
    @required double b_ivt_vn,
    @required double b_ivt_wn,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        r_hv_un = Value(r_hv_un),
        r_hv_vn = Value(r_hv_vn),
        r_hv_wn = Value(r_hv_wn),
        y_hv_un = Value(y_hv_un),
        y_hv_vn = Value(y_hv_vn),
        y_hv_wn = Value(y_hv_wn),
        b_hv_un = Value(b_hv_un),
        b_hv_vn = Value(b_hv_vn),
        b_hv_wn = Value(b_hv_wn),
        r_lv_un = Value(r_lv_un),
        r_lv_vn = Value(r_lv_vn),
        r_lv_wn = Value(r_lv_wn),
        y_lv_un = Value(y_lv_un),
        y_lv_vn = Value(y_lv_vn),
        y_lv_wn = Value(y_lv_wn),
        b_lv_un = Value(b_lv_un),
        b_lv_vn = Value(b_lv_vn),
        b_lv_wn = Value(b_lv_wn),
        r_ivt_un = Value(r_ivt_un),
        r_ivt_vn = Value(r_ivt_vn),
        r_ivt_wn = Value(r_ivt_wn),
        y_ivt_un = Value(y_ivt_un),
        y_ivt_vn = Value(y_ivt_vn),
        y_ivt_wn = Value(y_ivt_wn),
        b_ivt_un = Value(b_ivt_un),
        b_ivt_vn = Value(b_ivt_vn),
        b_ivt_wn = Value(b_ivt_wn),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<Powt3winmbLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> r_hv_un,
    Expression<double> r_hv_vn,
    Expression<double> r_hv_wn,
    Expression<double> y_hv_un,
    Expression<double> y_hv_vn,
    Expression<double> y_hv_wn,
    Expression<double> b_hv_un,
    Expression<double> b_hv_vn,
    Expression<double> b_hv_wn,
    Expression<double> r_lv_un,
    Expression<double> r_lv_vn,
    Expression<double> r_lv_wn,
    Expression<double> y_lv_un,
    Expression<double> y_lv_vn,
    Expression<double> y_lv_wn,
    Expression<double> b_lv_un,
    Expression<double> b_lv_vn,
    Expression<double> b_lv_wn,
    Expression<double> r_ivt_un,
    Expression<double> r_ivt_vn,
    Expression<double> r_ivt_wn,
    Expression<double> y_ivt_un,
    Expression<double> y_ivt_vn,
    Expression<double> y_ivt_wn,
    Expression<double> b_ivt_un,
    Expression<double> b_ivt_vn,
    Expression<double> b_ivt_wn,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (r_hv_un != null) 'r_hv_un': r_hv_un,
      if (r_hv_vn != null) 'r_hv_vn': r_hv_vn,
      if (r_hv_wn != null) 'r_hv_wn': r_hv_wn,
      if (y_hv_un != null) 'y_hv_un': y_hv_un,
      if (y_hv_vn != null) 'y_hv_vn': y_hv_vn,
      if (y_hv_wn != null) 'y_hv_wn': y_hv_wn,
      if (b_hv_un != null) 'b_hv_un': b_hv_un,
      if (b_hv_vn != null) 'b_hv_vn': b_hv_vn,
      if (b_hv_wn != null) 'b_hv_wn': b_hv_wn,
      if (r_lv_un != null) 'r_lv_un': r_lv_un,
      if (r_lv_vn != null) 'r_lv_vn': r_lv_vn,
      if (r_lv_wn != null) 'r_lv_wn': r_lv_wn,
      if (y_lv_un != null) 'y_lv_un': y_lv_un,
      if (y_lv_vn != null) 'y_lv_vn': y_lv_vn,
      if (y_lv_wn != null) 'y_lv_wn': y_lv_wn,
      if (b_lv_un != null) 'b_lv_un': b_lv_un,
      if (b_lv_vn != null) 'b_lv_vn': b_lv_vn,
      if (b_lv_wn != null) 'b_lv_wn': b_lv_wn,
      if (r_ivt_un != null) 'r_ivt_un': r_ivt_un,
      if (r_ivt_vn != null) 'r_ivt_vn': r_ivt_vn,
      if (r_ivt_wn != null) 'r_ivt_wn': r_ivt_wn,
      if (y_ivt_un != null) 'y_ivt_un': y_ivt_un,
      if (y_ivt_vn != null) 'y_ivt_vn': y_ivt_vn,
      if (y_ivt_wn != null) 'y_ivt_wn': y_ivt_wn,
      if (b_ivt_un != null) 'b_ivt_un': b_ivt_un,
      if (b_ivt_vn != null) 'b_ivt_vn': b_ivt_vn,
      if (b_ivt_wn != null) 'b_ivt_wn': b_ivt_wn,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  Powt3win_mb_LocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> r_hv_un,
      Value<double> r_hv_vn,
      Value<double> r_hv_wn,
      Value<double> y_hv_un,
      Value<double> y_hv_vn,
      Value<double> y_hv_wn,
      Value<double> b_hv_un,
      Value<double> b_hv_vn,
      Value<double> b_hv_wn,
      Value<double> r_lv_un,
      Value<double> r_lv_vn,
      Value<double> r_lv_wn,
      Value<double> y_lv_un,
      Value<double> y_lv_vn,
      Value<double> y_lv_wn,
      Value<double> b_lv_un,
      Value<double> b_lv_vn,
      Value<double> b_lv_wn,
      Value<double> r_ivt_un,
      Value<double> r_ivt_vn,
      Value<double> r_ivt_wn,
      Value<double> y_ivt_un,
      Value<double> y_ivt_vn,
      Value<double> y_ivt_wn,
      Value<double> b_ivt_un,
      Value<double> b_ivt_vn,
      Value<double> b_ivt_wn,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return Powt3win_mb_LocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      r_hv_un: r_hv_un ?? this.r_hv_un,
      r_hv_vn: r_hv_vn ?? this.r_hv_vn,
      r_hv_wn: r_hv_wn ?? this.r_hv_wn,
      y_hv_un: y_hv_un ?? this.y_hv_un,
      y_hv_vn: y_hv_vn ?? this.y_hv_vn,
      y_hv_wn: y_hv_wn ?? this.y_hv_wn,
      b_hv_un: b_hv_un ?? this.b_hv_un,
      b_hv_vn: b_hv_vn ?? this.b_hv_vn,
      b_hv_wn: b_hv_wn ?? this.b_hv_wn,
      r_lv_un: r_lv_un ?? this.r_lv_un,
      r_lv_vn: r_lv_vn ?? this.r_lv_vn,
      r_lv_wn: r_lv_wn ?? this.r_lv_wn,
      y_lv_un: y_lv_un ?? this.y_lv_un,
      y_lv_vn: y_lv_vn ?? this.y_lv_vn,
      y_lv_wn: y_lv_wn ?? this.y_lv_wn,
      b_lv_un: b_lv_un ?? this.b_lv_un,
      b_lv_vn: b_lv_vn ?? this.b_lv_vn,
      b_lv_wn: b_lv_wn ?? this.b_lv_wn,
      r_ivt_un: r_ivt_un ?? this.r_ivt_un,
      r_ivt_vn: r_ivt_vn ?? this.r_ivt_vn,
      r_ivt_wn: r_ivt_wn ?? this.r_ivt_wn,
      y_ivt_un: y_ivt_un ?? this.y_ivt_un,
      y_ivt_vn: y_ivt_vn ?? this.y_ivt_vn,
      y_ivt_wn: y_ivt_wn ?? this.y_ivt_wn,
      b_ivt_un: b_ivt_un ?? this.b_ivt_un,
      b_ivt_vn: b_ivt_vn ?? this.b_ivt_vn,
      b_ivt_wn: b_ivt_wn ?? this.b_ivt_wn,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (r_hv_un.present) {
      map['r_hv_un'] = Variable<double>(r_hv_un.value);
    }
    if (r_hv_vn.present) {
      map['r_hv_vn'] = Variable<double>(r_hv_vn.value);
    }
    if (r_hv_wn.present) {
      map['r_hv_wn'] = Variable<double>(r_hv_wn.value);
    }
    if (y_hv_un.present) {
      map['y_hv_un'] = Variable<double>(y_hv_un.value);
    }
    if (y_hv_vn.present) {
      map['y_hv_vn'] = Variable<double>(y_hv_vn.value);
    }
    if (y_hv_wn.present) {
      map['y_hv_wn'] = Variable<double>(y_hv_wn.value);
    }
    if (b_hv_un.present) {
      map['b_hv_un'] = Variable<double>(b_hv_un.value);
    }
    if (b_hv_vn.present) {
      map['b_hv_vn'] = Variable<double>(b_hv_vn.value);
    }
    if (b_hv_wn.present) {
      map['b_hv_wn'] = Variable<double>(b_hv_wn.value);
    }
    if (r_lv_un.present) {
      map['r_lv_un'] = Variable<double>(r_lv_un.value);
    }
    if (r_lv_vn.present) {
      map['r_lv_vn'] = Variable<double>(r_lv_vn.value);
    }
    if (r_lv_wn.present) {
      map['r_lv_wn'] = Variable<double>(r_lv_wn.value);
    }
    if (y_lv_un.present) {
      map['y_lv_un'] = Variable<double>(y_lv_un.value);
    }
    if (y_lv_vn.present) {
      map['y_lv_vn'] = Variable<double>(y_lv_vn.value);
    }
    if (y_lv_wn.present) {
      map['y_lv_wn'] = Variable<double>(y_lv_wn.value);
    }
    if (b_lv_un.present) {
      map['b_lv_un'] = Variable<double>(b_lv_un.value);
    }
    if (b_lv_vn.present) {
      map['b_lv_vn'] = Variable<double>(b_lv_vn.value);
    }
    if (b_lv_wn.present) {
      map['b_lv_wn'] = Variable<double>(b_lv_wn.value);
    }
    if (r_ivt_un.present) {
      map['r_ivt_un'] = Variable<double>(r_ivt_un.value);
    }
    if (r_ivt_vn.present) {
      map['r_ivt_vn'] = Variable<double>(r_ivt_vn.value);
    }
    if (r_ivt_wn.present) {
      map['r_ivt_wn'] = Variable<double>(r_ivt_wn.value);
    }
    if (y_ivt_un.present) {
      map['y_ivt_un'] = Variable<double>(y_ivt_un.value);
    }
    if (y_ivt_vn.present) {
      map['y_ivt_vn'] = Variable<double>(y_ivt_vn.value);
    }
    if (y_ivt_wn.present) {
      map['y_ivt_wn'] = Variable<double>(y_ivt_wn.value);
    }
    if (b_ivt_un.present) {
      map['b_ivt_un'] = Variable<double>(b_ivt_un.value);
    }
    if (b_ivt_vn.present) {
      map['b_ivt_vn'] = Variable<double>(b_ivt_vn.value);
    }
    if (b_ivt_wn.present) {
      map['b_ivt_wn'] = Variable<double>(b_ivt_wn.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3win_mb_LocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('r_hv_un: $r_hv_un, ')
          ..write('r_hv_vn: $r_hv_vn, ')
          ..write('r_hv_wn: $r_hv_wn, ')
          ..write('y_hv_un: $y_hv_un, ')
          ..write('y_hv_vn: $y_hv_vn, ')
          ..write('y_hv_wn: $y_hv_wn, ')
          ..write('b_hv_un: $b_hv_un, ')
          ..write('b_hv_vn: $b_hv_vn, ')
          ..write('b_hv_wn: $b_hv_wn, ')
          ..write('r_lv_un: $r_lv_un, ')
          ..write('r_lv_vn: $r_lv_vn, ')
          ..write('r_lv_wn: $r_lv_wn, ')
          ..write('y_lv_un: $y_lv_un, ')
          ..write('y_lv_vn: $y_lv_vn, ')
          ..write('y_lv_wn: $y_lv_wn, ')
          ..write('b_lv_un: $b_lv_un, ')
          ..write('b_lv_vn: $b_lv_vn, ')
          ..write('b_lv_wn: $b_lv_wn, ')
          ..write('r_ivt_un: $r_ivt_un, ')
          ..write('r_ivt_vn: $r_ivt_vn, ')
          ..write('r_ivt_wn: $r_ivt_wn, ')
          ..write('y_ivt_un: $y_ivt_un, ')
          ..write('y_ivt_vn: $y_ivt_vn, ')
          ..write('y_ivt_wn: $y_ivt_wn, ')
          ..write('b_ivt_un: $b_ivt_un, ')
          ..write('b_ivt_vn: $b_ivt_vn, ')
          ..write('b_ivt_wn: $b_ivt_wn, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $Powt3win_mb_LocalDatasourceImplTable
    extends Powt3win_mb_LocalDatasourceImpl
    with TableInfo<$Powt3win_mb_LocalDatasourceImplTable, Powt3winmbLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3win_mb_LocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _r_hv_unMeta = const VerificationMeta('r_hv_un');
  GeneratedColumn<double> _r_hv_un;
  @override
  GeneratedColumn<double> get r_hv_un =>
      _r_hv_un ??= GeneratedColumn<double>('r_hv_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_hv_vnMeta = const VerificationMeta('r_hv_vn');
  GeneratedColumn<double> _r_hv_vn;
  @override
  GeneratedColumn<double> get r_hv_vn =>
      _r_hv_vn ??= GeneratedColumn<double>('r_hv_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_hv_wnMeta = const VerificationMeta('r_hv_wn');
  GeneratedColumn<double> _r_hv_wn;
  @override
  GeneratedColumn<double> get r_hv_wn =>
      _r_hv_wn ??= GeneratedColumn<double>('r_hv_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_hv_unMeta = const VerificationMeta('y_hv_un');
  GeneratedColumn<double> _y_hv_un;
  @override
  GeneratedColumn<double> get y_hv_un =>
      _y_hv_un ??= GeneratedColumn<double>('y_hv_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_hv_vnMeta = const VerificationMeta('y_hv_vn');
  GeneratedColumn<double> _y_hv_vn;
  @override
  GeneratedColumn<double> get y_hv_vn =>
      _y_hv_vn ??= GeneratedColumn<double>('y_hv_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_hv_wnMeta = const VerificationMeta('y_hv_wn');
  GeneratedColumn<double> _y_hv_wn;
  @override
  GeneratedColumn<double> get y_hv_wn =>
      _y_hv_wn ??= GeneratedColumn<double>('y_hv_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_hv_unMeta = const VerificationMeta('b_hv_un');
  GeneratedColumn<double> _b_hv_un;
  @override
  GeneratedColumn<double> get b_hv_un =>
      _b_hv_un ??= GeneratedColumn<double>('b_hv_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_hv_vnMeta = const VerificationMeta('b_hv_vn');
  GeneratedColumn<double> _b_hv_vn;
  @override
  GeneratedColumn<double> get b_hv_vn =>
      _b_hv_vn ??= GeneratedColumn<double>('b_hv_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_hv_wnMeta = const VerificationMeta('b_hv_wn');
  GeneratedColumn<double> _b_hv_wn;
  @override
  GeneratedColumn<double> get b_hv_wn =>
      _b_hv_wn ??= GeneratedColumn<double>('b_hv_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv_unMeta = const VerificationMeta('r_lv_un');
  GeneratedColumn<double> _r_lv_un;
  @override
  GeneratedColumn<double> get r_lv_un =>
      _r_lv_un ??= GeneratedColumn<double>('r_lv_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv_vnMeta = const VerificationMeta('r_lv_vn');
  GeneratedColumn<double> _r_lv_vn;
  @override
  GeneratedColumn<double> get r_lv_vn =>
      _r_lv_vn ??= GeneratedColumn<double>('r_lv_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv_wnMeta = const VerificationMeta('r_lv_wn');
  GeneratedColumn<double> _r_lv_wn;
  @override
  GeneratedColumn<double> get r_lv_wn =>
      _r_lv_wn ??= GeneratedColumn<double>('r_lv_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv_unMeta = const VerificationMeta('y_lv_un');
  GeneratedColumn<double> _y_lv_un;
  @override
  GeneratedColumn<double> get y_lv_un =>
      _y_lv_un ??= GeneratedColumn<double>('y_lv_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv_vnMeta = const VerificationMeta('y_lv_vn');
  GeneratedColumn<double> _y_lv_vn;
  @override
  GeneratedColumn<double> get y_lv_vn =>
      _y_lv_vn ??= GeneratedColumn<double>('y_lv_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv_wnMeta = const VerificationMeta('y_lv_wn');
  GeneratedColumn<double> _y_lv_wn;
  @override
  GeneratedColumn<double> get y_lv_wn =>
      _y_lv_wn ??= GeneratedColumn<double>('y_lv_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv_unMeta = const VerificationMeta('b_lv_un');
  GeneratedColumn<double> _b_lv_un;
  @override
  GeneratedColumn<double> get b_lv_un =>
      _b_lv_un ??= GeneratedColumn<double>('b_lv_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv_vnMeta = const VerificationMeta('b_lv_vn');
  GeneratedColumn<double> _b_lv_vn;
  @override
  GeneratedColumn<double> get b_lv_vn =>
      _b_lv_vn ??= GeneratedColumn<double>('b_lv_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv_wnMeta = const VerificationMeta('b_lv_wn');
  GeneratedColumn<double> _b_lv_wn;
  @override
  GeneratedColumn<double> get b_lv_wn =>
      _b_lv_wn ??= GeneratedColumn<double>('b_lv_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_ivt_unMeta = const VerificationMeta('r_ivt_un');
  GeneratedColumn<double> _r_ivt_un;
  @override
  GeneratedColumn<double> get r_ivt_un =>
      _r_ivt_un ??= GeneratedColumn<double>('r_ivt_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_ivt_vnMeta = const VerificationMeta('r_ivt_vn');
  GeneratedColumn<double> _r_ivt_vn;
  @override
  GeneratedColumn<double> get r_ivt_vn =>
      _r_ivt_vn ??= GeneratedColumn<double>('r_ivt_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_ivt_wnMeta = const VerificationMeta('r_ivt_wn');
  GeneratedColumn<double> _r_ivt_wn;
  @override
  GeneratedColumn<double> get r_ivt_wn =>
      _r_ivt_wn ??= GeneratedColumn<double>('r_ivt_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_ivt_unMeta = const VerificationMeta('y_ivt_un');
  GeneratedColumn<double> _y_ivt_un;
  @override
  GeneratedColumn<double> get y_ivt_un =>
      _y_ivt_un ??= GeneratedColumn<double>('y_ivt_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_ivt_vnMeta = const VerificationMeta('y_ivt_vn');
  GeneratedColumn<double> _y_ivt_vn;
  @override
  GeneratedColumn<double> get y_ivt_vn =>
      _y_ivt_vn ??= GeneratedColumn<double>('y_ivt_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_ivt_wnMeta = const VerificationMeta('y_ivt_wn');
  GeneratedColumn<double> _y_ivt_wn;
  @override
  GeneratedColumn<double> get y_ivt_wn =>
      _y_ivt_wn ??= GeneratedColumn<double>('y_ivt_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_ivt_unMeta = const VerificationMeta('b_ivt_un');
  GeneratedColumn<double> _b_ivt_un;
  @override
  GeneratedColumn<double> get b_ivt_un =>
      _b_ivt_un ??= GeneratedColumn<double>('b_ivt_un', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_ivt_vnMeta = const VerificationMeta('b_ivt_vn');
  GeneratedColumn<double> _b_ivt_vn;
  @override
  GeneratedColumn<double> get b_ivt_vn =>
      _b_ivt_vn ??= GeneratedColumn<double>('b_ivt_vn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_ivt_wnMeta = const VerificationMeta('b_ivt_wn');
  GeneratedColumn<double> _b_ivt_wn;
  @override
  GeneratedColumn<double> get b_ivt_wn =>
      _b_ivt_wn ??= GeneratedColumn<double>('b_ivt_wn', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        r_hv_un,
        r_hv_vn,
        r_hv_wn,
        y_hv_un,
        y_hv_vn,
        y_hv_wn,
        b_hv_un,
        b_hv_vn,
        b_hv_wn,
        r_lv_un,
        r_lv_vn,
        r_lv_wn,
        y_lv_un,
        y_lv_vn,
        y_lv_wn,
        b_lv_un,
        b_lv_vn,
        b_lv_wn,
        r_ivt_un,
        r_ivt_vn,
        r_ivt_wn,
        y_ivt_un,
        y_ivt_vn,
        y_ivt_wn,
        b_ivt_un,
        b_ivt_vn,
        b_ivt_wn,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powt3win_mb_local_datasource_impl';
  @override
  String get actualTableName => 'powt3win_mb_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3winmbLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('r_hv_un')) {
      context.handle(_r_hv_unMeta,
          r_hv_un.isAcceptableOrUnknown(data['r_hv_un'], _r_hv_unMeta));
    } else if (isInserting) {
      context.missing(_r_hv_unMeta);
    }
    if (data.containsKey('r_hv_vn')) {
      context.handle(_r_hv_vnMeta,
          r_hv_vn.isAcceptableOrUnknown(data['r_hv_vn'], _r_hv_vnMeta));
    } else if (isInserting) {
      context.missing(_r_hv_vnMeta);
    }
    if (data.containsKey('r_hv_wn')) {
      context.handle(_r_hv_wnMeta,
          r_hv_wn.isAcceptableOrUnknown(data['r_hv_wn'], _r_hv_wnMeta));
    } else if (isInserting) {
      context.missing(_r_hv_wnMeta);
    }
    if (data.containsKey('y_hv_un')) {
      context.handle(_y_hv_unMeta,
          y_hv_un.isAcceptableOrUnknown(data['y_hv_un'], _y_hv_unMeta));
    } else if (isInserting) {
      context.missing(_y_hv_unMeta);
    }
    if (data.containsKey('y_hv_vn')) {
      context.handle(_y_hv_vnMeta,
          y_hv_vn.isAcceptableOrUnknown(data['y_hv_vn'], _y_hv_vnMeta));
    } else if (isInserting) {
      context.missing(_y_hv_vnMeta);
    }
    if (data.containsKey('y_hv_wn')) {
      context.handle(_y_hv_wnMeta,
          y_hv_wn.isAcceptableOrUnknown(data['y_hv_wn'], _y_hv_wnMeta));
    } else if (isInserting) {
      context.missing(_y_hv_wnMeta);
    }
    if (data.containsKey('b_hv_un')) {
      context.handle(_b_hv_unMeta,
          b_hv_un.isAcceptableOrUnknown(data['b_hv_un'], _b_hv_unMeta));
    } else if (isInserting) {
      context.missing(_b_hv_unMeta);
    }
    if (data.containsKey('b_hv_vn')) {
      context.handle(_b_hv_vnMeta,
          b_hv_vn.isAcceptableOrUnknown(data['b_hv_vn'], _b_hv_vnMeta));
    } else if (isInserting) {
      context.missing(_b_hv_vnMeta);
    }
    if (data.containsKey('b_hv_wn')) {
      context.handle(_b_hv_wnMeta,
          b_hv_wn.isAcceptableOrUnknown(data['b_hv_wn'], _b_hv_wnMeta));
    } else if (isInserting) {
      context.missing(_b_hv_wnMeta);
    }
    if (data.containsKey('r_lv_un')) {
      context.handle(_r_lv_unMeta,
          r_lv_un.isAcceptableOrUnknown(data['r_lv_un'], _r_lv_unMeta));
    } else if (isInserting) {
      context.missing(_r_lv_unMeta);
    }
    if (data.containsKey('r_lv_vn')) {
      context.handle(_r_lv_vnMeta,
          r_lv_vn.isAcceptableOrUnknown(data['r_lv_vn'], _r_lv_vnMeta));
    } else if (isInserting) {
      context.missing(_r_lv_vnMeta);
    }
    if (data.containsKey('r_lv_wn')) {
      context.handle(_r_lv_wnMeta,
          r_lv_wn.isAcceptableOrUnknown(data['r_lv_wn'], _r_lv_wnMeta));
    } else if (isInserting) {
      context.missing(_r_lv_wnMeta);
    }
    if (data.containsKey('y_lv_un')) {
      context.handle(_y_lv_unMeta,
          y_lv_un.isAcceptableOrUnknown(data['y_lv_un'], _y_lv_unMeta));
    } else if (isInserting) {
      context.missing(_y_lv_unMeta);
    }
    if (data.containsKey('y_lv_vn')) {
      context.handle(_y_lv_vnMeta,
          y_lv_vn.isAcceptableOrUnknown(data['y_lv_vn'], _y_lv_vnMeta));
    } else if (isInserting) {
      context.missing(_y_lv_vnMeta);
    }
    if (data.containsKey('y_lv_wn')) {
      context.handle(_y_lv_wnMeta,
          y_lv_wn.isAcceptableOrUnknown(data['y_lv_wn'], _y_lv_wnMeta));
    } else if (isInserting) {
      context.missing(_y_lv_wnMeta);
    }
    if (data.containsKey('b_lv_un')) {
      context.handle(_b_lv_unMeta,
          b_lv_un.isAcceptableOrUnknown(data['b_lv_un'], _b_lv_unMeta));
    } else if (isInserting) {
      context.missing(_b_lv_unMeta);
    }
    if (data.containsKey('b_lv_vn')) {
      context.handle(_b_lv_vnMeta,
          b_lv_vn.isAcceptableOrUnknown(data['b_lv_vn'], _b_lv_vnMeta));
    } else if (isInserting) {
      context.missing(_b_lv_vnMeta);
    }
    if (data.containsKey('b_lv_wn')) {
      context.handle(_b_lv_wnMeta,
          b_lv_wn.isAcceptableOrUnknown(data['b_lv_wn'], _b_lv_wnMeta));
    } else if (isInserting) {
      context.missing(_b_lv_wnMeta);
    }
    if (data.containsKey('r_ivt_un')) {
      context.handle(_r_ivt_unMeta,
          r_ivt_un.isAcceptableOrUnknown(data['r_ivt_un'], _r_ivt_unMeta));
    } else if (isInserting) {
      context.missing(_r_ivt_unMeta);
    }
    if (data.containsKey('r_ivt_vn')) {
      context.handle(_r_ivt_vnMeta,
          r_ivt_vn.isAcceptableOrUnknown(data['r_ivt_vn'], _r_ivt_vnMeta));
    } else if (isInserting) {
      context.missing(_r_ivt_vnMeta);
    }
    if (data.containsKey('r_ivt_wn')) {
      context.handle(_r_ivt_wnMeta,
          r_ivt_wn.isAcceptableOrUnknown(data['r_ivt_wn'], _r_ivt_wnMeta));
    } else if (isInserting) {
      context.missing(_r_ivt_wnMeta);
    }
    if (data.containsKey('y_ivt_un')) {
      context.handle(_y_ivt_unMeta,
          y_ivt_un.isAcceptableOrUnknown(data['y_ivt_un'], _y_ivt_unMeta));
    } else if (isInserting) {
      context.missing(_y_ivt_unMeta);
    }
    if (data.containsKey('y_ivt_vn')) {
      context.handle(_y_ivt_vnMeta,
          y_ivt_vn.isAcceptableOrUnknown(data['y_ivt_vn'], _y_ivt_vnMeta));
    } else if (isInserting) {
      context.missing(_y_ivt_vnMeta);
    }
    if (data.containsKey('y_ivt_wn')) {
      context.handle(_y_ivt_wnMeta,
          y_ivt_wn.isAcceptableOrUnknown(data['y_ivt_wn'], _y_ivt_wnMeta));
    } else if (isInserting) {
      context.missing(_y_ivt_wnMeta);
    }
    if (data.containsKey('b_ivt_un')) {
      context.handle(_b_ivt_unMeta,
          b_ivt_un.isAcceptableOrUnknown(data['b_ivt_un'], _b_ivt_unMeta));
    } else if (isInserting) {
      context.missing(_b_ivt_unMeta);
    }
    if (data.containsKey('b_ivt_vn')) {
      context.handle(_b_ivt_vnMeta,
          b_ivt_vn.isAcceptableOrUnknown(data['b_ivt_vn'], _b_ivt_vnMeta));
    } else if (isInserting) {
      context.missing(_b_ivt_vnMeta);
    }
    if (data.containsKey('b_ivt_wn')) {
      context.handle(_b_ivt_wnMeta,
          b_ivt_wn.isAcceptableOrUnknown(data['b_ivt_wn'], _b_ivt_wnMeta));
    } else if (isInserting) {
      context.missing(_b_ivt_wnMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winmbLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3winmbLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3win_mb_LocalDatasourceImplTable createAlias(String alias) {
    return $Powt3win_mb_LocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winschvlvLocalData extends DataClass
    implements Insertable<Powt3winschvlvLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_u;
  final double hv_v;
  final double hv_w;
  final double hv_n;
  final double lv_u;
  final double lv_v;
  final double lv_w;
  final double lv_n;
  Powt3winschvlvLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_u,
      @required this.hv_v,
      @required this.hv_w,
      @required this.hv_n,
      @required this.lv_u,
      @required this.lv_v,
      @required this.lv_w,
      @required this.lv_n});
  factory Powt3winschvlvLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winschvlvLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_u']),
      hv_v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_v']),
      hv_w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_w']),
      hv_n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_n']),
      lv_u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_u']),
      lv_v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_v']),
      lv_w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_w']),
      lv_n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv_n']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_u != null) {
      map['hv_u'] = Variable<double>(hv_u);
    }
    if (!nullToAbsent || hv_v != null) {
      map['hv_v'] = Variable<double>(hv_v);
    }
    if (!nullToAbsent || hv_w != null) {
      map['hv_w'] = Variable<double>(hv_w);
    }
    if (!nullToAbsent || hv_n != null) {
      map['hv_n'] = Variable<double>(hv_n);
    }
    if (!nullToAbsent || lv_u != null) {
      map['lv_u'] = Variable<double>(lv_u);
    }
    if (!nullToAbsent || lv_v != null) {
      map['lv_v'] = Variable<double>(lv_v);
    }
    if (!nullToAbsent || lv_w != null) {
      map['lv_w'] = Variable<double>(lv_w);
    }
    if (!nullToAbsent || lv_n != null) {
      map['lv_n'] = Variable<double>(lv_n);
    }
    return map;
  }

  Powt3winschvlvLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3winschvlvLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_u: hv_u == null && nullToAbsent ? const Value.absent() : Value(hv_u),
      hv_v: hv_v == null && nullToAbsent ? const Value.absent() : Value(hv_v),
      hv_w: hv_w == null && nullToAbsent ? const Value.absent() : Value(hv_w),
      hv_n: hv_n == null && nullToAbsent ? const Value.absent() : Value(hv_n),
      lv_u: lv_u == null && nullToAbsent ? const Value.absent() : Value(lv_u),
      lv_v: lv_v == null && nullToAbsent ? const Value.absent() : Value(lv_v),
      lv_w: lv_w == null && nullToAbsent ? const Value.absent() : Value(lv_w),
      lv_n: lv_n == null && nullToAbsent ? const Value.absent() : Value(lv_n),
    );
  }

  factory Powt3winschvlvLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winschvlvLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_u: serializer.fromJson<double>(json['hv_u']),
      hv_v: serializer.fromJson<double>(json['hv_v']),
      hv_w: serializer.fromJson<double>(json['hv_w']),
      hv_n: serializer.fromJson<double>(json['hv_n']),
      lv_u: serializer.fromJson<double>(json['lv_u']),
      lv_v: serializer.fromJson<double>(json['lv_v']),
      lv_w: serializer.fromJson<double>(json['lv_w']),
      lv_n: serializer.fromJson<double>(json['lv_n']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_u': serializer.toJson<double>(hv_u),
      'hv_v': serializer.toJson<double>(hv_v),
      'hv_w': serializer.toJson<double>(hv_w),
      'hv_n': serializer.toJson<double>(hv_n),
      'lv_u': serializer.toJson<double>(lv_u),
      'lv_v': serializer.toJson<double>(lv_v),
      'lv_w': serializer.toJson<double>(lv_w),
      'lv_n': serializer.toJson<double>(lv_n),
    };
  }

  Powt3winschvlvLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_u,
          double hv_v,
          double hv_w,
          double hv_n,
          double lv_u,
          double lv_v,
          double lv_w,
          double lv_n}) =>
      Powt3winschvlvLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_u: hv_u ?? this.hv_u,
        hv_v: hv_v ?? this.hv_v,
        hv_w: hv_w ?? this.hv_w,
        hv_n: hv_n ?? this.hv_n,
        lv_u: lv_u ?? this.lv_u,
        lv_v: lv_v ?? this.lv_v,
        lv_w: lv_w ?? this.lv_w,
        lv_n: lv_n ?? this.lv_n,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winschvlvLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_u: $hv_u, ')
          ..write('hv_v: $hv_v, ')
          ..write('hv_w: $hv_w, ')
          ..write('hv_n: $hv_n, ')
          ..write('lv_u: $lv_u, ')
          ..write('lv_v: $lv_v, ')
          ..write('lv_w: $lv_w, ')
          ..write('lv_n: $lv_n')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, tapPosition,
      hv_u, hv_v, hv_w, hv_n, lv_u, lv_v, lv_w, lv_n);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winschvlvLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_u == this.hv_u &&
          other.hv_v == this.hv_v &&
          other.hv_w == this.hv_w &&
          other.hv_n == this.hv_n &&
          other.lv_u == this.lv_u &&
          other.lv_v == this.lv_v &&
          other.lv_w == this.lv_w &&
          other.lv_n == this.lv_n);
}

class Powt3winschvlvLocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winschvlvLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_u;
  final Value<double> hv_v;
  final Value<double> hv_w;
  final Value<double> hv_n;
  final Value<double> lv_u;
  final Value<double> lv_v;
  final Value<double> lv_w;
  final Value<double> lv_n;
  const Powt3winschvlvLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_u = const Value.absent(),
    this.hv_v = const Value.absent(),
    this.hv_w = const Value.absent(),
    this.hv_n = const Value.absent(),
    this.lv_u = const Value.absent(),
    this.lv_v = const Value.absent(),
    this.lv_w = const Value.absent(),
    this.lv_n = const Value.absent(),
  });
  Powt3winschvlvLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_u,
    @required double hv_v,
    @required double hv_w,
    @required double hv_n,
    @required double lv_u,
    @required double lv_v,
    @required double lv_w,
    @required double lv_n,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_u = Value(hv_u),
        hv_v = Value(hv_v),
        hv_w = Value(hv_w),
        hv_n = Value(hv_n),
        lv_u = Value(lv_u),
        lv_v = Value(lv_v),
        lv_w = Value(lv_w),
        lv_n = Value(lv_n);
  static Insertable<Powt3winschvlvLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_u,
    Expression<double> hv_v,
    Expression<double> hv_w,
    Expression<double> hv_n,
    Expression<double> lv_u,
    Expression<double> lv_v,
    Expression<double> lv_w,
    Expression<double> lv_n,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_u != null) 'hv_u': hv_u,
      if (hv_v != null) 'hv_v': hv_v,
      if (hv_w != null) 'hv_w': hv_w,
      if (hv_n != null) 'hv_n': hv_n,
      if (lv_u != null) 'lv_u': lv_u,
      if (lv_v != null) 'lv_v': lv_v,
      if (lv_w != null) 'lv_w': lv_w,
      if (lv_n != null) 'lv_n': lv_n,
    });
  }

  Powt3winschvlvLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_u,
      Value<double> hv_v,
      Value<double> hv_w,
      Value<double> hv_n,
      Value<double> lv_u,
      Value<double> lv_v,
      Value<double> lv_w,
      Value<double> lv_n}) {
    return Powt3winschvlvLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_u: hv_u ?? this.hv_u,
      hv_v: hv_v ?? this.hv_v,
      hv_w: hv_w ?? this.hv_w,
      hv_n: hv_n ?? this.hv_n,
      lv_u: lv_u ?? this.lv_u,
      lv_v: lv_v ?? this.lv_v,
      lv_w: lv_w ?? this.lv_w,
      lv_n: lv_n ?? this.lv_n,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_u.present) {
      map['hv_u'] = Variable<double>(hv_u.value);
    }
    if (hv_v.present) {
      map['hv_v'] = Variable<double>(hv_v.value);
    }
    if (hv_w.present) {
      map['hv_w'] = Variable<double>(hv_w.value);
    }
    if (hv_n.present) {
      map['hv_n'] = Variable<double>(hv_n.value);
    }
    if (lv_u.present) {
      map['lv_u'] = Variable<double>(lv_u.value);
    }
    if (lv_v.present) {
      map['lv_v'] = Variable<double>(lv_v.value);
    }
    if (lv_w.present) {
      map['lv_w'] = Variable<double>(lv_w.value);
    }
    if (lv_n.present) {
      map['lv_n'] = Variable<double>(lv_n.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3winschvlvLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_u: $hv_u, ')
          ..write('hv_v: $hv_v, ')
          ..write('hv_w: $hv_w, ')
          ..write('hv_n: $hv_n, ')
          ..write('lv_u: $lv_u, ')
          ..write('lv_v: $lv_v, ')
          ..write('lv_w: $lv_w, ')
          ..write('lv_n: $lv_n')
          ..write(')'))
        .toString();
  }
}

class $Powt3winschvlvLocalDatasourceImplTable
    extends Powt3winschvlvLocalDatasourceImpl
    with
        TableInfo<$Powt3winschvlvLocalDatasourceImplTable,
            Powt3winschvlvLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3winschvlvLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_uMeta = const VerificationMeta('hv_u');
  GeneratedColumn<double> _hv_u;
  @override
  GeneratedColumn<double> get hv_u =>
      _hv_u ??= GeneratedColumn<double>('hv_u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_vMeta = const VerificationMeta('hv_v');
  GeneratedColumn<double> _hv_v;
  @override
  GeneratedColumn<double> get hv_v =>
      _hv_v ??= GeneratedColumn<double>('hv_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_wMeta = const VerificationMeta('hv_w');
  GeneratedColumn<double> _hv_w;
  @override
  GeneratedColumn<double> get hv_w =>
      _hv_w ??= GeneratedColumn<double>('hv_w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_nMeta = const VerificationMeta('hv_n');
  GeneratedColumn<double> _hv_n;
  @override
  GeneratedColumn<double> get hv_n =>
      _hv_n ??= GeneratedColumn<double>('hv_n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_uMeta = const VerificationMeta('lv_u');
  GeneratedColumn<double> _lv_u;
  @override
  GeneratedColumn<double> get lv_u =>
      _lv_u ??= GeneratedColumn<double>('lv_u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_vMeta = const VerificationMeta('lv_v');
  GeneratedColumn<double> _lv_v;
  @override
  GeneratedColumn<double> get lv_v =>
      _lv_v ??= GeneratedColumn<double>('lv_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_wMeta = const VerificationMeta('lv_w');
  GeneratedColumn<double> _lv_w;
  @override
  GeneratedColumn<double> get lv_w =>
      _lv_w ??= GeneratedColumn<double>('lv_w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv_nMeta = const VerificationMeta('lv_n');
  GeneratedColumn<double> _lv_n;
  @override
  GeneratedColumn<double> get lv_n =>
      _lv_n ??= GeneratedColumn<double>('lv_n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_u,
        hv_v,
        hv_w,
        hv_n,
        lv_u,
        lv_v,
        lv_w,
        lv_n
      ];
  @override
  String get aliasedName => _alias ?? 'powt3winschvlv_local_datasource_impl';
  @override
  String get actualTableName => 'powt3winschvlv_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3winschvlvLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_u')) {
      context.handle(
          _hv_uMeta, hv_u.isAcceptableOrUnknown(data['hv_u'], _hv_uMeta));
    } else if (isInserting) {
      context.missing(_hv_uMeta);
    }
    if (data.containsKey('hv_v')) {
      context.handle(
          _hv_vMeta, hv_v.isAcceptableOrUnknown(data['hv_v'], _hv_vMeta));
    } else if (isInserting) {
      context.missing(_hv_vMeta);
    }
    if (data.containsKey('hv_w')) {
      context.handle(
          _hv_wMeta, hv_w.isAcceptableOrUnknown(data['hv_w'], _hv_wMeta));
    } else if (isInserting) {
      context.missing(_hv_wMeta);
    }
    if (data.containsKey('hv_n')) {
      context.handle(
          _hv_nMeta, hv_n.isAcceptableOrUnknown(data['hv_n'], _hv_nMeta));
    } else if (isInserting) {
      context.missing(_hv_nMeta);
    }
    if (data.containsKey('lv_u')) {
      context.handle(
          _lv_uMeta, lv_u.isAcceptableOrUnknown(data['lv_u'], _lv_uMeta));
    } else if (isInserting) {
      context.missing(_lv_uMeta);
    }
    if (data.containsKey('lv_v')) {
      context.handle(
          _lv_vMeta, lv_v.isAcceptableOrUnknown(data['lv_v'], _lv_vMeta));
    } else if (isInserting) {
      context.missing(_lv_vMeta);
    }
    if (data.containsKey('lv_w')) {
      context.handle(
          _lv_wMeta, lv_w.isAcceptableOrUnknown(data['lv_w'], _lv_wMeta));
    } else if (isInserting) {
      context.missing(_lv_wMeta);
    }
    if (data.containsKey('lv_n')) {
      context.handle(
          _lv_nMeta, lv_n.isAcceptableOrUnknown(data['lv_n'], _lv_nMeta));
    } else if (isInserting) {
      context.missing(_lv_nMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winschvlvLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return Powt3winschvlvLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3winschvlvLocalDatasourceImplTable createAlias(String alias) {
    return $Powt3winschvlvLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class Powt3winschvivtLocalData extends DataClass
    implements Insertable<Powt3winschvivtLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final int tapPosition;
  final double hv_u;
  final double hv_v;
  final double hv_w;
  final double hv_n;
  final double ivt_u;
  final double ivt_v;
  final double ivt_w;
  final double ivt_n;
  final String equipmentUsed;
  final DateTime updateDate;
  Powt3winschvivtLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.tapPosition,
      @required this.hv_u,
      @required this.hv_v,
      @required this.hv_w,
      @required this.hv_n,
      @required this.ivt_u,
      @required this.ivt_v,
      @required this.ivt_w,
      @required this.ivt_n,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory Powt3winschvivtLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return Powt3winschvivtLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      tapPosition: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_u']),
      hv_v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_v']),
      hv_w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_w']),
      hv_n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_n']),
      ivt_u: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_u']),
      ivt_v: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_v']),
      ivt_w: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_w']),
      ivt_n: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ivt_n']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<int>(tapPosition);
    }
    if (!nullToAbsent || hv_u != null) {
      map['hv_u'] = Variable<double>(hv_u);
    }
    if (!nullToAbsent || hv_v != null) {
      map['hv_v'] = Variable<double>(hv_v);
    }
    if (!nullToAbsent || hv_w != null) {
      map['hv_w'] = Variable<double>(hv_w);
    }
    if (!nullToAbsent || hv_n != null) {
      map['hv_n'] = Variable<double>(hv_n);
    }
    if (!nullToAbsent || ivt_u != null) {
      map['ivt_u'] = Variable<double>(ivt_u);
    }
    if (!nullToAbsent || ivt_v != null) {
      map['ivt_v'] = Variable<double>(ivt_v);
    }
    if (!nullToAbsent || ivt_w != null) {
      map['ivt_w'] = Variable<double>(ivt_w);
    }
    if (!nullToAbsent || ivt_n != null) {
      map['ivt_n'] = Variable<double>(ivt_n);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  Powt3winschvivtLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return Powt3winschvivtLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_u: hv_u == null && nullToAbsent ? const Value.absent() : Value(hv_u),
      hv_v: hv_v == null && nullToAbsent ? const Value.absent() : Value(hv_v),
      hv_w: hv_w == null && nullToAbsent ? const Value.absent() : Value(hv_w),
      hv_n: hv_n == null && nullToAbsent ? const Value.absent() : Value(hv_n),
      ivt_u:
          ivt_u == null && nullToAbsent ? const Value.absent() : Value(ivt_u),
      ivt_v:
          ivt_v == null && nullToAbsent ? const Value.absent() : Value(ivt_v),
      ivt_w:
          ivt_w == null && nullToAbsent ? const Value.absent() : Value(ivt_w),
      ivt_n:
          ivt_n == null && nullToAbsent ? const Value.absent() : Value(ivt_n),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory Powt3winschvivtLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Powt3winschvivtLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      tapPosition: serializer.fromJson<int>(json['tapPosition']),
      hv_u: serializer.fromJson<double>(json['hv_u']),
      hv_v: serializer.fromJson<double>(json['hv_v']),
      hv_w: serializer.fromJson<double>(json['hv_w']),
      hv_n: serializer.fromJson<double>(json['hv_n']),
      ivt_u: serializer.fromJson<double>(json['ivt_u']),
      ivt_v: serializer.fromJson<double>(json['ivt_v']),
      ivt_w: serializer.fromJson<double>(json['ivt_w']),
      ivt_n: serializer.fromJson<double>(json['ivt_n']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'tapPosition': serializer.toJson<int>(tapPosition),
      'hv_u': serializer.toJson<double>(hv_u),
      'hv_v': serializer.toJson<double>(hv_v),
      'hv_w': serializer.toJson<double>(hv_w),
      'hv_n': serializer.toJson<double>(hv_n),
      'ivt_u': serializer.toJson<double>(ivt_u),
      'ivt_v': serializer.toJson<double>(ivt_v),
      'ivt_w': serializer.toJson<double>(ivt_w),
      'ivt_n': serializer.toJson<double>(ivt_n),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  Powt3winschvivtLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          int tapPosition,
          double hv_u,
          double hv_v,
          double hv_w,
          double hv_n,
          double ivt_u,
          double ivt_v,
          double ivt_w,
          double ivt_n,
          String equipmentUsed,
          DateTime updateDate}) =>
      Powt3winschvivtLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_u: hv_u ?? this.hv_u,
        hv_v: hv_v ?? this.hv_v,
        hv_w: hv_w ?? this.hv_w,
        hv_n: hv_n ?? this.hv_n,
        ivt_u: ivt_u ?? this.ivt_u,
        ivt_v: ivt_v ?? this.ivt_v,
        ivt_w: ivt_w ?? this.ivt_w,
        ivt_n: ivt_n ?? this.ivt_n,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('Powt3winschvivtLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_u: $hv_u, ')
          ..write('hv_v: $hv_v, ')
          ..write('hv_w: $hv_w, ')
          ..write('hv_n: $hv_n, ')
          ..write('ivt_u: $ivt_u, ')
          ..write('ivt_v: $ivt_v, ')
          ..write('ivt_w: $ivt_w, ')
          ..write('ivt_n: $ivt_n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      tapPosition,
      hv_u,
      hv_v,
      hv_w,
      hv_n,
      ivt_u,
      ivt_v,
      ivt_w,
      ivt_n,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Powt3winschvivtLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.tapPosition == this.tapPosition &&
          other.hv_u == this.hv_u &&
          other.hv_v == this.hv_v &&
          other.hv_w == this.hv_w &&
          other.hv_n == this.hv_n &&
          other.ivt_u == this.ivt_u &&
          other.ivt_v == this.ivt_v &&
          other.ivt_w == this.ivt_w &&
          other.ivt_n == this.ivt_n &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class Powt3winschvivtLocalDatasourceImplCompanion
    extends UpdateCompanion<Powt3winschvivtLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<int> tapPosition;
  final Value<double> hv_u;
  final Value<double> hv_v;
  final Value<double> hv_w;
  final Value<double> hv_n;
  final Value<double> ivt_u;
  final Value<double> ivt_v;
  final Value<double> ivt_w;
  final Value<double> ivt_n;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const Powt3winschvivtLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_u = const Value.absent(),
    this.hv_v = const Value.absent(),
    this.hv_w = const Value.absent(),
    this.hv_n = const Value.absent(),
    this.ivt_u = const Value.absent(),
    this.ivt_v = const Value.absent(),
    this.ivt_w = const Value.absent(),
    this.ivt_n = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  Powt3winschvivtLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required int tapPosition,
    @required double hv_u,
    @required double hv_v,
    @required double hv_w,
    @required double hv_n,
    @required double ivt_u,
    @required double ivt_v,
    @required double ivt_w,
    @required double ivt_n,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        tapPosition = Value(tapPosition),
        hv_u = Value(hv_u),
        hv_v = Value(hv_v),
        hv_w = Value(hv_w),
        hv_n = Value(hv_n),
        ivt_u = Value(ivt_u),
        ivt_v = Value(ivt_v),
        ivt_w = Value(ivt_w),
        ivt_n = Value(ivt_n),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<Powt3winschvivtLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<int> tapPosition,
    Expression<double> hv_u,
    Expression<double> hv_v,
    Expression<double> hv_w,
    Expression<double> hv_n,
    Expression<double> ivt_u,
    Expression<double> ivt_v,
    Expression<double> ivt_w,
    Expression<double> ivt_n,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_u != null) 'hv_u': hv_u,
      if (hv_v != null) 'hv_v': hv_v,
      if (hv_w != null) 'hv_w': hv_w,
      if (hv_n != null) 'hv_n': hv_n,
      if (ivt_u != null) 'ivt_u': ivt_u,
      if (ivt_v != null) 'ivt_v': ivt_v,
      if (ivt_w != null) 'ivt_w': ivt_w,
      if (ivt_n != null) 'ivt_n': ivt_n,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  Powt3winschvivtLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<int> tapPosition,
      Value<double> hv_u,
      Value<double> hv_v,
      Value<double> hv_w,
      Value<double> hv_n,
      Value<double> ivt_u,
      Value<double> ivt_v,
      Value<double> ivt_w,
      Value<double> ivt_n,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return Powt3winschvivtLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_u: hv_u ?? this.hv_u,
      hv_v: hv_v ?? this.hv_v,
      hv_w: hv_w ?? this.hv_w,
      hv_n: hv_n ?? this.hv_n,
      ivt_u: ivt_u ?? this.ivt_u,
      ivt_v: ivt_v ?? this.ivt_v,
      ivt_w: ivt_w ?? this.ivt_w,
      ivt_n: ivt_n ?? this.ivt_n,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<int>(tapPosition.value);
    }
    if (hv_u.present) {
      map['hv_u'] = Variable<double>(hv_u.value);
    }
    if (hv_v.present) {
      map['hv_v'] = Variable<double>(hv_v.value);
    }
    if (hv_w.present) {
      map['hv_w'] = Variable<double>(hv_w.value);
    }
    if (hv_n.present) {
      map['hv_n'] = Variable<double>(hv_n.value);
    }
    if (ivt_u.present) {
      map['ivt_u'] = Variable<double>(ivt_u.value);
    }
    if (ivt_v.present) {
      map['ivt_v'] = Variable<double>(ivt_v.value);
    }
    if (ivt_w.present) {
      map['ivt_w'] = Variable<double>(ivt_w.value);
    }
    if (ivt_n.present) {
      map['ivt_n'] = Variable<double>(ivt_n.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('Powt3winschvivtLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_u: $hv_u, ')
          ..write('hv_v: $hv_v, ')
          ..write('hv_w: $hv_w, ')
          ..write('hv_n: $hv_n, ')
          ..write('ivt_u: $ivt_u, ')
          ..write('ivt_v: $ivt_v, ')
          ..write('ivt_w: $ivt_w, ')
          ..write('ivt_n: $ivt_n, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $Powt3winschvivtLocalDatasourceImplTable
    extends Powt3winschvivtLocalDatasourceImpl
    with
        TableInfo<$Powt3winschvivtLocalDatasourceImplTable,
            Powt3winschvivtLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $Powt3winschvivtLocalDatasourceImplTable(this.attachedDatabase,
      [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<int> _tapPosition;
  @override
  GeneratedColumn<int> get tapPosition =>
      _tapPosition ??= GeneratedColumn<int>('tap_position', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _hv_uMeta = const VerificationMeta('hv_u');
  GeneratedColumn<double> _hv_u;
  @override
  GeneratedColumn<double> get hv_u =>
      _hv_u ??= GeneratedColumn<double>('hv_u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_vMeta = const VerificationMeta('hv_v');
  GeneratedColumn<double> _hv_v;
  @override
  GeneratedColumn<double> get hv_v =>
      _hv_v ??= GeneratedColumn<double>('hv_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_wMeta = const VerificationMeta('hv_w');
  GeneratedColumn<double> _hv_w;
  @override
  GeneratedColumn<double> get hv_w =>
      _hv_w ??= GeneratedColumn<double>('hv_w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_nMeta = const VerificationMeta('hv_n');
  GeneratedColumn<double> _hv_n;
  @override
  GeneratedColumn<double> get hv_n =>
      _hv_n ??= GeneratedColumn<double>('hv_n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_uMeta = const VerificationMeta('ivt_u');
  GeneratedColumn<double> _ivt_u;
  @override
  GeneratedColumn<double> get ivt_u =>
      _ivt_u ??= GeneratedColumn<double>('ivt_u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_vMeta = const VerificationMeta('ivt_v');
  GeneratedColumn<double> _ivt_v;
  @override
  GeneratedColumn<double> get ivt_v =>
      _ivt_v ??= GeneratedColumn<double>('ivt_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_wMeta = const VerificationMeta('ivt_w');
  GeneratedColumn<double> _ivt_w;
  @override
  GeneratedColumn<double> get ivt_w =>
      _ivt_w ??= GeneratedColumn<double>('ivt_w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ivt_nMeta = const VerificationMeta('ivt_n');
  GeneratedColumn<double> _ivt_n;
  @override
  GeneratedColumn<double> get ivt_n =>
      _ivt_n ??= GeneratedColumn<double>('ivt_n', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        tapPosition,
        hv_u,
        hv_v,
        hv_w,
        hv_n,
        ivt_u,
        ivt_v,
        ivt_w,
        ivt_n,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'powt3winschvivt_local_datasource_impl';
  @override
  String get actualTableName => 'powt3winschvivt_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<Powt3winschvivtLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_u')) {
      context.handle(
          _hv_uMeta, hv_u.isAcceptableOrUnknown(data['hv_u'], _hv_uMeta));
    } else if (isInserting) {
      context.missing(_hv_uMeta);
    }
    if (data.containsKey('hv_v')) {
      context.handle(
          _hv_vMeta, hv_v.isAcceptableOrUnknown(data['hv_v'], _hv_vMeta));
    } else if (isInserting) {
      context.missing(_hv_vMeta);
    }
    if (data.containsKey('hv_w')) {
      context.handle(
          _hv_wMeta, hv_w.isAcceptableOrUnknown(data['hv_w'], _hv_wMeta));
    } else if (isInserting) {
      context.missing(_hv_wMeta);
    }
    if (data.containsKey('hv_n')) {
      context.handle(
          _hv_nMeta, hv_n.isAcceptableOrUnknown(data['hv_n'], _hv_nMeta));
    } else if (isInserting) {
      context.missing(_hv_nMeta);
    }
    if (data.containsKey('ivt_u')) {
      context.handle(
          _ivt_uMeta, ivt_u.isAcceptableOrUnknown(data['ivt_u'], _ivt_uMeta));
    } else if (isInserting) {
      context.missing(_ivt_uMeta);
    }
    if (data.containsKey('ivt_v')) {
      context.handle(
          _ivt_vMeta, ivt_v.isAcceptableOrUnknown(data['ivt_v'], _ivt_vMeta));
    } else if (isInserting) {
      context.missing(_ivt_vMeta);
    }
    if (data.containsKey('ivt_w')) {
      context.handle(
          _ivt_wMeta, ivt_w.isAcceptableOrUnknown(data['ivt_w'], _ivt_wMeta));
    } else if (isInserting) {
      context.missing(_ivt_wMeta);
    }
    if (data.containsKey('ivt_n')) {
      context.handle(
          _ivt_nMeta, ivt_n.isAcceptableOrUnknown(data['ivt_n'], _ivt_nMeta));
    } else if (isInserting) {
      context.missing(_ivt_nMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Powt3winschvivtLocalData map(Map<String, dynamic> data,
      {String tablePrefix}) {
    return Powt3winschvivtLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $Powt3winschvivtLocalDatasourceImplTable createAlias(String alias) {
    return $Powt3winschvivtLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ItLocalData extends DataClass implements Insertable<ItLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String serialNo;
  final String rating;
  final int ratedVoltage_HV;
  final int ratedVoltage_LV;
  final double ratedCurrent_HV;
  final double ratedCurrent_LV;
  final String vectorGroup;
  final double impedanceVoltage_HV_LV1;
  final double impedanceVoltage_HV_LV2;
  final double impedanceVoltage_HV_LV3;
  final double impedanceVoltage_HV_LV4;
  final double impedanceVoltage_Lv_LV;
  final int frequency;
  final String typeOfCooling;
  final int noOfPhases;
  final String make;
  final int yom;
  final int noOfTaps;
  final int noOfNominalTaps;
  final int oilTemp;
  final int windingTemp;
  final int ambientTemp;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  ItLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.serialNo,
      @required this.rating,
      @required this.ratedVoltage_HV,
      @required this.ratedVoltage_LV,
      @required this.ratedCurrent_HV,
      @required this.ratedCurrent_LV,
      @required this.vectorGroup,
      @required this.impedanceVoltage_HV_LV1,
      @required this.impedanceVoltage_HV_LV2,
      @required this.impedanceVoltage_HV_LV3,
      @required this.impedanceVoltage_HV_LV4,
      @required this.impedanceVoltage_Lv_LV,
      @required this.frequency,
      @required this.typeOfCooling,
      @required this.noOfPhases,
      @required this.make,
      @required this.yom,
      @required this.noOfTaps,
      @required this.noOfNominalTaps,
      @required this.oilTemp,
      @required this.windingTemp,
      @required this.ambientTemp,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory ItLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ItLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      rating: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rating']),
      ratedVoltage_HV: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage_h_v']),
      ratedVoltage_LV: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_voltage_l_v']),
      ratedCurrent_HV: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_current_h_v']),
      ratedCurrent_LV: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rated_current_l_v']),
      vectorGroup: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}vector_group']),
      impedanceVoltage_HV_LV1: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_h_v_l_v1']),
      impedanceVoltage_HV_LV2: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_h_v_l_v2']),
      impedanceVoltage_HV_LV3: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_h_v_l_v3']),
      impedanceVoltage_HV_LV4: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_h_v_l_v4']),
      impedanceVoltage_Lv_LV: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}impedance_voltage_lv_l_v']),
      frequency: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency']),
      typeOfCooling: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}type_of_cooling']),
      noOfPhases: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_phases']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      noOfTaps: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_taps']),
      noOfNominalTaps: const IntType().mapFromDatabaseResponse(
          data['${effectivePrefix}no_of_nominal_taps']),
      oilTemp: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}oil_temp']),
      windingTemp: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}winding_temp']),
      ambientTemp: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ambient_temp']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || rating != null) {
      map['rating'] = Variable<String>(rating);
    }
    if (!nullToAbsent || ratedVoltage_HV != null) {
      map['rated_voltage_h_v'] = Variable<int>(ratedVoltage_HV);
    }
    if (!nullToAbsent || ratedVoltage_LV != null) {
      map['rated_voltage_l_v'] = Variable<int>(ratedVoltage_LV);
    }
    if (!nullToAbsent || ratedCurrent_HV != null) {
      map['rated_current_h_v'] = Variable<double>(ratedCurrent_HV);
    }
    if (!nullToAbsent || ratedCurrent_LV != null) {
      map['rated_current_l_v'] = Variable<double>(ratedCurrent_LV);
    }
    if (!nullToAbsent || vectorGroup != null) {
      map['vector_group'] = Variable<String>(vectorGroup);
    }
    if (!nullToAbsent || impedanceVoltage_HV_LV1 != null) {
      map['impedance_voltage_h_v_l_v1'] =
          Variable<double>(impedanceVoltage_HV_LV1);
    }
    if (!nullToAbsent || impedanceVoltage_HV_LV2 != null) {
      map['impedance_voltage_h_v_l_v2'] =
          Variable<double>(impedanceVoltage_HV_LV2);
    }
    if (!nullToAbsent || impedanceVoltage_HV_LV3 != null) {
      map['impedance_voltage_h_v_l_v3'] =
          Variable<double>(impedanceVoltage_HV_LV3);
    }
    if (!nullToAbsent || impedanceVoltage_HV_LV4 != null) {
      map['impedance_voltage_h_v_l_v4'] =
          Variable<double>(impedanceVoltage_HV_LV4);
    }
    if (!nullToAbsent || impedanceVoltage_Lv_LV != null) {
      map['impedance_voltage_lv_l_v'] =
          Variable<double>(impedanceVoltage_Lv_LV);
    }
    if (!nullToAbsent || frequency != null) {
      map['frequency'] = Variable<int>(frequency);
    }
    if (!nullToAbsent || typeOfCooling != null) {
      map['type_of_cooling'] = Variable<String>(typeOfCooling);
    }
    if (!nullToAbsent || noOfPhases != null) {
      map['no_of_phases'] = Variable<int>(noOfPhases);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || noOfTaps != null) {
      map['no_of_taps'] = Variable<int>(noOfTaps);
    }
    if (!nullToAbsent || noOfNominalTaps != null) {
      map['no_of_nominal_taps'] = Variable<int>(noOfNominalTaps);
    }
    if (!nullToAbsent || oilTemp != null) {
      map['oil_temp'] = Variable<int>(oilTemp);
    }
    if (!nullToAbsent || windingTemp != null) {
      map['winding_temp'] = Variable<int>(windingTemp);
    }
    if (!nullToAbsent || ambientTemp != null) {
      map['ambient_temp'] = Variable<int>(ambientTemp);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  ItLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ItLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      rating:
          rating == null && nullToAbsent ? const Value.absent() : Value(rating),
      ratedVoltage_HV: ratedVoltage_HV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage_HV),
      ratedVoltage_LV: ratedVoltage_LV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedVoltage_LV),
      ratedCurrent_HV: ratedCurrent_HV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedCurrent_HV),
      ratedCurrent_LV: ratedCurrent_LV == null && nullToAbsent
          ? const Value.absent()
          : Value(ratedCurrent_LV),
      vectorGroup: vectorGroup == null && nullToAbsent
          ? const Value.absent()
          : Value(vectorGroup),
      impedanceVoltage_HV_LV1: impedanceVoltage_HV_LV1 == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltage_HV_LV1),
      impedanceVoltage_HV_LV2: impedanceVoltage_HV_LV2 == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltage_HV_LV2),
      impedanceVoltage_HV_LV3: impedanceVoltage_HV_LV3 == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltage_HV_LV3),
      impedanceVoltage_HV_LV4: impedanceVoltage_HV_LV4 == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltage_HV_LV4),
      impedanceVoltage_Lv_LV: impedanceVoltage_Lv_LV == null && nullToAbsent
          ? const Value.absent()
          : Value(impedanceVoltage_Lv_LV),
      frequency: frequency == null && nullToAbsent
          ? const Value.absent()
          : Value(frequency),
      typeOfCooling: typeOfCooling == null && nullToAbsent
          ? const Value.absent()
          : Value(typeOfCooling),
      noOfPhases: noOfPhases == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfPhases),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      noOfTaps: noOfTaps == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfTaps),
      noOfNominalTaps: noOfNominalTaps == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfNominalTaps),
      oilTemp: oilTemp == null && nullToAbsent
          ? const Value.absent()
          : Value(oilTemp),
      windingTemp: windingTemp == null && nullToAbsent
          ? const Value.absent()
          : Value(windingTemp),
      ambientTemp: ambientTemp == null && nullToAbsent
          ? const Value.absent()
          : Value(ambientTemp),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory ItLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ItLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      rating: serializer.fromJson<String>(json['rating']),
      ratedVoltage_HV: serializer.fromJson<int>(json['ratedVoltage_HV']),
      ratedVoltage_LV: serializer.fromJson<int>(json['ratedVoltage_LV']),
      ratedCurrent_HV: serializer.fromJson<double>(json['ratedCurrent_HV']),
      ratedCurrent_LV: serializer.fromJson<double>(json['ratedCurrent_LV']),
      vectorGroup: serializer.fromJson<String>(json['vectorGroup']),
      impedanceVoltage_HV_LV1:
          serializer.fromJson<double>(json['impedanceVoltage_HV_LV1']),
      impedanceVoltage_HV_LV2:
          serializer.fromJson<double>(json['impedanceVoltage_HV_LV2']),
      impedanceVoltage_HV_LV3:
          serializer.fromJson<double>(json['impedanceVoltage_HV_LV3']),
      impedanceVoltage_HV_LV4:
          serializer.fromJson<double>(json['impedanceVoltage_HV_LV4']),
      impedanceVoltage_Lv_LV:
          serializer.fromJson<double>(json['impedanceVoltage_Lv_LV']),
      frequency: serializer.fromJson<int>(json['frequency']),
      typeOfCooling: serializer.fromJson<String>(json['typeOfCooling']),
      noOfPhases: serializer.fromJson<int>(json['noOfPhases']),
      make: serializer.fromJson<String>(json['make']),
      yom: serializer.fromJson<int>(json['yom']),
      noOfTaps: serializer.fromJson<int>(json['noOfTaps']),
      noOfNominalTaps: serializer.fromJson<int>(json['noOfNominalTaps']),
      oilTemp: serializer.fromJson<int>(json['oilTemp']),
      windingTemp: serializer.fromJson<int>(json['windingTemp']),
      ambientTemp: serializer.fromJson<int>(json['ambientTemp']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'serialNo': serializer.toJson<String>(serialNo),
      'rating': serializer.toJson<String>(rating),
      'ratedVoltage_HV': serializer.toJson<int>(ratedVoltage_HV),
      'ratedVoltage_LV': serializer.toJson<int>(ratedVoltage_LV),
      'ratedCurrent_HV': serializer.toJson<double>(ratedCurrent_HV),
      'ratedCurrent_LV': serializer.toJson<double>(ratedCurrent_LV),
      'vectorGroup': serializer.toJson<String>(vectorGroup),
      'impedanceVoltage_HV_LV1':
          serializer.toJson<double>(impedanceVoltage_HV_LV1),
      'impedanceVoltage_HV_LV2':
          serializer.toJson<double>(impedanceVoltage_HV_LV2),
      'impedanceVoltage_HV_LV3':
          serializer.toJson<double>(impedanceVoltage_HV_LV3),
      'impedanceVoltage_HV_LV4':
          serializer.toJson<double>(impedanceVoltage_HV_LV4),
      'impedanceVoltage_Lv_LV':
          serializer.toJson<double>(impedanceVoltage_Lv_LV),
      'frequency': serializer.toJson<int>(frequency),
      'typeOfCooling': serializer.toJson<String>(typeOfCooling),
      'noOfPhases': serializer.toJson<int>(noOfPhases),
      'make': serializer.toJson<String>(make),
      'yom': serializer.toJson<int>(yom),
      'noOfTaps': serializer.toJson<int>(noOfTaps),
      'noOfNominalTaps': serializer.toJson<int>(noOfNominalTaps),
      'oilTemp': serializer.toJson<int>(oilTemp),
      'windingTemp': serializer.toJson<int>(windingTemp),
      'ambientTemp': serializer.toJson<int>(ambientTemp),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  ItLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String serialNo,
          String rating,
          int ratedVoltage_HV,
          int ratedVoltage_LV,
          double ratedCurrent_HV,
          double ratedCurrent_LV,
          String vectorGroup,
          double impedanceVoltage_HV_LV1,
          double impedanceVoltage_HV_LV2,
          double impedanceVoltage_HV_LV3,
          double impedanceVoltage_HV_LV4,
          double impedanceVoltage_Lv_LV,
          int frequency,
          String typeOfCooling,
          int noOfPhases,
          String make,
          int yom,
          int noOfTaps,
          int noOfNominalTaps,
          int oilTemp,
          int windingTemp,
          int ambientTemp,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      ItLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        serialNo: serialNo ?? this.serialNo,
        rating: rating ?? this.rating,
        ratedVoltage_HV: ratedVoltage_HV ?? this.ratedVoltage_HV,
        ratedVoltage_LV: ratedVoltage_LV ?? this.ratedVoltage_LV,
        ratedCurrent_HV: ratedCurrent_HV ?? this.ratedCurrent_HV,
        ratedCurrent_LV: ratedCurrent_LV ?? this.ratedCurrent_LV,
        vectorGroup: vectorGroup ?? this.vectorGroup,
        impedanceVoltage_HV_LV1:
            impedanceVoltage_HV_LV1 ?? this.impedanceVoltage_HV_LV1,
        impedanceVoltage_HV_LV2:
            impedanceVoltage_HV_LV2 ?? this.impedanceVoltage_HV_LV2,
        impedanceVoltage_HV_LV3:
            impedanceVoltage_HV_LV3 ?? this.impedanceVoltage_HV_LV3,
        impedanceVoltage_HV_LV4:
            impedanceVoltage_HV_LV4 ?? this.impedanceVoltage_HV_LV4,
        impedanceVoltage_Lv_LV:
            impedanceVoltage_Lv_LV ?? this.impedanceVoltage_Lv_LV,
        frequency: frequency ?? this.frequency,
        typeOfCooling: typeOfCooling ?? this.typeOfCooling,
        noOfPhases: noOfPhases ?? this.noOfPhases,
        make: make ?? this.make,
        yom: yom ?? this.yom,
        noOfTaps: noOfTaps ?? this.noOfTaps,
        noOfNominalTaps: noOfNominalTaps ?? this.noOfNominalTaps,
        oilTemp: oilTemp ?? this.oilTemp,
        windingTemp: windingTemp ?? this.windingTemp,
        ambientTemp: ambientTemp ?? this.ambientTemp,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('ItLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('rating: $rating, ')
          ..write('ratedVoltage_HV: $ratedVoltage_HV, ')
          ..write('ratedVoltage_LV: $ratedVoltage_LV, ')
          ..write('ratedCurrent_HV: $ratedCurrent_HV, ')
          ..write('ratedCurrent_LV: $ratedCurrent_LV, ')
          ..write('vectorGroup: $vectorGroup, ')
          ..write('impedanceVoltage_HV_LV1: $impedanceVoltage_HV_LV1, ')
          ..write('impedanceVoltage_HV_LV2: $impedanceVoltage_HV_LV2, ')
          ..write('impedanceVoltage_HV_LV3: $impedanceVoltage_HV_LV3, ')
          ..write('impedanceVoltage_HV_LV4: $impedanceVoltage_HV_LV4, ')
          ..write('impedanceVoltage_Lv_LV: $impedanceVoltage_Lv_LV, ')
          ..write('frequency: $frequency, ')
          ..write('typeOfCooling: $typeOfCooling, ')
          ..write('noOfPhases: $noOfPhases, ')
          ..write('make: $make, ')
          ..write('yom: $yom, ')
          ..write('noOfTaps: $noOfTaps, ')
          ..write('noOfNominalTaps: $noOfNominalTaps, ')
          ..write('oilTemp: $oilTemp, ')
          ..write('windingTemp: $windingTemp, ')
          ..write('ambientTemp: $ambientTemp, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        rating,
        ratedVoltage_HV,
        ratedVoltage_LV,
        ratedCurrent_HV,
        ratedCurrent_LV,
        vectorGroup,
        impedanceVoltage_HV_LV1,
        impedanceVoltage_HV_LV2,
        impedanceVoltage_HV_LV3,
        impedanceVoltage_HV_LV4,
        impedanceVoltage_Lv_LV,
        frequency,
        typeOfCooling,
        noOfPhases,
        make,
        yom,
        noOfTaps,
        noOfNominalTaps,
        oilTemp,
        windingTemp,
        ambientTemp,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ItLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.serialNo == this.serialNo &&
          other.rating == this.rating &&
          other.ratedVoltage_HV == this.ratedVoltage_HV &&
          other.ratedVoltage_LV == this.ratedVoltage_LV &&
          other.ratedCurrent_HV == this.ratedCurrent_HV &&
          other.ratedCurrent_LV == this.ratedCurrent_LV &&
          other.vectorGroup == this.vectorGroup &&
          other.impedanceVoltage_HV_LV1 == this.impedanceVoltage_HV_LV1 &&
          other.impedanceVoltage_HV_LV2 == this.impedanceVoltage_HV_LV2 &&
          other.impedanceVoltage_HV_LV3 == this.impedanceVoltage_HV_LV3 &&
          other.impedanceVoltage_HV_LV4 == this.impedanceVoltage_HV_LV4 &&
          other.impedanceVoltage_Lv_LV == this.impedanceVoltage_Lv_LV &&
          other.frequency == this.frequency &&
          other.typeOfCooling == this.typeOfCooling &&
          other.noOfPhases == this.noOfPhases &&
          other.make == this.make &&
          other.yom == this.yom &&
          other.noOfTaps == this.noOfTaps &&
          other.noOfNominalTaps == this.noOfNominalTaps &&
          other.oilTemp == this.oilTemp &&
          other.windingTemp == this.windingTemp &&
          other.ambientTemp == this.ambientTemp &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class ItLocalDatasourceImplCompanion extends UpdateCompanion<ItLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> serialNo;
  final Value<String> rating;
  final Value<int> ratedVoltage_HV;
  final Value<int> ratedVoltage_LV;
  final Value<double> ratedCurrent_HV;
  final Value<double> ratedCurrent_LV;
  final Value<String> vectorGroup;
  final Value<double> impedanceVoltage_HV_LV1;
  final Value<double> impedanceVoltage_HV_LV2;
  final Value<double> impedanceVoltage_HV_LV3;
  final Value<double> impedanceVoltage_HV_LV4;
  final Value<double> impedanceVoltage_Lv_LV;
  final Value<int> frequency;
  final Value<String> typeOfCooling;
  final Value<int> noOfPhases;
  final Value<String> make;
  final Value<int> yom;
  final Value<int> noOfTaps;
  final Value<int> noOfNominalTaps;
  final Value<int> oilTemp;
  final Value<int> windingTemp;
  final Value<int> ambientTemp;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const ItLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.rating = const Value.absent(),
    this.ratedVoltage_HV = const Value.absent(),
    this.ratedVoltage_LV = const Value.absent(),
    this.ratedCurrent_HV = const Value.absent(),
    this.ratedCurrent_LV = const Value.absent(),
    this.vectorGroup = const Value.absent(),
    this.impedanceVoltage_HV_LV1 = const Value.absent(),
    this.impedanceVoltage_HV_LV2 = const Value.absent(),
    this.impedanceVoltage_HV_LV3 = const Value.absent(),
    this.impedanceVoltage_HV_LV4 = const Value.absent(),
    this.impedanceVoltage_Lv_LV = const Value.absent(),
    this.frequency = const Value.absent(),
    this.typeOfCooling = const Value.absent(),
    this.noOfPhases = const Value.absent(),
    this.make = const Value.absent(),
    this.yom = const Value.absent(),
    this.noOfTaps = const Value.absent(),
    this.noOfNominalTaps = const Value.absent(),
    this.oilTemp = const Value.absent(),
    this.windingTemp = const Value.absent(),
    this.ambientTemp = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  ItLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String serialNo,
    @required String rating,
    @required int ratedVoltage_HV,
    @required int ratedVoltage_LV,
    @required double ratedCurrent_HV,
    @required double ratedCurrent_LV,
    @required String vectorGroup,
    @required double impedanceVoltage_HV_LV1,
    @required double impedanceVoltage_HV_LV2,
    @required double impedanceVoltage_HV_LV3,
    @required double impedanceVoltage_HV_LV4,
    @required double impedanceVoltage_Lv_LV,
    @required int frequency,
    @required String typeOfCooling,
    @required int noOfPhases,
    @required String make,
    @required int yom,
    @required int noOfTaps,
    @required int noOfNominalTaps,
    @required int oilTemp,
    @required int windingTemp,
    @required int ambientTemp,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        serialNo = Value(serialNo),
        rating = Value(rating),
        ratedVoltage_HV = Value(ratedVoltage_HV),
        ratedVoltage_LV = Value(ratedVoltage_LV),
        ratedCurrent_HV = Value(ratedCurrent_HV),
        ratedCurrent_LV = Value(ratedCurrent_LV),
        vectorGroup = Value(vectorGroup),
        impedanceVoltage_HV_LV1 = Value(impedanceVoltage_HV_LV1),
        impedanceVoltage_HV_LV2 = Value(impedanceVoltage_HV_LV2),
        impedanceVoltage_HV_LV3 = Value(impedanceVoltage_HV_LV3),
        impedanceVoltage_HV_LV4 = Value(impedanceVoltage_HV_LV4),
        impedanceVoltage_Lv_LV = Value(impedanceVoltage_Lv_LV),
        frequency = Value(frequency),
        typeOfCooling = Value(typeOfCooling),
        noOfPhases = Value(noOfPhases),
        make = Value(make),
        yom = Value(yom),
        noOfTaps = Value(noOfTaps),
        noOfNominalTaps = Value(noOfNominalTaps),
        oilTemp = Value(oilTemp),
        windingTemp = Value(windingTemp),
        ambientTemp = Value(ambientTemp),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<ItLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> serialNo,
    Expression<String> rating,
    Expression<int> ratedVoltage_HV,
    Expression<int> ratedVoltage_LV,
    Expression<double> ratedCurrent_HV,
    Expression<double> ratedCurrent_LV,
    Expression<String> vectorGroup,
    Expression<double> impedanceVoltage_HV_LV1,
    Expression<double> impedanceVoltage_HV_LV2,
    Expression<double> impedanceVoltage_HV_LV3,
    Expression<double> impedanceVoltage_HV_LV4,
    Expression<double> impedanceVoltage_Lv_LV,
    Expression<int> frequency,
    Expression<String> typeOfCooling,
    Expression<int> noOfPhases,
    Expression<String> make,
    Expression<int> yom,
    Expression<int> noOfTaps,
    Expression<int> noOfNominalTaps,
    Expression<int> oilTemp,
    Expression<int> windingTemp,
    Expression<int> ambientTemp,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (serialNo != null) 'serial_no': serialNo,
      if (rating != null) 'rating': rating,
      if (ratedVoltage_HV != null) 'rated_voltage_h_v': ratedVoltage_HV,
      if (ratedVoltage_LV != null) 'rated_voltage_l_v': ratedVoltage_LV,
      if (ratedCurrent_HV != null) 'rated_current_h_v': ratedCurrent_HV,
      if (ratedCurrent_LV != null) 'rated_current_l_v': ratedCurrent_LV,
      if (vectorGroup != null) 'vector_group': vectorGroup,
      if (impedanceVoltage_HV_LV1 != null)
        'impedance_voltage_h_v_l_v1': impedanceVoltage_HV_LV1,
      if (impedanceVoltage_HV_LV2 != null)
        'impedance_voltage_h_v_l_v2': impedanceVoltage_HV_LV2,
      if (impedanceVoltage_HV_LV3 != null)
        'impedance_voltage_h_v_l_v3': impedanceVoltage_HV_LV3,
      if (impedanceVoltage_HV_LV4 != null)
        'impedance_voltage_h_v_l_v4': impedanceVoltage_HV_LV4,
      if (impedanceVoltage_Lv_LV != null)
        'impedance_voltage_lv_l_v': impedanceVoltage_Lv_LV,
      if (frequency != null) 'frequency': frequency,
      if (typeOfCooling != null) 'type_of_cooling': typeOfCooling,
      if (noOfPhases != null) 'no_of_phases': noOfPhases,
      if (make != null) 'make': make,
      if (yom != null) 'yom': yom,
      if (noOfTaps != null) 'no_of_taps': noOfTaps,
      if (noOfNominalTaps != null) 'no_of_nominal_taps': noOfNominalTaps,
      if (oilTemp != null) 'oil_temp': oilTemp,
      if (windingTemp != null) 'winding_temp': windingTemp,
      if (ambientTemp != null) 'ambient_temp': ambientTemp,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  ItLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> serialNo,
      Value<String> rating,
      Value<int> ratedVoltage_HV,
      Value<int> ratedVoltage_LV,
      Value<double> ratedCurrent_HV,
      Value<double> ratedCurrent_LV,
      Value<String> vectorGroup,
      Value<double> impedanceVoltage_HV_LV1,
      Value<double> impedanceVoltage_HV_LV2,
      Value<double> impedanceVoltage_HV_LV3,
      Value<double> impedanceVoltage_HV_LV4,
      Value<double> impedanceVoltage_Lv_LV,
      Value<int> frequency,
      Value<String> typeOfCooling,
      Value<int> noOfPhases,
      Value<String> make,
      Value<int> yom,
      Value<int> noOfTaps,
      Value<int> noOfNominalTaps,
      Value<int> oilTemp,
      Value<int> windingTemp,
      Value<int> ambientTemp,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return ItLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      serialNo: serialNo ?? this.serialNo,
      rating: rating ?? this.rating,
      ratedVoltage_HV: ratedVoltage_HV ?? this.ratedVoltage_HV,
      ratedVoltage_LV: ratedVoltage_LV ?? this.ratedVoltage_LV,
      ratedCurrent_HV: ratedCurrent_HV ?? this.ratedCurrent_HV,
      ratedCurrent_LV: ratedCurrent_LV ?? this.ratedCurrent_LV,
      vectorGroup: vectorGroup ?? this.vectorGroup,
      impedanceVoltage_HV_LV1:
          impedanceVoltage_HV_LV1 ?? this.impedanceVoltage_HV_LV1,
      impedanceVoltage_HV_LV2:
          impedanceVoltage_HV_LV2 ?? this.impedanceVoltage_HV_LV2,
      impedanceVoltage_HV_LV3:
          impedanceVoltage_HV_LV3 ?? this.impedanceVoltage_HV_LV3,
      impedanceVoltage_HV_LV4:
          impedanceVoltage_HV_LV4 ?? this.impedanceVoltage_HV_LV4,
      impedanceVoltage_Lv_LV:
          impedanceVoltage_Lv_LV ?? this.impedanceVoltage_Lv_LV,
      frequency: frequency ?? this.frequency,
      typeOfCooling: typeOfCooling ?? this.typeOfCooling,
      noOfPhases: noOfPhases ?? this.noOfPhases,
      make: make ?? this.make,
      yom: yom ?? this.yom,
      noOfTaps: noOfTaps ?? this.noOfTaps,
      noOfNominalTaps: noOfNominalTaps ?? this.noOfNominalTaps,
      oilTemp: oilTemp ?? this.oilTemp,
      windingTemp: windingTemp ?? this.windingTemp,
      ambientTemp: ambientTemp ?? this.ambientTemp,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (rating.present) {
      map['rating'] = Variable<String>(rating.value);
    }
    if (ratedVoltage_HV.present) {
      map['rated_voltage_h_v'] = Variable<int>(ratedVoltage_HV.value);
    }
    if (ratedVoltage_LV.present) {
      map['rated_voltage_l_v'] = Variable<int>(ratedVoltage_LV.value);
    }
    if (ratedCurrent_HV.present) {
      map['rated_current_h_v'] = Variable<double>(ratedCurrent_HV.value);
    }
    if (ratedCurrent_LV.present) {
      map['rated_current_l_v'] = Variable<double>(ratedCurrent_LV.value);
    }
    if (vectorGroup.present) {
      map['vector_group'] = Variable<String>(vectorGroup.value);
    }
    if (impedanceVoltage_HV_LV1.present) {
      map['impedance_voltage_h_v_l_v1'] =
          Variable<double>(impedanceVoltage_HV_LV1.value);
    }
    if (impedanceVoltage_HV_LV2.present) {
      map['impedance_voltage_h_v_l_v2'] =
          Variable<double>(impedanceVoltage_HV_LV2.value);
    }
    if (impedanceVoltage_HV_LV3.present) {
      map['impedance_voltage_h_v_l_v3'] =
          Variable<double>(impedanceVoltage_HV_LV3.value);
    }
    if (impedanceVoltage_HV_LV4.present) {
      map['impedance_voltage_h_v_l_v4'] =
          Variable<double>(impedanceVoltage_HV_LV4.value);
    }
    if (impedanceVoltage_Lv_LV.present) {
      map['impedance_voltage_lv_l_v'] =
          Variable<double>(impedanceVoltage_Lv_LV.value);
    }
    if (frequency.present) {
      map['frequency'] = Variable<int>(frequency.value);
    }
    if (typeOfCooling.present) {
      map['type_of_cooling'] = Variable<String>(typeOfCooling.value);
    }
    if (noOfPhases.present) {
      map['no_of_phases'] = Variable<int>(noOfPhases.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (noOfTaps.present) {
      map['no_of_taps'] = Variable<int>(noOfTaps.value);
    }
    if (noOfNominalTaps.present) {
      map['no_of_nominal_taps'] = Variable<int>(noOfNominalTaps.value);
    }
    if (oilTemp.present) {
      map['oil_temp'] = Variable<int>(oilTemp.value);
    }
    if (windingTemp.present) {
      map['winding_temp'] = Variable<int>(windingTemp.value);
    }
    if (ambientTemp.present) {
      map['ambient_temp'] = Variable<int>(ambientTemp.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ItLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('rating: $rating, ')
          ..write('ratedVoltage_HV: $ratedVoltage_HV, ')
          ..write('ratedVoltage_LV: $ratedVoltage_LV, ')
          ..write('ratedCurrent_HV: $ratedCurrent_HV, ')
          ..write('ratedCurrent_LV: $ratedCurrent_LV, ')
          ..write('vectorGroup: $vectorGroup, ')
          ..write('impedanceVoltage_HV_LV1: $impedanceVoltage_HV_LV1, ')
          ..write('impedanceVoltage_HV_LV2: $impedanceVoltage_HV_LV2, ')
          ..write('impedanceVoltage_HV_LV3: $impedanceVoltage_HV_LV3, ')
          ..write('impedanceVoltage_HV_LV4: $impedanceVoltage_HV_LV4, ')
          ..write('impedanceVoltage_Lv_LV: $impedanceVoltage_Lv_LV, ')
          ..write('frequency: $frequency, ')
          ..write('typeOfCooling: $typeOfCooling, ')
          ..write('noOfPhases: $noOfPhases, ')
          ..write('make: $make, ')
          ..write('yom: $yom, ')
          ..write('noOfTaps: $noOfTaps, ')
          ..write('noOfNominalTaps: $noOfNominalTaps, ')
          ..write('oilTemp: $oilTemp, ')
          ..write('windingTemp: $windingTemp, ')
          ..write('ambientTemp: $ambientTemp, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $ItLocalDatasourceImplTable extends ItLocalDatasourceImpl
    with TableInfo<$ItLocalDatasourceImplTable, ItLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ItLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratingMeta = const VerificationMeta('rating');
  GeneratedColumn<String> _rating;
  @override
  GeneratedColumn<String> get rating => _rating ??= GeneratedColumn<String>(
      'rating', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratedVoltage_HVMeta =
      const VerificationMeta('ratedVoltage_HV');
  GeneratedColumn<int> _ratedVoltage_HV;
  @override
  GeneratedColumn<int> get ratedVoltage_HV => _ratedVoltage_HV ??=
      GeneratedColumn<int>('rated_voltage_h_v', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedVoltage_LVMeta =
      const VerificationMeta('ratedVoltage_LV');
  GeneratedColumn<int> _ratedVoltage_LV;
  @override
  GeneratedColumn<int> get ratedVoltage_LV => _ratedVoltage_LV ??=
      GeneratedColumn<int>('rated_voltage_l_v', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ratedCurrent_HVMeta =
      const VerificationMeta('ratedCurrent_HV');
  GeneratedColumn<double> _ratedCurrent_HV;
  @override
  GeneratedColumn<double> get ratedCurrent_HV => _ratedCurrent_HV ??=
      GeneratedColumn<double>('rated_current_h_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ratedCurrent_LVMeta =
      const VerificationMeta('ratedCurrent_LV');
  GeneratedColumn<double> _ratedCurrent_LV;
  @override
  GeneratedColumn<double> get ratedCurrent_LV => _ratedCurrent_LV ??=
      GeneratedColumn<double>('rated_current_l_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _vectorGroupMeta =
      const VerificationMeta('vectorGroup');
  GeneratedColumn<String> _vectorGroup;
  @override
  GeneratedColumn<String> get vectorGroup => _vectorGroup ??=
      GeneratedColumn<String>('vector_group', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltage_HV_LV1Meta =
      const VerificationMeta('impedanceVoltage_HV_LV1');
  GeneratedColumn<double> _impedanceVoltage_HV_LV1;
  @override
  GeneratedColumn<double> get impedanceVoltage_HV_LV1 =>
      _impedanceVoltage_HV_LV1 ??= GeneratedColumn<double>(
          'impedance_voltage_h_v_l_v1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltage_HV_LV2Meta =
      const VerificationMeta('impedanceVoltage_HV_LV2');
  GeneratedColumn<double> _impedanceVoltage_HV_LV2;
  @override
  GeneratedColumn<double> get impedanceVoltage_HV_LV2 =>
      _impedanceVoltage_HV_LV2 ??= GeneratedColumn<double>(
          'impedance_voltage_h_v_l_v2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltage_HV_LV3Meta =
      const VerificationMeta('impedanceVoltage_HV_LV3');
  GeneratedColumn<double> _impedanceVoltage_HV_LV3;
  @override
  GeneratedColumn<double> get impedanceVoltage_HV_LV3 =>
      _impedanceVoltage_HV_LV3 ??= GeneratedColumn<double>(
          'impedance_voltage_h_v_l_v3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltage_HV_LV4Meta =
      const VerificationMeta('impedanceVoltage_HV_LV4');
  GeneratedColumn<double> _impedanceVoltage_HV_LV4;
  @override
  GeneratedColumn<double> get impedanceVoltage_HV_LV4 =>
      _impedanceVoltage_HV_LV4 ??= GeneratedColumn<double>(
          'impedance_voltage_h_v_l_v4', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _impedanceVoltage_Lv_LVMeta =
      const VerificationMeta('impedanceVoltage_Lv_LV');
  GeneratedColumn<double> _impedanceVoltage_Lv_LV;
  @override
  GeneratedColumn<double> get impedanceVoltage_Lv_LV =>
      _impedanceVoltage_Lv_LV ??= GeneratedColumn<double>(
          'impedance_voltage_lv_l_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _frequencyMeta = const VerificationMeta('frequency');
  GeneratedColumn<int> _frequency;
  @override
  GeneratedColumn<int> get frequency =>
      _frequency ??= GeneratedColumn<int>('frequency', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _typeOfCoolingMeta =
      const VerificationMeta('typeOfCooling');
  GeneratedColumn<String> _typeOfCooling;
  @override
  GeneratedColumn<String> get typeOfCooling => _typeOfCooling ??=
      GeneratedColumn<String>('type_of_cooling', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _noOfPhasesMeta = const VerificationMeta('noOfPhases');
  GeneratedColumn<int> _noOfPhases;
  @override
  GeneratedColumn<int> get noOfPhases =>
      _noOfPhases ??= GeneratedColumn<int>('no_of_phases', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _noOfTapsMeta = const VerificationMeta('noOfTaps');
  GeneratedColumn<int> _noOfTaps;
  @override
  GeneratedColumn<int> get noOfTaps =>
      _noOfTaps ??= GeneratedColumn<int>('no_of_taps', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _noOfNominalTapsMeta =
      const VerificationMeta('noOfNominalTaps');
  GeneratedColumn<int> _noOfNominalTaps;
  @override
  GeneratedColumn<int> get noOfNominalTaps => _noOfNominalTaps ??=
      GeneratedColumn<int>('no_of_nominal_taps', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _oilTempMeta = const VerificationMeta('oilTemp');
  GeneratedColumn<int> _oilTemp;
  @override
  GeneratedColumn<int> get oilTemp =>
      _oilTemp ??= GeneratedColumn<int>('oil_temp', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _windingTempMeta =
      const VerificationMeta('windingTemp');
  GeneratedColumn<int> _windingTemp;
  @override
  GeneratedColumn<int> get windingTemp =>
      _windingTemp ??= GeneratedColumn<int>('winding_temp', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ambientTempMeta =
      const VerificationMeta('ambientTemp');
  GeneratedColumn<int> _ambientTemp;
  @override
  GeneratedColumn<int> get ambientTemp =>
      _ambientTemp ??= GeneratedColumn<int>('ambient_temp', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        rating,
        ratedVoltage_HV,
        ratedVoltage_LV,
        ratedCurrent_HV,
        ratedCurrent_LV,
        vectorGroup,
        impedanceVoltage_HV_LV1,
        impedanceVoltage_HV_LV2,
        impedanceVoltage_HV_LV3,
        impedanceVoltage_HV_LV4,
        impedanceVoltage_Lv_LV,
        frequency,
        typeOfCooling,
        noOfPhases,
        make,
        yom,
        noOfTaps,
        noOfNominalTaps,
        oilTemp,
        windingTemp,
        ambientTemp,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'it_local_datasource_impl';
  @override
  String get actualTableName => 'it_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ItLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('rating')) {
      context.handle(_ratingMeta,
          rating.isAcceptableOrUnknown(data['rating'], _ratingMeta));
    } else if (isInserting) {
      context.missing(_ratingMeta);
    }
    if (data.containsKey('rated_voltage_h_v')) {
      context.handle(
          _ratedVoltage_HVMeta,
          ratedVoltage_HV.isAcceptableOrUnknown(
              data['rated_voltage_h_v'], _ratedVoltage_HVMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltage_HVMeta);
    }
    if (data.containsKey('rated_voltage_l_v')) {
      context.handle(
          _ratedVoltage_LVMeta,
          ratedVoltage_LV.isAcceptableOrUnknown(
              data['rated_voltage_l_v'], _ratedVoltage_LVMeta));
    } else if (isInserting) {
      context.missing(_ratedVoltage_LVMeta);
    }
    if (data.containsKey('rated_current_h_v')) {
      context.handle(
          _ratedCurrent_HVMeta,
          ratedCurrent_HV.isAcceptableOrUnknown(
              data['rated_current_h_v'], _ratedCurrent_HVMeta));
    } else if (isInserting) {
      context.missing(_ratedCurrent_HVMeta);
    }
    if (data.containsKey('rated_current_l_v')) {
      context.handle(
          _ratedCurrent_LVMeta,
          ratedCurrent_LV.isAcceptableOrUnknown(
              data['rated_current_l_v'], _ratedCurrent_LVMeta));
    } else if (isInserting) {
      context.missing(_ratedCurrent_LVMeta);
    }
    if (data.containsKey('vector_group')) {
      context.handle(
          _vectorGroupMeta,
          vectorGroup.isAcceptableOrUnknown(
              data['vector_group'], _vectorGroupMeta));
    } else if (isInserting) {
      context.missing(_vectorGroupMeta);
    }
    if (data.containsKey('impedance_voltage_h_v_l_v1')) {
      context.handle(
          _impedanceVoltage_HV_LV1Meta,
          impedanceVoltage_HV_LV1.isAcceptableOrUnknown(
              data['impedance_voltage_h_v_l_v1'],
              _impedanceVoltage_HV_LV1Meta));
    } else if (isInserting) {
      context.missing(_impedanceVoltage_HV_LV1Meta);
    }
    if (data.containsKey('impedance_voltage_h_v_l_v2')) {
      context.handle(
          _impedanceVoltage_HV_LV2Meta,
          impedanceVoltage_HV_LV2.isAcceptableOrUnknown(
              data['impedance_voltage_h_v_l_v2'],
              _impedanceVoltage_HV_LV2Meta));
    } else if (isInserting) {
      context.missing(_impedanceVoltage_HV_LV2Meta);
    }
    if (data.containsKey('impedance_voltage_h_v_l_v3')) {
      context.handle(
          _impedanceVoltage_HV_LV3Meta,
          impedanceVoltage_HV_LV3.isAcceptableOrUnknown(
              data['impedance_voltage_h_v_l_v3'],
              _impedanceVoltage_HV_LV3Meta));
    } else if (isInserting) {
      context.missing(_impedanceVoltage_HV_LV3Meta);
    }
    if (data.containsKey('impedance_voltage_h_v_l_v4')) {
      context.handle(
          _impedanceVoltage_HV_LV4Meta,
          impedanceVoltage_HV_LV4.isAcceptableOrUnknown(
              data['impedance_voltage_h_v_l_v4'],
              _impedanceVoltage_HV_LV4Meta));
    } else if (isInserting) {
      context.missing(_impedanceVoltage_HV_LV4Meta);
    }
    if (data.containsKey('impedance_voltage_lv_l_v')) {
      context.handle(
          _impedanceVoltage_Lv_LVMeta,
          impedanceVoltage_Lv_LV.isAcceptableOrUnknown(
              data['impedance_voltage_lv_l_v'], _impedanceVoltage_Lv_LVMeta));
    } else if (isInserting) {
      context.missing(_impedanceVoltage_Lv_LVMeta);
    }
    if (data.containsKey('frequency')) {
      context.handle(_frequencyMeta,
          frequency.isAcceptableOrUnknown(data['frequency'], _frequencyMeta));
    } else if (isInserting) {
      context.missing(_frequencyMeta);
    }
    if (data.containsKey('type_of_cooling')) {
      context.handle(
          _typeOfCoolingMeta,
          typeOfCooling.isAcceptableOrUnknown(
              data['type_of_cooling'], _typeOfCoolingMeta));
    } else if (isInserting) {
      context.missing(_typeOfCoolingMeta);
    }
    if (data.containsKey('no_of_phases')) {
      context.handle(
          _noOfPhasesMeta,
          noOfPhases.isAcceptableOrUnknown(
              data['no_of_phases'], _noOfPhasesMeta));
    } else if (isInserting) {
      context.missing(_noOfPhasesMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('no_of_taps')) {
      context.handle(_noOfTapsMeta,
          noOfTaps.isAcceptableOrUnknown(data['no_of_taps'], _noOfTapsMeta));
    } else if (isInserting) {
      context.missing(_noOfTapsMeta);
    }
    if (data.containsKey('no_of_nominal_taps')) {
      context.handle(
          _noOfNominalTapsMeta,
          noOfNominalTaps.isAcceptableOrUnknown(
              data['no_of_nominal_taps'], _noOfNominalTapsMeta));
    } else if (isInserting) {
      context.missing(_noOfNominalTapsMeta);
    }
    if (data.containsKey('oil_temp')) {
      context.handle(_oilTempMeta,
          oilTemp.isAcceptableOrUnknown(data['oil_temp'], _oilTempMeta));
    } else if (isInserting) {
      context.missing(_oilTempMeta);
    }
    if (data.containsKey('winding_temp')) {
      context.handle(
          _windingTempMeta,
          windingTemp.isAcceptableOrUnknown(
              data['winding_temp'], _windingTempMeta));
    } else if (isInserting) {
      context.missing(_windingTempMeta);
    }
    if (data.containsKey('ambient_temp')) {
      context.handle(
          _ambientTempMeta,
          ambientTemp.isAcceptableOrUnknown(
              data['ambient_temp'], _ambientTempMeta));
    } else if (isInserting) {
      context.missing(_ambientTempMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ItLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ItLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ItLocalDatasourceImplTable createAlias(String alias) {
    return $ItLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ItIrLocalData extends DataClass implements Insertable<ItIrLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double hvE_60;
  final double hvE_600;
  final double hvLv1_60;
  final double hvLv1_600;
  final double hvLv2_60;
  final double hvLv2_600;
  final double hvLv3_60;
  final double hvLv3_600;
  final double hvLv4_60;
  final double hvLv4_600;
  final double lv1E;
  final double lv2E;
  final double lv3E;
  final double lv4E;
  final double lv1Lv2;
  final double lv1Lv3;
  final double lv1Lv4;
  final double lv2Lv3;
  final double lv2Lv4;
  final double lv3Lv4;
  final double lv4Lv1;
  ItIrLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.hvE_60,
      @required this.hvE_600,
      @required this.hvLv1_60,
      @required this.hvLv1_600,
      @required this.hvLv2_60,
      @required this.hvLv2_600,
      @required this.hvLv3_60,
      @required this.hvLv3_600,
      @required this.hvLv4_60,
      @required this.hvLv4_600,
      @required this.lv1E,
      @required this.lv2E,
      @required this.lv3E,
      @required this.lv4E,
      @required this.lv1Lv2,
      @required this.lv1Lv3,
      @required this.lv1Lv4,
      @required this.lv2Lv3,
      @required this.lv2Lv4,
      @required this.lv3Lv4,
      @required this.lv4Lv1});
  factory ItIrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ItIrLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      hvE_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_60']),
      hvE_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_e_600']),
      hvLv1_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv1_60']),
      hvLv1_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv1_600']),
      hvLv2_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv2_60']),
      hvLv2_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv2_600']),
      hvLv3_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv3_60']),
      hvLv3_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv3_600']),
      hvLv4_60: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv4_60']),
      hvLv4_600: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv4_600']),
      lv1E: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_e']),
      lv2E: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv2_e']),
      lv3E: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv3_e']),
      lv4E: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv4_e']),
      lv1Lv2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_lv2']),
      lv1Lv3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_lv3']),
      lv1Lv4: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_lv4']),
      lv2Lv3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv2_lv3']),
      lv2Lv4: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv2_lv4']),
      lv3Lv4: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv3_lv4']),
      lv4Lv1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv4_lv1']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || hvE_60 != null) {
      map['hv_e_60'] = Variable<double>(hvE_60);
    }
    if (!nullToAbsent || hvE_600 != null) {
      map['hv_e_600'] = Variable<double>(hvE_600);
    }
    if (!nullToAbsent || hvLv1_60 != null) {
      map['hv_lv1_60'] = Variable<double>(hvLv1_60);
    }
    if (!nullToAbsent || hvLv1_600 != null) {
      map['hv_lv1_600'] = Variable<double>(hvLv1_600);
    }
    if (!nullToAbsent || hvLv2_60 != null) {
      map['hv_lv2_60'] = Variable<double>(hvLv2_60);
    }
    if (!nullToAbsent || hvLv2_600 != null) {
      map['hv_lv2_600'] = Variable<double>(hvLv2_600);
    }
    if (!nullToAbsent || hvLv3_60 != null) {
      map['hv_lv3_60'] = Variable<double>(hvLv3_60);
    }
    if (!nullToAbsent || hvLv3_600 != null) {
      map['hv_lv3_600'] = Variable<double>(hvLv3_600);
    }
    if (!nullToAbsent || hvLv4_60 != null) {
      map['hv_lv4_60'] = Variable<double>(hvLv4_60);
    }
    if (!nullToAbsent || hvLv4_600 != null) {
      map['hv_lv4_600'] = Variable<double>(hvLv4_600);
    }
    if (!nullToAbsent || lv1E != null) {
      map['lv1_e'] = Variable<double>(lv1E);
    }
    if (!nullToAbsent || lv2E != null) {
      map['lv2_e'] = Variable<double>(lv2E);
    }
    if (!nullToAbsent || lv3E != null) {
      map['lv3_e'] = Variable<double>(lv3E);
    }
    if (!nullToAbsent || lv4E != null) {
      map['lv4_e'] = Variable<double>(lv4E);
    }
    if (!nullToAbsent || lv1Lv2 != null) {
      map['lv1_lv2'] = Variable<double>(lv1Lv2);
    }
    if (!nullToAbsent || lv1Lv3 != null) {
      map['lv1_lv3'] = Variable<double>(lv1Lv3);
    }
    if (!nullToAbsent || lv1Lv4 != null) {
      map['lv1_lv4'] = Variable<double>(lv1Lv4);
    }
    if (!nullToAbsent || lv2Lv3 != null) {
      map['lv2_lv3'] = Variable<double>(lv2Lv3);
    }
    if (!nullToAbsent || lv2Lv4 != null) {
      map['lv2_lv4'] = Variable<double>(lv2Lv4);
    }
    if (!nullToAbsent || lv3Lv4 != null) {
      map['lv3_lv4'] = Variable<double>(lv3Lv4);
    }
    if (!nullToAbsent || lv4Lv1 != null) {
      map['lv4_lv1'] = Variable<double>(lv4Lv1);
    }
    return map;
  }

  ItIrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ItIrLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      hvE_60:
          hvE_60 == null && nullToAbsent ? const Value.absent() : Value(hvE_60),
      hvE_600: hvE_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvE_600),
      hvLv1_60: hvLv1_60 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLv1_60),
      hvLv1_600: hvLv1_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLv1_600),
      hvLv2_60: hvLv2_60 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLv2_60),
      hvLv2_600: hvLv2_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLv2_600),
      hvLv3_60: hvLv3_60 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLv3_60),
      hvLv3_600: hvLv3_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLv3_600),
      hvLv4_60: hvLv4_60 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLv4_60),
      hvLv4_600: hvLv4_600 == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLv4_600),
      lv1E: lv1E == null && nullToAbsent ? const Value.absent() : Value(lv1E),
      lv2E: lv2E == null && nullToAbsent ? const Value.absent() : Value(lv2E),
      lv3E: lv3E == null && nullToAbsent ? const Value.absent() : Value(lv3E),
      lv4E: lv4E == null && nullToAbsent ? const Value.absent() : Value(lv4E),
      lv1Lv2:
          lv1Lv2 == null && nullToAbsent ? const Value.absent() : Value(lv1Lv2),
      lv1Lv3:
          lv1Lv3 == null && nullToAbsent ? const Value.absent() : Value(lv1Lv3),
      lv1Lv4:
          lv1Lv4 == null && nullToAbsent ? const Value.absent() : Value(lv1Lv4),
      lv2Lv3:
          lv2Lv3 == null && nullToAbsent ? const Value.absent() : Value(lv2Lv3),
      lv2Lv4:
          lv2Lv4 == null && nullToAbsent ? const Value.absent() : Value(lv2Lv4),
      lv3Lv4:
          lv3Lv4 == null && nullToAbsent ? const Value.absent() : Value(lv3Lv4),
      lv4Lv1:
          lv4Lv1 == null && nullToAbsent ? const Value.absent() : Value(lv4Lv1),
    );
  }

  factory ItIrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ItIrLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      hvE_60: serializer.fromJson<double>(json['hvE_60']),
      hvE_600: serializer.fromJson<double>(json['hvE_600']),
      hvLv1_60: serializer.fromJson<double>(json['hvLv1_60']),
      hvLv1_600: serializer.fromJson<double>(json['hvLv1_600']),
      hvLv2_60: serializer.fromJson<double>(json['hvLv2_60']),
      hvLv2_600: serializer.fromJson<double>(json['hvLv2_600']),
      hvLv3_60: serializer.fromJson<double>(json['hvLv3_60']),
      hvLv3_600: serializer.fromJson<double>(json['hvLv3_600']),
      hvLv4_60: serializer.fromJson<double>(json['hvLv4_60']),
      hvLv4_600: serializer.fromJson<double>(json['hvLv4_600']),
      lv1E: serializer.fromJson<double>(json['lv1E']),
      lv2E: serializer.fromJson<double>(json['lv2E']),
      lv3E: serializer.fromJson<double>(json['lv3E']),
      lv4E: serializer.fromJson<double>(json['lv4E']),
      lv1Lv2: serializer.fromJson<double>(json['lv1Lv2']),
      lv1Lv3: serializer.fromJson<double>(json['lv1Lv3']),
      lv1Lv4: serializer.fromJson<double>(json['lv1Lv4']),
      lv2Lv3: serializer.fromJson<double>(json['lv2Lv3']),
      lv2Lv4: serializer.fromJson<double>(json['lv2Lv4']),
      lv3Lv4: serializer.fromJson<double>(json['lv3Lv4']),
      lv4Lv1: serializer.fromJson<double>(json['lv4Lv1']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'hvE_60': serializer.toJson<double>(hvE_60),
      'hvE_600': serializer.toJson<double>(hvE_600),
      'hvLv1_60': serializer.toJson<double>(hvLv1_60),
      'hvLv1_600': serializer.toJson<double>(hvLv1_600),
      'hvLv2_60': serializer.toJson<double>(hvLv2_60),
      'hvLv2_600': serializer.toJson<double>(hvLv2_600),
      'hvLv3_60': serializer.toJson<double>(hvLv3_60),
      'hvLv3_600': serializer.toJson<double>(hvLv3_600),
      'hvLv4_60': serializer.toJson<double>(hvLv4_60),
      'hvLv4_600': serializer.toJson<double>(hvLv4_600),
      'lv1E': serializer.toJson<double>(lv1E),
      'lv2E': serializer.toJson<double>(lv2E),
      'lv3E': serializer.toJson<double>(lv3E),
      'lv4E': serializer.toJson<double>(lv4E),
      'lv1Lv2': serializer.toJson<double>(lv1Lv2),
      'lv1Lv3': serializer.toJson<double>(lv1Lv3),
      'lv1Lv4': serializer.toJson<double>(lv1Lv4),
      'lv2Lv3': serializer.toJson<double>(lv2Lv3),
      'lv2Lv4': serializer.toJson<double>(lv2Lv4),
      'lv3Lv4': serializer.toJson<double>(lv3Lv4),
      'lv4Lv1': serializer.toJson<double>(lv4Lv1),
    };
  }

  ItIrLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double hvE_60,
          double hvE_600,
          double hvLv1_60,
          double hvLv1_600,
          double hvLv2_60,
          double hvLv2_600,
          double hvLv3_60,
          double hvLv3_600,
          double hvLv4_60,
          double hvLv4_600,
          double lv1E,
          double lv2E,
          double lv3E,
          double lv4E,
          double lv1Lv2,
          double lv1Lv3,
          double lv1Lv4,
          double lv2Lv3,
          double lv2Lv4,
          double lv3Lv4,
          double lv4Lv1}) =>
      ItIrLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        hvE_60: hvE_60 ?? this.hvE_60,
        hvE_600: hvE_600 ?? this.hvE_600,
        hvLv1_60: hvLv1_60 ?? this.hvLv1_60,
        hvLv1_600: hvLv1_600 ?? this.hvLv1_600,
        hvLv2_60: hvLv2_60 ?? this.hvLv2_60,
        hvLv2_600: hvLv2_600 ?? this.hvLv2_600,
        hvLv3_60: hvLv3_60 ?? this.hvLv3_60,
        hvLv3_600: hvLv3_600 ?? this.hvLv3_600,
        hvLv4_60: hvLv4_60 ?? this.hvLv4_60,
        hvLv4_600: hvLv4_600 ?? this.hvLv4_600,
        lv1E: lv1E ?? this.lv1E,
        lv2E: lv2E ?? this.lv2E,
        lv3E: lv3E ?? this.lv3E,
        lv4E: lv4E ?? this.lv4E,
        lv1Lv2: lv1Lv2 ?? this.lv1Lv2,
        lv1Lv3: lv1Lv3 ?? this.lv1Lv3,
        lv1Lv4: lv1Lv4 ?? this.lv1Lv4,
        lv2Lv3: lv2Lv3 ?? this.lv2Lv3,
        lv2Lv4: lv2Lv4 ?? this.lv2Lv4,
        lv3Lv4: lv3Lv4 ?? this.lv3Lv4,
        lv4Lv1: lv4Lv1 ?? this.lv4Lv1,
      );
  @override
  String toString() {
    return (StringBuffer('ItIrLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('hvE_60: $hvE_60, ')
          ..write('hvE_600: $hvE_600, ')
          ..write('hvLv1_60: $hvLv1_60, ')
          ..write('hvLv1_600: $hvLv1_600, ')
          ..write('hvLv2_60: $hvLv2_60, ')
          ..write('hvLv2_600: $hvLv2_600, ')
          ..write('hvLv3_60: $hvLv3_60, ')
          ..write('hvLv3_600: $hvLv3_600, ')
          ..write('hvLv4_60: $hvLv4_60, ')
          ..write('hvLv4_600: $hvLv4_600, ')
          ..write('lv1E: $lv1E, ')
          ..write('lv2E: $lv2E, ')
          ..write('lv3E: $lv3E, ')
          ..write('lv4E: $lv4E, ')
          ..write('lv1Lv2: $lv1Lv2, ')
          ..write('lv1Lv3: $lv1Lv3, ')
          ..write('lv1Lv4: $lv1Lv4, ')
          ..write('lv2Lv3: $lv2Lv3, ')
          ..write('lv2Lv4: $lv2Lv4, ')
          ..write('lv3Lv4: $lv3Lv4, ')
          ..write('lv4Lv1: $lv4Lv1')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        hvE_60,
        hvE_600,
        hvLv1_60,
        hvLv1_600,
        hvLv2_60,
        hvLv2_600,
        hvLv3_60,
        hvLv3_600,
        hvLv4_60,
        hvLv4_600,
        lv1E,
        lv2E,
        lv3E,
        lv4E,
        lv1Lv2,
        lv1Lv3,
        lv1Lv4,
        lv2Lv3,
        lv2Lv4,
        lv3Lv4,
        lv4Lv1
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ItIrLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.hvE_60 == this.hvE_60 &&
          other.hvE_600 == this.hvE_600 &&
          other.hvLv1_60 == this.hvLv1_60 &&
          other.hvLv1_600 == this.hvLv1_600 &&
          other.hvLv2_60 == this.hvLv2_60 &&
          other.hvLv2_600 == this.hvLv2_600 &&
          other.hvLv3_60 == this.hvLv3_60 &&
          other.hvLv3_600 == this.hvLv3_600 &&
          other.hvLv4_60 == this.hvLv4_60 &&
          other.hvLv4_600 == this.hvLv4_600 &&
          other.lv1E == this.lv1E &&
          other.lv2E == this.lv2E &&
          other.lv3E == this.lv3E &&
          other.lv4E == this.lv4E &&
          other.lv1Lv2 == this.lv1Lv2 &&
          other.lv1Lv3 == this.lv1Lv3 &&
          other.lv1Lv4 == this.lv1Lv4 &&
          other.lv2Lv3 == this.lv2Lv3 &&
          other.lv2Lv4 == this.lv2Lv4 &&
          other.lv3Lv4 == this.lv3Lv4 &&
          other.lv4Lv1 == this.lv4Lv1);
}

class ItIrLocalDatasourceImplCompanion extends UpdateCompanion<ItIrLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> hvE_60;
  final Value<double> hvE_600;
  final Value<double> hvLv1_60;
  final Value<double> hvLv1_600;
  final Value<double> hvLv2_60;
  final Value<double> hvLv2_600;
  final Value<double> hvLv3_60;
  final Value<double> hvLv3_600;
  final Value<double> hvLv4_60;
  final Value<double> hvLv4_600;
  final Value<double> lv1E;
  final Value<double> lv2E;
  final Value<double> lv3E;
  final Value<double> lv4E;
  final Value<double> lv1Lv2;
  final Value<double> lv1Lv3;
  final Value<double> lv1Lv4;
  final Value<double> lv2Lv3;
  final Value<double> lv2Lv4;
  final Value<double> lv3Lv4;
  final Value<double> lv4Lv1;
  const ItIrLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.hvE_60 = const Value.absent(),
    this.hvE_600 = const Value.absent(),
    this.hvLv1_60 = const Value.absent(),
    this.hvLv1_600 = const Value.absent(),
    this.hvLv2_60 = const Value.absent(),
    this.hvLv2_600 = const Value.absent(),
    this.hvLv3_60 = const Value.absent(),
    this.hvLv3_600 = const Value.absent(),
    this.hvLv4_60 = const Value.absent(),
    this.hvLv4_600 = const Value.absent(),
    this.lv1E = const Value.absent(),
    this.lv2E = const Value.absent(),
    this.lv3E = const Value.absent(),
    this.lv4E = const Value.absent(),
    this.lv1Lv2 = const Value.absent(),
    this.lv1Lv3 = const Value.absent(),
    this.lv1Lv4 = const Value.absent(),
    this.lv2Lv3 = const Value.absent(),
    this.lv2Lv4 = const Value.absent(),
    this.lv3Lv4 = const Value.absent(),
    this.lv4Lv1 = const Value.absent(),
  });
  ItIrLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double hvE_60,
    @required double hvE_600,
    @required double hvLv1_60,
    @required double hvLv1_600,
    @required double hvLv2_60,
    @required double hvLv2_600,
    @required double hvLv3_60,
    @required double hvLv3_600,
    @required double hvLv4_60,
    @required double hvLv4_600,
    @required double lv1E,
    @required double lv2E,
    @required double lv3E,
    @required double lv4E,
    @required double lv1Lv2,
    @required double lv1Lv3,
    @required double lv1Lv4,
    @required double lv2Lv3,
    @required double lv2Lv4,
    @required double lv3Lv4,
    @required double lv4Lv1,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        hvE_60 = Value(hvE_60),
        hvE_600 = Value(hvE_600),
        hvLv1_60 = Value(hvLv1_60),
        hvLv1_600 = Value(hvLv1_600),
        hvLv2_60 = Value(hvLv2_60),
        hvLv2_600 = Value(hvLv2_600),
        hvLv3_60 = Value(hvLv3_60),
        hvLv3_600 = Value(hvLv3_600),
        hvLv4_60 = Value(hvLv4_60),
        hvLv4_600 = Value(hvLv4_600),
        lv1E = Value(lv1E),
        lv2E = Value(lv2E),
        lv3E = Value(lv3E),
        lv4E = Value(lv4E),
        lv1Lv2 = Value(lv1Lv2),
        lv1Lv3 = Value(lv1Lv3),
        lv1Lv4 = Value(lv1Lv4),
        lv2Lv3 = Value(lv2Lv3),
        lv2Lv4 = Value(lv2Lv4),
        lv3Lv4 = Value(lv3Lv4),
        lv4Lv1 = Value(lv4Lv1);
  static Insertable<ItIrLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> hvE_60,
    Expression<double> hvE_600,
    Expression<double> hvLv1_60,
    Expression<double> hvLv1_600,
    Expression<double> hvLv2_60,
    Expression<double> hvLv2_600,
    Expression<double> hvLv3_60,
    Expression<double> hvLv3_600,
    Expression<double> hvLv4_60,
    Expression<double> hvLv4_600,
    Expression<double> lv1E,
    Expression<double> lv2E,
    Expression<double> lv3E,
    Expression<double> lv4E,
    Expression<double> lv1Lv2,
    Expression<double> lv1Lv3,
    Expression<double> lv1Lv4,
    Expression<double> lv2Lv3,
    Expression<double> lv2Lv4,
    Expression<double> lv3Lv4,
    Expression<double> lv4Lv1,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (hvE_60 != null) 'hv_e_60': hvE_60,
      if (hvE_600 != null) 'hv_e_600': hvE_600,
      if (hvLv1_60 != null) 'hv_lv1_60': hvLv1_60,
      if (hvLv1_600 != null) 'hv_lv1_600': hvLv1_600,
      if (hvLv2_60 != null) 'hv_lv2_60': hvLv2_60,
      if (hvLv2_600 != null) 'hv_lv2_600': hvLv2_600,
      if (hvLv3_60 != null) 'hv_lv3_60': hvLv3_60,
      if (hvLv3_600 != null) 'hv_lv3_600': hvLv3_600,
      if (hvLv4_60 != null) 'hv_lv4_60': hvLv4_60,
      if (hvLv4_600 != null) 'hv_lv4_600': hvLv4_600,
      if (lv1E != null) 'lv1_e': lv1E,
      if (lv2E != null) 'lv2_e': lv2E,
      if (lv3E != null) 'lv3_e': lv3E,
      if (lv4E != null) 'lv4_e': lv4E,
      if (lv1Lv2 != null) 'lv1_lv2': lv1Lv2,
      if (lv1Lv3 != null) 'lv1_lv3': lv1Lv3,
      if (lv1Lv4 != null) 'lv1_lv4': lv1Lv4,
      if (lv2Lv3 != null) 'lv2_lv3': lv2Lv3,
      if (lv2Lv4 != null) 'lv2_lv4': lv2Lv4,
      if (lv3Lv4 != null) 'lv3_lv4': lv3Lv4,
      if (lv4Lv1 != null) 'lv4_lv1': lv4Lv1,
    });
  }

  ItIrLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> hvE_60,
      Value<double> hvE_600,
      Value<double> hvLv1_60,
      Value<double> hvLv1_600,
      Value<double> hvLv2_60,
      Value<double> hvLv2_600,
      Value<double> hvLv3_60,
      Value<double> hvLv3_600,
      Value<double> hvLv4_60,
      Value<double> hvLv4_600,
      Value<double> lv1E,
      Value<double> lv2E,
      Value<double> lv3E,
      Value<double> lv4E,
      Value<double> lv1Lv2,
      Value<double> lv1Lv3,
      Value<double> lv1Lv4,
      Value<double> lv2Lv3,
      Value<double> lv2Lv4,
      Value<double> lv3Lv4,
      Value<double> lv4Lv1}) {
    return ItIrLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      hvE_60: hvE_60 ?? this.hvE_60,
      hvE_600: hvE_600 ?? this.hvE_600,
      hvLv1_60: hvLv1_60 ?? this.hvLv1_60,
      hvLv1_600: hvLv1_600 ?? this.hvLv1_600,
      hvLv2_60: hvLv2_60 ?? this.hvLv2_60,
      hvLv2_600: hvLv2_600 ?? this.hvLv2_600,
      hvLv3_60: hvLv3_60 ?? this.hvLv3_60,
      hvLv3_600: hvLv3_600 ?? this.hvLv3_600,
      hvLv4_60: hvLv4_60 ?? this.hvLv4_60,
      hvLv4_600: hvLv4_600 ?? this.hvLv4_600,
      lv1E: lv1E ?? this.lv1E,
      lv2E: lv2E ?? this.lv2E,
      lv3E: lv3E ?? this.lv3E,
      lv4E: lv4E ?? this.lv4E,
      lv1Lv2: lv1Lv2 ?? this.lv1Lv2,
      lv1Lv3: lv1Lv3 ?? this.lv1Lv3,
      lv1Lv4: lv1Lv4 ?? this.lv1Lv4,
      lv2Lv3: lv2Lv3 ?? this.lv2Lv3,
      lv2Lv4: lv2Lv4 ?? this.lv2Lv4,
      lv3Lv4: lv3Lv4 ?? this.lv3Lv4,
      lv4Lv1: lv4Lv1 ?? this.lv4Lv1,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (hvE_60.present) {
      map['hv_e_60'] = Variable<double>(hvE_60.value);
    }
    if (hvE_600.present) {
      map['hv_e_600'] = Variable<double>(hvE_600.value);
    }
    if (hvLv1_60.present) {
      map['hv_lv1_60'] = Variable<double>(hvLv1_60.value);
    }
    if (hvLv1_600.present) {
      map['hv_lv1_600'] = Variable<double>(hvLv1_600.value);
    }
    if (hvLv2_60.present) {
      map['hv_lv2_60'] = Variable<double>(hvLv2_60.value);
    }
    if (hvLv2_600.present) {
      map['hv_lv2_600'] = Variable<double>(hvLv2_600.value);
    }
    if (hvLv3_60.present) {
      map['hv_lv3_60'] = Variable<double>(hvLv3_60.value);
    }
    if (hvLv3_600.present) {
      map['hv_lv3_600'] = Variable<double>(hvLv3_600.value);
    }
    if (hvLv4_60.present) {
      map['hv_lv4_60'] = Variable<double>(hvLv4_60.value);
    }
    if (hvLv4_600.present) {
      map['hv_lv4_600'] = Variable<double>(hvLv4_600.value);
    }
    if (lv1E.present) {
      map['lv1_e'] = Variable<double>(lv1E.value);
    }
    if (lv2E.present) {
      map['lv2_e'] = Variable<double>(lv2E.value);
    }
    if (lv3E.present) {
      map['lv3_e'] = Variable<double>(lv3E.value);
    }
    if (lv4E.present) {
      map['lv4_e'] = Variable<double>(lv4E.value);
    }
    if (lv1Lv2.present) {
      map['lv1_lv2'] = Variable<double>(lv1Lv2.value);
    }
    if (lv1Lv3.present) {
      map['lv1_lv3'] = Variable<double>(lv1Lv3.value);
    }
    if (lv1Lv4.present) {
      map['lv1_lv4'] = Variable<double>(lv1Lv4.value);
    }
    if (lv2Lv3.present) {
      map['lv2_lv3'] = Variable<double>(lv2Lv3.value);
    }
    if (lv2Lv4.present) {
      map['lv2_lv4'] = Variable<double>(lv2Lv4.value);
    }
    if (lv3Lv4.present) {
      map['lv3_lv4'] = Variable<double>(lv3Lv4.value);
    }
    if (lv4Lv1.present) {
      map['lv4_lv1'] = Variable<double>(lv4Lv1.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ItIrLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('hvE_60: $hvE_60, ')
          ..write('hvE_600: $hvE_600, ')
          ..write('hvLv1_60: $hvLv1_60, ')
          ..write('hvLv1_600: $hvLv1_600, ')
          ..write('hvLv2_60: $hvLv2_60, ')
          ..write('hvLv2_600: $hvLv2_600, ')
          ..write('hvLv3_60: $hvLv3_60, ')
          ..write('hvLv3_600: $hvLv3_600, ')
          ..write('hvLv4_60: $hvLv4_60, ')
          ..write('hvLv4_600: $hvLv4_600, ')
          ..write('lv1E: $lv1E, ')
          ..write('lv2E: $lv2E, ')
          ..write('lv3E: $lv3E, ')
          ..write('lv4E: $lv4E, ')
          ..write('lv1Lv2: $lv1Lv2, ')
          ..write('lv1Lv3: $lv1Lv3, ')
          ..write('lv1Lv4: $lv1Lv4, ')
          ..write('lv2Lv3: $lv2Lv3, ')
          ..write('lv2Lv4: $lv2Lv4, ')
          ..write('lv3Lv4: $lv3Lv4, ')
          ..write('lv4Lv1: $lv4Lv1')
          ..write(')'))
        .toString();
  }
}

class $ItIrLocalDatasourceImplTable extends ItIrLocalDatasourceImpl
    with TableInfo<$ItIrLocalDatasourceImplTable, ItIrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ItIrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _hvE_60Meta = const VerificationMeta('hvE_60');
  GeneratedColumn<double> _hvE_60;
  @override
  GeneratedColumn<double> get hvE_60 =>
      _hvE_60 ??= GeneratedColumn<double>('hv_e_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvE_600Meta = const VerificationMeta('hvE_600');
  GeneratedColumn<double> _hvE_600;
  @override
  GeneratedColumn<double> get hvE_600 =>
      _hvE_600 ??= GeneratedColumn<double>('hv_e_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLv1_60Meta = const VerificationMeta('hvLv1_60');
  GeneratedColumn<double> _hvLv1_60;
  @override
  GeneratedColumn<double> get hvLv1_60 =>
      _hvLv1_60 ??= GeneratedColumn<double>('hv_lv1_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLv1_600Meta = const VerificationMeta('hvLv1_600');
  GeneratedColumn<double> _hvLv1_600;
  @override
  GeneratedColumn<double> get hvLv1_600 =>
      _hvLv1_600 ??= GeneratedColumn<double>('hv_lv1_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLv2_60Meta = const VerificationMeta('hvLv2_60');
  GeneratedColumn<double> _hvLv2_60;
  @override
  GeneratedColumn<double> get hvLv2_60 =>
      _hvLv2_60 ??= GeneratedColumn<double>('hv_lv2_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLv2_600Meta = const VerificationMeta('hvLv2_600');
  GeneratedColumn<double> _hvLv2_600;
  @override
  GeneratedColumn<double> get hvLv2_600 =>
      _hvLv2_600 ??= GeneratedColumn<double>('hv_lv2_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLv3_60Meta = const VerificationMeta('hvLv3_60');
  GeneratedColumn<double> _hvLv3_60;
  @override
  GeneratedColumn<double> get hvLv3_60 =>
      _hvLv3_60 ??= GeneratedColumn<double>('hv_lv3_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLv3_600Meta = const VerificationMeta('hvLv3_600');
  GeneratedColumn<double> _hvLv3_600;
  @override
  GeneratedColumn<double> get hvLv3_600 =>
      _hvLv3_600 ??= GeneratedColumn<double>('hv_lv3_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLv4_60Meta = const VerificationMeta('hvLv4_60');
  GeneratedColumn<double> _hvLv4_60;
  @override
  GeneratedColumn<double> get hvLv4_60 =>
      _hvLv4_60 ??= GeneratedColumn<double>('hv_lv4_60', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hvLv4_600Meta = const VerificationMeta('hvLv4_600');
  GeneratedColumn<double> _hvLv4_600;
  @override
  GeneratedColumn<double> get hvLv4_600 =>
      _hvLv4_600 ??= GeneratedColumn<double>('hv_lv4_600', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv1EMeta = const VerificationMeta('lv1E');
  GeneratedColumn<double> _lv1E;
  @override
  GeneratedColumn<double> get lv1E =>
      _lv1E ??= GeneratedColumn<double>('lv1_e', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv2EMeta = const VerificationMeta('lv2E');
  GeneratedColumn<double> _lv2E;
  @override
  GeneratedColumn<double> get lv2E =>
      _lv2E ??= GeneratedColumn<double>('lv2_e', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv3EMeta = const VerificationMeta('lv3E');
  GeneratedColumn<double> _lv3E;
  @override
  GeneratedColumn<double> get lv3E =>
      _lv3E ??= GeneratedColumn<double>('lv3_e', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv4EMeta = const VerificationMeta('lv4E');
  GeneratedColumn<double> _lv4E;
  @override
  GeneratedColumn<double> get lv4E =>
      _lv4E ??= GeneratedColumn<double>('lv4_e', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv1Lv2Meta = const VerificationMeta('lv1Lv2');
  GeneratedColumn<double> _lv1Lv2;
  @override
  GeneratedColumn<double> get lv1Lv2 =>
      _lv1Lv2 ??= GeneratedColumn<double>('lv1_lv2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv1Lv3Meta = const VerificationMeta('lv1Lv3');
  GeneratedColumn<double> _lv1Lv3;
  @override
  GeneratedColumn<double> get lv1Lv3 =>
      _lv1Lv3 ??= GeneratedColumn<double>('lv1_lv3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv1Lv4Meta = const VerificationMeta('lv1Lv4');
  GeneratedColumn<double> _lv1Lv4;
  @override
  GeneratedColumn<double> get lv1Lv4 =>
      _lv1Lv4 ??= GeneratedColumn<double>('lv1_lv4', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv2Lv3Meta = const VerificationMeta('lv2Lv3');
  GeneratedColumn<double> _lv2Lv3;
  @override
  GeneratedColumn<double> get lv2Lv3 =>
      _lv2Lv3 ??= GeneratedColumn<double>('lv2_lv3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv2Lv4Meta = const VerificationMeta('lv2Lv4');
  GeneratedColumn<double> _lv2Lv4;
  @override
  GeneratedColumn<double> get lv2Lv4 =>
      _lv2Lv4 ??= GeneratedColumn<double>('lv2_lv4', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv3Lv4Meta = const VerificationMeta('lv3Lv4');
  GeneratedColumn<double> _lv3Lv4;
  @override
  GeneratedColumn<double> get lv3Lv4 =>
      _lv3Lv4 ??= GeneratedColumn<double>('lv3_lv4', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv4Lv1Meta = const VerificationMeta('lv4Lv1');
  GeneratedColumn<double> _lv4Lv1;
  @override
  GeneratedColumn<double> get lv4Lv1 =>
      _lv4Lv1 ??= GeneratedColumn<double>('lv4_lv1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        hvE_60,
        hvE_600,
        hvLv1_60,
        hvLv1_600,
        hvLv2_60,
        hvLv2_600,
        hvLv3_60,
        hvLv3_600,
        hvLv4_60,
        hvLv4_600,
        lv1E,
        lv2E,
        lv3E,
        lv4E,
        lv1Lv2,
        lv1Lv3,
        lv1Lv4,
        lv2Lv3,
        lv2Lv4,
        lv3Lv4,
        lv4Lv1
      ];
  @override
  String get aliasedName => _alias ?? 'it_ir_local_datasource_impl';
  @override
  String get actualTableName => 'it_ir_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ItIrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('hv_e_60')) {
      context.handle(_hvE_60Meta,
          hvE_60.isAcceptableOrUnknown(data['hv_e_60'], _hvE_60Meta));
    } else if (isInserting) {
      context.missing(_hvE_60Meta);
    }
    if (data.containsKey('hv_e_600')) {
      context.handle(_hvE_600Meta,
          hvE_600.isAcceptableOrUnknown(data['hv_e_600'], _hvE_600Meta));
    } else if (isInserting) {
      context.missing(_hvE_600Meta);
    }
    if (data.containsKey('hv_lv1_60')) {
      context.handle(_hvLv1_60Meta,
          hvLv1_60.isAcceptableOrUnknown(data['hv_lv1_60'], _hvLv1_60Meta));
    } else if (isInserting) {
      context.missing(_hvLv1_60Meta);
    }
    if (data.containsKey('hv_lv1_600')) {
      context.handle(_hvLv1_600Meta,
          hvLv1_600.isAcceptableOrUnknown(data['hv_lv1_600'], _hvLv1_600Meta));
    } else if (isInserting) {
      context.missing(_hvLv1_600Meta);
    }
    if (data.containsKey('hv_lv2_60')) {
      context.handle(_hvLv2_60Meta,
          hvLv2_60.isAcceptableOrUnknown(data['hv_lv2_60'], _hvLv2_60Meta));
    } else if (isInserting) {
      context.missing(_hvLv2_60Meta);
    }
    if (data.containsKey('hv_lv2_600')) {
      context.handle(_hvLv2_600Meta,
          hvLv2_600.isAcceptableOrUnknown(data['hv_lv2_600'], _hvLv2_600Meta));
    } else if (isInserting) {
      context.missing(_hvLv2_600Meta);
    }
    if (data.containsKey('hv_lv3_60')) {
      context.handle(_hvLv3_60Meta,
          hvLv3_60.isAcceptableOrUnknown(data['hv_lv3_60'], _hvLv3_60Meta));
    } else if (isInserting) {
      context.missing(_hvLv3_60Meta);
    }
    if (data.containsKey('hv_lv3_600')) {
      context.handle(_hvLv3_600Meta,
          hvLv3_600.isAcceptableOrUnknown(data['hv_lv3_600'], _hvLv3_600Meta));
    } else if (isInserting) {
      context.missing(_hvLv3_600Meta);
    }
    if (data.containsKey('hv_lv4_60')) {
      context.handle(_hvLv4_60Meta,
          hvLv4_60.isAcceptableOrUnknown(data['hv_lv4_60'], _hvLv4_60Meta));
    } else if (isInserting) {
      context.missing(_hvLv4_60Meta);
    }
    if (data.containsKey('hv_lv4_600')) {
      context.handle(_hvLv4_600Meta,
          hvLv4_600.isAcceptableOrUnknown(data['hv_lv4_600'], _hvLv4_600Meta));
    } else if (isInserting) {
      context.missing(_hvLv4_600Meta);
    }
    if (data.containsKey('lv1_e')) {
      context.handle(
          _lv1EMeta, lv1E.isAcceptableOrUnknown(data['lv1_e'], _lv1EMeta));
    } else if (isInserting) {
      context.missing(_lv1EMeta);
    }
    if (data.containsKey('lv2_e')) {
      context.handle(
          _lv2EMeta, lv2E.isAcceptableOrUnknown(data['lv2_e'], _lv2EMeta));
    } else if (isInserting) {
      context.missing(_lv2EMeta);
    }
    if (data.containsKey('lv3_e')) {
      context.handle(
          _lv3EMeta, lv3E.isAcceptableOrUnknown(data['lv3_e'], _lv3EMeta));
    } else if (isInserting) {
      context.missing(_lv3EMeta);
    }
    if (data.containsKey('lv4_e')) {
      context.handle(
          _lv4EMeta, lv4E.isAcceptableOrUnknown(data['lv4_e'], _lv4EMeta));
    } else if (isInserting) {
      context.missing(_lv4EMeta);
    }
    if (data.containsKey('lv1_lv2')) {
      context.handle(_lv1Lv2Meta,
          lv1Lv2.isAcceptableOrUnknown(data['lv1_lv2'], _lv1Lv2Meta));
    } else if (isInserting) {
      context.missing(_lv1Lv2Meta);
    }
    if (data.containsKey('lv1_lv3')) {
      context.handle(_lv1Lv3Meta,
          lv1Lv3.isAcceptableOrUnknown(data['lv1_lv3'], _lv1Lv3Meta));
    } else if (isInserting) {
      context.missing(_lv1Lv3Meta);
    }
    if (data.containsKey('lv1_lv4')) {
      context.handle(_lv1Lv4Meta,
          lv1Lv4.isAcceptableOrUnknown(data['lv1_lv4'], _lv1Lv4Meta));
    } else if (isInserting) {
      context.missing(_lv1Lv4Meta);
    }
    if (data.containsKey('lv2_lv3')) {
      context.handle(_lv2Lv3Meta,
          lv2Lv3.isAcceptableOrUnknown(data['lv2_lv3'], _lv2Lv3Meta));
    } else if (isInserting) {
      context.missing(_lv2Lv3Meta);
    }
    if (data.containsKey('lv2_lv4')) {
      context.handle(_lv2Lv4Meta,
          lv2Lv4.isAcceptableOrUnknown(data['lv2_lv4'], _lv2Lv4Meta));
    } else if (isInserting) {
      context.missing(_lv2Lv4Meta);
    }
    if (data.containsKey('lv3_lv4')) {
      context.handle(_lv3Lv4Meta,
          lv3Lv4.isAcceptableOrUnknown(data['lv3_lv4'], _lv3Lv4Meta));
    } else if (isInserting) {
      context.missing(_lv3Lv4Meta);
    }
    if (data.containsKey('lv4_lv1')) {
      context.handle(_lv4Lv1Meta,
          lv4Lv1.isAcceptableOrUnknown(data['lv4_lv1'], _lv4Lv1Meta));
    } else if (isInserting) {
      context.missing(_lv4Lv1Meta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ItIrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ItIrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ItIrLocalDatasourceImplTable createAlias(String alias) {
    return $ItIrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ItWrLocalData extends DataClass implements Insertable<ItWrLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double uV;
  final double vW;
  final double wU;
  final String tapPosition;
  final String hvLvOpt;
  ItWrLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.uV,
      @required this.vW,
      @required this.wU,
      @required this.tapPosition,
      @required this.hvLvOpt});
  factory ItWrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ItWrLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      uV: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}u_v']),
      vW: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}v_w']),
      wU: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}w_u']),
      tapPosition: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hvLvOpt: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_lv_opt']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || uV != null) {
      map['u_v'] = Variable<double>(uV);
    }
    if (!nullToAbsent || vW != null) {
      map['v_w'] = Variable<double>(vW);
    }
    if (!nullToAbsent || wU != null) {
      map['w_u'] = Variable<double>(wU);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<String>(tapPosition);
    }
    if (!nullToAbsent || hvLvOpt != null) {
      map['hv_lv_opt'] = Variable<String>(hvLvOpt);
    }
    return map;
  }

  ItWrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ItWrLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      uV: uV == null && nullToAbsent ? const Value.absent() : Value(uV),
      vW: vW == null && nullToAbsent ? const Value.absent() : Value(vW),
      wU: wU == null && nullToAbsent ? const Value.absent() : Value(wU),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hvLvOpt: hvLvOpt == null && nullToAbsent
          ? const Value.absent()
          : Value(hvLvOpt),
    );
  }

  factory ItWrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ItWrLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      uV: serializer.fromJson<double>(json['uV']),
      vW: serializer.fromJson<double>(json['vW']),
      wU: serializer.fromJson<double>(json['wU']),
      tapPosition: serializer.fromJson<String>(json['tapPosition']),
      hvLvOpt: serializer.fromJson<String>(json['hvLvOpt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'uV': serializer.toJson<double>(uV),
      'vW': serializer.toJson<double>(vW),
      'wU': serializer.toJson<double>(wU),
      'tapPosition': serializer.toJson<String>(tapPosition),
      'hvLvOpt': serializer.toJson<String>(hvLvOpt),
    };
  }

  ItWrLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double uV,
          double vW,
          double wU,
          String tapPosition,
          String hvLvOpt}) =>
      ItWrLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        uV: uV ?? this.uV,
        vW: vW ?? this.vW,
        wU: wU ?? this.wU,
        tapPosition: tapPosition ?? this.tapPosition,
        hvLvOpt: hvLvOpt ?? this.hvLvOpt,
      );
  @override
  String toString() {
    return (StringBuffer('ItWrLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('uV: $uV, ')
          ..write('vW: $vW, ')
          ..write('wU: $wU, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hvLvOpt: $hvLvOpt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, equipmentUsed,
      updateDate, uV, vW, wU, tapPosition, hvLvOpt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ItWrLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.uV == this.uV &&
          other.vW == this.vW &&
          other.wU == this.wU &&
          other.tapPosition == this.tapPosition &&
          other.hvLvOpt == this.hvLvOpt);
}

class ItWrLocalDatasourceImplCompanion extends UpdateCompanion<ItWrLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> uV;
  final Value<double> vW;
  final Value<double> wU;
  final Value<String> tapPosition;
  final Value<String> hvLvOpt;
  const ItWrLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.uV = const Value.absent(),
    this.vW = const Value.absent(),
    this.wU = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hvLvOpt = const Value.absent(),
  });
  ItWrLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double uV,
    @required double vW,
    @required double wU,
    @required String tapPosition,
    @required String hvLvOpt,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        uV = Value(uV),
        vW = Value(vW),
        wU = Value(wU),
        tapPosition = Value(tapPosition),
        hvLvOpt = Value(hvLvOpt);
  static Insertable<ItWrLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> uV,
    Expression<double> vW,
    Expression<double> wU,
    Expression<String> tapPosition,
    Expression<String> hvLvOpt,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (uV != null) 'u_v': uV,
      if (vW != null) 'v_w': vW,
      if (wU != null) 'w_u': wU,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hvLvOpt != null) 'hv_lv_opt': hvLvOpt,
    });
  }

  ItWrLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> uV,
      Value<double> vW,
      Value<double> wU,
      Value<String> tapPosition,
      Value<String> hvLvOpt}) {
    return ItWrLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      uV: uV ?? this.uV,
      vW: vW ?? this.vW,
      wU: wU ?? this.wU,
      tapPosition: tapPosition ?? this.tapPosition,
      hvLvOpt: hvLvOpt ?? this.hvLvOpt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (uV.present) {
      map['u_v'] = Variable<double>(uV.value);
    }
    if (vW.present) {
      map['v_w'] = Variable<double>(vW.value);
    }
    if (wU.present) {
      map['w_u'] = Variable<double>(wU.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<String>(tapPosition.value);
    }
    if (hvLvOpt.present) {
      map['hv_lv_opt'] = Variable<String>(hvLvOpt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ItWrLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('uV: $uV, ')
          ..write('vW: $vW, ')
          ..write('wU: $wU, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hvLvOpt: $hvLvOpt')
          ..write(')'))
        .toString();
  }
}

class $ItWrLocalDatasourceImplTable extends ItWrLocalDatasourceImpl
    with TableInfo<$ItWrLocalDatasourceImplTable, ItWrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ItWrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _uVMeta = const VerificationMeta('uV');
  GeneratedColumn<double> _uV;
  @override
  GeneratedColumn<double> get uV =>
      _uV ??= GeneratedColumn<double>('u_v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _vWMeta = const VerificationMeta('vW');
  GeneratedColumn<double> _vW;
  @override
  GeneratedColumn<double> get vW =>
      _vW ??= GeneratedColumn<double>('v_w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _wUMeta = const VerificationMeta('wU');
  GeneratedColumn<double> _wU;
  @override
  GeneratedColumn<double> get wU =>
      _wU ??= GeneratedColumn<double>('w_u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<String> _tapPosition;
  @override
  GeneratedColumn<String> get tapPosition => _tapPosition ??=
      GeneratedColumn<String>('tap_position', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _hvLvOptMeta = const VerificationMeta('hvLvOpt');
  GeneratedColumn<String> _hvLvOpt;
  @override
  GeneratedColumn<String> get hvLvOpt => _hvLvOpt ??= GeneratedColumn<String>(
      'hv_lv_opt', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        uV,
        vW,
        wU,
        tapPosition,
        hvLvOpt
      ];
  @override
  String get aliasedName => _alias ?? 'it_wr_local_datasource_impl';
  @override
  String get actualTableName => 'it_wr_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ItWrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('u_v')) {
      context.handle(_uVMeta, uV.isAcceptableOrUnknown(data['u_v'], _uVMeta));
    } else if (isInserting) {
      context.missing(_uVMeta);
    }
    if (data.containsKey('v_w')) {
      context.handle(_vWMeta, vW.isAcceptableOrUnknown(data['v_w'], _vWMeta));
    } else if (isInserting) {
      context.missing(_vWMeta);
    }
    if (data.containsKey('w_u')) {
      context.handle(_wUMeta, wU.isAcceptableOrUnknown(data['w_u'], _wUMeta));
    } else if (isInserting) {
      context.missing(_wUMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_lv_opt')) {
      context.handle(_hvLvOptMeta,
          hvLvOpt.isAcceptableOrUnknown(data['hv_lv_opt'], _hvLvOptMeta));
    } else if (isInserting) {
      context.missing(_hvLvOptMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ItWrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ItWrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ItWrLocalDatasourceImplTable createAlias(String alias) {
    return $ItWrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ItRLocalData extends DataClass implements Insertable<ItRLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final String tapPosition;
  final double hv_uv;
  final double hv_vw;
  final double hv_wu;
  final double lv1_uv;
  final double lv1_vw;
  final double lv1_wu;
  final double lv2_uv;
  final double lv2_vw;
  final double lv2_wu;
  final double lv3_uv;
  final double lv3_vw;
  final double lv3_wu;
  final double lv4_uv;
  final double lv4_vw;
  final double lv4_wu;
  ItRLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.tapPosition,
      @required this.hv_uv,
      @required this.hv_vw,
      @required this.hv_wu,
      @required this.lv1_uv,
      @required this.lv1_vw,
      @required this.lv1_wu,
      @required this.lv2_uv,
      @required this.lv2_vw,
      @required this.lv2_wu,
      @required this.lv3_uv,
      @required this.lv3_vw,
      @required this.lv3_wu,
      @required this.lv4_uv,
      @required this.lv4_vw,
      @required this.lv4_wu});
  factory ItRLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ItRLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      tapPosition: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
      hv_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_uv']),
      hv_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_vw']),
      hv_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}hv_wu']),
      lv1_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_uv']),
      lv1_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_vw']),
      lv1_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_wu']),
      lv2_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv2_uv']),
      lv2_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv2_vw']),
      lv2_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv2_wu']),
      lv3_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv3_uv']),
      lv3_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv3_vw']),
      lv3_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv3_wu']),
      lv4_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv4_uv']),
      lv4_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv4_vw']),
      lv4_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv4_wu']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<String>(tapPosition);
    }
    if (!nullToAbsent || hv_uv != null) {
      map['hv_uv'] = Variable<double>(hv_uv);
    }
    if (!nullToAbsent || hv_vw != null) {
      map['hv_vw'] = Variable<double>(hv_vw);
    }
    if (!nullToAbsent || hv_wu != null) {
      map['hv_wu'] = Variable<double>(hv_wu);
    }
    if (!nullToAbsent || lv1_uv != null) {
      map['lv1_uv'] = Variable<double>(lv1_uv);
    }
    if (!nullToAbsent || lv1_vw != null) {
      map['lv1_vw'] = Variable<double>(lv1_vw);
    }
    if (!nullToAbsent || lv1_wu != null) {
      map['lv1_wu'] = Variable<double>(lv1_wu);
    }
    if (!nullToAbsent || lv2_uv != null) {
      map['lv2_uv'] = Variable<double>(lv2_uv);
    }
    if (!nullToAbsent || lv2_vw != null) {
      map['lv2_vw'] = Variable<double>(lv2_vw);
    }
    if (!nullToAbsent || lv2_wu != null) {
      map['lv2_wu'] = Variable<double>(lv2_wu);
    }
    if (!nullToAbsent || lv3_uv != null) {
      map['lv3_uv'] = Variable<double>(lv3_uv);
    }
    if (!nullToAbsent || lv3_vw != null) {
      map['lv3_vw'] = Variable<double>(lv3_vw);
    }
    if (!nullToAbsent || lv3_wu != null) {
      map['lv3_wu'] = Variable<double>(lv3_wu);
    }
    if (!nullToAbsent || lv4_uv != null) {
      map['lv4_uv'] = Variable<double>(lv4_uv);
    }
    if (!nullToAbsent || lv4_vw != null) {
      map['lv4_vw'] = Variable<double>(lv4_vw);
    }
    if (!nullToAbsent || lv4_wu != null) {
      map['lv4_wu'] = Variable<double>(lv4_wu);
    }
    return map;
  }

  ItRLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ItRLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
      hv_uv:
          hv_uv == null && nullToAbsent ? const Value.absent() : Value(hv_uv),
      hv_vw:
          hv_vw == null && nullToAbsent ? const Value.absent() : Value(hv_vw),
      hv_wu:
          hv_wu == null && nullToAbsent ? const Value.absent() : Value(hv_wu),
      lv1_uv:
          lv1_uv == null && nullToAbsent ? const Value.absent() : Value(lv1_uv),
      lv1_vw:
          lv1_vw == null && nullToAbsent ? const Value.absent() : Value(lv1_vw),
      lv1_wu:
          lv1_wu == null && nullToAbsent ? const Value.absent() : Value(lv1_wu),
      lv2_uv:
          lv2_uv == null && nullToAbsent ? const Value.absent() : Value(lv2_uv),
      lv2_vw:
          lv2_vw == null && nullToAbsent ? const Value.absent() : Value(lv2_vw),
      lv2_wu:
          lv2_wu == null && nullToAbsent ? const Value.absent() : Value(lv2_wu),
      lv3_uv:
          lv3_uv == null && nullToAbsent ? const Value.absent() : Value(lv3_uv),
      lv3_vw:
          lv3_vw == null && nullToAbsent ? const Value.absent() : Value(lv3_vw),
      lv3_wu:
          lv3_wu == null && nullToAbsent ? const Value.absent() : Value(lv3_wu),
      lv4_uv:
          lv4_uv == null && nullToAbsent ? const Value.absent() : Value(lv4_uv),
      lv4_vw:
          lv4_vw == null && nullToAbsent ? const Value.absent() : Value(lv4_vw),
      lv4_wu:
          lv4_wu == null && nullToAbsent ? const Value.absent() : Value(lv4_wu),
    );
  }

  factory ItRLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ItRLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      tapPosition: serializer.fromJson<String>(json['tapPosition']),
      hv_uv: serializer.fromJson<double>(json['hv_uv']),
      hv_vw: serializer.fromJson<double>(json['hv_vw']),
      hv_wu: serializer.fromJson<double>(json['hv_wu']),
      lv1_uv: serializer.fromJson<double>(json['lv1_uv']),
      lv1_vw: serializer.fromJson<double>(json['lv1_vw']),
      lv1_wu: serializer.fromJson<double>(json['lv1_wu']),
      lv2_uv: serializer.fromJson<double>(json['lv2_uv']),
      lv2_vw: serializer.fromJson<double>(json['lv2_vw']),
      lv2_wu: serializer.fromJson<double>(json['lv2_wu']),
      lv3_uv: serializer.fromJson<double>(json['lv3_uv']),
      lv3_vw: serializer.fromJson<double>(json['lv3_vw']),
      lv3_wu: serializer.fromJson<double>(json['lv3_wu']),
      lv4_uv: serializer.fromJson<double>(json['lv4_uv']),
      lv4_vw: serializer.fromJson<double>(json['lv4_vw']),
      lv4_wu: serializer.fromJson<double>(json['lv4_wu']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'tapPosition': serializer.toJson<String>(tapPosition),
      'hv_uv': serializer.toJson<double>(hv_uv),
      'hv_vw': serializer.toJson<double>(hv_vw),
      'hv_wu': serializer.toJson<double>(hv_wu),
      'lv1_uv': serializer.toJson<double>(lv1_uv),
      'lv1_vw': serializer.toJson<double>(lv1_vw),
      'lv1_wu': serializer.toJson<double>(lv1_wu),
      'lv2_uv': serializer.toJson<double>(lv2_uv),
      'lv2_vw': serializer.toJson<double>(lv2_vw),
      'lv2_wu': serializer.toJson<double>(lv2_wu),
      'lv3_uv': serializer.toJson<double>(lv3_uv),
      'lv3_vw': serializer.toJson<double>(lv3_vw),
      'lv3_wu': serializer.toJson<double>(lv3_wu),
      'lv4_uv': serializer.toJson<double>(lv4_uv),
      'lv4_vw': serializer.toJson<double>(lv4_vw),
      'lv4_wu': serializer.toJson<double>(lv4_wu),
    };
  }

  ItRLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          String tapPosition,
          double hv_uv,
          double hv_vw,
          double hv_wu,
          double lv1_uv,
          double lv1_vw,
          double lv1_wu,
          double lv2_uv,
          double lv2_vw,
          double lv2_wu,
          double lv3_uv,
          double lv3_vw,
          double lv3_wu,
          double lv4_uv,
          double lv4_vw,
          double lv4_wu}) =>
      ItRLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        tapPosition: tapPosition ?? this.tapPosition,
        hv_uv: hv_uv ?? this.hv_uv,
        hv_vw: hv_vw ?? this.hv_vw,
        hv_wu: hv_wu ?? this.hv_wu,
        lv1_uv: lv1_uv ?? this.lv1_uv,
        lv1_vw: lv1_vw ?? this.lv1_vw,
        lv1_wu: lv1_wu ?? this.lv1_wu,
        lv2_uv: lv2_uv ?? this.lv2_uv,
        lv2_vw: lv2_vw ?? this.lv2_vw,
        lv2_wu: lv2_wu ?? this.lv2_wu,
        lv3_uv: lv3_uv ?? this.lv3_uv,
        lv3_vw: lv3_vw ?? this.lv3_vw,
        lv3_wu: lv3_wu ?? this.lv3_wu,
        lv4_uv: lv4_uv ?? this.lv4_uv,
        lv4_vw: lv4_vw ?? this.lv4_vw,
        lv4_wu: lv4_wu ?? this.lv4_wu,
      );
  @override
  String toString() {
    return (StringBuffer('ItRLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_uv: $hv_uv, ')
          ..write('hv_vw: $hv_vw, ')
          ..write('hv_wu: $hv_wu, ')
          ..write('lv1_uv: $lv1_uv, ')
          ..write('lv1_vw: $lv1_vw, ')
          ..write('lv1_wu: $lv1_wu, ')
          ..write('lv2_uv: $lv2_uv, ')
          ..write('lv2_vw: $lv2_vw, ')
          ..write('lv2_wu: $lv2_wu, ')
          ..write('lv3_uv: $lv3_uv, ')
          ..write('lv3_vw: $lv3_vw, ')
          ..write('lv3_wu: $lv3_wu, ')
          ..write('lv4_uv: $lv4_uv, ')
          ..write('lv4_vw: $lv4_vw, ')
          ..write('lv4_wu: $lv4_wu')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        tapPosition,
        hv_uv,
        hv_vw,
        hv_wu,
        lv1_uv,
        lv1_vw,
        lv1_wu,
        lv2_uv,
        lv2_vw,
        lv2_wu,
        lv3_uv,
        lv3_vw,
        lv3_wu,
        lv4_uv,
        lv4_vw,
        lv4_wu
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ItRLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.tapPosition == this.tapPosition &&
          other.hv_uv == this.hv_uv &&
          other.hv_vw == this.hv_vw &&
          other.hv_wu == this.hv_wu &&
          other.lv1_uv == this.lv1_uv &&
          other.lv1_vw == this.lv1_vw &&
          other.lv1_wu == this.lv1_wu &&
          other.lv2_uv == this.lv2_uv &&
          other.lv2_vw == this.lv2_vw &&
          other.lv2_wu == this.lv2_wu &&
          other.lv3_uv == this.lv3_uv &&
          other.lv3_vw == this.lv3_vw &&
          other.lv3_wu == this.lv3_wu &&
          other.lv4_uv == this.lv4_uv &&
          other.lv4_vw == this.lv4_vw &&
          other.lv4_wu == this.lv4_wu);
}

class ItRLocalDatasourceImplCompanion extends UpdateCompanion<ItRLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<String> tapPosition;
  final Value<double> hv_uv;
  final Value<double> hv_vw;
  final Value<double> hv_wu;
  final Value<double> lv1_uv;
  final Value<double> lv1_vw;
  final Value<double> lv1_wu;
  final Value<double> lv2_uv;
  final Value<double> lv2_vw;
  final Value<double> lv2_wu;
  final Value<double> lv3_uv;
  final Value<double> lv3_vw;
  final Value<double> lv3_wu;
  final Value<double> lv4_uv;
  final Value<double> lv4_vw;
  final Value<double> lv4_wu;
  const ItRLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.tapPosition = const Value.absent(),
    this.hv_uv = const Value.absent(),
    this.hv_vw = const Value.absent(),
    this.hv_wu = const Value.absent(),
    this.lv1_uv = const Value.absent(),
    this.lv1_vw = const Value.absent(),
    this.lv1_wu = const Value.absent(),
    this.lv2_uv = const Value.absent(),
    this.lv2_vw = const Value.absent(),
    this.lv2_wu = const Value.absent(),
    this.lv3_uv = const Value.absent(),
    this.lv3_vw = const Value.absent(),
    this.lv3_wu = const Value.absent(),
    this.lv4_uv = const Value.absent(),
    this.lv4_vw = const Value.absent(),
    this.lv4_wu = const Value.absent(),
  });
  ItRLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required String tapPosition,
    @required double hv_uv,
    @required double hv_vw,
    @required double hv_wu,
    @required double lv1_uv,
    @required double lv1_vw,
    @required double lv1_wu,
    @required double lv2_uv,
    @required double lv2_vw,
    @required double lv2_wu,
    @required double lv3_uv,
    @required double lv3_vw,
    @required double lv3_wu,
    @required double lv4_uv,
    @required double lv4_vw,
    @required double lv4_wu,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        tapPosition = Value(tapPosition),
        hv_uv = Value(hv_uv),
        hv_vw = Value(hv_vw),
        hv_wu = Value(hv_wu),
        lv1_uv = Value(lv1_uv),
        lv1_vw = Value(lv1_vw),
        lv1_wu = Value(lv1_wu),
        lv2_uv = Value(lv2_uv),
        lv2_vw = Value(lv2_vw),
        lv2_wu = Value(lv2_wu),
        lv3_uv = Value(lv3_uv),
        lv3_vw = Value(lv3_vw),
        lv3_wu = Value(lv3_wu),
        lv4_uv = Value(lv4_uv),
        lv4_vw = Value(lv4_vw),
        lv4_wu = Value(lv4_wu);
  static Insertable<ItRLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<String> tapPosition,
    Expression<double> hv_uv,
    Expression<double> hv_vw,
    Expression<double> hv_wu,
    Expression<double> lv1_uv,
    Expression<double> lv1_vw,
    Expression<double> lv1_wu,
    Expression<double> lv2_uv,
    Expression<double> lv2_vw,
    Expression<double> lv2_wu,
    Expression<double> lv3_uv,
    Expression<double> lv3_vw,
    Expression<double> lv3_wu,
    Expression<double> lv4_uv,
    Expression<double> lv4_vw,
    Expression<double> lv4_wu,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (tapPosition != null) 'tap_position': tapPosition,
      if (hv_uv != null) 'hv_uv': hv_uv,
      if (hv_vw != null) 'hv_vw': hv_vw,
      if (hv_wu != null) 'hv_wu': hv_wu,
      if (lv1_uv != null) 'lv1_uv': lv1_uv,
      if (lv1_vw != null) 'lv1_vw': lv1_vw,
      if (lv1_wu != null) 'lv1_wu': lv1_wu,
      if (lv2_uv != null) 'lv2_uv': lv2_uv,
      if (lv2_vw != null) 'lv2_vw': lv2_vw,
      if (lv2_wu != null) 'lv2_wu': lv2_wu,
      if (lv3_uv != null) 'lv3_uv': lv3_uv,
      if (lv3_vw != null) 'lv3_vw': lv3_vw,
      if (lv3_wu != null) 'lv3_wu': lv3_wu,
      if (lv4_uv != null) 'lv4_uv': lv4_uv,
      if (lv4_vw != null) 'lv4_vw': lv4_vw,
      if (lv4_wu != null) 'lv4_wu': lv4_wu,
    });
  }

  ItRLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<String> tapPosition,
      Value<double> hv_uv,
      Value<double> hv_vw,
      Value<double> hv_wu,
      Value<double> lv1_uv,
      Value<double> lv1_vw,
      Value<double> lv1_wu,
      Value<double> lv2_uv,
      Value<double> lv2_vw,
      Value<double> lv2_wu,
      Value<double> lv3_uv,
      Value<double> lv3_vw,
      Value<double> lv3_wu,
      Value<double> lv4_uv,
      Value<double> lv4_vw,
      Value<double> lv4_wu}) {
    return ItRLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      tapPosition: tapPosition ?? this.tapPosition,
      hv_uv: hv_uv ?? this.hv_uv,
      hv_vw: hv_vw ?? this.hv_vw,
      hv_wu: hv_wu ?? this.hv_wu,
      lv1_uv: lv1_uv ?? this.lv1_uv,
      lv1_vw: lv1_vw ?? this.lv1_vw,
      lv1_wu: lv1_wu ?? this.lv1_wu,
      lv2_uv: lv2_uv ?? this.lv2_uv,
      lv2_vw: lv2_vw ?? this.lv2_vw,
      lv2_wu: lv2_wu ?? this.lv2_wu,
      lv3_uv: lv3_uv ?? this.lv3_uv,
      lv3_vw: lv3_vw ?? this.lv3_vw,
      lv3_wu: lv3_wu ?? this.lv3_wu,
      lv4_uv: lv4_uv ?? this.lv4_uv,
      lv4_vw: lv4_vw ?? this.lv4_vw,
      lv4_wu: lv4_wu ?? this.lv4_wu,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<String>(tapPosition.value);
    }
    if (hv_uv.present) {
      map['hv_uv'] = Variable<double>(hv_uv.value);
    }
    if (hv_vw.present) {
      map['hv_vw'] = Variable<double>(hv_vw.value);
    }
    if (hv_wu.present) {
      map['hv_wu'] = Variable<double>(hv_wu.value);
    }
    if (lv1_uv.present) {
      map['lv1_uv'] = Variable<double>(lv1_uv.value);
    }
    if (lv1_vw.present) {
      map['lv1_vw'] = Variable<double>(lv1_vw.value);
    }
    if (lv1_wu.present) {
      map['lv1_wu'] = Variable<double>(lv1_wu.value);
    }
    if (lv2_uv.present) {
      map['lv2_uv'] = Variable<double>(lv2_uv.value);
    }
    if (lv2_vw.present) {
      map['lv2_vw'] = Variable<double>(lv2_vw.value);
    }
    if (lv2_wu.present) {
      map['lv2_wu'] = Variable<double>(lv2_wu.value);
    }
    if (lv3_uv.present) {
      map['lv3_uv'] = Variable<double>(lv3_uv.value);
    }
    if (lv3_vw.present) {
      map['lv3_vw'] = Variable<double>(lv3_vw.value);
    }
    if (lv3_wu.present) {
      map['lv3_wu'] = Variable<double>(lv3_wu.value);
    }
    if (lv4_uv.present) {
      map['lv4_uv'] = Variable<double>(lv4_uv.value);
    }
    if (lv4_vw.present) {
      map['lv4_vw'] = Variable<double>(lv4_vw.value);
    }
    if (lv4_wu.present) {
      map['lv4_wu'] = Variable<double>(lv4_wu.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ItRLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('tapPosition: $tapPosition, ')
          ..write('hv_uv: $hv_uv, ')
          ..write('hv_vw: $hv_vw, ')
          ..write('hv_wu: $hv_wu, ')
          ..write('lv1_uv: $lv1_uv, ')
          ..write('lv1_vw: $lv1_vw, ')
          ..write('lv1_wu: $lv1_wu, ')
          ..write('lv2_uv: $lv2_uv, ')
          ..write('lv2_vw: $lv2_vw, ')
          ..write('lv2_wu: $lv2_wu, ')
          ..write('lv3_uv: $lv3_uv, ')
          ..write('lv3_vw: $lv3_vw, ')
          ..write('lv3_wu: $lv3_wu, ')
          ..write('lv4_uv: $lv4_uv, ')
          ..write('lv4_vw: $lv4_vw, ')
          ..write('lv4_wu: $lv4_wu')
          ..write(')'))
        .toString();
  }
}

class $ItRLocalDatasourceImplTable extends ItRLocalDatasourceImpl
    with TableInfo<$ItRLocalDatasourceImplTable, ItRLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ItRLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<String> _tapPosition;
  @override
  GeneratedColumn<String> get tapPosition => _tapPosition ??=
      GeneratedColumn<String>('tap_position', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _hv_uvMeta = const VerificationMeta('hv_uv');
  GeneratedColumn<double> _hv_uv;
  @override
  GeneratedColumn<double> get hv_uv =>
      _hv_uv ??= GeneratedColumn<double>('hv_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_vwMeta = const VerificationMeta('hv_vw');
  GeneratedColumn<double> _hv_vw;
  @override
  GeneratedColumn<double> get hv_vw =>
      _hv_vw ??= GeneratedColumn<double>('hv_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _hv_wuMeta = const VerificationMeta('hv_wu');
  GeneratedColumn<double> _hv_wu;
  @override
  GeneratedColumn<double> get hv_wu =>
      _hv_wu ??= GeneratedColumn<double>('hv_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv1_uvMeta = const VerificationMeta('lv1_uv');
  GeneratedColumn<double> _lv1_uv;
  @override
  GeneratedColumn<double> get lv1_uv =>
      _lv1_uv ??= GeneratedColumn<double>('lv1_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv1_vwMeta = const VerificationMeta('lv1_vw');
  GeneratedColumn<double> _lv1_vw;
  @override
  GeneratedColumn<double> get lv1_vw =>
      _lv1_vw ??= GeneratedColumn<double>('lv1_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv1_wuMeta = const VerificationMeta('lv1_wu');
  GeneratedColumn<double> _lv1_wu;
  @override
  GeneratedColumn<double> get lv1_wu =>
      _lv1_wu ??= GeneratedColumn<double>('lv1_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv2_uvMeta = const VerificationMeta('lv2_uv');
  GeneratedColumn<double> _lv2_uv;
  @override
  GeneratedColumn<double> get lv2_uv =>
      _lv2_uv ??= GeneratedColumn<double>('lv2_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv2_vwMeta = const VerificationMeta('lv2_vw');
  GeneratedColumn<double> _lv2_vw;
  @override
  GeneratedColumn<double> get lv2_vw =>
      _lv2_vw ??= GeneratedColumn<double>('lv2_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv2_wuMeta = const VerificationMeta('lv2_wu');
  GeneratedColumn<double> _lv2_wu;
  @override
  GeneratedColumn<double> get lv2_wu =>
      _lv2_wu ??= GeneratedColumn<double>('lv2_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv3_uvMeta = const VerificationMeta('lv3_uv');
  GeneratedColumn<double> _lv3_uv;
  @override
  GeneratedColumn<double> get lv3_uv =>
      _lv3_uv ??= GeneratedColumn<double>('lv3_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv3_vwMeta = const VerificationMeta('lv3_vw');
  GeneratedColumn<double> _lv3_vw;
  @override
  GeneratedColumn<double> get lv3_vw =>
      _lv3_vw ??= GeneratedColumn<double>('lv3_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv3_wuMeta = const VerificationMeta('lv3_wu');
  GeneratedColumn<double> _lv3_wu;
  @override
  GeneratedColumn<double> get lv3_wu =>
      _lv3_wu ??= GeneratedColumn<double>('lv3_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv4_uvMeta = const VerificationMeta('lv4_uv');
  GeneratedColumn<double> _lv4_uv;
  @override
  GeneratedColumn<double> get lv4_uv =>
      _lv4_uv ??= GeneratedColumn<double>('lv4_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv4_vwMeta = const VerificationMeta('lv4_vw');
  GeneratedColumn<double> _lv4_vw;
  @override
  GeneratedColumn<double> get lv4_vw =>
      _lv4_vw ??= GeneratedColumn<double>('lv4_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv4_wuMeta = const VerificationMeta('lv4_wu');
  GeneratedColumn<double> _lv4_wu;
  @override
  GeneratedColumn<double> get lv4_wu =>
      _lv4_wu ??= GeneratedColumn<double>('lv4_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        tapPosition,
        hv_uv,
        hv_vw,
        hv_wu,
        lv1_uv,
        lv1_vw,
        lv1_wu,
        lv2_uv,
        lv2_vw,
        lv2_wu,
        lv3_uv,
        lv3_vw,
        lv3_wu,
        lv4_uv,
        lv4_vw,
        lv4_wu
      ];
  @override
  String get aliasedName => _alias ?? 'it_r_local_datasource_impl';
  @override
  String get actualTableName => 'it_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ItRLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    if (data.containsKey('hv_uv')) {
      context.handle(
          _hv_uvMeta, hv_uv.isAcceptableOrUnknown(data['hv_uv'], _hv_uvMeta));
    } else if (isInserting) {
      context.missing(_hv_uvMeta);
    }
    if (data.containsKey('hv_vw')) {
      context.handle(
          _hv_vwMeta, hv_vw.isAcceptableOrUnknown(data['hv_vw'], _hv_vwMeta));
    } else if (isInserting) {
      context.missing(_hv_vwMeta);
    }
    if (data.containsKey('hv_wu')) {
      context.handle(
          _hv_wuMeta, hv_wu.isAcceptableOrUnknown(data['hv_wu'], _hv_wuMeta));
    } else if (isInserting) {
      context.missing(_hv_wuMeta);
    }
    if (data.containsKey('lv1_uv')) {
      context.handle(_lv1_uvMeta,
          lv1_uv.isAcceptableOrUnknown(data['lv1_uv'], _lv1_uvMeta));
    } else if (isInserting) {
      context.missing(_lv1_uvMeta);
    }
    if (data.containsKey('lv1_vw')) {
      context.handle(_lv1_vwMeta,
          lv1_vw.isAcceptableOrUnknown(data['lv1_vw'], _lv1_vwMeta));
    } else if (isInserting) {
      context.missing(_lv1_vwMeta);
    }
    if (data.containsKey('lv1_wu')) {
      context.handle(_lv1_wuMeta,
          lv1_wu.isAcceptableOrUnknown(data['lv1_wu'], _lv1_wuMeta));
    } else if (isInserting) {
      context.missing(_lv1_wuMeta);
    }
    if (data.containsKey('lv2_uv')) {
      context.handle(_lv2_uvMeta,
          lv2_uv.isAcceptableOrUnknown(data['lv2_uv'], _lv2_uvMeta));
    } else if (isInserting) {
      context.missing(_lv2_uvMeta);
    }
    if (data.containsKey('lv2_vw')) {
      context.handle(_lv2_vwMeta,
          lv2_vw.isAcceptableOrUnknown(data['lv2_vw'], _lv2_vwMeta));
    } else if (isInserting) {
      context.missing(_lv2_vwMeta);
    }
    if (data.containsKey('lv2_wu')) {
      context.handle(_lv2_wuMeta,
          lv2_wu.isAcceptableOrUnknown(data['lv2_wu'], _lv2_wuMeta));
    } else if (isInserting) {
      context.missing(_lv2_wuMeta);
    }
    if (data.containsKey('lv3_uv')) {
      context.handle(_lv3_uvMeta,
          lv3_uv.isAcceptableOrUnknown(data['lv3_uv'], _lv3_uvMeta));
    } else if (isInserting) {
      context.missing(_lv3_uvMeta);
    }
    if (data.containsKey('lv3_vw')) {
      context.handle(_lv3_vwMeta,
          lv3_vw.isAcceptableOrUnknown(data['lv3_vw'], _lv3_vwMeta));
    } else if (isInserting) {
      context.missing(_lv3_vwMeta);
    }
    if (data.containsKey('lv3_wu')) {
      context.handle(_lv3_wuMeta,
          lv3_wu.isAcceptableOrUnknown(data['lv3_wu'], _lv3_wuMeta));
    } else if (isInserting) {
      context.missing(_lv3_wuMeta);
    }
    if (data.containsKey('lv4_uv')) {
      context.handle(_lv4_uvMeta,
          lv4_uv.isAcceptableOrUnknown(data['lv4_uv'], _lv4_uvMeta));
    } else if (isInserting) {
      context.missing(_lv4_uvMeta);
    }
    if (data.containsKey('lv4_vw')) {
      context.handle(_lv4_vwMeta,
          lv4_vw.isAcceptableOrUnknown(data['lv4_vw'], _lv4_vwMeta));
    } else if (isInserting) {
      context.missing(_lv4_vwMeta);
    }
    if (data.containsKey('lv4_wu')) {
      context.handle(_lv4_wuMeta,
          lv4_wu.isAcceptableOrUnknown(data['lv4_wu'], _lv4_wuMeta));
    } else if (isInserting) {
      context.missing(_lv4_wuMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ItRLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ItRLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ItRLocalDatasourceImplTable createAlias(String alias) {
    return $ItRLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ItMcLocalData extends DataClass implements Insertable<ItMcLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double uv;
  final double vw;
  final double wu;
  final double u;
  final double v;
  final double w;
  final String tapPosition;
  ItMcLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.uv,
      @required this.vw,
      @required this.wu,
      @required this.u,
      @required this.v,
      @required this.w,
      @required this.tapPosition});
  factory ItMcLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ItMcLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}uv']),
      vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}vw']),
      wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}wu']),
      u: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}u']),
      v: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}v']),
      w: const RealType().mapFromDatabaseResponse(data['${effectivePrefix}w']),
      tapPosition: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tap_position']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || uv != null) {
      map['uv'] = Variable<double>(uv);
    }
    if (!nullToAbsent || vw != null) {
      map['vw'] = Variable<double>(vw);
    }
    if (!nullToAbsent || wu != null) {
      map['wu'] = Variable<double>(wu);
    }
    if (!nullToAbsent || u != null) {
      map['u'] = Variable<double>(u);
    }
    if (!nullToAbsent || v != null) {
      map['v'] = Variable<double>(v);
    }
    if (!nullToAbsent || w != null) {
      map['w'] = Variable<double>(w);
    }
    if (!nullToAbsent || tapPosition != null) {
      map['tap_position'] = Variable<String>(tapPosition);
    }
    return map;
  }

  ItMcLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ItMcLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      uv: uv == null && nullToAbsent ? const Value.absent() : Value(uv),
      vw: vw == null && nullToAbsent ? const Value.absent() : Value(vw),
      wu: wu == null && nullToAbsent ? const Value.absent() : Value(wu),
      u: u == null && nullToAbsent ? const Value.absent() : Value(u),
      v: v == null && nullToAbsent ? const Value.absent() : Value(v),
      w: w == null && nullToAbsent ? const Value.absent() : Value(w),
      tapPosition: tapPosition == null && nullToAbsent
          ? const Value.absent()
          : Value(tapPosition),
    );
  }

  factory ItMcLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ItMcLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      uv: serializer.fromJson<double>(json['uv']),
      vw: serializer.fromJson<double>(json['vw']),
      wu: serializer.fromJson<double>(json['wu']),
      u: serializer.fromJson<double>(json['u']),
      v: serializer.fromJson<double>(json['v']),
      w: serializer.fromJson<double>(json['w']),
      tapPosition: serializer.fromJson<String>(json['tapPosition']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'uv': serializer.toJson<double>(uv),
      'vw': serializer.toJson<double>(vw),
      'wu': serializer.toJson<double>(wu),
      'u': serializer.toJson<double>(u),
      'v': serializer.toJson<double>(v),
      'w': serializer.toJson<double>(w),
      'tapPosition': serializer.toJson<String>(tapPosition),
    };
  }

  ItMcLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double uv,
          double vw,
          double wu,
          double u,
          double v,
          double w,
          String tapPosition}) =>
      ItMcLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        uv: uv ?? this.uv,
        vw: vw ?? this.vw,
        wu: wu ?? this.wu,
        u: u ?? this.u,
        v: v ?? this.v,
        w: w ?? this.w,
        tapPosition: tapPosition ?? this.tapPosition,
      );
  @override
  String toString() {
    return (StringBuffer('ItMcLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('uv: $uv, ')
          ..write('vw: $vw, ')
          ..write('wu: $wu, ')
          ..write('u: $u, ')
          ..write('v: $v, ')
          ..write('w: $w, ')
          ..write('tapPosition: $tapPosition')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, equipmentUsed,
      updateDate, uv, vw, wu, u, v, w, tapPosition);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ItMcLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.uv == this.uv &&
          other.vw == this.vw &&
          other.wu == this.wu &&
          other.u == this.u &&
          other.v == this.v &&
          other.w == this.w &&
          other.tapPosition == this.tapPosition);
}

class ItMcLocalDatasourceImplCompanion extends UpdateCompanion<ItMcLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> uv;
  final Value<double> vw;
  final Value<double> wu;
  final Value<double> u;
  final Value<double> v;
  final Value<double> w;
  final Value<String> tapPosition;
  const ItMcLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.uv = const Value.absent(),
    this.vw = const Value.absent(),
    this.wu = const Value.absent(),
    this.u = const Value.absent(),
    this.v = const Value.absent(),
    this.w = const Value.absent(),
    this.tapPosition = const Value.absent(),
  });
  ItMcLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double uv,
    @required double vw,
    @required double wu,
    @required double u,
    @required double v,
    @required double w,
    @required String tapPosition,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        uv = Value(uv),
        vw = Value(vw),
        wu = Value(wu),
        u = Value(u),
        v = Value(v),
        w = Value(w),
        tapPosition = Value(tapPosition);
  static Insertable<ItMcLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> uv,
    Expression<double> vw,
    Expression<double> wu,
    Expression<double> u,
    Expression<double> v,
    Expression<double> w,
    Expression<String> tapPosition,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (uv != null) 'uv': uv,
      if (vw != null) 'vw': vw,
      if (wu != null) 'wu': wu,
      if (u != null) 'u': u,
      if (v != null) 'v': v,
      if (w != null) 'w': w,
      if (tapPosition != null) 'tap_position': tapPosition,
    });
  }

  ItMcLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> uv,
      Value<double> vw,
      Value<double> wu,
      Value<double> u,
      Value<double> v,
      Value<double> w,
      Value<String> tapPosition}) {
    return ItMcLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      uv: uv ?? this.uv,
      vw: vw ?? this.vw,
      wu: wu ?? this.wu,
      u: u ?? this.u,
      v: v ?? this.v,
      w: w ?? this.w,
      tapPosition: tapPosition ?? this.tapPosition,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (uv.present) {
      map['uv'] = Variable<double>(uv.value);
    }
    if (vw.present) {
      map['vw'] = Variable<double>(vw.value);
    }
    if (wu.present) {
      map['wu'] = Variable<double>(wu.value);
    }
    if (u.present) {
      map['u'] = Variable<double>(u.value);
    }
    if (v.present) {
      map['v'] = Variable<double>(v.value);
    }
    if (w.present) {
      map['w'] = Variable<double>(w.value);
    }
    if (tapPosition.present) {
      map['tap_position'] = Variable<String>(tapPosition.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ItMcLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('uv: $uv, ')
          ..write('vw: $vw, ')
          ..write('wu: $wu, ')
          ..write('u: $u, ')
          ..write('v: $v, ')
          ..write('w: $w, ')
          ..write('tapPosition: $tapPosition')
          ..write(')'))
        .toString();
  }
}

class $ItMcLocalDatasourceImplTable extends ItMcLocalDatasourceImpl
    with TableInfo<$ItMcLocalDatasourceImplTable, ItMcLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ItMcLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _uvMeta = const VerificationMeta('uv');
  GeneratedColumn<double> _uv;
  @override
  GeneratedColumn<double> get uv =>
      _uv ??= GeneratedColumn<double>('uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _vwMeta = const VerificationMeta('vw');
  GeneratedColumn<double> _vw;
  @override
  GeneratedColumn<double> get vw =>
      _vw ??= GeneratedColumn<double>('vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _wuMeta = const VerificationMeta('wu');
  GeneratedColumn<double> _wu;
  @override
  GeneratedColumn<double> get wu =>
      _wu ??= GeneratedColumn<double>('wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _uMeta = const VerificationMeta('u');
  GeneratedColumn<double> _u;
  @override
  GeneratedColumn<double> get u =>
      _u ??= GeneratedColumn<double>('u', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _vMeta = const VerificationMeta('v');
  GeneratedColumn<double> _v;
  @override
  GeneratedColumn<double> get v =>
      _v ??= GeneratedColumn<double>('v', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _wMeta = const VerificationMeta('w');
  GeneratedColumn<double> _w;
  @override
  GeneratedColumn<double> get w =>
      _w ??= GeneratedColumn<double>('w', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _tapPositionMeta =
      const VerificationMeta('tapPosition');
  GeneratedColumn<String> _tapPosition;
  @override
  GeneratedColumn<String> get tapPosition => _tapPosition ??=
      GeneratedColumn<String>('tap_position', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        uv,
        vw,
        wu,
        u,
        v,
        w,
        tapPosition
      ];
  @override
  String get aliasedName => _alias ?? 'it_mc_local_datasource_impl';
  @override
  String get actualTableName => 'it_mc_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ItMcLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('uv')) {
      context.handle(_uvMeta, uv.isAcceptableOrUnknown(data['uv'], _uvMeta));
    } else if (isInserting) {
      context.missing(_uvMeta);
    }
    if (data.containsKey('vw')) {
      context.handle(_vwMeta, vw.isAcceptableOrUnknown(data['vw'], _vwMeta));
    } else if (isInserting) {
      context.missing(_vwMeta);
    }
    if (data.containsKey('wu')) {
      context.handle(_wuMeta, wu.isAcceptableOrUnknown(data['wu'], _wuMeta));
    } else if (isInserting) {
      context.missing(_wuMeta);
    }
    if (data.containsKey('u')) {
      context.handle(_uMeta, u.isAcceptableOrUnknown(data['u'], _uMeta));
    } else if (isInserting) {
      context.missing(_uMeta);
    }
    if (data.containsKey('v')) {
      context.handle(_vMeta, v.isAcceptableOrUnknown(data['v'], _vMeta));
    } else if (isInserting) {
      context.missing(_vMeta);
    }
    if (data.containsKey('w')) {
      context.handle(_wMeta, w.isAcceptableOrUnknown(data['w'], _wMeta));
    } else if (isInserting) {
      context.missing(_wMeta);
    }
    if (data.containsKey('tap_position')) {
      context.handle(
          _tapPositionMeta,
          tapPosition.isAcceptableOrUnknown(
              data['tap_position'], _tapPositionMeta));
    } else if (isInserting) {
      context.missing(_tapPositionMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ItMcLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ItMcLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ItMcLocalDatasourceImplTable createAlias(String alias) {
    return $ItMcLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ItMbLocalData extends DataClass implements Insertable<ItMbLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double r_hv_uv;
  final double r_hv_vw;
  final double r_hv_wu;
  final double r_lv1_uv;
  final double r_lv1_vw;
  final double r_lv1_wu;
  final double r_lv2_uv;
  final double r_lv2_vw;
  final double r_lv2_wu;
  final double r_lv3_uv;
  final double r_lv3_vw;
  final double r_lv3_wu;
  final double r_lv4_uv;
  final double r_lv4_vw;
  final double r_lv4_wu;
  final double y_hv_uv;
  final double y_hv_vw;
  final double y_hv_wu;
  final double y_lv1_uv;
  final double y_lv1_vw;
  final double y_lv1_wu;
  final double y_lv2_uv;
  final double y_lv2_vw;
  final double y_lv2_wu;
  final double y_lv3_uv;
  final double y_lv3_vw;
  final double y_lv3_wu;
  final double y_lv4_uv;
  final double y_lv4_vw;
  final double y_lv4_wu;
  final double b_hv_uv;
  final double b_hv_vw;
  final double b_hv_wu;
  final double b_lv1_uv;
  final double b_lv1_vw;
  final double b_lv1_wu;
  final double b_lv2_uv;
  final double b_lv2_vw;
  final double b_lv2_wu;
  final double b_lv3_uv;
  final double b_lv3_vw;
  final double b_lv3_wu;
  final double b_lv4_uv;
  final double b_lv4_vw;
  final double b_lv4_wu;
  ItMbLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.r_hv_uv,
      @required this.r_hv_vw,
      @required this.r_hv_wu,
      @required this.r_lv1_uv,
      @required this.r_lv1_vw,
      @required this.r_lv1_wu,
      @required this.r_lv2_uv,
      @required this.r_lv2_vw,
      @required this.r_lv2_wu,
      @required this.r_lv3_uv,
      @required this.r_lv3_vw,
      @required this.r_lv3_wu,
      @required this.r_lv4_uv,
      @required this.r_lv4_vw,
      @required this.r_lv4_wu,
      @required this.y_hv_uv,
      @required this.y_hv_vw,
      @required this.y_hv_wu,
      @required this.y_lv1_uv,
      @required this.y_lv1_vw,
      @required this.y_lv1_wu,
      @required this.y_lv2_uv,
      @required this.y_lv2_vw,
      @required this.y_lv2_wu,
      @required this.y_lv3_uv,
      @required this.y_lv3_vw,
      @required this.y_lv3_wu,
      @required this.y_lv4_uv,
      @required this.y_lv4_vw,
      @required this.y_lv4_wu,
      @required this.b_hv_uv,
      @required this.b_hv_vw,
      @required this.b_hv_wu,
      @required this.b_lv1_uv,
      @required this.b_lv1_vw,
      @required this.b_lv1_wu,
      @required this.b_lv2_uv,
      @required this.b_lv2_vw,
      @required this.b_lv2_wu,
      @required this.b_lv3_uv,
      @required this.b_lv3_vw,
      @required this.b_lv3_wu,
      @required this.b_lv4_uv,
      @required this.b_lv4_vw,
      @required this.b_lv4_wu});
  factory ItMbLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ItMbLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      r_hv_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_hv_uv']),
      r_hv_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_hv_vw']),
      r_hv_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_hv_wu']),
      r_lv1_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv1_uv']),
      r_lv1_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv1_vw']),
      r_lv1_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv1_wu']),
      r_lv2_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv2_uv']),
      r_lv2_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv2_vw']),
      r_lv2_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv2_wu']),
      r_lv3_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv3_uv']),
      r_lv3_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv3_vw']),
      r_lv3_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv3_wu']),
      r_lv4_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv4_uv']),
      r_lv4_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv4_vw']),
      r_lv4_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_lv4_wu']),
      y_hv_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_hv_uv']),
      y_hv_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_hv_vw']),
      y_hv_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_hv_wu']),
      y_lv1_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv1_uv']),
      y_lv1_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv1_vw']),
      y_lv1_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv1_wu']),
      y_lv2_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv2_uv']),
      y_lv2_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv2_vw']),
      y_lv2_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv2_wu']),
      y_lv3_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv3_uv']),
      y_lv3_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv3_vw']),
      y_lv3_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv3_wu']),
      y_lv4_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv4_uv']),
      y_lv4_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv4_vw']),
      y_lv4_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_lv4_wu']),
      b_hv_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_hv_uv']),
      b_hv_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_hv_vw']),
      b_hv_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_hv_wu']),
      b_lv1_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv1_uv']),
      b_lv1_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv1_vw']),
      b_lv1_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv1_wu']),
      b_lv2_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv2_uv']),
      b_lv2_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv2_vw']),
      b_lv2_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv2_wu']),
      b_lv3_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv3_uv']),
      b_lv3_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv3_vw']),
      b_lv3_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv3_wu']),
      b_lv4_uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv4_uv']),
      b_lv4_vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv4_vw']),
      b_lv4_wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_lv4_wu']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || r_hv_uv != null) {
      map['r_hv_uv'] = Variable<double>(r_hv_uv);
    }
    if (!nullToAbsent || r_hv_vw != null) {
      map['r_hv_vw'] = Variable<double>(r_hv_vw);
    }
    if (!nullToAbsent || r_hv_wu != null) {
      map['r_hv_wu'] = Variable<double>(r_hv_wu);
    }
    if (!nullToAbsent || r_lv1_uv != null) {
      map['r_lv1_uv'] = Variable<double>(r_lv1_uv);
    }
    if (!nullToAbsent || r_lv1_vw != null) {
      map['r_lv1_vw'] = Variable<double>(r_lv1_vw);
    }
    if (!nullToAbsent || r_lv1_wu != null) {
      map['r_lv1_wu'] = Variable<double>(r_lv1_wu);
    }
    if (!nullToAbsent || r_lv2_uv != null) {
      map['r_lv2_uv'] = Variable<double>(r_lv2_uv);
    }
    if (!nullToAbsent || r_lv2_vw != null) {
      map['r_lv2_vw'] = Variable<double>(r_lv2_vw);
    }
    if (!nullToAbsent || r_lv2_wu != null) {
      map['r_lv2_wu'] = Variable<double>(r_lv2_wu);
    }
    if (!nullToAbsent || r_lv3_uv != null) {
      map['r_lv3_uv'] = Variable<double>(r_lv3_uv);
    }
    if (!nullToAbsent || r_lv3_vw != null) {
      map['r_lv3_vw'] = Variable<double>(r_lv3_vw);
    }
    if (!nullToAbsent || r_lv3_wu != null) {
      map['r_lv3_wu'] = Variable<double>(r_lv3_wu);
    }
    if (!nullToAbsent || r_lv4_uv != null) {
      map['r_lv4_uv'] = Variable<double>(r_lv4_uv);
    }
    if (!nullToAbsent || r_lv4_vw != null) {
      map['r_lv4_vw'] = Variable<double>(r_lv4_vw);
    }
    if (!nullToAbsent || r_lv4_wu != null) {
      map['r_lv4_wu'] = Variable<double>(r_lv4_wu);
    }
    if (!nullToAbsent || y_hv_uv != null) {
      map['y_hv_uv'] = Variable<double>(y_hv_uv);
    }
    if (!nullToAbsent || y_hv_vw != null) {
      map['y_hv_vw'] = Variable<double>(y_hv_vw);
    }
    if (!nullToAbsent || y_hv_wu != null) {
      map['y_hv_wu'] = Variable<double>(y_hv_wu);
    }
    if (!nullToAbsent || y_lv1_uv != null) {
      map['y_lv1_uv'] = Variable<double>(y_lv1_uv);
    }
    if (!nullToAbsent || y_lv1_vw != null) {
      map['y_lv1_vw'] = Variable<double>(y_lv1_vw);
    }
    if (!nullToAbsent || y_lv1_wu != null) {
      map['y_lv1_wu'] = Variable<double>(y_lv1_wu);
    }
    if (!nullToAbsent || y_lv2_uv != null) {
      map['y_lv2_uv'] = Variable<double>(y_lv2_uv);
    }
    if (!nullToAbsent || y_lv2_vw != null) {
      map['y_lv2_vw'] = Variable<double>(y_lv2_vw);
    }
    if (!nullToAbsent || y_lv2_wu != null) {
      map['y_lv2_wu'] = Variable<double>(y_lv2_wu);
    }
    if (!nullToAbsent || y_lv3_uv != null) {
      map['y_lv3_uv'] = Variable<double>(y_lv3_uv);
    }
    if (!nullToAbsent || y_lv3_vw != null) {
      map['y_lv3_vw'] = Variable<double>(y_lv3_vw);
    }
    if (!nullToAbsent || y_lv3_wu != null) {
      map['y_lv3_wu'] = Variable<double>(y_lv3_wu);
    }
    if (!nullToAbsent || y_lv4_uv != null) {
      map['y_lv4_uv'] = Variable<double>(y_lv4_uv);
    }
    if (!nullToAbsent || y_lv4_vw != null) {
      map['y_lv4_vw'] = Variable<double>(y_lv4_vw);
    }
    if (!nullToAbsent || y_lv4_wu != null) {
      map['y_lv4_wu'] = Variable<double>(y_lv4_wu);
    }
    if (!nullToAbsent || b_hv_uv != null) {
      map['b_hv_uv'] = Variable<double>(b_hv_uv);
    }
    if (!nullToAbsent || b_hv_vw != null) {
      map['b_hv_vw'] = Variable<double>(b_hv_vw);
    }
    if (!nullToAbsent || b_hv_wu != null) {
      map['b_hv_wu'] = Variable<double>(b_hv_wu);
    }
    if (!nullToAbsent || b_lv1_uv != null) {
      map['b_lv1_uv'] = Variable<double>(b_lv1_uv);
    }
    if (!nullToAbsent || b_lv1_vw != null) {
      map['b_lv1_vw'] = Variable<double>(b_lv1_vw);
    }
    if (!nullToAbsent || b_lv1_wu != null) {
      map['b_lv1_wu'] = Variable<double>(b_lv1_wu);
    }
    if (!nullToAbsent || b_lv2_uv != null) {
      map['b_lv2_uv'] = Variable<double>(b_lv2_uv);
    }
    if (!nullToAbsent || b_lv2_vw != null) {
      map['b_lv2_vw'] = Variable<double>(b_lv2_vw);
    }
    if (!nullToAbsent || b_lv2_wu != null) {
      map['b_lv2_wu'] = Variable<double>(b_lv2_wu);
    }
    if (!nullToAbsent || b_lv3_uv != null) {
      map['b_lv3_uv'] = Variable<double>(b_lv3_uv);
    }
    if (!nullToAbsent || b_lv3_vw != null) {
      map['b_lv3_vw'] = Variable<double>(b_lv3_vw);
    }
    if (!nullToAbsent || b_lv3_wu != null) {
      map['b_lv3_wu'] = Variable<double>(b_lv3_wu);
    }
    if (!nullToAbsent || b_lv4_uv != null) {
      map['b_lv4_uv'] = Variable<double>(b_lv4_uv);
    }
    if (!nullToAbsent || b_lv4_vw != null) {
      map['b_lv4_vw'] = Variable<double>(b_lv4_vw);
    }
    if (!nullToAbsent || b_lv4_wu != null) {
      map['b_lv4_wu'] = Variable<double>(b_lv4_wu);
    }
    return map;
  }

  ItMbLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ItMbLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      r_hv_uv: r_hv_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(r_hv_uv),
      r_hv_vw: r_hv_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(r_hv_vw),
      r_hv_wu: r_hv_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(r_hv_wu),
      r_lv1_uv: r_lv1_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv1_uv),
      r_lv1_vw: r_lv1_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv1_vw),
      r_lv1_wu: r_lv1_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv1_wu),
      r_lv2_uv: r_lv2_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv2_uv),
      r_lv2_vw: r_lv2_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv2_vw),
      r_lv2_wu: r_lv2_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv2_wu),
      r_lv3_uv: r_lv3_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv3_uv),
      r_lv3_vw: r_lv3_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv3_vw),
      r_lv3_wu: r_lv3_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv3_wu),
      r_lv4_uv: r_lv4_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv4_uv),
      r_lv4_vw: r_lv4_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv4_vw),
      r_lv4_wu: r_lv4_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(r_lv4_wu),
      y_hv_uv: y_hv_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(y_hv_uv),
      y_hv_vw: y_hv_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(y_hv_vw),
      y_hv_wu: y_hv_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(y_hv_wu),
      y_lv1_uv: y_lv1_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv1_uv),
      y_lv1_vw: y_lv1_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv1_vw),
      y_lv1_wu: y_lv1_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv1_wu),
      y_lv2_uv: y_lv2_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv2_uv),
      y_lv2_vw: y_lv2_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv2_vw),
      y_lv2_wu: y_lv2_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv2_wu),
      y_lv3_uv: y_lv3_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv3_uv),
      y_lv3_vw: y_lv3_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv3_vw),
      y_lv3_wu: y_lv3_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv3_wu),
      y_lv4_uv: y_lv4_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv4_uv),
      y_lv4_vw: y_lv4_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv4_vw),
      y_lv4_wu: y_lv4_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(y_lv4_wu),
      b_hv_uv: b_hv_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(b_hv_uv),
      b_hv_vw: b_hv_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(b_hv_vw),
      b_hv_wu: b_hv_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(b_hv_wu),
      b_lv1_uv: b_lv1_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv1_uv),
      b_lv1_vw: b_lv1_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv1_vw),
      b_lv1_wu: b_lv1_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv1_wu),
      b_lv2_uv: b_lv2_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv2_uv),
      b_lv2_vw: b_lv2_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv2_vw),
      b_lv2_wu: b_lv2_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv2_wu),
      b_lv3_uv: b_lv3_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv3_uv),
      b_lv3_vw: b_lv3_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv3_vw),
      b_lv3_wu: b_lv3_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv3_wu),
      b_lv4_uv: b_lv4_uv == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv4_uv),
      b_lv4_vw: b_lv4_vw == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv4_vw),
      b_lv4_wu: b_lv4_wu == null && nullToAbsent
          ? const Value.absent()
          : Value(b_lv4_wu),
    );
  }

  factory ItMbLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ItMbLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      r_hv_uv: serializer.fromJson<double>(json['r_hv_uv']),
      r_hv_vw: serializer.fromJson<double>(json['r_hv_vw']),
      r_hv_wu: serializer.fromJson<double>(json['r_hv_wu']),
      r_lv1_uv: serializer.fromJson<double>(json['r_lv1_uv']),
      r_lv1_vw: serializer.fromJson<double>(json['r_lv1_vw']),
      r_lv1_wu: serializer.fromJson<double>(json['r_lv1_wu']),
      r_lv2_uv: serializer.fromJson<double>(json['r_lv2_uv']),
      r_lv2_vw: serializer.fromJson<double>(json['r_lv2_vw']),
      r_lv2_wu: serializer.fromJson<double>(json['r_lv2_wu']),
      r_lv3_uv: serializer.fromJson<double>(json['r_lv3_uv']),
      r_lv3_vw: serializer.fromJson<double>(json['r_lv3_vw']),
      r_lv3_wu: serializer.fromJson<double>(json['r_lv3_wu']),
      r_lv4_uv: serializer.fromJson<double>(json['r_lv4_uv']),
      r_lv4_vw: serializer.fromJson<double>(json['r_lv4_vw']),
      r_lv4_wu: serializer.fromJson<double>(json['r_lv4_wu']),
      y_hv_uv: serializer.fromJson<double>(json['y_hv_uv']),
      y_hv_vw: serializer.fromJson<double>(json['y_hv_vw']),
      y_hv_wu: serializer.fromJson<double>(json['y_hv_wu']),
      y_lv1_uv: serializer.fromJson<double>(json['y_lv1_uv']),
      y_lv1_vw: serializer.fromJson<double>(json['y_lv1_vw']),
      y_lv1_wu: serializer.fromJson<double>(json['y_lv1_wu']),
      y_lv2_uv: serializer.fromJson<double>(json['y_lv2_uv']),
      y_lv2_vw: serializer.fromJson<double>(json['y_lv2_vw']),
      y_lv2_wu: serializer.fromJson<double>(json['y_lv2_wu']),
      y_lv3_uv: serializer.fromJson<double>(json['y_lv3_uv']),
      y_lv3_vw: serializer.fromJson<double>(json['y_lv3_vw']),
      y_lv3_wu: serializer.fromJson<double>(json['y_lv3_wu']),
      y_lv4_uv: serializer.fromJson<double>(json['y_lv4_uv']),
      y_lv4_vw: serializer.fromJson<double>(json['y_lv4_vw']),
      y_lv4_wu: serializer.fromJson<double>(json['y_lv4_wu']),
      b_hv_uv: serializer.fromJson<double>(json['b_hv_uv']),
      b_hv_vw: serializer.fromJson<double>(json['b_hv_vw']),
      b_hv_wu: serializer.fromJson<double>(json['b_hv_wu']),
      b_lv1_uv: serializer.fromJson<double>(json['b_lv1_uv']),
      b_lv1_vw: serializer.fromJson<double>(json['b_lv1_vw']),
      b_lv1_wu: serializer.fromJson<double>(json['b_lv1_wu']),
      b_lv2_uv: serializer.fromJson<double>(json['b_lv2_uv']),
      b_lv2_vw: serializer.fromJson<double>(json['b_lv2_vw']),
      b_lv2_wu: serializer.fromJson<double>(json['b_lv2_wu']),
      b_lv3_uv: serializer.fromJson<double>(json['b_lv3_uv']),
      b_lv3_vw: serializer.fromJson<double>(json['b_lv3_vw']),
      b_lv3_wu: serializer.fromJson<double>(json['b_lv3_wu']),
      b_lv4_uv: serializer.fromJson<double>(json['b_lv4_uv']),
      b_lv4_vw: serializer.fromJson<double>(json['b_lv4_vw']),
      b_lv4_wu: serializer.fromJson<double>(json['b_lv4_wu']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'r_hv_uv': serializer.toJson<double>(r_hv_uv),
      'r_hv_vw': serializer.toJson<double>(r_hv_vw),
      'r_hv_wu': serializer.toJson<double>(r_hv_wu),
      'r_lv1_uv': serializer.toJson<double>(r_lv1_uv),
      'r_lv1_vw': serializer.toJson<double>(r_lv1_vw),
      'r_lv1_wu': serializer.toJson<double>(r_lv1_wu),
      'r_lv2_uv': serializer.toJson<double>(r_lv2_uv),
      'r_lv2_vw': serializer.toJson<double>(r_lv2_vw),
      'r_lv2_wu': serializer.toJson<double>(r_lv2_wu),
      'r_lv3_uv': serializer.toJson<double>(r_lv3_uv),
      'r_lv3_vw': serializer.toJson<double>(r_lv3_vw),
      'r_lv3_wu': serializer.toJson<double>(r_lv3_wu),
      'r_lv4_uv': serializer.toJson<double>(r_lv4_uv),
      'r_lv4_vw': serializer.toJson<double>(r_lv4_vw),
      'r_lv4_wu': serializer.toJson<double>(r_lv4_wu),
      'y_hv_uv': serializer.toJson<double>(y_hv_uv),
      'y_hv_vw': serializer.toJson<double>(y_hv_vw),
      'y_hv_wu': serializer.toJson<double>(y_hv_wu),
      'y_lv1_uv': serializer.toJson<double>(y_lv1_uv),
      'y_lv1_vw': serializer.toJson<double>(y_lv1_vw),
      'y_lv1_wu': serializer.toJson<double>(y_lv1_wu),
      'y_lv2_uv': serializer.toJson<double>(y_lv2_uv),
      'y_lv2_vw': serializer.toJson<double>(y_lv2_vw),
      'y_lv2_wu': serializer.toJson<double>(y_lv2_wu),
      'y_lv3_uv': serializer.toJson<double>(y_lv3_uv),
      'y_lv3_vw': serializer.toJson<double>(y_lv3_vw),
      'y_lv3_wu': serializer.toJson<double>(y_lv3_wu),
      'y_lv4_uv': serializer.toJson<double>(y_lv4_uv),
      'y_lv4_vw': serializer.toJson<double>(y_lv4_vw),
      'y_lv4_wu': serializer.toJson<double>(y_lv4_wu),
      'b_hv_uv': serializer.toJson<double>(b_hv_uv),
      'b_hv_vw': serializer.toJson<double>(b_hv_vw),
      'b_hv_wu': serializer.toJson<double>(b_hv_wu),
      'b_lv1_uv': serializer.toJson<double>(b_lv1_uv),
      'b_lv1_vw': serializer.toJson<double>(b_lv1_vw),
      'b_lv1_wu': serializer.toJson<double>(b_lv1_wu),
      'b_lv2_uv': serializer.toJson<double>(b_lv2_uv),
      'b_lv2_vw': serializer.toJson<double>(b_lv2_vw),
      'b_lv2_wu': serializer.toJson<double>(b_lv2_wu),
      'b_lv3_uv': serializer.toJson<double>(b_lv3_uv),
      'b_lv3_vw': serializer.toJson<double>(b_lv3_vw),
      'b_lv3_wu': serializer.toJson<double>(b_lv3_wu),
      'b_lv4_uv': serializer.toJson<double>(b_lv4_uv),
      'b_lv4_vw': serializer.toJson<double>(b_lv4_vw),
      'b_lv4_wu': serializer.toJson<double>(b_lv4_wu),
    };
  }

  ItMbLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double r_hv_uv,
          double r_hv_vw,
          double r_hv_wu,
          double r_lv1_uv,
          double r_lv1_vw,
          double r_lv1_wu,
          double r_lv2_uv,
          double r_lv2_vw,
          double r_lv2_wu,
          double r_lv3_uv,
          double r_lv3_vw,
          double r_lv3_wu,
          double r_lv4_uv,
          double r_lv4_vw,
          double r_lv4_wu,
          double y_hv_uv,
          double y_hv_vw,
          double y_hv_wu,
          double y_lv1_uv,
          double y_lv1_vw,
          double y_lv1_wu,
          double y_lv2_uv,
          double y_lv2_vw,
          double y_lv2_wu,
          double y_lv3_uv,
          double y_lv3_vw,
          double y_lv3_wu,
          double y_lv4_uv,
          double y_lv4_vw,
          double y_lv4_wu,
          double b_hv_uv,
          double b_hv_vw,
          double b_hv_wu,
          double b_lv1_uv,
          double b_lv1_vw,
          double b_lv1_wu,
          double b_lv2_uv,
          double b_lv2_vw,
          double b_lv2_wu,
          double b_lv3_uv,
          double b_lv3_vw,
          double b_lv3_wu,
          double b_lv4_uv,
          double b_lv4_vw,
          double b_lv4_wu}) =>
      ItMbLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        r_hv_uv: r_hv_uv ?? this.r_hv_uv,
        r_hv_vw: r_hv_vw ?? this.r_hv_vw,
        r_hv_wu: r_hv_wu ?? this.r_hv_wu,
        r_lv1_uv: r_lv1_uv ?? this.r_lv1_uv,
        r_lv1_vw: r_lv1_vw ?? this.r_lv1_vw,
        r_lv1_wu: r_lv1_wu ?? this.r_lv1_wu,
        r_lv2_uv: r_lv2_uv ?? this.r_lv2_uv,
        r_lv2_vw: r_lv2_vw ?? this.r_lv2_vw,
        r_lv2_wu: r_lv2_wu ?? this.r_lv2_wu,
        r_lv3_uv: r_lv3_uv ?? this.r_lv3_uv,
        r_lv3_vw: r_lv3_vw ?? this.r_lv3_vw,
        r_lv3_wu: r_lv3_wu ?? this.r_lv3_wu,
        r_lv4_uv: r_lv4_uv ?? this.r_lv4_uv,
        r_lv4_vw: r_lv4_vw ?? this.r_lv4_vw,
        r_lv4_wu: r_lv4_wu ?? this.r_lv4_wu,
        y_hv_uv: y_hv_uv ?? this.y_hv_uv,
        y_hv_vw: y_hv_vw ?? this.y_hv_vw,
        y_hv_wu: y_hv_wu ?? this.y_hv_wu,
        y_lv1_uv: y_lv1_uv ?? this.y_lv1_uv,
        y_lv1_vw: y_lv1_vw ?? this.y_lv1_vw,
        y_lv1_wu: y_lv1_wu ?? this.y_lv1_wu,
        y_lv2_uv: y_lv2_uv ?? this.y_lv2_uv,
        y_lv2_vw: y_lv2_vw ?? this.y_lv2_vw,
        y_lv2_wu: y_lv2_wu ?? this.y_lv2_wu,
        y_lv3_uv: y_lv3_uv ?? this.y_lv3_uv,
        y_lv3_vw: y_lv3_vw ?? this.y_lv3_vw,
        y_lv3_wu: y_lv3_wu ?? this.y_lv3_wu,
        y_lv4_uv: y_lv4_uv ?? this.y_lv4_uv,
        y_lv4_vw: y_lv4_vw ?? this.y_lv4_vw,
        y_lv4_wu: y_lv4_wu ?? this.y_lv4_wu,
        b_hv_uv: b_hv_uv ?? this.b_hv_uv,
        b_hv_vw: b_hv_vw ?? this.b_hv_vw,
        b_hv_wu: b_hv_wu ?? this.b_hv_wu,
        b_lv1_uv: b_lv1_uv ?? this.b_lv1_uv,
        b_lv1_vw: b_lv1_vw ?? this.b_lv1_vw,
        b_lv1_wu: b_lv1_wu ?? this.b_lv1_wu,
        b_lv2_uv: b_lv2_uv ?? this.b_lv2_uv,
        b_lv2_vw: b_lv2_vw ?? this.b_lv2_vw,
        b_lv2_wu: b_lv2_wu ?? this.b_lv2_wu,
        b_lv3_uv: b_lv3_uv ?? this.b_lv3_uv,
        b_lv3_vw: b_lv3_vw ?? this.b_lv3_vw,
        b_lv3_wu: b_lv3_wu ?? this.b_lv3_wu,
        b_lv4_uv: b_lv4_uv ?? this.b_lv4_uv,
        b_lv4_vw: b_lv4_vw ?? this.b_lv4_vw,
        b_lv4_wu: b_lv4_wu ?? this.b_lv4_wu,
      );
  @override
  String toString() {
    return (StringBuffer('ItMbLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('r_hv_uv: $r_hv_uv, ')
          ..write('r_hv_vw: $r_hv_vw, ')
          ..write('r_hv_wu: $r_hv_wu, ')
          ..write('r_lv1_uv: $r_lv1_uv, ')
          ..write('r_lv1_vw: $r_lv1_vw, ')
          ..write('r_lv1_wu: $r_lv1_wu, ')
          ..write('r_lv2_uv: $r_lv2_uv, ')
          ..write('r_lv2_vw: $r_lv2_vw, ')
          ..write('r_lv2_wu: $r_lv2_wu, ')
          ..write('r_lv3_uv: $r_lv3_uv, ')
          ..write('r_lv3_vw: $r_lv3_vw, ')
          ..write('r_lv3_wu: $r_lv3_wu, ')
          ..write('r_lv4_uv: $r_lv4_uv, ')
          ..write('r_lv4_vw: $r_lv4_vw, ')
          ..write('r_lv4_wu: $r_lv4_wu, ')
          ..write('y_hv_uv: $y_hv_uv, ')
          ..write('y_hv_vw: $y_hv_vw, ')
          ..write('y_hv_wu: $y_hv_wu, ')
          ..write('y_lv1_uv: $y_lv1_uv, ')
          ..write('y_lv1_vw: $y_lv1_vw, ')
          ..write('y_lv1_wu: $y_lv1_wu, ')
          ..write('y_lv2_uv: $y_lv2_uv, ')
          ..write('y_lv2_vw: $y_lv2_vw, ')
          ..write('y_lv2_wu: $y_lv2_wu, ')
          ..write('y_lv3_uv: $y_lv3_uv, ')
          ..write('y_lv3_vw: $y_lv3_vw, ')
          ..write('y_lv3_wu: $y_lv3_wu, ')
          ..write('y_lv4_uv: $y_lv4_uv, ')
          ..write('y_lv4_vw: $y_lv4_vw, ')
          ..write('y_lv4_wu: $y_lv4_wu, ')
          ..write('b_hv_uv: $b_hv_uv, ')
          ..write('b_hv_vw: $b_hv_vw, ')
          ..write('b_hv_wu: $b_hv_wu, ')
          ..write('b_lv1_uv: $b_lv1_uv, ')
          ..write('b_lv1_vw: $b_lv1_vw, ')
          ..write('b_lv1_wu: $b_lv1_wu, ')
          ..write('b_lv2_uv: $b_lv2_uv, ')
          ..write('b_lv2_vw: $b_lv2_vw, ')
          ..write('b_lv2_wu: $b_lv2_wu, ')
          ..write('b_lv3_uv: $b_lv3_uv, ')
          ..write('b_lv3_vw: $b_lv3_vw, ')
          ..write('b_lv3_wu: $b_lv3_wu, ')
          ..write('b_lv4_uv: $b_lv4_uv, ')
          ..write('b_lv4_vw: $b_lv4_vw, ')
          ..write('b_lv4_wu: $b_lv4_wu')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        r_hv_uv,
        r_hv_vw,
        r_hv_wu,
        r_lv1_uv,
        r_lv1_vw,
        r_lv1_wu,
        r_lv2_uv,
        r_lv2_vw,
        r_lv2_wu,
        r_lv3_uv,
        r_lv3_vw,
        r_lv3_wu,
        r_lv4_uv,
        r_lv4_vw,
        r_lv4_wu,
        y_hv_uv,
        y_hv_vw,
        y_hv_wu,
        y_lv1_uv,
        y_lv1_vw,
        y_lv1_wu,
        y_lv2_uv,
        y_lv2_vw,
        y_lv2_wu,
        y_lv3_uv,
        y_lv3_vw,
        y_lv3_wu,
        y_lv4_uv,
        y_lv4_vw,
        y_lv4_wu,
        b_hv_uv,
        b_hv_vw,
        b_hv_wu,
        b_lv1_uv,
        b_lv1_vw,
        b_lv1_wu,
        b_lv2_uv,
        b_lv2_vw,
        b_lv2_wu,
        b_lv3_uv,
        b_lv3_vw,
        b_lv3_wu,
        b_lv4_uv,
        b_lv4_vw,
        b_lv4_wu
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ItMbLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.r_hv_uv == this.r_hv_uv &&
          other.r_hv_vw == this.r_hv_vw &&
          other.r_hv_wu == this.r_hv_wu &&
          other.r_lv1_uv == this.r_lv1_uv &&
          other.r_lv1_vw == this.r_lv1_vw &&
          other.r_lv1_wu == this.r_lv1_wu &&
          other.r_lv2_uv == this.r_lv2_uv &&
          other.r_lv2_vw == this.r_lv2_vw &&
          other.r_lv2_wu == this.r_lv2_wu &&
          other.r_lv3_uv == this.r_lv3_uv &&
          other.r_lv3_vw == this.r_lv3_vw &&
          other.r_lv3_wu == this.r_lv3_wu &&
          other.r_lv4_uv == this.r_lv4_uv &&
          other.r_lv4_vw == this.r_lv4_vw &&
          other.r_lv4_wu == this.r_lv4_wu &&
          other.y_hv_uv == this.y_hv_uv &&
          other.y_hv_vw == this.y_hv_vw &&
          other.y_hv_wu == this.y_hv_wu &&
          other.y_lv1_uv == this.y_lv1_uv &&
          other.y_lv1_vw == this.y_lv1_vw &&
          other.y_lv1_wu == this.y_lv1_wu &&
          other.y_lv2_uv == this.y_lv2_uv &&
          other.y_lv2_vw == this.y_lv2_vw &&
          other.y_lv2_wu == this.y_lv2_wu &&
          other.y_lv3_uv == this.y_lv3_uv &&
          other.y_lv3_vw == this.y_lv3_vw &&
          other.y_lv3_wu == this.y_lv3_wu &&
          other.y_lv4_uv == this.y_lv4_uv &&
          other.y_lv4_vw == this.y_lv4_vw &&
          other.y_lv4_wu == this.y_lv4_wu &&
          other.b_hv_uv == this.b_hv_uv &&
          other.b_hv_vw == this.b_hv_vw &&
          other.b_hv_wu == this.b_hv_wu &&
          other.b_lv1_uv == this.b_lv1_uv &&
          other.b_lv1_vw == this.b_lv1_vw &&
          other.b_lv1_wu == this.b_lv1_wu &&
          other.b_lv2_uv == this.b_lv2_uv &&
          other.b_lv2_vw == this.b_lv2_vw &&
          other.b_lv2_wu == this.b_lv2_wu &&
          other.b_lv3_uv == this.b_lv3_uv &&
          other.b_lv3_vw == this.b_lv3_vw &&
          other.b_lv3_wu == this.b_lv3_wu &&
          other.b_lv4_uv == this.b_lv4_uv &&
          other.b_lv4_vw == this.b_lv4_vw &&
          other.b_lv4_wu == this.b_lv4_wu);
}

class ItMbLocalDatasourceImplCompanion extends UpdateCompanion<ItMbLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> r_hv_uv;
  final Value<double> r_hv_vw;
  final Value<double> r_hv_wu;
  final Value<double> r_lv1_uv;
  final Value<double> r_lv1_vw;
  final Value<double> r_lv1_wu;
  final Value<double> r_lv2_uv;
  final Value<double> r_lv2_vw;
  final Value<double> r_lv2_wu;
  final Value<double> r_lv3_uv;
  final Value<double> r_lv3_vw;
  final Value<double> r_lv3_wu;
  final Value<double> r_lv4_uv;
  final Value<double> r_lv4_vw;
  final Value<double> r_lv4_wu;
  final Value<double> y_hv_uv;
  final Value<double> y_hv_vw;
  final Value<double> y_hv_wu;
  final Value<double> y_lv1_uv;
  final Value<double> y_lv1_vw;
  final Value<double> y_lv1_wu;
  final Value<double> y_lv2_uv;
  final Value<double> y_lv2_vw;
  final Value<double> y_lv2_wu;
  final Value<double> y_lv3_uv;
  final Value<double> y_lv3_vw;
  final Value<double> y_lv3_wu;
  final Value<double> y_lv4_uv;
  final Value<double> y_lv4_vw;
  final Value<double> y_lv4_wu;
  final Value<double> b_hv_uv;
  final Value<double> b_hv_vw;
  final Value<double> b_hv_wu;
  final Value<double> b_lv1_uv;
  final Value<double> b_lv1_vw;
  final Value<double> b_lv1_wu;
  final Value<double> b_lv2_uv;
  final Value<double> b_lv2_vw;
  final Value<double> b_lv2_wu;
  final Value<double> b_lv3_uv;
  final Value<double> b_lv3_vw;
  final Value<double> b_lv3_wu;
  final Value<double> b_lv4_uv;
  final Value<double> b_lv4_vw;
  final Value<double> b_lv4_wu;
  const ItMbLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.r_hv_uv = const Value.absent(),
    this.r_hv_vw = const Value.absent(),
    this.r_hv_wu = const Value.absent(),
    this.r_lv1_uv = const Value.absent(),
    this.r_lv1_vw = const Value.absent(),
    this.r_lv1_wu = const Value.absent(),
    this.r_lv2_uv = const Value.absent(),
    this.r_lv2_vw = const Value.absent(),
    this.r_lv2_wu = const Value.absent(),
    this.r_lv3_uv = const Value.absent(),
    this.r_lv3_vw = const Value.absent(),
    this.r_lv3_wu = const Value.absent(),
    this.r_lv4_uv = const Value.absent(),
    this.r_lv4_vw = const Value.absent(),
    this.r_lv4_wu = const Value.absent(),
    this.y_hv_uv = const Value.absent(),
    this.y_hv_vw = const Value.absent(),
    this.y_hv_wu = const Value.absent(),
    this.y_lv1_uv = const Value.absent(),
    this.y_lv1_vw = const Value.absent(),
    this.y_lv1_wu = const Value.absent(),
    this.y_lv2_uv = const Value.absent(),
    this.y_lv2_vw = const Value.absent(),
    this.y_lv2_wu = const Value.absent(),
    this.y_lv3_uv = const Value.absent(),
    this.y_lv3_vw = const Value.absent(),
    this.y_lv3_wu = const Value.absent(),
    this.y_lv4_uv = const Value.absent(),
    this.y_lv4_vw = const Value.absent(),
    this.y_lv4_wu = const Value.absent(),
    this.b_hv_uv = const Value.absent(),
    this.b_hv_vw = const Value.absent(),
    this.b_hv_wu = const Value.absent(),
    this.b_lv1_uv = const Value.absent(),
    this.b_lv1_vw = const Value.absent(),
    this.b_lv1_wu = const Value.absent(),
    this.b_lv2_uv = const Value.absent(),
    this.b_lv2_vw = const Value.absent(),
    this.b_lv2_wu = const Value.absent(),
    this.b_lv3_uv = const Value.absent(),
    this.b_lv3_vw = const Value.absent(),
    this.b_lv3_wu = const Value.absent(),
    this.b_lv4_uv = const Value.absent(),
    this.b_lv4_vw = const Value.absent(),
    this.b_lv4_wu = const Value.absent(),
  });
  ItMbLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double r_hv_uv,
    @required double r_hv_vw,
    @required double r_hv_wu,
    @required double r_lv1_uv,
    @required double r_lv1_vw,
    @required double r_lv1_wu,
    @required double r_lv2_uv,
    @required double r_lv2_vw,
    @required double r_lv2_wu,
    @required double r_lv3_uv,
    @required double r_lv3_vw,
    @required double r_lv3_wu,
    @required double r_lv4_uv,
    @required double r_lv4_vw,
    @required double r_lv4_wu,
    @required double y_hv_uv,
    @required double y_hv_vw,
    @required double y_hv_wu,
    @required double y_lv1_uv,
    @required double y_lv1_vw,
    @required double y_lv1_wu,
    @required double y_lv2_uv,
    @required double y_lv2_vw,
    @required double y_lv2_wu,
    @required double y_lv3_uv,
    @required double y_lv3_vw,
    @required double y_lv3_wu,
    @required double y_lv4_uv,
    @required double y_lv4_vw,
    @required double y_lv4_wu,
    @required double b_hv_uv,
    @required double b_hv_vw,
    @required double b_hv_wu,
    @required double b_lv1_uv,
    @required double b_lv1_vw,
    @required double b_lv1_wu,
    @required double b_lv2_uv,
    @required double b_lv2_vw,
    @required double b_lv2_wu,
    @required double b_lv3_uv,
    @required double b_lv3_vw,
    @required double b_lv3_wu,
    @required double b_lv4_uv,
    @required double b_lv4_vw,
    @required double b_lv4_wu,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        r_hv_uv = Value(r_hv_uv),
        r_hv_vw = Value(r_hv_vw),
        r_hv_wu = Value(r_hv_wu),
        r_lv1_uv = Value(r_lv1_uv),
        r_lv1_vw = Value(r_lv1_vw),
        r_lv1_wu = Value(r_lv1_wu),
        r_lv2_uv = Value(r_lv2_uv),
        r_lv2_vw = Value(r_lv2_vw),
        r_lv2_wu = Value(r_lv2_wu),
        r_lv3_uv = Value(r_lv3_uv),
        r_lv3_vw = Value(r_lv3_vw),
        r_lv3_wu = Value(r_lv3_wu),
        r_lv4_uv = Value(r_lv4_uv),
        r_lv4_vw = Value(r_lv4_vw),
        r_lv4_wu = Value(r_lv4_wu),
        y_hv_uv = Value(y_hv_uv),
        y_hv_vw = Value(y_hv_vw),
        y_hv_wu = Value(y_hv_wu),
        y_lv1_uv = Value(y_lv1_uv),
        y_lv1_vw = Value(y_lv1_vw),
        y_lv1_wu = Value(y_lv1_wu),
        y_lv2_uv = Value(y_lv2_uv),
        y_lv2_vw = Value(y_lv2_vw),
        y_lv2_wu = Value(y_lv2_wu),
        y_lv3_uv = Value(y_lv3_uv),
        y_lv3_vw = Value(y_lv3_vw),
        y_lv3_wu = Value(y_lv3_wu),
        y_lv4_uv = Value(y_lv4_uv),
        y_lv4_vw = Value(y_lv4_vw),
        y_lv4_wu = Value(y_lv4_wu),
        b_hv_uv = Value(b_hv_uv),
        b_hv_vw = Value(b_hv_vw),
        b_hv_wu = Value(b_hv_wu),
        b_lv1_uv = Value(b_lv1_uv),
        b_lv1_vw = Value(b_lv1_vw),
        b_lv1_wu = Value(b_lv1_wu),
        b_lv2_uv = Value(b_lv2_uv),
        b_lv2_vw = Value(b_lv2_vw),
        b_lv2_wu = Value(b_lv2_wu),
        b_lv3_uv = Value(b_lv3_uv),
        b_lv3_vw = Value(b_lv3_vw),
        b_lv3_wu = Value(b_lv3_wu),
        b_lv4_uv = Value(b_lv4_uv),
        b_lv4_vw = Value(b_lv4_vw),
        b_lv4_wu = Value(b_lv4_wu);
  static Insertable<ItMbLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> r_hv_uv,
    Expression<double> r_hv_vw,
    Expression<double> r_hv_wu,
    Expression<double> r_lv1_uv,
    Expression<double> r_lv1_vw,
    Expression<double> r_lv1_wu,
    Expression<double> r_lv2_uv,
    Expression<double> r_lv2_vw,
    Expression<double> r_lv2_wu,
    Expression<double> r_lv3_uv,
    Expression<double> r_lv3_vw,
    Expression<double> r_lv3_wu,
    Expression<double> r_lv4_uv,
    Expression<double> r_lv4_vw,
    Expression<double> r_lv4_wu,
    Expression<double> y_hv_uv,
    Expression<double> y_hv_vw,
    Expression<double> y_hv_wu,
    Expression<double> y_lv1_uv,
    Expression<double> y_lv1_vw,
    Expression<double> y_lv1_wu,
    Expression<double> y_lv2_uv,
    Expression<double> y_lv2_vw,
    Expression<double> y_lv2_wu,
    Expression<double> y_lv3_uv,
    Expression<double> y_lv3_vw,
    Expression<double> y_lv3_wu,
    Expression<double> y_lv4_uv,
    Expression<double> y_lv4_vw,
    Expression<double> y_lv4_wu,
    Expression<double> b_hv_uv,
    Expression<double> b_hv_vw,
    Expression<double> b_hv_wu,
    Expression<double> b_lv1_uv,
    Expression<double> b_lv1_vw,
    Expression<double> b_lv1_wu,
    Expression<double> b_lv2_uv,
    Expression<double> b_lv2_vw,
    Expression<double> b_lv2_wu,
    Expression<double> b_lv3_uv,
    Expression<double> b_lv3_vw,
    Expression<double> b_lv3_wu,
    Expression<double> b_lv4_uv,
    Expression<double> b_lv4_vw,
    Expression<double> b_lv4_wu,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (r_hv_uv != null) 'r_hv_uv': r_hv_uv,
      if (r_hv_vw != null) 'r_hv_vw': r_hv_vw,
      if (r_hv_wu != null) 'r_hv_wu': r_hv_wu,
      if (r_lv1_uv != null) 'r_lv1_uv': r_lv1_uv,
      if (r_lv1_vw != null) 'r_lv1_vw': r_lv1_vw,
      if (r_lv1_wu != null) 'r_lv1_wu': r_lv1_wu,
      if (r_lv2_uv != null) 'r_lv2_uv': r_lv2_uv,
      if (r_lv2_vw != null) 'r_lv2_vw': r_lv2_vw,
      if (r_lv2_wu != null) 'r_lv2_wu': r_lv2_wu,
      if (r_lv3_uv != null) 'r_lv3_uv': r_lv3_uv,
      if (r_lv3_vw != null) 'r_lv3_vw': r_lv3_vw,
      if (r_lv3_wu != null) 'r_lv3_wu': r_lv3_wu,
      if (r_lv4_uv != null) 'r_lv4_uv': r_lv4_uv,
      if (r_lv4_vw != null) 'r_lv4_vw': r_lv4_vw,
      if (r_lv4_wu != null) 'r_lv4_wu': r_lv4_wu,
      if (y_hv_uv != null) 'y_hv_uv': y_hv_uv,
      if (y_hv_vw != null) 'y_hv_vw': y_hv_vw,
      if (y_hv_wu != null) 'y_hv_wu': y_hv_wu,
      if (y_lv1_uv != null) 'y_lv1_uv': y_lv1_uv,
      if (y_lv1_vw != null) 'y_lv1_vw': y_lv1_vw,
      if (y_lv1_wu != null) 'y_lv1_wu': y_lv1_wu,
      if (y_lv2_uv != null) 'y_lv2_uv': y_lv2_uv,
      if (y_lv2_vw != null) 'y_lv2_vw': y_lv2_vw,
      if (y_lv2_wu != null) 'y_lv2_wu': y_lv2_wu,
      if (y_lv3_uv != null) 'y_lv3_uv': y_lv3_uv,
      if (y_lv3_vw != null) 'y_lv3_vw': y_lv3_vw,
      if (y_lv3_wu != null) 'y_lv3_wu': y_lv3_wu,
      if (y_lv4_uv != null) 'y_lv4_uv': y_lv4_uv,
      if (y_lv4_vw != null) 'y_lv4_vw': y_lv4_vw,
      if (y_lv4_wu != null) 'y_lv4_wu': y_lv4_wu,
      if (b_hv_uv != null) 'b_hv_uv': b_hv_uv,
      if (b_hv_vw != null) 'b_hv_vw': b_hv_vw,
      if (b_hv_wu != null) 'b_hv_wu': b_hv_wu,
      if (b_lv1_uv != null) 'b_lv1_uv': b_lv1_uv,
      if (b_lv1_vw != null) 'b_lv1_vw': b_lv1_vw,
      if (b_lv1_wu != null) 'b_lv1_wu': b_lv1_wu,
      if (b_lv2_uv != null) 'b_lv2_uv': b_lv2_uv,
      if (b_lv2_vw != null) 'b_lv2_vw': b_lv2_vw,
      if (b_lv2_wu != null) 'b_lv2_wu': b_lv2_wu,
      if (b_lv3_uv != null) 'b_lv3_uv': b_lv3_uv,
      if (b_lv3_vw != null) 'b_lv3_vw': b_lv3_vw,
      if (b_lv3_wu != null) 'b_lv3_wu': b_lv3_wu,
      if (b_lv4_uv != null) 'b_lv4_uv': b_lv4_uv,
      if (b_lv4_vw != null) 'b_lv4_vw': b_lv4_vw,
      if (b_lv4_wu != null) 'b_lv4_wu': b_lv4_wu,
    });
  }

  ItMbLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> r_hv_uv,
      Value<double> r_hv_vw,
      Value<double> r_hv_wu,
      Value<double> r_lv1_uv,
      Value<double> r_lv1_vw,
      Value<double> r_lv1_wu,
      Value<double> r_lv2_uv,
      Value<double> r_lv2_vw,
      Value<double> r_lv2_wu,
      Value<double> r_lv3_uv,
      Value<double> r_lv3_vw,
      Value<double> r_lv3_wu,
      Value<double> r_lv4_uv,
      Value<double> r_lv4_vw,
      Value<double> r_lv4_wu,
      Value<double> y_hv_uv,
      Value<double> y_hv_vw,
      Value<double> y_hv_wu,
      Value<double> y_lv1_uv,
      Value<double> y_lv1_vw,
      Value<double> y_lv1_wu,
      Value<double> y_lv2_uv,
      Value<double> y_lv2_vw,
      Value<double> y_lv2_wu,
      Value<double> y_lv3_uv,
      Value<double> y_lv3_vw,
      Value<double> y_lv3_wu,
      Value<double> y_lv4_uv,
      Value<double> y_lv4_vw,
      Value<double> y_lv4_wu,
      Value<double> b_hv_uv,
      Value<double> b_hv_vw,
      Value<double> b_hv_wu,
      Value<double> b_lv1_uv,
      Value<double> b_lv1_vw,
      Value<double> b_lv1_wu,
      Value<double> b_lv2_uv,
      Value<double> b_lv2_vw,
      Value<double> b_lv2_wu,
      Value<double> b_lv3_uv,
      Value<double> b_lv3_vw,
      Value<double> b_lv3_wu,
      Value<double> b_lv4_uv,
      Value<double> b_lv4_vw,
      Value<double> b_lv4_wu}) {
    return ItMbLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      r_hv_uv: r_hv_uv ?? this.r_hv_uv,
      r_hv_vw: r_hv_vw ?? this.r_hv_vw,
      r_hv_wu: r_hv_wu ?? this.r_hv_wu,
      r_lv1_uv: r_lv1_uv ?? this.r_lv1_uv,
      r_lv1_vw: r_lv1_vw ?? this.r_lv1_vw,
      r_lv1_wu: r_lv1_wu ?? this.r_lv1_wu,
      r_lv2_uv: r_lv2_uv ?? this.r_lv2_uv,
      r_lv2_vw: r_lv2_vw ?? this.r_lv2_vw,
      r_lv2_wu: r_lv2_wu ?? this.r_lv2_wu,
      r_lv3_uv: r_lv3_uv ?? this.r_lv3_uv,
      r_lv3_vw: r_lv3_vw ?? this.r_lv3_vw,
      r_lv3_wu: r_lv3_wu ?? this.r_lv3_wu,
      r_lv4_uv: r_lv4_uv ?? this.r_lv4_uv,
      r_lv4_vw: r_lv4_vw ?? this.r_lv4_vw,
      r_lv4_wu: r_lv4_wu ?? this.r_lv4_wu,
      y_hv_uv: y_hv_uv ?? this.y_hv_uv,
      y_hv_vw: y_hv_vw ?? this.y_hv_vw,
      y_hv_wu: y_hv_wu ?? this.y_hv_wu,
      y_lv1_uv: y_lv1_uv ?? this.y_lv1_uv,
      y_lv1_vw: y_lv1_vw ?? this.y_lv1_vw,
      y_lv1_wu: y_lv1_wu ?? this.y_lv1_wu,
      y_lv2_uv: y_lv2_uv ?? this.y_lv2_uv,
      y_lv2_vw: y_lv2_vw ?? this.y_lv2_vw,
      y_lv2_wu: y_lv2_wu ?? this.y_lv2_wu,
      y_lv3_uv: y_lv3_uv ?? this.y_lv3_uv,
      y_lv3_vw: y_lv3_vw ?? this.y_lv3_vw,
      y_lv3_wu: y_lv3_wu ?? this.y_lv3_wu,
      y_lv4_uv: y_lv4_uv ?? this.y_lv4_uv,
      y_lv4_vw: y_lv4_vw ?? this.y_lv4_vw,
      y_lv4_wu: y_lv4_wu ?? this.y_lv4_wu,
      b_hv_uv: b_hv_uv ?? this.b_hv_uv,
      b_hv_vw: b_hv_vw ?? this.b_hv_vw,
      b_hv_wu: b_hv_wu ?? this.b_hv_wu,
      b_lv1_uv: b_lv1_uv ?? this.b_lv1_uv,
      b_lv1_vw: b_lv1_vw ?? this.b_lv1_vw,
      b_lv1_wu: b_lv1_wu ?? this.b_lv1_wu,
      b_lv2_uv: b_lv2_uv ?? this.b_lv2_uv,
      b_lv2_vw: b_lv2_vw ?? this.b_lv2_vw,
      b_lv2_wu: b_lv2_wu ?? this.b_lv2_wu,
      b_lv3_uv: b_lv3_uv ?? this.b_lv3_uv,
      b_lv3_vw: b_lv3_vw ?? this.b_lv3_vw,
      b_lv3_wu: b_lv3_wu ?? this.b_lv3_wu,
      b_lv4_uv: b_lv4_uv ?? this.b_lv4_uv,
      b_lv4_vw: b_lv4_vw ?? this.b_lv4_vw,
      b_lv4_wu: b_lv4_wu ?? this.b_lv4_wu,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (r_hv_uv.present) {
      map['r_hv_uv'] = Variable<double>(r_hv_uv.value);
    }
    if (r_hv_vw.present) {
      map['r_hv_vw'] = Variable<double>(r_hv_vw.value);
    }
    if (r_hv_wu.present) {
      map['r_hv_wu'] = Variable<double>(r_hv_wu.value);
    }
    if (r_lv1_uv.present) {
      map['r_lv1_uv'] = Variable<double>(r_lv1_uv.value);
    }
    if (r_lv1_vw.present) {
      map['r_lv1_vw'] = Variable<double>(r_lv1_vw.value);
    }
    if (r_lv1_wu.present) {
      map['r_lv1_wu'] = Variable<double>(r_lv1_wu.value);
    }
    if (r_lv2_uv.present) {
      map['r_lv2_uv'] = Variable<double>(r_lv2_uv.value);
    }
    if (r_lv2_vw.present) {
      map['r_lv2_vw'] = Variable<double>(r_lv2_vw.value);
    }
    if (r_lv2_wu.present) {
      map['r_lv2_wu'] = Variable<double>(r_lv2_wu.value);
    }
    if (r_lv3_uv.present) {
      map['r_lv3_uv'] = Variable<double>(r_lv3_uv.value);
    }
    if (r_lv3_vw.present) {
      map['r_lv3_vw'] = Variable<double>(r_lv3_vw.value);
    }
    if (r_lv3_wu.present) {
      map['r_lv3_wu'] = Variable<double>(r_lv3_wu.value);
    }
    if (r_lv4_uv.present) {
      map['r_lv4_uv'] = Variable<double>(r_lv4_uv.value);
    }
    if (r_lv4_vw.present) {
      map['r_lv4_vw'] = Variable<double>(r_lv4_vw.value);
    }
    if (r_lv4_wu.present) {
      map['r_lv4_wu'] = Variable<double>(r_lv4_wu.value);
    }
    if (y_hv_uv.present) {
      map['y_hv_uv'] = Variable<double>(y_hv_uv.value);
    }
    if (y_hv_vw.present) {
      map['y_hv_vw'] = Variable<double>(y_hv_vw.value);
    }
    if (y_hv_wu.present) {
      map['y_hv_wu'] = Variable<double>(y_hv_wu.value);
    }
    if (y_lv1_uv.present) {
      map['y_lv1_uv'] = Variable<double>(y_lv1_uv.value);
    }
    if (y_lv1_vw.present) {
      map['y_lv1_vw'] = Variable<double>(y_lv1_vw.value);
    }
    if (y_lv1_wu.present) {
      map['y_lv1_wu'] = Variable<double>(y_lv1_wu.value);
    }
    if (y_lv2_uv.present) {
      map['y_lv2_uv'] = Variable<double>(y_lv2_uv.value);
    }
    if (y_lv2_vw.present) {
      map['y_lv2_vw'] = Variable<double>(y_lv2_vw.value);
    }
    if (y_lv2_wu.present) {
      map['y_lv2_wu'] = Variable<double>(y_lv2_wu.value);
    }
    if (y_lv3_uv.present) {
      map['y_lv3_uv'] = Variable<double>(y_lv3_uv.value);
    }
    if (y_lv3_vw.present) {
      map['y_lv3_vw'] = Variable<double>(y_lv3_vw.value);
    }
    if (y_lv3_wu.present) {
      map['y_lv3_wu'] = Variable<double>(y_lv3_wu.value);
    }
    if (y_lv4_uv.present) {
      map['y_lv4_uv'] = Variable<double>(y_lv4_uv.value);
    }
    if (y_lv4_vw.present) {
      map['y_lv4_vw'] = Variable<double>(y_lv4_vw.value);
    }
    if (y_lv4_wu.present) {
      map['y_lv4_wu'] = Variable<double>(y_lv4_wu.value);
    }
    if (b_hv_uv.present) {
      map['b_hv_uv'] = Variable<double>(b_hv_uv.value);
    }
    if (b_hv_vw.present) {
      map['b_hv_vw'] = Variable<double>(b_hv_vw.value);
    }
    if (b_hv_wu.present) {
      map['b_hv_wu'] = Variable<double>(b_hv_wu.value);
    }
    if (b_lv1_uv.present) {
      map['b_lv1_uv'] = Variable<double>(b_lv1_uv.value);
    }
    if (b_lv1_vw.present) {
      map['b_lv1_vw'] = Variable<double>(b_lv1_vw.value);
    }
    if (b_lv1_wu.present) {
      map['b_lv1_wu'] = Variable<double>(b_lv1_wu.value);
    }
    if (b_lv2_uv.present) {
      map['b_lv2_uv'] = Variable<double>(b_lv2_uv.value);
    }
    if (b_lv2_vw.present) {
      map['b_lv2_vw'] = Variable<double>(b_lv2_vw.value);
    }
    if (b_lv2_wu.present) {
      map['b_lv2_wu'] = Variable<double>(b_lv2_wu.value);
    }
    if (b_lv3_uv.present) {
      map['b_lv3_uv'] = Variable<double>(b_lv3_uv.value);
    }
    if (b_lv3_vw.present) {
      map['b_lv3_vw'] = Variable<double>(b_lv3_vw.value);
    }
    if (b_lv3_wu.present) {
      map['b_lv3_wu'] = Variable<double>(b_lv3_wu.value);
    }
    if (b_lv4_uv.present) {
      map['b_lv4_uv'] = Variable<double>(b_lv4_uv.value);
    }
    if (b_lv4_vw.present) {
      map['b_lv4_vw'] = Variable<double>(b_lv4_vw.value);
    }
    if (b_lv4_wu.present) {
      map['b_lv4_wu'] = Variable<double>(b_lv4_wu.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ItMbLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('r_hv_uv: $r_hv_uv, ')
          ..write('r_hv_vw: $r_hv_vw, ')
          ..write('r_hv_wu: $r_hv_wu, ')
          ..write('r_lv1_uv: $r_lv1_uv, ')
          ..write('r_lv1_vw: $r_lv1_vw, ')
          ..write('r_lv1_wu: $r_lv1_wu, ')
          ..write('r_lv2_uv: $r_lv2_uv, ')
          ..write('r_lv2_vw: $r_lv2_vw, ')
          ..write('r_lv2_wu: $r_lv2_wu, ')
          ..write('r_lv3_uv: $r_lv3_uv, ')
          ..write('r_lv3_vw: $r_lv3_vw, ')
          ..write('r_lv3_wu: $r_lv3_wu, ')
          ..write('r_lv4_uv: $r_lv4_uv, ')
          ..write('r_lv4_vw: $r_lv4_vw, ')
          ..write('r_lv4_wu: $r_lv4_wu, ')
          ..write('y_hv_uv: $y_hv_uv, ')
          ..write('y_hv_vw: $y_hv_vw, ')
          ..write('y_hv_wu: $y_hv_wu, ')
          ..write('y_lv1_uv: $y_lv1_uv, ')
          ..write('y_lv1_vw: $y_lv1_vw, ')
          ..write('y_lv1_wu: $y_lv1_wu, ')
          ..write('y_lv2_uv: $y_lv2_uv, ')
          ..write('y_lv2_vw: $y_lv2_vw, ')
          ..write('y_lv2_wu: $y_lv2_wu, ')
          ..write('y_lv3_uv: $y_lv3_uv, ')
          ..write('y_lv3_vw: $y_lv3_vw, ')
          ..write('y_lv3_wu: $y_lv3_wu, ')
          ..write('y_lv4_uv: $y_lv4_uv, ')
          ..write('y_lv4_vw: $y_lv4_vw, ')
          ..write('y_lv4_wu: $y_lv4_wu, ')
          ..write('b_hv_uv: $b_hv_uv, ')
          ..write('b_hv_vw: $b_hv_vw, ')
          ..write('b_hv_wu: $b_hv_wu, ')
          ..write('b_lv1_uv: $b_lv1_uv, ')
          ..write('b_lv1_vw: $b_lv1_vw, ')
          ..write('b_lv1_wu: $b_lv1_wu, ')
          ..write('b_lv2_uv: $b_lv2_uv, ')
          ..write('b_lv2_vw: $b_lv2_vw, ')
          ..write('b_lv2_wu: $b_lv2_wu, ')
          ..write('b_lv3_uv: $b_lv3_uv, ')
          ..write('b_lv3_vw: $b_lv3_vw, ')
          ..write('b_lv3_wu: $b_lv3_wu, ')
          ..write('b_lv4_uv: $b_lv4_uv, ')
          ..write('b_lv4_vw: $b_lv4_vw, ')
          ..write('b_lv4_wu: $b_lv4_wu')
          ..write(')'))
        .toString();
  }
}

class $ItMbLocalDatasourceImplTable extends ItMbLocalDatasourceImpl
    with TableInfo<$ItMbLocalDatasourceImplTable, ItMbLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ItMbLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _r_hv_uvMeta = const VerificationMeta('r_hv_uv');
  GeneratedColumn<double> _r_hv_uv;
  @override
  GeneratedColumn<double> get r_hv_uv =>
      _r_hv_uv ??= GeneratedColumn<double>('r_hv_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_hv_vwMeta = const VerificationMeta('r_hv_vw');
  GeneratedColumn<double> _r_hv_vw;
  @override
  GeneratedColumn<double> get r_hv_vw =>
      _r_hv_vw ??= GeneratedColumn<double>('r_hv_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_hv_wuMeta = const VerificationMeta('r_hv_wu');
  GeneratedColumn<double> _r_hv_wu;
  @override
  GeneratedColumn<double> get r_hv_wu =>
      _r_hv_wu ??= GeneratedColumn<double>('r_hv_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv1_uvMeta = const VerificationMeta('r_lv1_uv');
  GeneratedColumn<double> _r_lv1_uv;
  @override
  GeneratedColumn<double> get r_lv1_uv =>
      _r_lv1_uv ??= GeneratedColumn<double>('r_lv1_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv1_vwMeta = const VerificationMeta('r_lv1_vw');
  GeneratedColumn<double> _r_lv1_vw;
  @override
  GeneratedColumn<double> get r_lv1_vw =>
      _r_lv1_vw ??= GeneratedColumn<double>('r_lv1_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv1_wuMeta = const VerificationMeta('r_lv1_wu');
  GeneratedColumn<double> _r_lv1_wu;
  @override
  GeneratedColumn<double> get r_lv1_wu =>
      _r_lv1_wu ??= GeneratedColumn<double>('r_lv1_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv2_uvMeta = const VerificationMeta('r_lv2_uv');
  GeneratedColumn<double> _r_lv2_uv;
  @override
  GeneratedColumn<double> get r_lv2_uv =>
      _r_lv2_uv ??= GeneratedColumn<double>('r_lv2_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv2_vwMeta = const VerificationMeta('r_lv2_vw');
  GeneratedColumn<double> _r_lv2_vw;
  @override
  GeneratedColumn<double> get r_lv2_vw =>
      _r_lv2_vw ??= GeneratedColumn<double>('r_lv2_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv2_wuMeta = const VerificationMeta('r_lv2_wu');
  GeneratedColumn<double> _r_lv2_wu;
  @override
  GeneratedColumn<double> get r_lv2_wu =>
      _r_lv2_wu ??= GeneratedColumn<double>('r_lv2_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv3_uvMeta = const VerificationMeta('r_lv3_uv');
  GeneratedColumn<double> _r_lv3_uv;
  @override
  GeneratedColumn<double> get r_lv3_uv =>
      _r_lv3_uv ??= GeneratedColumn<double>('r_lv3_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv3_vwMeta = const VerificationMeta('r_lv3_vw');
  GeneratedColumn<double> _r_lv3_vw;
  @override
  GeneratedColumn<double> get r_lv3_vw =>
      _r_lv3_vw ??= GeneratedColumn<double>('r_lv3_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv3_wuMeta = const VerificationMeta('r_lv3_wu');
  GeneratedColumn<double> _r_lv3_wu;
  @override
  GeneratedColumn<double> get r_lv3_wu =>
      _r_lv3_wu ??= GeneratedColumn<double>('r_lv3_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv4_uvMeta = const VerificationMeta('r_lv4_uv');
  GeneratedColumn<double> _r_lv4_uv;
  @override
  GeneratedColumn<double> get r_lv4_uv =>
      _r_lv4_uv ??= GeneratedColumn<double>('r_lv4_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv4_vwMeta = const VerificationMeta('r_lv4_vw');
  GeneratedColumn<double> _r_lv4_vw;
  @override
  GeneratedColumn<double> get r_lv4_vw =>
      _r_lv4_vw ??= GeneratedColumn<double>('r_lv4_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_lv4_wuMeta = const VerificationMeta('r_lv4_wu');
  GeneratedColumn<double> _r_lv4_wu;
  @override
  GeneratedColumn<double> get r_lv4_wu =>
      _r_lv4_wu ??= GeneratedColumn<double>('r_lv4_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_hv_uvMeta = const VerificationMeta('y_hv_uv');
  GeneratedColumn<double> _y_hv_uv;
  @override
  GeneratedColumn<double> get y_hv_uv =>
      _y_hv_uv ??= GeneratedColumn<double>('y_hv_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_hv_vwMeta = const VerificationMeta('y_hv_vw');
  GeneratedColumn<double> _y_hv_vw;
  @override
  GeneratedColumn<double> get y_hv_vw =>
      _y_hv_vw ??= GeneratedColumn<double>('y_hv_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_hv_wuMeta = const VerificationMeta('y_hv_wu');
  GeneratedColumn<double> _y_hv_wu;
  @override
  GeneratedColumn<double> get y_hv_wu =>
      _y_hv_wu ??= GeneratedColumn<double>('y_hv_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv1_uvMeta = const VerificationMeta('y_lv1_uv');
  GeneratedColumn<double> _y_lv1_uv;
  @override
  GeneratedColumn<double> get y_lv1_uv =>
      _y_lv1_uv ??= GeneratedColumn<double>('y_lv1_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv1_vwMeta = const VerificationMeta('y_lv1_vw');
  GeneratedColumn<double> _y_lv1_vw;
  @override
  GeneratedColumn<double> get y_lv1_vw =>
      _y_lv1_vw ??= GeneratedColumn<double>('y_lv1_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv1_wuMeta = const VerificationMeta('y_lv1_wu');
  GeneratedColumn<double> _y_lv1_wu;
  @override
  GeneratedColumn<double> get y_lv1_wu =>
      _y_lv1_wu ??= GeneratedColumn<double>('y_lv1_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv2_uvMeta = const VerificationMeta('y_lv2_uv');
  GeneratedColumn<double> _y_lv2_uv;
  @override
  GeneratedColumn<double> get y_lv2_uv =>
      _y_lv2_uv ??= GeneratedColumn<double>('y_lv2_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv2_vwMeta = const VerificationMeta('y_lv2_vw');
  GeneratedColumn<double> _y_lv2_vw;
  @override
  GeneratedColumn<double> get y_lv2_vw =>
      _y_lv2_vw ??= GeneratedColumn<double>('y_lv2_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv2_wuMeta = const VerificationMeta('y_lv2_wu');
  GeneratedColumn<double> _y_lv2_wu;
  @override
  GeneratedColumn<double> get y_lv2_wu =>
      _y_lv2_wu ??= GeneratedColumn<double>('y_lv2_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv3_uvMeta = const VerificationMeta('y_lv3_uv');
  GeneratedColumn<double> _y_lv3_uv;
  @override
  GeneratedColumn<double> get y_lv3_uv =>
      _y_lv3_uv ??= GeneratedColumn<double>('y_lv3_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv3_vwMeta = const VerificationMeta('y_lv3_vw');
  GeneratedColumn<double> _y_lv3_vw;
  @override
  GeneratedColumn<double> get y_lv3_vw =>
      _y_lv3_vw ??= GeneratedColumn<double>('y_lv3_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv3_wuMeta = const VerificationMeta('y_lv3_wu');
  GeneratedColumn<double> _y_lv3_wu;
  @override
  GeneratedColumn<double> get y_lv3_wu =>
      _y_lv3_wu ??= GeneratedColumn<double>('y_lv3_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv4_uvMeta = const VerificationMeta('y_lv4_uv');
  GeneratedColumn<double> _y_lv4_uv;
  @override
  GeneratedColumn<double> get y_lv4_uv =>
      _y_lv4_uv ??= GeneratedColumn<double>('y_lv4_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv4_vwMeta = const VerificationMeta('y_lv4_vw');
  GeneratedColumn<double> _y_lv4_vw;
  @override
  GeneratedColumn<double> get y_lv4_vw =>
      _y_lv4_vw ??= GeneratedColumn<double>('y_lv4_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_lv4_wuMeta = const VerificationMeta('y_lv4_wu');
  GeneratedColumn<double> _y_lv4_wu;
  @override
  GeneratedColumn<double> get y_lv4_wu =>
      _y_lv4_wu ??= GeneratedColumn<double>('y_lv4_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_hv_uvMeta = const VerificationMeta('b_hv_uv');
  GeneratedColumn<double> _b_hv_uv;
  @override
  GeneratedColumn<double> get b_hv_uv =>
      _b_hv_uv ??= GeneratedColumn<double>('b_hv_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_hv_vwMeta = const VerificationMeta('b_hv_vw');
  GeneratedColumn<double> _b_hv_vw;
  @override
  GeneratedColumn<double> get b_hv_vw =>
      _b_hv_vw ??= GeneratedColumn<double>('b_hv_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_hv_wuMeta = const VerificationMeta('b_hv_wu');
  GeneratedColumn<double> _b_hv_wu;
  @override
  GeneratedColumn<double> get b_hv_wu =>
      _b_hv_wu ??= GeneratedColumn<double>('b_hv_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv1_uvMeta = const VerificationMeta('b_lv1_uv');
  GeneratedColumn<double> _b_lv1_uv;
  @override
  GeneratedColumn<double> get b_lv1_uv =>
      _b_lv1_uv ??= GeneratedColumn<double>('b_lv1_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv1_vwMeta = const VerificationMeta('b_lv1_vw');
  GeneratedColumn<double> _b_lv1_vw;
  @override
  GeneratedColumn<double> get b_lv1_vw =>
      _b_lv1_vw ??= GeneratedColumn<double>('b_lv1_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv1_wuMeta = const VerificationMeta('b_lv1_wu');
  GeneratedColumn<double> _b_lv1_wu;
  @override
  GeneratedColumn<double> get b_lv1_wu =>
      _b_lv1_wu ??= GeneratedColumn<double>('b_lv1_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv2_uvMeta = const VerificationMeta('b_lv2_uv');
  GeneratedColumn<double> _b_lv2_uv;
  @override
  GeneratedColumn<double> get b_lv2_uv =>
      _b_lv2_uv ??= GeneratedColumn<double>('b_lv2_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv2_vwMeta = const VerificationMeta('b_lv2_vw');
  GeneratedColumn<double> _b_lv2_vw;
  @override
  GeneratedColumn<double> get b_lv2_vw =>
      _b_lv2_vw ??= GeneratedColumn<double>('b_lv2_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv2_wuMeta = const VerificationMeta('b_lv2_wu');
  GeneratedColumn<double> _b_lv2_wu;
  @override
  GeneratedColumn<double> get b_lv2_wu =>
      _b_lv2_wu ??= GeneratedColumn<double>('b_lv2_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv3_uvMeta = const VerificationMeta('b_lv3_uv');
  GeneratedColumn<double> _b_lv3_uv;
  @override
  GeneratedColumn<double> get b_lv3_uv =>
      _b_lv3_uv ??= GeneratedColumn<double>('b_lv3_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv3_vwMeta = const VerificationMeta('b_lv3_vw');
  GeneratedColumn<double> _b_lv3_vw;
  @override
  GeneratedColumn<double> get b_lv3_vw =>
      _b_lv3_vw ??= GeneratedColumn<double>('b_lv3_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv3_wuMeta = const VerificationMeta('b_lv3_wu');
  GeneratedColumn<double> _b_lv3_wu;
  @override
  GeneratedColumn<double> get b_lv3_wu =>
      _b_lv3_wu ??= GeneratedColumn<double>('b_lv3_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv4_uvMeta = const VerificationMeta('b_lv4_uv');
  GeneratedColumn<double> _b_lv4_uv;
  @override
  GeneratedColumn<double> get b_lv4_uv =>
      _b_lv4_uv ??= GeneratedColumn<double>('b_lv4_uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv4_vwMeta = const VerificationMeta('b_lv4_vw');
  GeneratedColumn<double> _b_lv4_vw;
  @override
  GeneratedColumn<double> get b_lv4_vw =>
      _b_lv4_vw ??= GeneratedColumn<double>('b_lv4_vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_lv4_wuMeta = const VerificationMeta('b_lv4_wu');
  GeneratedColumn<double> _b_lv4_wu;
  @override
  GeneratedColumn<double> get b_lv4_wu =>
      _b_lv4_wu ??= GeneratedColumn<double>('b_lv4_wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        r_hv_uv,
        r_hv_vw,
        r_hv_wu,
        r_lv1_uv,
        r_lv1_vw,
        r_lv1_wu,
        r_lv2_uv,
        r_lv2_vw,
        r_lv2_wu,
        r_lv3_uv,
        r_lv3_vw,
        r_lv3_wu,
        r_lv4_uv,
        r_lv4_vw,
        r_lv4_wu,
        y_hv_uv,
        y_hv_vw,
        y_hv_wu,
        y_lv1_uv,
        y_lv1_vw,
        y_lv1_wu,
        y_lv2_uv,
        y_lv2_vw,
        y_lv2_wu,
        y_lv3_uv,
        y_lv3_vw,
        y_lv3_wu,
        y_lv4_uv,
        y_lv4_vw,
        y_lv4_wu,
        b_hv_uv,
        b_hv_vw,
        b_hv_wu,
        b_lv1_uv,
        b_lv1_vw,
        b_lv1_wu,
        b_lv2_uv,
        b_lv2_vw,
        b_lv2_wu,
        b_lv3_uv,
        b_lv3_vw,
        b_lv3_wu,
        b_lv4_uv,
        b_lv4_vw,
        b_lv4_wu
      ];
  @override
  String get aliasedName => _alias ?? 'it_mb_local_datasource_impl';
  @override
  String get actualTableName => 'it_mb_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ItMbLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('r_hv_uv')) {
      context.handle(_r_hv_uvMeta,
          r_hv_uv.isAcceptableOrUnknown(data['r_hv_uv'], _r_hv_uvMeta));
    } else if (isInserting) {
      context.missing(_r_hv_uvMeta);
    }
    if (data.containsKey('r_hv_vw')) {
      context.handle(_r_hv_vwMeta,
          r_hv_vw.isAcceptableOrUnknown(data['r_hv_vw'], _r_hv_vwMeta));
    } else if (isInserting) {
      context.missing(_r_hv_vwMeta);
    }
    if (data.containsKey('r_hv_wu')) {
      context.handle(_r_hv_wuMeta,
          r_hv_wu.isAcceptableOrUnknown(data['r_hv_wu'], _r_hv_wuMeta));
    } else if (isInserting) {
      context.missing(_r_hv_wuMeta);
    }
    if (data.containsKey('r_lv1_uv')) {
      context.handle(_r_lv1_uvMeta,
          r_lv1_uv.isAcceptableOrUnknown(data['r_lv1_uv'], _r_lv1_uvMeta));
    } else if (isInserting) {
      context.missing(_r_lv1_uvMeta);
    }
    if (data.containsKey('r_lv1_vw')) {
      context.handle(_r_lv1_vwMeta,
          r_lv1_vw.isAcceptableOrUnknown(data['r_lv1_vw'], _r_lv1_vwMeta));
    } else if (isInserting) {
      context.missing(_r_lv1_vwMeta);
    }
    if (data.containsKey('r_lv1_wu')) {
      context.handle(_r_lv1_wuMeta,
          r_lv1_wu.isAcceptableOrUnknown(data['r_lv1_wu'], _r_lv1_wuMeta));
    } else if (isInserting) {
      context.missing(_r_lv1_wuMeta);
    }
    if (data.containsKey('r_lv2_uv')) {
      context.handle(_r_lv2_uvMeta,
          r_lv2_uv.isAcceptableOrUnknown(data['r_lv2_uv'], _r_lv2_uvMeta));
    } else if (isInserting) {
      context.missing(_r_lv2_uvMeta);
    }
    if (data.containsKey('r_lv2_vw')) {
      context.handle(_r_lv2_vwMeta,
          r_lv2_vw.isAcceptableOrUnknown(data['r_lv2_vw'], _r_lv2_vwMeta));
    } else if (isInserting) {
      context.missing(_r_lv2_vwMeta);
    }
    if (data.containsKey('r_lv2_wu')) {
      context.handle(_r_lv2_wuMeta,
          r_lv2_wu.isAcceptableOrUnknown(data['r_lv2_wu'], _r_lv2_wuMeta));
    } else if (isInserting) {
      context.missing(_r_lv2_wuMeta);
    }
    if (data.containsKey('r_lv3_uv')) {
      context.handle(_r_lv3_uvMeta,
          r_lv3_uv.isAcceptableOrUnknown(data['r_lv3_uv'], _r_lv3_uvMeta));
    } else if (isInserting) {
      context.missing(_r_lv3_uvMeta);
    }
    if (data.containsKey('r_lv3_vw')) {
      context.handle(_r_lv3_vwMeta,
          r_lv3_vw.isAcceptableOrUnknown(data['r_lv3_vw'], _r_lv3_vwMeta));
    } else if (isInserting) {
      context.missing(_r_lv3_vwMeta);
    }
    if (data.containsKey('r_lv3_wu')) {
      context.handle(_r_lv3_wuMeta,
          r_lv3_wu.isAcceptableOrUnknown(data['r_lv3_wu'], _r_lv3_wuMeta));
    } else if (isInserting) {
      context.missing(_r_lv3_wuMeta);
    }
    if (data.containsKey('r_lv4_uv')) {
      context.handle(_r_lv4_uvMeta,
          r_lv4_uv.isAcceptableOrUnknown(data['r_lv4_uv'], _r_lv4_uvMeta));
    } else if (isInserting) {
      context.missing(_r_lv4_uvMeta);
    }
    if (data.containsKey('r_lv4_vw')) {
      context.handle(_r_lv4_vwMeta,
          r_lv4_vw.isAcceptableOrUnknown(data['r_lv4_vw'], _r_lv4_vwMeta));
    } else if (isInserting) {
      context.missing(_r_lv4_vwMeta);
    }
    if (data.containsKey('r_lv4_wu')) {
      context.handle(_r_lv4_wuMeta,
          r_lv4_wu.isAcceptableOrUnknown(data['r_lv4_wu'], _r_lv4_wuMeta));
    } else if (isInserting) {
      context.missing(_r_lv4_wuMeta);
    }
    if (data.containsKey('y_hv_uv')) {
      context.handle(_y_hv_uvMeta,
          y_hv_uv.isAcceptableOrUnknown(data['y_hv_uv'], _y_hv_uvMeta));
    } else if (isInserting) {
      context.missing(_y_hv_uvMeta);
    }
    if (data.containsKey('y_hv_vw')) {
      context.handle(_y_hv_vwMeta,
          y_hv_vw.isAcceptableOrUnknown(data['y_hv_vw'], _y_hv_vwMeta));
    } else if (isInserting) {
      context.missing(_y_hv_vwMeta);
    }
    if (data.containsKey('y_hv_wu')) {
      context.handle(_y_hv_wuMeta,
          y_hv_wu.isAcceptableOrUnknown(data['y_hv_wu'], _y_hv_wuMeta));
    } else if (isInserting) {
      context.missing(_y_hv_wuMeta);
    }
    if (data.containsKey('y_lv1_uv')) {
      context.handle(_y_lv1_uvMeta,
          y_lv1_uv.isAcceptableOrUnknown(data['y_lv1_uv'], _y_lv1_uvMeta));
    } else if (isInserting) {
      context.missing(_y_lv1_uvMeta);
    }
    if (data.containsKey('y_lv1_vw')) {
      context.handle(_y_lv1_vwMeta,
          y_lv1_vw.isAcceptableOrUnknown(data['y_lv1_vw'], _y_lv1_vwMeta));
    } else if (isInserting) {
      context.missing(_y_lv1_vwMeta);
    }
    if (data.containsKey('y_lv1_wu')) {
      context.handle(_y_lv1_wuMeta,
          y_lv1_wu.isAcceptableOrUnknown(data['y_lv1_wu'], _y_lv1_wuMeta));
    } else if (isInserting) {
      context.missing(_y_lv1_wuMeta);
    }
    if (data.containsKey('y_lv2_uv')) {
      context.handle(_y_lv2_uvMeta,
          y_lv2_uv.isAcceptableOrUnknown(data['y_lv2_uv'], _y_lv2_uvMeta));
    } else if (isInserting) {
      context.missing(_y_lv2_uvMeta);
    }
    if (data.containsKey('y_lv2_vw')) {
      context.handle(_y_lv2_vwMeta,
          y_lv2_vw.isAcceptableOrUnknown(data['y_lv2_vw'], _y_lv2_vwMeta));
    } else if (isInserting) {
      context.missing(_y_lv2_vwMeta);
    }
    if (data.containsKey('y_lv2_wu')) {
      context.handle(_y_lv2_wuMeta,
          y_lv2_wu.isAcceptableOrUnknown(data['y_lv2_wu'], _y_lv2_wuMeta));
    } else if (isInserting) {
      context.missing(_y_lv2_wuMeta);
    }
    if (data.containsKey('y_lv3_uv')) {
      context.handle(_y_lv3_uvMeta,
          y_lv3_uv.isAcceptableOrUnknown(data['y_lv3_uv'], _y_lv3_uvMeta));
    } else if (isInserting) {
      context.missing(_y_lv3_uvMeta);
    }
    if (data.containsKey('y_lv3_vw')) {
      context.handle(_y_lv3_vwMeta,
          y_lv3_vw.isAcceptableOrUnknown(data['y_lv3_vw'], _y_lv3_vwMeta));
    } else if (isInserting) {
      context.missing(_y_lv3_vwMeta);
    }
    if (data.containsKey('y_lv3_wu')) {
      context.handle(_y_lv3_wuMeta,
          y_lv3_wu.isAcceptableOrUnknown(data['y_lv3_wu'], _y_lv3_wuMeta));
    } else if (isInserting) {
      context.missing(_y_lv3_wuMeta);
    }
    if (data.containsKey('y_lv4_uv')) {
      context.handle(_y_lv4_uvMeta,
          y_lv4_uv.isAcceptableOrUnknown(data['y_lv4_uv'], _y_lv4_uvMeta));
    } else if (isInserting) {
      context.missing(_y_lv4_uvMeta);
    }
    if (data.containsKey('y_lv4_vw')) {
      context.handle(_y_lv4_vwMeta,
          y_lv4_vw.isAcceptableOrUnknown(data['y_lv4_vw'], _y_lv4_vwMeta));
    } else if (isInserting) {
      context.missing(_y_lv4_vwMeta);
    }
    if (data.containsKey('y_lv4_wu')) {
      context.handle(_y_lv4_wuMeta,
          y_lv4_wu.isAcceptableOrUnknown(data['y_lv4_wu'], _y_lv4_wuMeta));
    } else if (isInserting) {
      context.missing(_y_lv4_wuMeta);
    }
    if (data.containsKey('b_hv_uv')) {
      context.handle(_b_hv_uvMeta,
          b_hv_uv.isAcceptableOrUnknown(data['b_hv_uv'], _b_hv_uvMeta));
    } else if (isInserting) {
      context.missing(_b_hv_uvMeta);
    }
    if (data.containsKey('b_hv_vw')) {
      context.handle(_b_hv_vwMeta,
          b_hv_vw.isAcceptableOrUnknown(data['b_hv_vw'], _b_hv_vwMeta));
    } else if (isInserting) {
      context.missing(_b_hv_vwMeta);
    }
    if (data.containsKey('b_hv_wu')) {
      context.handle(_b_hv_wuMeta,
          b_hv_wu.isAcceptableOrUnknown(data['b_hv_wu'], _b_hv_wuMeta));
    } else if (isInserting) {
      context.missing(_b_hv_wuMeta);
    }
    if (data.containsKey('b_lv1_uv')) {
      context.handle(_b_lv1_uvMeta,
          b_lv1_uv.isAcceptableOrUnknown(data['b_lv1_uv'], _b_lv1_uvMeta));
    } else if (isInserting) {
      context.missing(_b_lv1_uvMeta);
    }
    if (data.containsKey('b_lv1_vw')) {
      context.handle(_b_lv1_vwMeta,
          b_lv1_vw.isAcceptableOrUnknown(data['b_lv1_vw'], _b_lv1_vwMeta));
    } else if (isInserting) {
      context.missing(_b_lv1_vwMeta);
    }
    if (data.containsKey('b_lv1_wu')) {
      context.handle(_b_lv1_wuMeta,
          b_lv1_wu.isAcceptableOrUnknown(data['b_lv1_wu'], _b_lv1_wuMeta));
    } else if (isInserting) {
      context.missing(_b_lv1_wuMeta);
    }
    if (data.containsKey('b_lv2_uv')) {
      context.handle(_b_lv2_uvMeta,
          b_lv2_uv.isAcceptableOrUnknown(data['b_lv2_uv'], _b_lv2_uvMeta));
    } else if (isInserting) {
      context.missing(_b_lv2_uvMeta);
    }
    if (data.containsKey('b_lv2_vw')) {
      context.handle(_b_lv2_vwMeta,
          b_lv2_vw.isAcceptableOrUnknown(data['b_lv2_vw'], _b_lv2_vwMeta));
    } else if (isInserting) {
      context.missing(_b_lv2_vwMeta);
    }
    if (data.containsKey('b_lv2_wu')) {
      context.handle(_b_lv2_wuMeta,
          b_lv2_wu.isAcceptableOrUnknown(data['b_lv2_wu'], _b_lv2_wuMeta));
    } else if (isInserting) {
      context.missing(_b_lv2_wuMeta);
    }
    if (data.containsKey('b_lv3_uv')) {
      context.handle(_b_lv3_uvMeta,
          b_lv3_uv.isAcceptableOrUnknown(data['b_lv3_uv'], _b_lv3_uvMeta));
    } else if (isInserting) {
      context.missing(_b_lv3_uvMeta);
    }
    if (data.containsKey('b_lv3_vw')) {
      context.handle(_b_lv3_vwMeta,
          b_lv3_vw.isAcceptableOrUnknown(data['b_lv3_vw'], _b_lv3_vwMeta));
    } else if (isInserting) {
      context.missing(_b_lv3_vwMeta);
    }
    if (data.containsKey('b_lv3_wu')) {
      context.handle(_b_lv3_wuMeta,
          b_lv3_wu.isAcceptableOrUnknown(data['b_lv3_wu'], _b_lv3_wuMeta));
    } else if (isInserting) {
      context.missing(_b_lv3_wuMeta);
    }
    if (data.containsKey('b_lv4_uv')) {
      context.handle(_b_lv4_uvMeta,
          b_lv4_uv.isAcceptableOrUnknown(data['b_lv4_uv'], _b_lv4_uvMeta));
    } else if (isInserting) {
      context.missing(_b_lv4_uvMeta);
    }
    if (data.containsKey('b_lv4_vw')) {
      context.handle(_b_lv4_vwMeta,
          b_lv4_vw.isAcceptableOrUnknown(data['b_lv4_vw'], _b_lv4_vwMeta));
    } else if (isInserting) {
      context.missing(_b_lv4_vwMeta);
    }
    if (data.containsKey('b_lv4_wu')) {
      context.handle(_b_lv4_wuMeta,
          b_lv4_wu.isAcceptableOrUnknown(data['b_lv4_wu'], _b_lv4_wuMeta));
    } else if (isInserting) {
      context.missing(_b_lv4_wuMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ItMbLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ItMbLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ItMbLocalDatasourceImplTable createAlias(String alias) {
    return $ItMbLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ItVgLocalData extends DataClass implements Insertable<ItVgLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final String equipmentUsed;
  final DateTime updateDate;
  final double lv1_v1;
  final double lv1_v2;
  final double lv1_v3;
  final double lv1_v4;
  final double lv2_v1;
  final double lv2_v2;
  final double lv2_v3;
  final double lv2_v4;
  final double lv3_v1;
  final double lv3_v2;
  final double lv3_v3;
  final double lv3_v4;
  final double lv4_v1;
  final double lv4_v2;
  final double lv4_v3;
  final double lv4_v4;
  ItVgLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.equipmentUsed,
      @required this.updateDate,
      @required this.lv1_v1,
      @required this.lv1_v2,
      @required this.lv1_v3,
      @required this.lv1_v4,
      @required this.lv2_v1,
      @required this.lv2_v2,
      @required this.lv2_v3,
      @required this.lv2_v4,
      @required this.lv3_v1,
      @required this.lv3_v2,
      @required this.lv3_v3,
      @required this.lv3_v4,
      @required this.lv4_v1,
      @required this.lv4_v2,
      @required this.lv4_v3,
      @required this.lv4_v4});
  factory ItVgLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ItVgLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      lv1_v1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_v1']),
      lv1_v2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_v2']),
      lv1_v3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_v3']),
      lv1_v4: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv1_v4']),
      lv2_v1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv2_v1']),
      lv2_v2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv2_v2']),
      lv2_v3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv2_v3']),
      lv2_v4: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv2_v4']),
      lv3_v1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv3_v1']),
      lv3_v2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv3_v2']),
      lv3_v3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv3_v3']),
      lv3_v4: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv3_v4']),
      lv4_v1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv4_v1']),
      lv4_v2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv4_v2']),
      lv4_v3: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv4_v3']),
      lv4_v4: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}lv4_v4']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || lv1_v1 != null) {
      map['lv1_v1'] = Variable<double>(lv1_v1);
    }
    if (!nullToAbsent || lv1_v2 != null) {
      map['lv1_v2'] = Variable<double>(lv1_v2);
    }
    if (!nullToAbsent || lv1_v3 != null) {
      map['lv1_v3'] = Variable<double>(lv1_v3);
    }
    if (!nullToAbsent || lv1_v4 != null) {
      map['lv1_v4'] = Variable<double>(lv1_v4);
    }
    if (!nullToAbsent || lv2_v1 != null) {
      map['lv2_v1'] = Variable<double>(lv2_v1);
    }
    if (!nullToAbsent || lv2_v2 != null) {
      map['lv2_v2'] = Variable<double>(lv2_v2);
    }
    if (!nullToAbsent || lv2_v3 != null) {
      map['lv2_v3'] = Variable<double>(lv2_v3);
    }
    if (!nullToAbsent || lv2_v4 != null) {
      map['lv2_v4'] = Variable<double>(lv2_v4);
    }
    if (!nullToAbsent || lv3_v1 != null) {
      map['lv3_v1'] = Variable<double>(lv3_v1);
    }
    if (!nullToAbsent || lv3_v2 != null) {
      map['lv3_v2'] = Variable<double>(lv3_v2);
    }
    if (!nullToAbsent || lv3_v3 != null) {
      map['lv3_v3'] = Variable<double>(lv3_v3);
    }
    if (!nullToAbsent || lv3_v4 != null) {
      map['lv3_v4'] = Variable<double>(lv3_v4);
    }
    if (!nullToAbsent || lv4_v1 != null) {
      map['lv4_v1'] = Variable<double>(lv4_v1);
    }
    if (!nullToAbsent || lv4_v2 != null) {
      map['lv4_v2'] = Variable<double>(lv4_v2);
    }
    if (!nullToAbsent || lv4_v3 != null) {
      map['lv4_v3'] = Variable<double>(lv4_v3);
    }
    if (!nullToAbsent || lv4_v4 != null) {
      map['lv4_v4'] = Variable<double>(lv4_v4);
    }
    return map;
  }

  ItVgLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ItVgLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      lv1_v1:
          lv1_v1 == null && nullToAbsent ? const Value.absent() : Value(lv1_v1),
      lv1_v2:
          lv1_v2 == null && nullToAbsent ? const Value.absent() : Value(lv1_v2),
      lv1_v3:
          lv1_v3 == null && nullToAbsent ? const Value.absent() : Value(lv1_v3),
      lv1_v4:
          lv1_v4 == null && nullToAbsent ? const Value.absent() : Value(lv1_v4),
      lv2_v1:
          lv2_v1 == null && nullToAbsent ? const Value.absent() : Value(lv2_v1),
      lv2_v2:
          lv2_v2 == null && nullToAbsent ? const Value.absent() : Value(lv2_v2),
      lv2_v3:
          lv2_v3 == null && nullToAbsent ? const Value.absent() : Value(lv2_v3),
      lv2_v4:
          lv2_v4 == null && nullToAbsent ? const Value.absent() : Value(lv2_v4),
      lv3_v1:
          lv3_v1 == null && nullToAbsent ? const Value.absent() : Value(lv3_v1),
      lv3_v2:
          lv3_v2 == null && nullToAbsent ? const Value.absent() : Value(lv3_v2),
      lv3_v3:
          lv3_v3 == null && nullToAbsent ? const Value.absent() : Value(lv3_v3),
      lv3_v4:
          lv3_v4 == null && nullToAbsent ? const Value.absent() : Value(lv3_v4),
      lv4_v1:
          lv4_v1 == null && nullToAbsent ? const Value.absent() : Value(lv4_v1),
      lv4_v2:
          lv4_v2 == null && nullToAbsent ? const Value.absent() : Value(lv4_v2),
      lv4_v3:
          lv4_v3 == null && nullToAbsent ? const Value.absent() : Value(lv4_v3),
      lv4_v4:
          lv4_v4 == null && nullToAbsent ? const Value.absent() : Value(lv4_v4),
    );
  }

  factory ItVgLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ItVgLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      lv1_v1: serializer.fromJson<double>(json['lv1_v1']),
      lv1_v2: serializer.fromJson<double>(json['lv1_v2']),
      lv1_v3: serializer.fromJson<double>(json['lv1_v3']),
      lv1_v4: serializer.fromJson<double>(json['lv1_v4']),
      lv2_v1: serializer.fromJson<double>(json['lv2_v1']),
      lv2_v2: serializer.fromJson<double>(json['lv2_v2']),
      lv2_v3: serializer.fromJson<double>(json['lv2_v3']),
      lv2_v4: serializer.fromJson<double>(json['lv2_v4']),
      lv3_v1: serializer.fromJson<double>(json['lv3_v1']),
      lv3_v2: serializer.fromJson<double>(json['lv3_v2']),
      lv3_v3: serializer.fromJson<double>(json['lv3_v3']),
      lv3_v4: serializer.fromJson<double>(json['lv3_v4']),
      lv4_v1: serializer.fromJson<double>(json['lv4_v1']),
      lv4_v2: serializer.fromJson<double>(json['lv4_v2']),
      lv4_v3: serializer.fromJson<double>(json['lv4_v3']),
      lv4_v4: serializer.fromJson<double>(json['lv4_v4']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'lv1_v1': serializer.toJson<double>(lv1_v1),
      'lv1_v2': serializer.toJson<double>(lv1_v2),
      'lv1_v3': serializer.toJson<double>(lv1_v3),
      'lv1_v4': serializer.toJson<double>(lv1_v4),
      'lv2_v1': serializer.toJson<double>(lv2_v1),
      'lv2_v2': serializer.toJson<double>(lv2_v2),
      'lv2_v3': serializer.toJson<double>(lv2_v3),
      'lv2_v4': serializer.toJson<double>(lv2_v4),
      'lv3_v1': serializer.toJson<double>(lv3_v1),
      'lv3_v2': serializer.toJson<double>(lv3_v2),
      'lv3_v3': serializer.toJson<double>(lv3_v3),
      'lv3_v4': serializer.toJson<double>(lv3_v4),
      'lv4_v1': serializer.toJson<double>(lv4_v1),
      'lv4_v2': serializer.toJson<double>(lv4_v2),
      'lv4_v3': serializer.toJson<double>(lv4_v3),
      'lv4_v4': serializer.toJson<double>(lv4_v4),
    };
  }

  ItVgLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          String equipmentUsed,
          DateTime updateDate,
          double lv1_v1,
          double lv1_v2,
          double lv1_v3,
          double lv1_v4,
          double lv2_v1,
          double lv2_v2,
          double lv2_v3,
          double lv2_v4,
          double lv3_v1,
          double lv3_v2,
          double lv3_v3,
          double lv3_v4,
          double lv4_v1,
          double lv4_v2,
          double lv4_v3,
          double lv4_v4}) =>
      ItVgLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
        lv1_v1: lv1_v1 ?? this.lv1_v1,
        lv1_v2: lv1_v2 ?? this.lv1_v2,
        lv1_v3: lv1_v3 ?? this.lv1_v3,
        lv1_v4: lv1_v4 ?? this.lv1_v4,
        lv2_v1: lv2_v1 ?? this.lv2_v1,
        lv2_v2: lv2_v2 ?? this.lv2_v2,
        lv2_v3: lv2_v3 ?? this.lv2_v3,
        lv2_v4: lv2_v4 ?? this.lv2_v4,
        lv3_v1: lv3_v1 ?? this.lv3_v1,
        lv3_v2: lv3_v2 ?? this.lv3_v2,
        lv3_v3: lv3_v3 ?? this.lv3_v3,
        lv3_v4: lv3_v4 ?? this.lv3_v4,
        lv4_v1: lv4_v1 ?? this.lv4_v1,
        lv4_v2: lv4_v2 ?? this.lv4_v2,
        lv4_v3: lv4_v3 ?? this.lv4_v3,
        lv4_v4: lv4_v4 ?? this.lv4_v4,
      );
  @override
  String toString() {
    return (StringBuffer('ItVgLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('lv1_v1: $lv1_v1, ')
          ..write('lv1_v2: $lv1_v2, ')
          ..write('lv1_v3: $lv1_v3, ')
          ..write('lv1_v4: $lv1_v4, ')
          ..write('lv2_v1: $lv2_v1, ')
          ..write('lv2_v2: $lv2_v2, ')
          ..write('lv2_v3: $lv2_v3, ')
          ..write('lv2_v4: $lv2_v4, ')
          ..write('lv3_v1: $lv3_v1, ')
          ..write('lv3_v2: $lv3_v2, ')
          ..write('lv3_v3: $lv3_v3, ')
          ..write('lv3_v4: $lv3_v4, ')
          ..write('lv4_v1: $lv4_v1, ')
          ..write('lv4_v2: $lv4_v2, ')
          ..write('lv4_v3: $lv4_v3, ')
          ..write('lv4_v4: $lv4_v4')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        lv1_v1,
        lv1_v2,
        lv1_v3,
        lv1_v4,
        lv2_v1,
        lv2_v2,
        lv2_v3,
        lv2_v4,
        lv3_v1,
        lv3_v2,
        lv3_v3,
        lv3_v4,
        lv4_v1,
        lv4_v2,
        lv4_v3,
        lv4_v4
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ItVgLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate &&
          other.lv1_v1 == this.lv1_v1 &&
          other.lv1_v2 == this.lv1_v2 &&
          other.lv1_v3 == this.lv1_v3 &&
          other.lv1_v4 == this.lv1_v4 &&
          other.lv2_v1 == this.lv2_v1 &&
          other.lv2_v2 == this.lv2_v2 &&
          other.lv2_v3 == this.lv2_v3 &&
          other.lv2_v4 == this.lv2_v4 &&
          other.lv3_v1 == this.lv3_v1 &&
          other.lv3_v2 == this.lv3_v2 &&
          other.lv3_v3 == this.lv3_v3 &&
          other.lv3_v4 == this.lv3_v4 &&
          other.lv4_v1 == this.lv4_v1 &&
          other.lv4_v2 == this.lv4_v2 &&
          other.lv4_v3 == this.lv4_v3 &&
          other.lv4_v4 == this.lv4_v4);
}

class ItVgLocalDatasourceImplCompanion extends UpdateCompanion<ItVgLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  final Value<double> lv1_v1;
  final Value<double> lv1_v2;
  final Value<double> lv1_v3;
  final Value<double> lv1_v4;
  final Value<double> lv2_v1;
  final Value<double> lv2_v2;
  final Value<double> lv2_v3;
  final Value<double> lv2_v4;
  final Value<double> lv3_v1;
  final Value<double> lv3_v2;
  final Value<double> lv3_v3;
  final Value<double> lv3_v4;
  final Value<double> lv4_v1;
  final Value<double> lv4_v2;
  final Value<double> lv4_v3;
  final Value<double> lv4_v4;
  const ItVgLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.lv1_v1 = const Value.absent(),
    this.lv1_v2 = const Value.absent(),
    this.lv1_v3 = const Value.absent(),
    this.lv1_v4 = const Value.absent(),
    this.lv2_v1 = const Value.absent(),
    this.lv2_v2 = const Value.absent(),
    this.lv2_v3 = const Value.absent(),
    this.lv2_v4 = const Value.absent(),
    this.lv3_v1 = const Value.absent(),
    this.lv3_v2 = const Value.absent(),
    this.lv3_v3 = const Value.absent(),
    this.lv3_v4 = const Value.absent(),
    this.lv4_v1 = const Value.absent(),
    this.lv4_v2 = const Value.absent(),
    this.lv4_v3 = const Value.absent(),
    this.lv4_v4 = const Value.absent(),
  });
  ItVgLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
    @required double lv1_v1,
    @required double lv1_v2,
    @required double lv1_v3,
    @required double lv1_v4,
    @required double lv2_v1,
    @required double lv2_v2,
    @required double lv2_v3,
    @required double lv2_v4,
    @required double lv3_v1,
    @required double lv3_v2,
    @required double lv3_v3,
    @required double lv3_v4,
    @required double lv4_v1,
    @required double lv4_v2,
    @required double lv4_v3,
    @required double lv4_v4,
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        equipmentUsed = Value(equipmentUsed),
        lv1_v1 = Value(lv1_v1),
        lv1_v2 = Value(lv1_v2),
        lv1_v3 = Value(lv1_v3),
        lv1_v4 = Value(lv1_v4),
        lv2_v1 = Value(lv2_v1),
        lv2_v2 = Value(lv2_v2),
        lv2_v3 = Value(lv2_v3),
        lv2_v4 = Value(lv2_v4),
        lv3_v1 = Value(lv3_v1),
        lv3_v2 = Value(lv3_v2),
        lv3_v3 = Value(lv3_v3),
        lv3_v4 = Value(lv3_v4),
        lv4_v1 = Value(lv4_v1),
        lv4_v2 = Value(lv4_v2),
        lv4_v3 = Value(lv4_v3),
        lv4_v4 = Value(lv4_v4);
  static Insertable<ItVgLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
    Expression<double> lv1_v1,
    Expression<double> lv1_v2,
    Expression<double> lv1_v3,
    Expression<double> lv1_v4,
    Expression<double> lv2_v1,
    Expression<double> lv2_v2,
    Expression<double> lv2_v3,
    Expression<double> lv2_v4,
    Expression<double> lv3_v1,
    Expression<double> lv3_v2,
    Expression<double> lv3_v3,
    Expression<double> lv3_v4,
    Expression<double> lv4_v1,
    Expression<double> lv4_v2,
    Expression<double> lv4_v3,
    Expression<double> lv4_v4,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
      if (lv1_v1 != null) 'lv1_v1': lv1_v1,
      if (lv1_v2 != null) 'lv1_v2': lv1_v2,
      if (lv1_v3 != null) 'lv1_v3': lv1_v3,
      if (lv1_v4 != null) 'lv1_v4': lv1_v4,
      if (lv2_v1 != null) 'lv2_v1': lv2_v1,
      if (lv2_v2 != null) 'lv2_v2': lv2_v2,
      if (lv2_v3 != null) 'lv2_v3': lv2_v3,
      if (lv2_v4 != null) 'lv2_v4': lv2_v4,
      if (lv3_v1 != null) 'lv3_v1': lv3_v1,
      if (lv3_v2 != null) 'lv3_v2': lv3_v2,
      if (lv3_v3 != null) 'lv3_v3': lv3_v3,
      if (lv3_v4 != null) 'lv3_v4': lv3_v4,
      if (lv4_v1 != null) 'lv4_v1': lv4_v1,
      if (lv4_v2 != null) 'lv4_v2': lv4_v2,
      if (lv4_v3 != null) 'lv4_v3': lv4_v3,
      if (lv4_v4 != null) 'lv4_v4': lv4_v4,
    });
  }

  ItVgLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate,
      Value<double> lv1_v1,
      Value<double> lv1_v2,
      Value<double> lv1_v3,
      Value<double> lv1_v4,
      Value<double> lv2_v1,
      Value<double> lv2_v2,
      Value<double> lv2_v3,
      Value<double> lv2_v4,
      Value<double> lv3_v1,
      Value<double> lv3_v2,
      Value<double> lv3_v3,
      Value<double> lv3_v4,
      Value<double> lv4_v1,
      Value<double> lv4_v2,
      Value<double> lv4_v3,
      Value<double> lv4_v4}) {
    return ItVgLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
      lv1_v1: lv1_v1 ?? this.lv1_v1,
      lv1_v2: lv1_v2 ?? this.lv1_v2,
      lv1_v3: lv1_v3 ?? this.lv1_v3,
      lv1_v4: lv1_v4 ?? this.lv1_v4,
      lv2_v1: lv2_v1 ?? this.lv2_v1,
      lv2_v2: lv2_v2 ?? this.lv2_v2,
      lv2_v3: lv2_v3 ?? this.lv2_v3,
      lv2_v4: lv2_v4 ?? this.lv2_v4,
      lv3_v1: lv3_v1 ?? this.lv3_v1,
      lv3_v2: lv3_v2 ?? this.lv3_v2,
      lv3_v3: lv3_v3 ?? this.lv3_v3,
      lv3_v4: lv3_v4 ?? this.lv3_v4,
      lv4_v1: lv4_v1 ?? this.lv4_v1,
      lv4_v2: lv4_v2 ?? this.lv4_v2,
      lv4_v3: lv4_v3 ?? this.lv4_v3,
      lv4_v4: lv4_v4 ?? this.lv4_v4,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (lv1_v1.present) {
      map['lv1_v1'] = Variable<double>(lv1_v1.value);
    }
    if (lv1_v2.present) {
      map['lv1_v2'] = Variable<double>(lv1_v2.value);
    }
    if (lv1_v3.present) {
      map['lv1_v3'] = Variable<double>(lv1_v3.value);
    }
    if (lv1_v4.present) {
      map['lv1_v4'] = Variable<double>(lv1_v4.value);
    }
    if (lv2_v1.present) {
      map['lv2_v1'] = Variable<double>(lv2_v1.value);
    }
    if (lv2_v2.present) {
      map['lv2_v2'] = Variable<double>(lv2_v2.value);
    }
    if (lv2_v3.present) {
      map['lv2_v3'] = Variable<double>(lv2_v3.value);
    }
    if (lv2_v4.present) {
      map['lv2_v4'] = Variable<double>(lv2_v4.value);
    }
    if (lv3_v1.present) {
      map['lv3_v1'] = Variable<double>(lv3_v1.value);
    }
    if (lv3_v2.present) {
      map['lv3_v2'] = Variable<double>(lv3_v2.value);
    }
    if (lv3_v3.present) {
      map['lv3_v3'] = Variable<double>(lv3_v3.value);
    }
    if (lv3_v4.present) {
      map['lv3_v4'] = Variable<double>(lv3_v4.value);
    }
    if (lv4_v1.present) {
      map['lv4_v1'] = Variable<double>(lv4_v1.value);
    }
    if (lv4_v2.present) {
      map['lv4_v2'] = Variable<double>(lv4_v2.value);
    }
    if (lv4_v3.present) {
      map['lv4_v3'] = Variable<double>(lv4_v3.value);
    }
    if (lv4_v4.present) {
      map['lv4_v4'] = Variable<double>(lv4_v4.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ItVgLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate, ')
          ..write('lv1_v1: $lv1_v1, ')
          ..write('lv1_v2: $lv1_v2, ')
          ..write('lv1_v3: $lv1_v3, ')
          ..write('lv1_v4: $lv1_v4, ')
          ..write('lv2_v1: $lv2_v1, ')
          ..write('lv2_v2: $lv2_v2, ')
          ..write('lv2_v3: $lv2_v3, ')
          ..write('lv2_v4: $lv2_v4, ')
          ..write('lv3_v1: $lv3_v1, ')
          ..write('lv3_v2: $lv3_v2, ')
          ..write('lv3_v3: $lv3_v3, ')
          ..write('lv3_v4: $lv3_v4, ')
          ..write('lv4_v1: $lv4_v1, ')
          ..write('lv4_v2: $lv4_v2, ')
          ..write('lv4_v3: $lv4_v3, ')
          ..write('lv4_v4: $lv4_v4')
          ..write(')'))
        .toString();
  }
}

class $ItVgLocalDatasourceImplTable extends ItVgLocalDatasourceImpl
    with TableInfo<$ItVgLocalDatasourceImplTable, ItVgLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ItVgLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _lv1_v1Meta = const VerificationMeta('lv1_v1');
  GeneratedColumn<double> _lv1_v1;
  @override
  GeneratedColumn<double> get lv1_v1 =>
      _lv1_v1 ??= GeneratedColumn<double>('lv1_v1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv1_v2Meta = const VerificationMeta('lv1_v2');
  GeneratedColumn<double> _lv1_v2;
  @override
  GeneratedColumn<double> get lv1_v2 =>
      _lv1_v2 ??= GeneratedColumn<double>('lv1_v2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv1_v3Meta = const VerificationMeta('lv1_v3');
  GeneratedColumn<double> _lv1_v3;
  @override
  GeneratedColumn<double> get lv1_v3 =>
      _lv1_v3 ??= GeneratedColumn<double>('lv1_v3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv1_v4Meta = const VerificationMeta('lv1_v4');
  GeneratedColumn<double> _lv1_v4;
  @override
  GeneratedColumn<double> get lv1_v4 =>
      _lv1_v4 ??= GeneratedColumn<double>('lv1_v4', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv2_v1Meta = const VerificationMeta('lv2_v1');
  GeneratedColumn<double> _lv2_v1;
  @override
  GeneratedColumn<double> get lv2_v1 =>
      _lv2_v1 ??= GeneratedColumn<double>('lv2_v1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv2_v2Meta = const VerificationMeta('lv2_v2');
  GeneratedColumn<double> _lv2_v2;
  @override
  GeneratedColumn<double> get lv2_v2 =>
      _lv2_v2 ??= GeneratedColumn<double>('lv2_v2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv2_v3Meta = const VerificationMeta('lv2_v3');
  GeneratedColumn<double> _lv2_v3;
  @override
  GeneratedColumn<double> get lv2_v3 =>
      _lv2_v3 ??= GeneratedColumn<double>('lv2_v3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv2_v4Meta = const VerificationMeta('lv2_v4');
  GeneratedColumn<double> _lv2_v4;
  @override
  GeneratedColumn<double> get lv2_v4 =>
      _lv2_v4 ??= GeneratedColumn<double>('lv2_v4', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv3_v1Meta = const VerificationMeta('lv3_v1');
  GeneratedColumn<double> _lv3_v1;
  @override
  GeneratedColumn<double> get lv3_v1 =>
      _lv3_v1 ??= GeneratedColumn<double>('lv3_v1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv3_v2Meta = const VerificationMeta('lv3_v2');
  GeneratedColumn<double> _lv3_v2;
  @override
  GeneratedColumn<double> get lv3_v2 =>
      _lv3_v2 ??= GeneratedColumn<double>('lv3_v2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv3_v3Meta = const VerificationMeta('lv3_v3');
  GeneratedColumn<double> _lv3_v3;
  @override
  GeneratedColumn<double> get lv3_v3 =>
      _lv3_v3 ??= GeneratedColumn<double>('lv3_v3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv3_v4Meta = const VerificationMeta('lv3_v4');
  GeneratedColumn<double> _lv3_v4;
  @override
  GeneratedColumn<double> get lv3_v4 =>
      _lv3_v4 ??= GeneratedColumn<double>('lv3_v4', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv4_v1Meta = const VerificationMeta('lv4_v1');
  GeneratedColumn<double> _lv4_v1;
  @override
  GeneratedColumn<double> get lv4_v1 =>
      _lv4_v1 ??= GeneratedColumn<double>('lv4_v1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv4_v2Meta = const VerificationMeta('lv4_v2');
  GeneratedColumn<double> _lv4_v2;
  @override
  GeneratedColumn<double> get lv4_v2 =>
      _lv4_v2 ??= GeneratedColumn<double>('lv4_v2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv4_v3Meta = const VerificationMeta('lv4_v3');
  GeneratedColumn<double> _lv4_v3;
  @override
  GeneratedColumn<double> get lv4_v3 =>
      _lv4_v3 ??= GeneratedColumn<double>('lv4_v3', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _lv4_v4Meta = const VerificationMeta('lv4_v4');
  GeneratedColumn<double> _lv4_v4;
  @override
  GeneratedColumn<double> get lv4_v4 =>
      _lv4_v4 ??= GeneratedColumn<double>('lv4_v4', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        equipmentUsed,
        updateDate,
        lv1_v1,
        lv1_v2,
        lv1_v3,
        lv1_v4,
        lv2_v1,
        lv2_v2,
        lv2_v3,
        lv2_v4,
        lv3_v1,
        lv3_v2,
        lv3_v3,
        lv3_v4,
        lv4_v1,
        lv4_v2,
        lv4_v3,
        lv4_v4
      ];
  @override
  String get aliasedName => _alias ?? 'it_vg_local_datasource_impl';
  @override
  String get actualTableName => 'it_vg_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ItVgLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('lv1_v1')) {
      context.handle(_lv1_v1Meta,
          lv1_v1.isAcceptableOrUnknown(data['lv1_v1'], _lv1_v1Meta));
    } else if (isInserting) {
      context.missing(_lv1_v1Meta);
    }
    if (data.containsKey('lv1_v2')) {
      context.handle(_lv1_v2Meta,
          lv1_v2.isAcceptableOrUnknown(data['lv1_v2'], _lv1_v2Meta));
    } else if (isInserting) {
      context.missing(_lv1_v2Meta);
    }
    if (data.containsKey('lv1_v3')) {
      context.handle(_lv1_v3Meta,
          lv1_v3.isAcceptableOrUnknown(data['lv1_v3'], _lv1_v3Meta));
    } else if (isInserting) {
      context.missing(_lv1_v3Meta);
    }
    if (data.containsKey('lv1_v4')) {
      context.handle(_lv1_v4Meta,
          lv1_v4.isAcceptableOrUnknown(data['lv1_v4'], _lv1_v4Meta));
    } else if (isInserting) {
      context.missing(_lv1_v4Meta);
    }
    if (data.containsKey('lv2_v1')) {
      context.handle(_lv2_v1Meta,
          lv2_v1.isAcceptableOrUnknown(data['lv2_v1'], _lv2_v1Meta));
    } else if (isInserting) {
      context.missing(_lv2_v1Meta);
    }
    if (data.containsKey('lv2_v2')) {
      context.handle(_lv2_v2Meta,
          lv2_v2.isAcceptableOrUnknown(data['lv2_v2'], _lv2_v2Meta));
    } else if (isInserting) {
      context.missing(_lv2_v2Meta);
    }
    if (data.containsKey('lv2_v3')) {
      context.handle(_lv2_v3Meta,
          lv2_v3.isAcceptableOrUnknown(data['lv2_v3'], _lv2_v3Meta));
    } else if (isInserting) {
      context.missing(_lv2_v3Meta);
    }
    if (data.containsKey('lv2_v4')) {
      context.handle(_lv2_v4Meta,
          lv2_v4.isAcceptableOrUnknown(data['lv2_v4'], _lv2_v4Meta));
    } else if (isInserting) {
      context.missing(_lv2_v4Meta);
    }
    if (data.containsKey('lv3_v1')) {
      context.handle(_lv3_v1Meta,
          lv3_v1.isAcceptableOrUnknown(data['lv3_v1'], _lv3_v1Meta));
    } else if (isInserting) {
      context.missing(_lv3_v1Meta);
    }
    if (data.containsKey('lv3_v2')) {
      context.handle(_lv3_v2Meta,
          lv3_v2.isAcceptableOrUnknown(data['lv3_v2'], _lv3_v2Meta));
    } else if (isInserting) {
      context.missing(_lv3_v2Meta);
    }
    if (data.containsKey('lv3_v3')) {
      context.handle(_lv3_v3Meta,
          lv3_v3.isAcceptableOrUnknown(data['lv3_v3'], _lv3_v3Meta));
    } else if (isInserting) {
      context.missing(_lv3_v3Meta);
    }
    if (data.containsKey('lv3_v4')) {
      context.handle(_lv3_v4Meta,
          lv3_v4.isAcceptableOrUnknown(data['lv3_v4'], _lv3_v4Meta));
    } else if (isInserting) {
      context.missing(_lv3_v4Meta);
    }
    if (data.containsKey('lv4_v1')) {
      context.handle(_lv4_v1Meta,
          lv4_v1.isAcceptableOrUnknown(data['lv4_v1'], _lv4_v1Meta));
    } else if (isInserting) {
      context.missing(_lv4_v1Meta);
    }
    if (data.containsKey('lv4_v2')) {
      context.handle(_lv4_v2Meta,
          lv4_v2.isAcceptableOrUnknown(data['lv4_v2'], _lv4_v2Meta));
    } else if (isInserting) {
      context.missing(_lv4_v2Meta);
    }
    if (data.containsKey('lv4_v3')) {
      context.handle(_lv4_v3Meta,
          lv4_v3.isAcceptableOrUnknown(data['lv4_v3'], _lv4_v3Meta));
    } else if (isInserting) {
      context.missing(_lv4_v3Meta);
    }
    if (data.containsKey('lv4_v4')) {
      context.handle(_lv4_v4Meta,
          lv4_v4.isAcceptableOrUnknown(data['lv4_v4'], _lv4_v4Meta));
    } else if (isInserting) {
      context.missing(_lv4_v4Meta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ItVgLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ItVgLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ItVgLocalDatasourceImplTable createAlias(String alias) {
    return $ItVgLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class FPrelayLocalData extends DataClass
    implements Insertable<FPrelayLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String serialNo;
  final String panel;
  final String make;
  final String rtype;
  final String auxVoltage;
  final int ctRatioPri;
  final int ctRatioSec;
  final int ptRatio;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  FPrelayLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.serialNo,
      @required this.panel,
      @required this.make,
      @required this.rtype,
      @required this.auxVoltage,
      @required this.ctRatioPri,
      @required this.ctRatioSec,
      @required this.ptRatio,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory FPrelayLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return FPrelayLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      rtype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rtype']),
      auxVoltage: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aux_voltage']),
      ctRatioPri: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ct_ratio_pri']),
      ctRatioSec: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ct_ratio_sec']),
      ptRatio: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pt_ratio']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || rtype != null) {
      map['rtype'] = Variable<String>(rtype);
    }
    if (!nullToAbsent || auxVoltage != null) {
      map['aux_voltage'] = Variable<String>(auxVoltage);
    }
    if (!nullToAbsent || ctRatioPri != null) {
      map['ct_ratio_pri'] = Variable<int>(ctRatioPri);
    }
    if (!nullToAbsent || ctRatioSec != null) {
      map['ct_ratio_sec'] = Variable<int>(ctRatioSec);
    }
    if (!nullToAbsent || ptRatio != null) {
      map['pt_ratio'] = Variable<int>(ptRatio);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  FPrelayLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return FPrelayLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      rtype:
          rtype == null && nullToAbsent ? const Value.absent() : Value(rtype),
      auxVoltage: auxVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(auxVoltage),
      ctRatioPri: ctRatioPri == null && nullToAbsent
          ? const Value.absent()
          : Value(ctRatioPri),
      ctRatioSec: ctRatioSec == null && nullToAbsent
          ? const Value.absent()
          : Value(ctRatioSec),
      ptRatio: ptRatio == null && nullToAbsent
          ? const Value.absent()
          : Value(ptRatio),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory FPrelayLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FPrelayLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      panel: serializer.fromJson<String>(json['panel']),
      make: serializer.fromJson<String>(json['make']),
      rtype: serializer.fromJson<String>(json['rtype']),
      auxVoltage: serializer.fromJson<String>(json['auxVoltage']),
      ctRatioPri: serializer.fromJson<int>(json['ctRatioPri']),
      ctRatioSec: serializer.fromJson<int>(json['ctRatioSec']),
      ptRatio: serializer.fromJson<int>(json['ptRatio']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'serialNo': serializer.toJson<String>(serialNo),
      'panel': serializer.toJson<String>(panel),
      'make': serializer.toJson<String>(make),
      'rtype': serializer.toJson<String>(rtype),
      'auxVoltage': serializer.toJson<String>(auxVoltage),
      'ctRatioPri': serializer.toJson<int>(ctRatioPri),
      'ctRatioSec': serializer.toJson<int>(ctRatioSec),
      'ptRatio': serializer.toJson<int>(ptRatio),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  FPrelayLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String serialNo,
          String panel,
          String make,
          String rtype,
          String auxVoltage,
          int ctRatioPri,
          int ctRatioSec,
          int ptRatio,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      FPrelayLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        serialNo: serialNo ?? this.serialNo,
        panel: panel ?? this.panel,
        make: make ?? this.make,
        rtype: rtype ?? this.rtype,
        auxVoltage: auxVoltage ?? this.auxVoltage,
        ctRatioPri: ctRatioPri ?? this.ctRatioPri,
        ctRatioSec: ctRatioSec ?? this.ctRatioSec,
        ptRatio: ptRatio ?? this.ptRatio,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('FPrelayLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('ctRatioPri: $ctRatioPri, ')
          ..write('ctRatioSec: $ctRatioSec, ')
          ..write('ptRatio: $ptRatio, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      etype,
      trNo,
      designation,
      location,
      serialNo,
      panel,
      make,
      rtype,
      auxVoltage,
      ctRatioPri,
      ctRatioSec,
      ptRatio,
      dateOfTesting,
      updateDate,
      testedBy,
      verifiedBy,
      WitnessedBy);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FPrelayLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.serialNo == this.serialNo &&
          other.panel == this.panel &&
          other.make == this.make &&
          other.rtype == this.rtype &&
          other.auxVoltage == this.auxVoltage &&
          other.ctRatioPri == this.ctRatioPri &&
          other.ctRatioSec == this.ctRatioSec &&
          other.ptRatio == this.ptRatio &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class FPrelayLocalDatasourceImplCompanion
    extends UpdateCompanion<FPrelayLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> serialNo;
  final Value<String> panel;
  final Value<String> make;
  final Value<String> rtype;
  final Value<String> auxVoltage;
  final Value<int> ctRatioPri;
  final Value<int> ctRatioSec;
  final Value<int> ptRatio;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const FPrelayLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.panel = const Value.absent(),
    this.make = const Value.absent(),
    this.rtype = const Value.absent(),
    this.auxVoltage = const Value.absent(),
    this.ctRatioPri = const Value.absent(),
    this.ctRatioSec = const Value.absent(),
    this.ptRatio = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  FPrelayLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String serialNo,
    @required String panel,
    @required String make,
    @required String rtype,
    @required String auxVoltage,
    @required int ctRatioPri,
    @required int ctRatioSec,
    @required int ptRatio,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        serialNo = Value(serialNo),
        panel = Value(panel),
        make = Value(make),
        rtype = Value(rtype),
        auxVoltage = Value(auxVoltage),
        ctRatioPri = Value(ctRatioPri),
        ctRatioSec = Value(ctRatioSec),
        ptRatio = Value(ptRatio),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<FPrelayLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> serialNo,
    Expression<String> panel,
    Expression<String> make,
    Expression<String> rtype,
    Expression<String> auxVoltage,
    Expression<int> ctRatioPri,
    Expression<int> ctRatioSec,
    Expression<int> ptRatio,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (serialNo != null) 'serial_no': serialNo,
      if (panel != null) 'panel': panel,
      if (make != null) 'make': make,
      if (rtype != null) 'rtype': rtype,
      if (auxVoltage != null) 'aux_voltage': auxVoltage,
      if (ctRatioPri != null) 'ct_ratio_pri': ctRatioPri,
      if (ctRatioSec != null) 'ct_ratio_sec': ctRatioSec,
      if (ptRatio != null) 'pt_ratio': ptRatio,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  FPrelayLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> serialNo,
      Value<String> panel,
      Value<String> make,
      Value<String> rtype,
      Value<String> auxVoltage,
      Value<int> ctRatioPri,
      Value<int> ctRatioSec,
      Value<int> ptRatio,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return FPrelayLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      serialNo: serialNo ?? this.serialNo,
      panel: panel ?? this.panel,
      make: make ?? this.make,
      rtype: rtype ?? this.rtype,
      auxVoltage: auxVoltage ?? this.auxVoltage,
      ctRatioPri: ctRatioPri ?? this.ctRatioPri,
      ctRatioSec: ctRatioSec ?? this.ctRatioSec,
      ptRatio: ptRatio ?? this.ptRatio,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (rtype.present) {
      map['rtype'] = Variable<String>(rtype.value);
    }
    if (auxVoltage.present) {
      map['aux_voltage'] = Variable<String>(auxVoltage.value);
    }
    if (ctRatioPri.present) {
      map['ct_ratio_pri'] = Variable<int>(ctRatioPri.value);
    }
    if (ctRatioSec.present) {
      map['ct_ratio_sec'] = Variable<int>(ctRatioSec.value);
    }
    if (ptRatio.present) {
      map['pt_ratio'] = Variable<int>(ptRatio.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FPrelayLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('ctRatioPri: $ctRatioPri, ')
          ..write('ctRatioSec: $ctRatioSec, ')
          ..write('ptRatio: $ptRatio, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $FPrelayLocalDatasourceImplTable extends FPrelayLocalDatasourceImpl
    with TableInfo<$FPrelayLocalDatasourceImplTable, FPrelayLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $FPrelayLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rtypeMeta = const VerificationMeta('rtype');
  GeneratedColumn<String> _rtype;
  @override
  GeneratedColumn<String> get rtype => _rtype ??= GeneratedColumn<String>(
      'rtype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _auxVoltageMeta = const VerificationMeta('auxVoltage');
  GeneratedColumn<String> _auxVoltage;
  @override
  GeneratedColumn<String> get auxVoltage =>
      _auxVoltage ??= GeneratedColumn<String>('aux_voltage', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _ctRatioPriMeta = const VerificationMeta('ctRatioPri');
  GeneratedColumn<int> _ctRatioPri;
  @override
  GeneratedColumn<int> get ctRatioPri =>
      _ctRatioPri ??= GeneratedColumn<int>('ct_ratio_pri', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ctRatioSecMeta = const VerificationMeta('ctRatioSec');
  GeneratedColumn<int> _ctRatioSec;
  @override
  GeneratedColumn<int> get ctRatioSec =>
      _ctRatioSec ??= GeneratedColumn<int>('ct_ratio_sec', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _ptRatioMeta = const VerificationMeta('ptRatio');
  GeneratedColumn<int> _ptRatio;
  @override
  GeneratedColumn<int> get ptRatio =>
      _ptRatio ??= GeneratedColumn<int>('pt_ratio', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        panel,
        make,
        rtype,
        auxVoltage,
        ctRatioPri,
        ctRatioSec,
        ptRatio,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'f_prelay_local_datasource_impl';
  @override
  String get actualTableName => 'f_prelay_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<FPrelayLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('rtype')) {
      context.handle(
          _rtypeMeta, rtype.isAcceptableOrUnknown(data['rtype'], _rtypeMeta));
    } else if (isInserting) {
      context.missing(_rtypeMeta);
    }
    if (data.containsKey('aux_voltage')) {
      context.handle(
          _auxVoltageMeta,
          auxVoltage.isAcceptableOrUnknown(
              data['aux_voltage'], _auxVoltageMeta));
    } else if (isInserting) {
      context.missing(_auxVoltageMeta);
    }
    if (data.containsKey('ct_ratio_pri')) {
      context.handle(
          _ctRatioPriMeta,
          ctRatioPri.isAcceptableOrUnknown(
              data['ct_ratio_pri'], _ctRatioPriMeta));
    } else if (isInserting) {
      context.missing(_ctRatioPriMeta);
    }
    if (data.containsKey('ct_ratio_sec')) {
      context.handle(
          _ctRatioSecMeta,
          ctRatioSec.isAcceptableOrUnknown(
              data['ct_ratio_sec'], _ctRatioSecMeta));
    } else if (isInserting) {
      context.missing(_ctRatioSecMeta);
    }
    if (data.containsKey('pt_ratio')) {
      context.handle(_ptRatioMeta,
          ptRatio.isAcceptableOrUnknown(data['pt_ratio'], _ptRatioMeta));
    } else if (isInserting) {
      context.missing(_ptRatioMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FPrelayLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return FPrelayLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FPrelayLocalDatasourceImplTable createAlias(String alias) {
    return $FPrelayLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class FPRcurrentMgmtLocalData extends DataClass
    implements Insertable<FPRcurrentMgmtLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double rn_measurePrimCurrent;
  final double yn_measurePrimCurrent;
  final double bn_measurePrimCurrent;
  final String equipmentUsed;
  final DateTime updateDate;
  FPRcurrentMgmtLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.rn_measurePrimCurrent,
      @required this.yn_measurePrimCurrent,
      @required this.bn_measurePrimCurrent,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory FPRcurrentMgmtLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return FPRcurrentMgmtLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      rn_measurePrimCurrent: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}rn_measure_prim_current']),
      yn_measurePrimCurrent: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}yn_measure_prim_current']),
      bn_measurePrimCurrent: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}bn_measure_prim_current']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || rn_measurePrimCurrent != null) {
      map['rn_measure_prim_current'] = Variable<double>(rn_measurePrimCurrent);
    }
    if (!nullToAbsent || yn_measurePrimCurrent != null) {
      map['yn_measure_prim_current'] = Variable<double>(yn_measurePrimCurrent);
    }
    if (!nullToAbsent || bn_measurePrimCurrent != null) {
      map['bn_measure_prim_current'] = Variable<double>(bn_measurePrimCurrent);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  FPRcurrentMgmtLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return FPRcurrentMgmtLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      rn_measurePrimCurrent: rn_measurePrimCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_measurePrimCurrent),
      yn_measurePrimCurrent: yn_measurePrimCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_measurePrimCurrent),
      bn_measurePrimCurrent: bn_measurePrimCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_measurePrimCurrent),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory FPRcurrentMgmtLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FPRcurrentMgmtLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      rn_measurePrimCurrent:
          serializer.fromJson<double>(json['rn_measurePrimCurrent']),
      yn_measurePrimCurrent:
          serializer.fromJson<double>(json['yn_measurePrimCurrent']),
      bn_measurePrimCurrent:
          serializer.fromJson<double>(json['bn_measurePrimCurrent']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'rn_measurePrimCurrent': serializer.toJson<double>(rn_measurePrimCurrent),
      'yn_measurePrimCurrent': serializer.toJson<double>(yn_measurePrimCurrent),
      'bn_measurePrimCurrent': serializer.toJson<double>(bn_measurePrimCurrent),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  FPRcurrentMgmtLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double rn_measurePrimCurrent,
          double yn_measurePrimCurrent,
          double bn_measurePrimCurrent,
          String equipmentUsed,
          DateTime updateDate}) =>
      FPRcurrentMgmtLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        rn_measurePrimCurrent:
            rn_measurePrimCurrent ?? this.rn_measurePrimCurrent,
        yn_measurePrimCurrent:
            yn_measurePrimCurrent ?? this.yn_measurePrimCurrent,
        bn_measurePrimCurrent:
            bn_measurePrimCurrent ?? this.bn_measurePrimCurrent,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('FPRcurrentMgmtLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rn_measurePrimCurrent: $rn_measurePrimCurrent, ')
          ..write('yn_measurePrimCurrent: $yn_measurePrimCurrent, ')
          ..write('bn_measurePrimCurrent: $bn_measurePrimCurrent, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      rn_measurePrimCurrent,
      yn_measurePrimCurrent,
      bn_measurePrimCurrent,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FPRcurrentMgmtLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.rn_measurePrimCurrent == this.rn_measurePrimCurrent &&
          other.yn_measurePrimCurrent == this.yn_measurePrimCurrent &&
          other.bn_measurePrimCurrent == this.bn_measurePrimCurrent &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class FPRcurrentMgmtLocalDatasourceImplCompanion
    extends UpdateCompanion<FPRcurrentMgmtLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> rn_measurePrimCurrent;
  final Value<double> yn_measurePrimCurrent;
  final Value<double> bn_measurePrimCurrent;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const FPRcurrentMgmtLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.rn_measurePrimCurrent = const Value.absent(),
    this.yn_measurePrimCurrent = const Value.absent(),
    this.bn_measurePrimCurrent = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  FPRcurrentMgmtLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double rn_measurePrimCurrent,
    @required double yn_measurePrimCurrent,
    @required double bn_measurePrimCurrent,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        rn_measurePrimCurrent = Value(rn_measurePrimCurrent),
        yn_measurePrimCurrent = Value(yn_measurePrimCurrent),
        bn_measurePrimCurrent = Value(bn_measurePrimCurrent),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<FPRcurrentMgmtLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> rn_measurePrimCurrent,
    Expression<double> yn_measurePrimCurrent,
    Expression<double> bn_measurePrimCurrent,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (rn_measurePrimCurrent != null)
        'rn_measure_prim_current': rn_measurePrimCurrent,
      if (yn_measurePrimCurrent != null)
        'yn_measure_prim_current': yn_measurePrimCurrent,
      if (bn_measurePrimCurrent != null)
        'bn_measure_prim_current': bn_measurePrimCurrent,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  FPRcurrentMgmtLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> rn_measurePrimCurrent,
      Value<double> yn_measurePrimCurrent,
      Value<double> bn_measurePrimCurrent,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return FPRcurrentMgmtLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      rn_measurePrimCurrent:
          rn_measurePrimCurrent ?? this.rn_measurePrimCurrent,
      yn_measurePrimCurrent:
          yn_measurePrimCurrent ?? this.yn_measurePrimCurrent,
      bn_measurePrimCurrent:
          bn_measurePrimCurrent ?? this.bn_measurePrimCurrent,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (rn_measurePrimCurrent.present) {
      map['rn_measure_prim_current'] =
          Variable<double>(rn_measurePrimCurrent.value);
    }
    if (yn_measurePrimCurrent.present) {
      map['yn_measure_prim_current'] =
          Variable<double>(yn_measurePrimCurrent.value);
    }
    if (bn_measurePrimCurrent.present) {
      map['bn_measure_prim_current'] =
          Variable<double>(bn_measurePrimCurrent.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FPRcurrentMgmtLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rn_measurePrimCurrent: $rn_measurePrimCurrent, ')
          ..write('yn_measurePrimCurrent: $yn_measurePrimCurrent, ')
          ..write('bn_measurePrimCurrent: $bn_measurePrimCurrent, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $FPRcurrentMgmtLocalDatasourceImplTable
    extends FPRcurrentMgmtLocalDatasourceImpl
    with
        TableInfo<$FPRcurrentMgmtLocalDatasourceImplTable,
            FPRcurrentMgmtLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $FPRcurrentMgmtLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rn_measurePrimCurrentMeta =
      const VerificationMeta('rn_measurePrimCurrent');
  GeneratedColumn<double> _rn_measurePrimCurrent;
  @override
  GeneratedColumn<double> get rn_measurePrimCurrent =>
      _rn_measurePrimCurrent ??= GeneratedColumn<double>(
          'rn_measure_prim_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_measurePrimCurrentMeta =
      const VerificationMeta('yn_measurePrimCurrent');
  GeneratedColumn<double> _yn_measurePrimCurrent;
  @override
  GeneratedColumn<double> get yn_measurePrimCurrent =>
      _yn_measurePrimCurrent ??= GeneratedColumn<double>(
          'yn_measure_prim_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_measurePrimCurrentMeta =
      const VerificationMeta('bn_measurePrimCurrent');
  GeneratedColumn<double> _bn_measurePrimCurrent;
  @override
  GeneratedColumn<double> get bn_measurePrimCurrent =>
      _bn_measurePrimCurrent ??= GeneratedColumn<double>(
          'bn_measure_prim_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        rn_measurePrimCurrent,
        yn_measurePrimCurrent,
        bn_measurePrimCurrent,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'f_p_rcurrent_mgmt_local_datasource_impl';
  @override
  String get actualTableName => 'f_p_rcurrent_mgmt_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<FPRcurrentMgmtLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('rn_measure_prim_current')) {
      context.handle(
          _rn_measurePrimCurrentMeta,
          rn_measurePrimCurrent.isAcceptableOrUnknown(
              data['rn_measure_prim_current'], _rn_measurePrimCurrentMeta));
    } else if (isInserting) {
      context.missing(_rn_measurePrimCurrentMeta);
    }
    if (data.containsKey('yn_measure_prim_current')) {
      context.handle(
          _yn_measurePrimCurrentMeta,
          yn_measurePrimCurrent.isAcceptableOrUnknown(
              data['yn_measure_prim_current'], _yn_measurePrimCurrentMeta));
    } else if (isInserting) {
      context.missing(_yn_measurePrimCurrentMeta);
    }
    if (data.containsKey('bn_measure_prim_current')) {
      context.handle(
          _bn_measurePrimCurrentMeta,
          bn_measurePrimCurrent.isAcceptableOrUnknown(
              data['bn_measure_prim_current'], _bn_measurePrimCurrentMeta));
    } else if (isInserting) {
      context.missing(_bn_measurePrimCurrentMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FPRcurrentMgmtLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return FPRcurrentMgmtLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FPRcurrentMgmtLocalDatasourceImplTable createAlias(String alias) {
    return $FPRcurrentMgmtLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class FPRvoltageMgmtLocalData extends DataClass
    implements Insertable<FPRvoltageMgmtLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double rn_applSecVoltage;
  final double rn_measurePrimVoltage;
  final double yn_applSecVoltage;
  final double yn_measurePrimVoltage;
  final double bn_applSecVoltage;
  final double bn_measurePrimVoltage;
  final String equipmentUsed;
  final DateTime updateDate;
  FPRvoltageMgmtLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.rn_applSecVoltage,
      @required this.rn_measurePrimVoltage,
      @required this.yn_applSecVoltage,
      @required this.yn_measurePrimVoltage,
      @required this.bn_applSecVoltage,
      @required this.bn_measurePrimVoltage,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory FPRvoltageMgmtLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return FPRvoltageMgmtLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      rn_applSecVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}rn_appl_sec_voltage']),
      rn_measurePrimVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}rn_measure_prim_voltage']),
      yn_applSecVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}yn_appl_sec_voltage']),
      yn_measurePrimVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}yn_measure_prim_voltage']),
      bn_applSecVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}bn_appl_sec_voltage']),
      bn_measurePrimVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}bn_measure_prim_voltage']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || rn_applSecVoltage != null) {
      map['rn_appl_sec_voltage'] = Variable<double>(rn_applSecVoltage);
    }
    if (!nullToAbsent || rn_measurePrimVoltage != null) {
      map['rn_measure_prim_voltage'] = Variable<double>(rn_measurePrimVoltage);
    }
    if (!nullToAbsent || yn_applSecVoltage != null) {
      map['yn_appl_sec_voltage'] = Variable<double>(yn_applSecVoltage);
    }
    if (!nullToAbsent || yn_measurePrimVoltage != null) {
      map['yn_measure_prim_voltage'] = Variable<double>(yn_measurePrimVoltage);
    }
    if (!nullToAbsent || bn_applSecVoltage != null) {
      map['bn_appl_sec_voltage'] = Variable<double>(bn_applSecVoltage);
    }
    if (!nullToAbsent || bn_measurePrimVoltage != null) {
      map['bn_measure_prim_voltage'] = Variable<double>(bn_measurePrimVoltage);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  FPRvoltageMgmtLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return FPRvoltageMgmtLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      rn_applSecVoltage: rn_applSecVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_applSecVoltage),
      rn_measurePrimVoltage: rn_measurePrimVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_measurePrimVoltage),
      yn_applSecVoltage: yn_applSecVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_applSecVoltage),
      yn_measurePrimVoltage: yn_measurePrimVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_measurePrimVoltage),
      bn_applSecVoltage: bn_applSecVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_applSecVoltage),
      bn_measurePrimVoltage: bn_measurePrimVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_measurePrimVoltage),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory FPRvoltageMgmtLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FPRvoltageMgmtLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      rn_applSecVoltage: serializer.fromJson<double>(json['rn_applSecVoltage']),
      rn_measurePrimVoltage:
          serializer.fromJson<double>(json['rn_measurePrimVoltage']),
      yn_applSecVoltage: serializer.fromJson<double>(json['yn_applSecVoltage']),
      yn_measurePrimVoltage:
          serializer.fromJson<double>(json['yn_measurePrimVoltage']),
      bn_applSecVoltage: serializer.fromJson<double>(json['bn_applSecVoltage']),
      bn_measurePrimVoltage:
          serializer.fromJson<double>(json['bn_measurePrimVoltage']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'rn_applSecVoltage': serializer.toJson<double>(rn_applSecVoltage),
      'rn_measurePrimVoltage': serializer.toJson<double>(rn_measurePrimVoltage),
      'yn_applSecVoltage': serializer.toJson<double>(yn_applSecVoltage),
      'yn_measurePrimVoltage': serializer.toJson<double>(yn_measurePrimVoltage),
      'bn_applSecVoltage': serializer.toJson<double>(bn_applSecVoltage),
      'bn_measurePrimVoltage': serializer.toJson<double>(bn_measurePrimVoltage),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  FPRvoltageMgmtLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double rn_applSecVoltage,
          double rn_measurePrimVoltage,
          double yn_applSecVoltage,
          double yn_measurePrimVoltage,
          double bn_applSecVoltage,
          double bn_measurePrimVoltage,
          String equipmentUsed,
          DateTime updateDate}) =>
      FPRvoltageMgmtLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        rn_applSecVoltage: rn_applSecVoltage ?? this.rn_applSecVoltage,
        rn_measurePrimVoltage:
            rn_measurePrimVoltage ?? this.rn_measurePrimVoltage,
        yn_applSecVoltage: yn_applSecVoltage ?? this.yn_applSecVoltage,
        yn_measurePrimVoltage:
            yn_measurePrimVoltage ?? this.yn_measurePrimVoltage,
        bn_applSecVoltage: bn_applSecVoltage ?? this.bn_applSecVoltage,
        bn_measurePrimVoltage:
            bn_measurePrimVoltage ?? this.bn_measurePrimVoltage,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('FPRvoltageMgmtLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rn_applSecVoltage: $rn_applSecVoltage, ')
          ..write('rn_measurePrimVoltage: $rn_measurePrimVoltage, ')
          ..write('yn_applSecVoltage: $yn_applSecVoltage, ')
          ..write('yn_measurePrimVoltage: $yn_measurePrimVoltage, ')
          ..write('bn_applSecVoltage: $bn_applSecVoltage, ')
          ..write('bn_measurePrimVoltage: $bn_measurePrimVoltage, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      rn_applSecVoltage,
      rn_measurePrimVoltage,
      yn_applSecVoltage,
      yn_measurePrimVoltage,
      bn_applSecVoltage,
      bn_measurePrimVoltage,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FPRvoltageMgmtLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.rn_applSecVoltage == this.rn_applSecVoltage &&
          other.rn_measurePrimVoltage == this.rn_measurePrimVoltage &&
          other.yn_applSecVoltage == this.yn_applSecVoltage &&
          other.yn_measurePrimVoltage == this.yn_measurePrimVoltage &&
          other.bn_applSecVoltage == this.bn_applSecVoltage &&
          other.bn_measurePrimVoltage == this.bn_measurePrimVoltage &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class FPRvoltageMgmtLocalDatasourceImplCompanion
    extends UpdateCompanion<FPRvoltageMgmtLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> rn_applSecVoltage;
  final Value<double> rn_measurePrimVoltage;
  final Value<double> yn_applSecVoltage;
  final Value<double> yn_measurePrimVoltage;
  final Value<double> bn_applSecVoltage;
  final Value<double> bn_measurePrimVoltage;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const FPRvoltageMgmtLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.rn_applSecVoltage = const Value.absent(),
    this.rn_measurePrimVoltage = const Value.absent(),
    this.yn_applSecVoltage = const Value.absent(),
    this.yn_measurePrimVoltage = const Value.absent(),
    this.bn_applSecVoltage = const Value.absent(),
    this.bn_measurePrimVoltage = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  FPRvoltageMgmtLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double rn_applSecVoltage,
    @required double rn_measurePrimVoltage,
    @required double yn_applSecVoltage,
    @required double yn_measurePrimVoltage,
    @required double bn_applSecVoltage,
    @required double bn_measurePrimVoltage,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        rn_applSecVoltage = Value(rn_applSecVoltage),
        rn_measurePrimVoltage = Value(rn_measurePrimVoltage),
        yn_applSecVoltage = Value(yn_applSecVoltage),
        yn_measurePrimVoltage = Value(yn_measurePrimVoltage),
        bn_applSecVoltage = Value(bn_applSecVoltage),
        bn_measurePrimVoltage = Value(bn_measurePrimVoltage),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<FPRvoltageMgmtLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> rn_applSecVoltage,
    Expression<double> rn_measurePrimVoltage,
    Expression<double> yn_applSecVoltage,
    Expression<double> yn_measurePrimVoltage,
    Expression<double> bn_applSecVoltage,
    Expression<double> bn_measurePrimVoltage,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (rn_applSecVoltage != null) 'rn_appl_sec_voltage': rn_applSecVoltage,
      if (rn_measurePrimVoltage != null)
        'rn_measure_prim_voltage': rn_measurePrimVoltage,
      if (yn_applSecVoltage != null) 'yn_appl_sec_voltage': yn_applSecVoltage,
      if (yn_measurePrimVoltage != null)
        'yn_measure_prim_voltage': yn_measurePrimVoltage,
      if (bn_applSecVoltage != null) 'bn_appl_sec_voltage': bn_applSecVoltage,
      if (bn_measurePrimVoltage != null)
        'bn_measure_prim_voltage': bn_measurePrimVoltage,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  FPRvoltageMgmtLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> rn_applSecVoltage,
      Value<double> rn_measurePrimVoltage,
      Value<double> yn_applSecVoltage,
      Value<double> yn_measurePrimVoltage,
      Value<double> bn_applSecVoltage,
      Value<double> bn_measurePrimVoltage,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return FPRvoltageMgmtLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      rn_applSecVoltage: rn_applSecVoltage ?? this.rn_applSecVoltage,
      rn_measurePrimVoltage:
          rn_measurePrimVoltage ?? this.rn_measurePrimVoltage,
      yn_applSecVoltage: yn_applSecVoltage ?? this.yn_applSecVoltage,
      yn_measurePrimVoltage:
          yn_measurePrimVoltage ?? this.yn_measurePrimVoltage,
      bn_applSecVoltage: bn_applSecVoltage ?? this.bn_applSecVoltage,
      bn_measurePrimVoltage:
          bn_measurePrimVoltage ?? this.bn_measurePrimVoltage,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (rn_applSecVoltage.present) {
      map['rn_appl_sec_voltage'] = Variable<double>(rn_applSecVoltage.value);
    }
    if (rn_measurePrimVoltage.present) {
      map['rn_measure_prim_voltage'] =
          Variable<double>(rn_measurePrimVoltage.value);
    }
    if (yn_applSecVoltage.present) {
      map['yn_appl_sec_voltage'] = Variable<double>(yn_applSecVoltage.value);
    }
    if (yn_measurePrimVoltage.present) {
      map['yn_measure_prim_voltage'] =
          Variable<double>(yn_measurePrimVoltage.value);
    }
    if (bn_applSecVoltage.present) {
      map['bn_appl_sec_voltage'] = Variable<double>(bn_applSecVoltage.value);
    }
    if (bn_measurePrimVoltage.present) {
      map['bn_measure_prim_voltage'] =
          Variable<double>(bn_measurePrimVoltage.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FPRvoltageMgmtLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('rn_applSecVoltage: $rn_applSecVoltage, ')
          ..write('rn_measurePrimVoltage: $rn_measurePrimVoltage, ')
          ..write('yn_applSecVoltage: $yn_applSecVoltage, ')
          ..write('yn_measurePrimVoltage: $yn_measurePrimVoltage, ')
          ..write('bn_applSecVoltage: $bn_applSecVoltage, ')
          ..write('bn_measurePrimVoltage: $bn_measurePrimVoltage, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $FPRvoltageMgmtLocalDatasourceImplTable
    extends FPRvoltageMgmtLocalDatasourceImpl
    with
        TableInfo<$FPRvoltageMgmtLocalDatasourceImplTable,
            FPRvoltageMgmtLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $FPRvoltageMgmtLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rn_applSecVoltageMeta =
      const VerificationMeta('rn_applSecVoltage');
  GeneratedColumn<double> _rn_applSecVoltage;
  @override
  GeneratedColumn<double> get rn_applSecVoltage => _rn_applSecVoltage ??=
      GeneratedColumn<double>('rn_appl_sec_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_measurePrimVoltageMeta =
      const VerificationMeta('rn_measurePrimVoltage');
  GeneratedColumn<double> _rn_measurePrimVoltage;
  @override
  GeneratedColumn<double> get rn_measurePrimVoltage =>
      _rn_measurePrimVoltage ??= GeneratedColumn<double>(
          'rn_measure_prim_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_applSecVoltageMeta =
      const VerificationMeta('yn_applSecVoltage');
  GeneratedColumn<double> _yn_applSecVoltage;
  @override
  GeneratedColumn<double> get yn_applSecVoltage => _yn_applSecVoltage ??=
      GeneratedColumn<double>('yn_appl_sec_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_measurePrimVoltageMeta =
      const VerificationMeta('yn_measurePrimVoltage');
  GeneratedColumn<double> _yn_measurePrimVoltage;
  @override
  GeneratedColumn<double> get yn_measurePrimVoltage =>
      _yn_measurePrimVoltage ??= GeneratedColumn<double>(
          'yn_measure_prim_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_applSecVoltageMeta =
      const VerificationMeta('bn_applSecVoltage');
  GeneratedColumn<double> _bn_applSecVoltage;
  @override
  GeneratedColumn<double> get bn_applSecVoltage => _bn_applSecVoltage ??=
      GeneratedColumn<double>('bn_appl_sec_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_measurePrimVoltageMeta =
      const VerificationMeta('bn_measurePrimVoltage');
  GeneratedColumn<double> _bn_measurePrimVoltage;
  @override
  GeneratedColumn<double> get bn_measurePrimVoltage =>
      _bn_measurePrimVoltage ??= GeneratedColumn<double>(
          'bn_measure_prim_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        rn_applSecVoltage,
        rn_measurePrimVoltage,
        yn_applSecVoltage,
        yn_measurePrimVoltage,
        bn_applSecVoltage,
        bn_measurePrimVoltage,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'f_p_rvoltage_mgmt_local_datasource_impl';
  @override
  String get actualTableName => 'f_p_rvoltage_mgmt_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<FPRvoltageMgmtLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('rn_appl_sec_voltage')) {
      context.handle(
          _rn_applSecVoltageMeta,
          rn_applSecVoltage.isAcceptableOrUnknown(
              data['rn_appl_sec_voltage'], _rn_applSecVoltageMeta));
    } else if (isInserting) {
      context.missing(_rn_applSecVoltageMeta);
    }
    if (data.containsKey('rn_measure_prim_voltage')) {
      context.handle(
          _rn_measurePrimVoltageMeta,
          rn_measurePrimVoltage.isAcceptableOrUnknown(
              data['rn_measure_prim_voltage'], _rn_measurePrimVoltageMeta));
    } else if (isInserting) {
      context.missing(_rn_measurePrimVoltageMeta);
    }
    if (data.containsKey('yn_appl_sec_voltage')) {
      context.handle(
          _yn_applSecVoltageMeta,
          yn_applSecVoltage.isAcceptableOrUnknown(
              data['yn_appl_sec_voltage'], _yn_applSecVoltageMeta));
    } else if (isInserting) {
      context.missing(_yn_applSecVoltageMeta);
    }
    if (data.containsKey('yn_measure_prim_voltage')) {
      context.handle(
          _yn_measurePrimVoltageMeta,
          yn_measurePrimVoltage.isAcceptableOrUnknown(
              data['yn_measure_prim_voltage'], _yn_measurePrimVoltageMeta));
    } else if (isInserting) {
      context.missing(_yn_measurePrimVoltageMeta);
    }
    if (data.containsKey('bn_appl_sec_voltage')) {
      context.handle(
          _bn_applSecVoltageMeta,
          bn_applSecVoltage.isAcceptableOrUnknown(
              data['bn_appl_sec_voltage'], _bn_applSecVoltageMeta));
    } else if (isInserting) {
      context.missing(_bn_applSecVoltageMeta);
    }
    if (data.containsKey('bn_measure_prim_voltage')) {
      context.handle(
          _bn_measurePrimVoltageMeta,
          bn_measurePrimVoltage.isAcceptableOrUnknown(
              data['bn_measure_prim_voltage'], _bn_measurePrimVoltageMeta));
    } else if (isInserting) {
      context.missing(_bn_measurePrimVoltageMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FPRvoltageMgmtLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return FPRvoltageMgmtLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FPRvoltageMgmtLocalDatasourceImplTable createAlias(String alias) {
    return $FPRvoltageMgmtLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class FPRovercurrentLocalData extends DataClass
    implements Insertable<FPRovercurrentLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double CurrentSet;
  final double TMS;
  final double delay;
  final double rn_pickupCurrent;
  final double rn_relayOprTime_2x;
  final double rn_relayOprTime_5x;
  final double yn_pickupCurrent;
  final double yn_relayOprTime_2x;
  final double yn_relayOprTime_5x;
  final double bn_pickupCurrent;
  final double bn_relayOprTime_2x;
  final double bn_relayOprTime_5x;
  final int stageNo;
  final String curve;
  final String function;
  final String equipmentUsed;
  final DateTime updateDate;
  FPRovercurrentLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.CurrentSet,
      @required this.TMS,
      @required this.delay,
      @required this.rn_pickupCurrent,
      @required this.rn_relayOprTime_2x,
      @required this.rn_relayOprTime_5x,
      @required this.yn_pickupCurrent,
      @required this.yn_relayOprTime_2x,
      @required this.yn_relayOprTime_5x,
      @required this.bn_pickupCurrent,
      @required this.bn_relayOprTime_2x,
      @required this.bn_relayOprTime_5x,
      @required this.stageNo,
      @required this.curve,
      @required this.function,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory FPRovercurrentLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return FPRovercurrentLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      CurrentSet: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}current_set']),
      TMS: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tms']),
      delay: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}delay']),
      rn_pickupCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rn_pickup_current']),
      rn_relayOprTime_2x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}rn_relay_opr_time_2x']),
      rn_relayOprTime_5x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}rn_relay_opr_time_5x']),
      yn_pickupCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yn_pickup_current']),
      yn_relayOprTime_2x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}yn_relay_opr_time_2x']),
      yn_relayOprTime_5x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}yn_relay_opr_time_5x']),
      bn_pickupCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bn_pickup_current']),
      bn_relayOprTime_2x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}bn_relay_opr_time_2x']),
      bn_relayOprTime_5x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}bn_relay_opr_time_5x']),
      stageNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}stage_no']),
      curve: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}curve']),
      function: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}function']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || CurrentSet != null) {
      map['current_set'] = Variable<double>(CurrentSet);
    }
    if (!nullToAbsent || TMS != null) {
      map['tms'] = Variable<double>(TMS);
    }
    if (!nullToAbsent || delay != null) {
      map['delay'] = Variable<double>(delay);
    }
    if (!nullToAbsent || rn_pickupCurrent != null) {
      map['rn_pickup_current'] = Variable<double>(rn_pickupCurrent);
    }
    if (!nullToAbsent || rn_relayOprTime_2x != null) {
      map['rn_relay_opr_time_2x'] = Variable<double>(rn_relayOprTime_2x);
    }
    if (!nullToAbsent || rn_relayOprTime_5x != null) {
      map['rn_relay_opr_time_5x'] = Variable<double>(rn_relayOprTime_5x);
    }
    if (!nullToAbsent || yn_pickupCurrent != null) {
      map['yn_pickup_current'] = Variable<double>(yn_pickupCurrent);
    }
    if (!nullToAbsent || yn_relayOprTime_2x != null) {
      map['yn_relay_opr_time_2x'] = Variable<double>(yn_relayOprTime_2x);
    }
    if (!nullToAbsent || yn_relayOprTime_5x != null) {
      map['yn_relay_opr_time_5x'] = Variable<double>(yn_relayOprTime_5x);
    }
    if (!nullToAbsent || bn_pickupCurrent != null) {
      map['bn_pickup_current'] = Variable<double>(bn_pickupCurrent);
    }
    if (!nullToAbsent || bn_relayOprTime_2x != null) {
      map['bn_relay_opr_time_2x'] = Variable<double>(bn_relayOprTime_2x);
    }
    if (!nullToAbsent || bn_relayOprTime_5x != null) {
      map['bn_relay_opr_time_5x'] = Variable<double>(bn_relayOprTime_5x);
    }
    if (!nullToAbsent || stageNo != null) {
      map['stage_no'] = Variable<int>(stageNo);
    }
    if (!nullToAbsent || curve != null) {
      map['curve'] = Variable<String>(curve);
    }
    if (!nullToAbsent || function != null) {
      map['function'] = Variable<String>(function);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  FPRovercurrentLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return FPRovercurrentLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      CurrentSet: CurrentSet == null && nullToAbsent
          ? const Value.absent()
          : Value(CurrentSet),
      TMS: TMS == null && nullToAbsent ? const Value.absent() : Value(TMS),
      delay:
          delay == null && nullToAbsent ? const Value.absent() : Value(delay),
      rn_pickupCurrent: rn_pickupCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_pickupCurrent),
      rn_relayOprTime_2x: rn_relayOprTime_2x == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_relayOprTime_2x),
      rn_relayOprTime_5x: rn_relayOprTime_5x == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_relayOprTime_5x),
      yn_pickupCurrent: yn_pickupCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_pickupCurrent),
      yn_relayOprTime_2x: yn_relayOprTime_2x == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_relayOprTime_2x),
      yn_relayOprTime_5x: yn_relayOprTime_5x == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_relayOprTime_5x),
      bn_pickupCurrent: bn_pickupCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_pickupCurrent),
      bn_relayOprTime_2x: bn_relayOprTime_2x == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_relayOprTime_2x),
      bn_relayOprTime_5x: bn_relayOprTime_5x == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_relayOprTime_5x),
      stageNo: stageNo == null && nullToAbsent
          ? const Value.absent()
          : Value(stageNo),
      curve:
          curve == null && nullToAbsent ? const Value.absent() : Value(curve),
      function: function == null && nullToAbsent
          ? const Value.absent()
          : Value(function),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory FPRovercurrentLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FPRovercurrentLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      CurrentSet: serializer.fromJson<double>(json['CurrentSet']),
      TMS: serializer.fromJson<double>(json['TMS']),
      delay: serializer.fromJson<double>(json['delay']),
      rn_pickupCurrent: serializer.fromJson<double>(json['rn_pickupCurrent']),
      rn_relayOprTime_2x:
          serializer.fromJson<double>(json['rn_relayOprTime_2x']),
      rn_relayOprTime_5x:
          serializer.fromJson<double>(json['rn_relayOprTime_5x']),
      yn_pickupCurrent: serializer.fromJson<double>(json['yn_pickupCurrent']),
      yn_relayOprTime_2x:
          serializer.fromJson<double>(json['yn_relayOprTime_2x']),
      yn_relayOprTime_5x:
          serializer.fromJson<double>(json['yn_relayOprTime_5x']),
      bn_pickupCurrent: serializer.fromJson<double>(json['bn_pickupCurrent']),
      bn_relayOprTime_2x:
          serializer.fromJson<double>(json['bn_relayOprTime_2x']),
      bn_relayOprTime_5x:
          serializer.fromJson<double>(json['bn_relayOprTime_5x']),
      stageNo: serializer.fromJson<int>(json['stageNo']),
      curve: serializer.fromJson<String>(json['curve']),
      function: serializer.fromJson<String>(json['function']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'CurrentSet': serializer.toJson<double>(CurrentSet),
      'TMS': serializer.toJson<double>(TMS),
      'delay': serializer.toJson<double>(delay),
      'rn_pickupCurrent': serializer.toJson<double>(rn_pickupCurrent),
      'rn_relayOprTime_2x': serializer.toJson<double>(rn_relayOprTime_2x),
      'rn_relayOprTime_5x': serializer.toJson<double>(rn_relayOprTime_5x),
      'yn_pickupCurrent': serializer.toJson<double>(yn_pickupCurrent),
      'yn_relayOprTime_2x': serializer.toJson<double>(yn_relayOprTime_2x),
      'yn_relayOprTime_5x': serializer.toJson<double>(yn_relayOprTime_5x),
      'bn_pickupCurrent': serializer.toJson<double>(bn_pickupCurrent),
      'bn_relayOprTime_2x': serializer.toJson<double>(bn_relayOprTime_2x),
      'bn_relayOprTime_5x': serializer.toJson<double>(bn_relayOprTime_5x),
      'stageNo': serializer.toJson<int>(stageNo),
      'curve': serializer.toJson<String>(curve),
      'function': serializer.toJson<String>(function),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  FPRovercurrentLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double CurrentSet,
          double TMS,
          double delay,
          double rn_pickupCurrent,
          double rn_relayOprTime_2x,
          double rn_relayOprTime_5x,
          double yn_pickupCurrent,
          double yn_relayOprTime_2x,
          double yn_relayOprTime_5x,
          double bn_pickupCurrent,
          double bn_relayOprTime_2x,
          double bn_relayOprTime_5x,
          int stageNo,
          String curve,
          String function,
          String equipmentUsed,
          DateTime updateDate}) =>
      FPRovercurrentLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        CurrentSet: CurrentSet ?? this.CurrentSet,
        TMS: TMS ?? this.TMS,
        delay: delay ?? this.delay,
        rn_pickupCurrent: rn_pickupCurrent ?? this.rn_pickupCurrent,
        rn_relayOprTime_2x: rn_relayOprTime_2x ?? this.rn_relayOprTime_2x,
        rn_relayOprTime_5x: rn_relayOprTime_5x ?? this.rn_relayOprTime_5x,
        yn_pickupCurrent: yn_pickupCurrent ?? this.yn_pickupCurrent,
        yn_relayOprTime_2x: yn_relayOprTime_2x ?? this.yn_relayOprTime_2x,
        yn_relayOprTime_5x: yn_relayOprTime_5x ?? this.yn_relayOprTime_5x,
        bn_pickupCurrent: bn_pickupCurrent ?? this.bn_pickupCurrent,
        bn_relayOprTime_2x: bn_relayOprTime_2x ?? this.bn_relayOprTime_2x,
        bn_relayOprTime_5x: bn_relayOprTime_5x ?? this.bn_relayOprTime_5x,
        stageNo: stageNo ?? this.stageNo,
        curve: curve ?? this.curve,
        function: function ?? this.function,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('FPRovercurrentLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('CurrentSet: $CurrentSet, ')
          ..write('TMS: $TMS, ')
          ..write('delay: $delay, ')
          ..write('rn_pickupCurrent: $rn_pickupCurrent, ')
          ..write('rn_relayOprTime_2x: $rn_relayOprTime_2x, ')
          ..write('rn_relayOprTime_5x: $rn_relayOprTime_5x, ')
          ..write('yn_pickupCurrent: $yn_pickupCurrent, ')
          ..write('yn_relayOprTime_2x: $yn_relayOprTime_2x, ')
          ..write('yn_relayOprTime_5x: $yn_relayOprTime_5x, ')
          ..write('bn_pickupCurrent: $bn_pickupCurrent, ')
          ..write('bn_relayOprTime_2x: $bn_relayOprTime_2x, ')
          ..write('bn_relayOprTime_5x: $bn_relayOprTime_5x, ')
          ..write('stageNo: $stageNo, ')
          ..write('curve: $curve, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        CurrentSet,
        TMS,
        delay,
        rn_pickupCurrent,
        rn_relayOprTime_2x,
        rn_relayOprTime_5x,
        yn_pickupCurrent,
        yn_relayOprTime_2x,
        yn_relayOprTime_5x,
        bn_pickupCurrent,
        bn_relayOprTime_2x,
        bn_relayOprTime_5x,
        stageNo,
        curve,
        function,
        equipmentUsed,
        updateDate
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FPRovercurrentLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.CurrentSet == this.CurrentSet &&
          other.TMS == this.TMS &&
          other.delay == this.delay &&
          other.rn_pickupCurrent == this.rn_pickupCurrent &&
          other.rn_relayOprTime_2x == this.rn_relayOprTime_2x &&
          other.rn_relayOprTime_5x == this.rn_relayOprTime_5x &&
          other.yn_pickupCurrent == this.yn_pickupCurrent &&
          other.yn_relayOprTime_2x == this.yn_relayOprTime_2x &&
          other.yn_relayOprTime_5x == this.yn_relayOprTime_5x &&
          other.bn_pickupCurrent == this.bn_pickupCurrent &&
          other.bn_relayOprTime_2x == this.bn_relayOprTime_2x &&
          other.bn_relayOprTime_5x == this.bn_relayOprTime_5x &&
          other.stageNo == this.stageNo &&
          other.curve == this.curve &&
          other.function == this.function &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class FPRovercurrentLocalDatasourceImplCompanion
    extends UpdateCompanion<FPRovercurrentLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> CurrentSet;
  final Value<double> TMS;
  final Value<double> delay;
  final Value<double> rn_pickupCurrent;
  final Value<double> rn_relayOprTime_2x;
  final Value<double> rn_relayOprTime_5x;
  final Value<double> yn_pickupCurrent;
  final Value<double> yn_relayOprTime_2x;
  final Value<double> yn_relayOprTime_5x;
  final Value<double> bn_pickupCurrent;
  final Value<double> bn_relayOprTime_2x;
  final Value<double> bn_relayOprTime_5x;
  final Value<int> stageNo;
  final Value<String> curve;
  final Value<String> function;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const FPRovercurrentLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.CurrentSet = const Value.absent(),
    this.TMS = const Value.absent(),
    this.delay = const Value.absent(),
    this.rn_pickupCurrent = const Value.absent(),
    this.rn_relayOprTime_2x = const Value.absent(),
    this.rn_relayOprTime_5x = const Value.absent(),
    this.yn_pickupCurrent = const Value.absent(),
    this.yn_relayOprTime_2x = const Value.absent(),
    this.yn_relayOprTime_5x = const Value.absent(),
    this.bn_pickupCurrent = const Value.absent(),
    this.bn_relayOprTime_2x = const Value.absent(),
    this.bn_relayOprTime_5x = const Value.absent(),
    this.stageNo = const Value.absent(),
    this.curve = const Value.absent(),
    this.function = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  FPRovercurrentLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double CurrentSet,
    @required double TMS,
    @required double delay,
    @required double rn_pickupCurrent,
    @required double rn_relayOprTime_2x,
    @required double rn_relayOprTime_5x,
    @required double yn_pickupCurrent,
    @required double yn_relayOprTime_2x,
    @required double yn_relayOprTime_5x,
    @required double bn_pickupCurrent,
    @required double bn_relayOprTime_2x,
    @required double bn_relayOprTime_5x,
    @required int stageNo,
    @required String curve,
    @required String function,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        CurrentSet = Value(CurrentSet),
        TMS = Value(TMS),
        delay = Value(delay),
        rn_pickupCurrent = Value(rn_pickupCurrent),
        rn_relayOprTime_2x = Value(rn_relayOprTime_2x),
        rn_relayOprTime_5x = Value(rn_relayOprTime_5x),
        yn_pickupCurrent = Value(yn_pickupCurrent),
        yn_relayOprTime_2x = Value(yn_relayOprTime_2x),
        yn_relayOprTime_5x = Value(yn_relayOprTime_5x),
        bn_pickupCurrent = Value(bn_pickupCurrent),
        bn_relayOprTime_2x = Value(bn_relayOprTime_2x),
        bn_relayOprTime_5x = Value(bn_relayOprTime_5x),
        stageNo = Value(stageNo),
        curve = Value(curve),
        function = Value(function),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<FPRovercurrentLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> CurrentSet,
    Expression<double> TMS,
    Expression<double> delay,
    Expression<double> rn_pickupCurrent,
    Expression<double> rn_relayOprTime_2x,
    Expression<double> rn_relayOprTime_5x,
    Expression<double> yn_pickupCurrent,
    Expression<double> yn_relayOprTime_2x,
    Expression<double> yn_relayOprTime_5x,
    Expression<double> bn_pickupCurrent,
    Expression<double> bn_relayOprTime_2x,
    Expression<double> bn_relayOprTime_5x,
    Expression<int> stageNo,
    Expression<String> curve,
    Expression<String> function,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (CurrentSet != null) 'current_set': CurrentSet,
      if (TMS != null) 'tms': TMS,
      if (delay != null) 'delay': delay,
      if (rn_pickupCurrent != null) 'rn_pickup_current': rn_pickupCurrent,
      if (rn_relayOprTime_2x != null)
        'rn_relay_opr_time_2x': rn_relayOprTime_2x,
      if (rn_relayOprTime_5x != null)
        'rn_relay_opr_time_5x': rn_relayOprTime_5x,
      if (yn_pickupCurrent != null) 'yn_pickup_current': yn_pickupCurrent,
      if (yn_relayOprTime_2x != null)
        'yn_relay_opr_time_2x': yn_relayOprTime_2x,
      if (yn_relayOprTime_5x != null)
        'yn_relay_opr_time_5x': yn_relayOprTime_5x,
      if (bn_pickupCurrent != null) 'bn_pickup_current': bn_pickupCurrent,
      if (bn_relayOprTime_2x != null)
        'bn_relay_opr_time_2x': bn_relayOprTime_2x,
      if (bn_relayOprTime_5x != null)
        'bn_relay_opr_time_5x': bn_relayOprTime_5x,
      if (stageNo != null) 'stage_no': stageNo,
      if (curve != null) 'curve': curve,
      if (function != null) 'function': function,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  FPRovercurrentLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> CurrentSet,
      Value<double> TMS,
      Value<double> delay,
      Value<double> rn_pickupCurrent,
      Value<double> rn_relayOprTime_2x,
      Value<double> rn_relayOprTime_5x,
      Value<double> yn_pickupCurrent,
      Value<double> yn_relayOprTime_2x,
      Value<double> yn_relayOprTime_5x,
      Value<double> bn_pickupCurrent,
      Value<double> bn_relayOprTime_2x,
      Value<double> bn_relayOprTime_5x,
      Value<int> stageNo,
      Value<String> curve,
      Value<String> function,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return FPRovercurrentLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      CurrentSet: CurrentSet ?? this.CurrentSet,
      TMS: TMS ?? this.TMS,
      delay: delay ?? this.delay,
      rn_pickupCurrent: rn_pickupCurrent ?? this.rn_pickupCurrent,
      rn_relayOprTime_2x: rn_relayOprTime_2x ?? this.rn_relayOprTime_2x,
      rn_relayOprTime_5x: rn_relayOprTime_5x ?? this.rn_relayOprTime_5x,
      yn_pickupCurrent: yn_pickupCurrent ?? this.yn_pickupCurrent,
      yn_relayOprTime_2x: yn_relayOprTime_2x ?? this.yn_relayOprTime_2x,
      yn_relayOprTime_5x: yn_relayOprTime_5x ?? this.yn_relayOprTime_5x,
      bn_pickupCurrent: bn_pickupCurrent ?? this.bn_pickupCurrent,
      bn_relayOprTime_2x: bn_relayOprTime_2x ?? this.bn_relayOprTime_2x,
      bn_relayOprTime_5x: bn_relayOprTime_5x ?? this.bn_relayOprTime_5x,
      stageNo: stageNo ?? this.stageNo,
      curve: curve ?? this.curve,
      function: function ?? this.function,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (CurrentSet.present) {
      map['current_set'] = Variable<double>(CurrentSet.value);
    }
    if (TMS.present) {
      map['tms'] = Variable<double>(TMS.value);
    }
    if (delay.present) {
      map['delay'] = Variable<double>(delay.value);
    }
    if (rn_pickupCurrent.present) {
      map['rn_pickup_current'] = Variable<double>(rn_pickupCurrent.value);
    }
    if (rn_relayOprTime_2x.present) {
      map['rn_relay_opr_time_2x'] = Variable<double>(rn_relayOprTime_2x.value);
    }
    if (rn_relayOprTime_5x.present) {
      map['rn_relay_opr_time_5x'] = Variable<double>(rn_relayOprTime_5x.value);
    }
    if (yn_pickupCurrent.present) {
      map['yn_pickup_current'] = Variable<double>(yn_pickupCurrent.value);
    }
    if (yn_relayOprTime_2x.present) {
      map['yn_relay_opr_time_2x'] = Variable<double>(yn_relayOprTime_2x.value);
    }
    if (yn_relayOprTime_5x.present) {
      map['yn_relay_opr_time_5x'] = Variable<double>(yn_relayOprTime_5x.value);
    }
    if (bn_pickupCurrent.present) {
      map['bn_pickup_current'] = Variable<double>(bn_pickupCurrent.value);
    }
    if (bn_relayOprTime_2x.present) {
      map['bn_relay_opr_time_2x'] = Variable<double>(bn_relayOprTime_2x.value);
    }
    if (bn_relayOprTime_5x.present) {
      map['bn_relay_opr_time_5x'] = Variable<double>(bn_relayOprTime_5x.value);
    }
    if (stageNo.present) {
      map['stage_no'] = Variable<int>(stageNo.value);
    }
    if (curve.present) {
      map['curve'] = Variable<String>(curve.value);
    }
    if (function.present) {
      map['function'] = Variable<String>(function.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FPRovercurrentLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('CurrentSet: $CurrentSet, ')
          ..write('TMS: $TMS, ')
          ..write('delay: $delay, ')
          ..write('rn_pickupCurrent: $rn_pickupCurrent, ')
          ..write('rn_relayOprTime_2x: $rn_relayOprTime_2x, ')
          ..write('rn_relayOprTime_5x: $rn_relayOprTime_5x, ')
          ..write('yn_pickupCurrent: $yn_pickupCurrent, ')
          ..write('yn_relayOprTime_2x: $yn_relayOprTime_2x, ')
          ..write('yn_relayOprTime_5x: $yn_relayOprTime_5x, ')
          ..write('bn_pickupCurrent: $bn_pickupCurrent, ')
          ..write('bn_relayOprTime_2x: $bn_relayOprTime_2x, ')
          ..write('bn_relayOprTime_5x: $bn_relayOprTime_5x, ')
          ..write('stageNo: $stageNo, ')
          ..write('curve: $curve, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $FPRovercurrentLocalDatasourceImplTable
    extends FPRovercurrentLocalDatasourceImpl
    with
        TableInfo<$FPRovercurrentLocalDatasourceImplTable,
            FPRovercurrentLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $FPRovercurrentLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _CurrentSetMeta = const VerificationMeta('CurrentSet');
  GeneratedColumn<double> _CurrentSet;
  @override
  GeneratedColumn<double> get CurrentSet =>
      _CurrentSet ??= GeneratedColumn<double>('current_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _TMSMeta = const VerificationMeta('TMS');
  GeneratedColumn<double> _TMS;
  @override
  GeneratedColumn<double> get TMS =>
      _TMS ??= GeneratedColumn<double>('tms', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _delayMeta = const VerificationMeta('delay');
  GeneratedColumn<double> _delay;
  @override
  GeneratedColumn<double> get delay =>
      _delay ??= GeneratedColumn<double>('delay', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_pickupCurrentMeta =
      const VerificationMeta('rn_pickupCurrent');
  GeneratedColumn<double> _rn_pickupCurrent;
  @override
  GeneratedColumn<double> get rn_pickupCurrent => _rn_pickupCurrent ??=
      GeneratedColumn<double>('rn_pickup_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_relayOprTime_2xMeta =
      const VerificationMeta('rn_relayOprTime_2x');
  GeneratedColumn<double> _rn_relayOprTime_2x;
  @override
  GeneratedColumn<double> get rn_relayOprTime_2x => _rn_relayOprTime_2x ??=
      GeneratedColumn<double>('rn_relay_opr_time_2x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_relayOprTime_5xMeta =
      const VerificationMeta('rn_relayOprTime_5x');
  GeneratedColumn<double> _rn_relayOprTime_5x;
  @override
  GeneratedColumn<double> get rn_relayOprTime_5x => _rn_relayOprTime_5x ??=
      GeneratedColumn<double>('rn_relay_opr_time_5x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_pickupCurrentMeta =
      const VerificationMeta('yn_pickupCurrent');
  GeneratedColumn<double> _yn_pickupCurrent;
  @override
  GeneratedColumn<double> get yn_pickupCurrent => _yn_pickupCurrent ??=
      GeneratedColumn<double>('yn_pickup_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_relayOprTime_2xMeta =
      const VerificationMeta('yn_relayOprTime_2x');
  GeneratedColumn<double> _yn_relayOprTime_2x;
  @override
  GeneratedColumn<double> get yn_relayOprTime_2x => _yn_relayOprTime_2x ??=
      GeneratedColumn<double>('yn_relay_opr_time_2x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_relayOprTime_5xMeta =
      const VerificationMeta('yn_relayOprTime_5x');
  GeneratedColumn<double> _yn_relayOprTime_5x;
  @override
  GeneratedColumn<double> get yn_relayOprTime_5x => _yn_relayOprTime_5x ??=
      GeneratedColumn<double>('yn_relay_opr_time_5x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_pickupCurrentMeta =
      const VerificationMeta('bn_pickupCurrent');
  GeneratedColumn<double> _bn_pickupCurrent;
  @override
  GeneratedColumn<double> get bn_pickupCurrent => _bn_pickupCurrent ??=
      GeneratedColumn<double>('bn_pickup_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_relayOprTime_2xMeta =
      const VerificationMeta('bn_relayOprTime_2x');
  GeneratedColumn<double> _bn_relayOprTime_2x;
  @override
  GeneratedColumn<double> get bn_relayOprTime_2x => _bn_relayOprTime_2x ??=
      GeneratedColumn<double>('bn_relay_opr_time_2x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_relayOprTime_5xMeta =
      const VerificationMeta('bn_relayOprTime_5x');
  GeneratedColumn<double> _bn_relayOprTime_5x;
  @override
  GeneratedColumn<double> get bn_relayOprTime_5x => _bn_relayOprTime_5x ??=
      GeneratedColumn<double>('bn_relay_opr_time_5x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _stageNoMeta = const VerificationMeta('stageNo');
  GeneratedColumn<int> _stageNo;
  @override
  GeneratedColumn<int> get stageNo =>
      _stageNo ??= GeneratedColumn<int>('stage_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _curveMeta = const VerificationMeta('curve');
  GeneratedColumn<String> _curve;
  @override
  GeneratedColumn<String> get curve => _curve ??= GeneratedColumn<String>(
      'curve', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _functionMeta = const VerificationMeta('function');
  GeneratedColumn<String> _function;
  @override
  GeneratedColumn<String> get function => _function ??= GeneratedColumn<String>(
      'function', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        CurrentSet,
        TMS,
        delay,
        rn_pickupCurrent,
        rn_relayOprTime_2x,
        rn_relayOprTime_5x,
        yn_pickupCurrent,
        yn_relayOprTime_2x,
        yn_relayOprTime_5x,
        bn_pickupCurrent,
        bn_relayOprTime_2x,
        bn_relayOprTime_5x,
        stageNo,
        curve,
        function,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'f_p_rovercurrent_local_datasource_impl';
  @override
  String get actualTableName => 'f_p_rovercurrent_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<FPRovercurrentLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('current_set')) {
      context.handle(
          _CurrentSetMeta,
          CurrentSet.isAcceptableOrUnknown(
              data['current_set'], _CurrentSetMeta));
    } else if (isInserting) {
      context.missing(_CurrentSetMeta);
    }
    if (data.containsKey('tms')) {
      context.handle(
          _TMSMeta, TMS.isAcceptableOrUnknown(data['tms'], _TMSMeta));
    } else if (isInserting) {
      context.missing(_TMSMeta);
    }
    if (data.containsKey('delay')) {
      context.handle(
          _delayMeta, delay.isAcceptableOrUnknown(data['delay'], _delayMeta));
    } else if (isInserting) {
      context.missing(_delayMeta);
    }
    if (data.containsKey('rn_pickup_current')) {
      context.handle(
          _rn_pickupCurrentMeta,
          rn_pickupCurrent.isAcceptableOrUnknown(
              data['rn_pickup_current'], _rn_pickupCurrentMeta));
    } else if (isInserting) {
      context.missing(_rn_pickupCurrentMeta);
    }
    if (data.containsKey('rn_relay_opr_time_2x')) {
      context.handle(
          _rn_relayOprTime_2xMeta,
          rn_relayOprTime_2x.isAcceptableOrUnknown(
              data['rn_relay_opr_time_2x'], _rn_relayOprTime_2xMeta));
    } else if (isInserting) {
      context.missing(_rn_relayOprTime_2xMeta);
    }
    if (data.containsKey('rn_relay_opr_time_5x')) {
      context.handle(
          _rn_relayOprTime_5xMeta,
          rn_relayOprTime_5x.isAcceptableOrUnknown(
              data['rn_relay_opr_time_5x'], _rn_relayOprTime_5xMeta));
    } else if (isInserting) {
      context.missing(_rn_relayOprTime_5xMeta);
    }
    if (data.containsKey('yn_pickup_current')) {
      context.handle(
          _yn_pickupCurrentMeta,
          yn_pickupCurrent.isAcceptableOrUnknown(
              data['yn_pickup_current'], _yn_pickupCurrentMeta));
    } else if (isInserting) {
      context.missing(_yn_pickupCurrentMeta);
    }
    if (data.containsKey('yn_relay_opr_time_2x')) {
      context.handle(
          _yn_relayOprTime_2xMeta,
          yn_relayOprTime_2x.isAcceptableOrUnknown(
              data['yn_relay_opr_time_2x'], _yn_relayOprTime_2xMeta));
    } else if (isInserting) {
      context.missing(_yn_relayOprTime_2xMeta);
    }
    if (data.containsKey('yn_relay_opr_time_5x')) {
      context.handle(
          _yn_relayOprTime_5xMeta,
          yn_relayOprTime_5x.isAcceptableOrUnknown(
              data['yn_relay_opr_time_5x'], _yn_relayOprTime_5xMeta));
    } else if (isInserting) {
      context.missing(_yn_relayOprTime_5xMeta);
    }
    if (data.containsKey('bn_pickup_current')) {
      context.handle(
          _bn_pickupCurrentMeta,
          bn_pickupCurrent.isAcceptableOrUnknown(
              data['bn_pickup_current'], _bn_pickupCurrentMeta));
    } else if (isInserting) {
      context.missing(_bn_pickupCurrentMeta);
    }
    if (data.containsKey('bn_relay_opr_time_2x')) {
      context.handle(
          _bn_relayOprTime_2xMeta,
          bn_relayOprTime_2x.isAcceptableOrUnknown(
              data['bn_relay_opr_time_2x'], _bn_relayOprTime_2xMeta));
    } else if (isInserting) {
      context.missing(_bn_relayOprTime_2xMeta);
    }
    if (data.containsKey('bn_relay_opr_time_5x')) {
      context.handle(
          _bn_relayOprTime_5xMeta,
          bn_relayOprTime_5x.isAcceptableOrUnknown(
              data['bn_relay_opr_time_5x'], _bn_relayOprTime_5xMeta));
    } else if (isInserting) {
      context.missing(_bn_relayOprTime_5xMeta);
    }
    if (data.containsKey('stage_no')) {
      context.handle(_stageNoMeta,
          stageNo.isAcceptableOrUnknown(data['stage_no'], _stageNoMeta));
    } else if (isInserting) {
      context.missing(_stageNoMeta);
    }
    if (data.containsKey('curve')) {
      context.handle(
          _curveMeta, curve.isAcceptableOrUnknown(data['curve'], _curveMeta));
    } else if (isInserting) {
      context.missing(_curveMeta);
    }
    if (data.containsKey('function')) {
      context.handle(_functionMeta,
          function.isAcceptableOrUnknown(data['function'], _functionMeta));
    } else if (isInserting) {
      context.missing(_functionMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FPRovercurrentLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return FPRovercurrentLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FPRovercurrentLocalDatasourceImplTable createAlias(String alias) {
    return $FPRovercurrentLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class FPRearthfaultLocalData extends DataClass
    implements Insertable<FPRearthfaultLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double currentSet;
  final double TMS;
  final double delay;
  final double relayOprTime_5x;
  final double pickupCurrent;
  final double relayOprTime_2x;
  final int stageNo;
  final String curve;
  final String function;
  final String equipmentUsed;
  final DateTime updateDate;
  FPRearthfaultLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.currentSet,
      @required this.TMS,
      @required this.delay,
      @required this.relayOprTime_5x,
      @required this.pickupCurrent,
      @required this.relayOprTime_2x,
      @required this.stageNo,
      @required this.curve,
      @required this.function,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory FPRearthfaultLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return FPRearthfaultLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      currentSet: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}current_set']),
      TMS: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tms']),
      delay: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}delay']),
      relayOprTime_5x: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}relay_opr_time_5x']),
      pickupCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pickup_current']),
      relayOprTime_2x: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}relay_opr_time_2x']),
      stageNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}stage_no']),
      curve: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}curve']),
      function: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}function']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || currentSet != null) {
      map['current_set'] = Variable<double>(currentSet);
    }
    if (!nullToAbsent || TMS != null) {
      map['tms'] = Variable<double>(TMS);
    }
    if (!nullToAbsent || delay != null) {
      map['delay'] = Variable<double>(delay);
    }
    if (!nullToAbsent || relayOprTime_5x != null) {
      map['relay_opr_time_5x'] = Variable<double>(relayOprTime_5x);
    }
    if (!nullToAbsent || pickupCurrent != null) {
      map['pickup_current'] = Variable<double>(pickupCurrent);
    }
    if (!nullToAbsent || relayOprTime_2x != null) {
      map['relay_opr_time_2x'] = Variable<double>(relayOprTime_2x);
    }
    if (!nullToAbsent || stageNo != null) {
      map['stage_no'] = Variable<int>(stageNo);
    }
    if (!nullToAbsent || curve != null) {
      map['curve'] = Variable<String>(curve);
    }
    if (!nullToAbsent || function != null) {
      map['function'] = Variable<String>(function);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  FPRearthfaultLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return FPRearthfaultLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      currentSet: currentSet == null && nullToAbsent
          ? const Value.absent()
          : Value(currentSet),
      TMS: TMS == null && nullToAbsent ? const Value.absent() : Value(TMS),
      delay:
          delay == null && nullToAbsent ? const Value.absent() : Value(delay),
      relayOprTime_5x: relayOprTime_5x == null && nullToAbsent
          ? const Value.absent()
          : Value(relayOprTime_5x),
      pickupCurrent: pickupCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(pickupCurrent),
      relayOprTime_2x: relayOprTime_2x == null && nullToAbsent
          ? const Value.absent()
          : Value(relayOprTime_2x),
      stageNo: stageNo == null && nullToAbsent
          ? const Value.absent()
          : Value(stageNo),
      curve:
          curve == null && nullToAbsent ? const Value.absent() : Value(curve),
      function: function == null && nullToAbsent
          ? const Value.absent()
          : Value(function),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory FPRearthfaultLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FPRearthfaultLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      currentSet: serializer.fromJson<double>(json['currentSet']),
      TMS: serializer.fromJson<double>(json['TMS']),
      delay: serializer.fromJson<double>(json['delay']),
      relayOprTime_5x: serializer.fromJson<double>(json['relayOprTime_5x']),
      pickupCurrent: serializer.fromJson<double>(json['pickupCurrent']),
      relayOprTime_2x: serializer.fromJson<double>(json['relayOprTime_2x']),
      stageNo: serializer.fromJson<int>(json['stageNo']),
      curve: serializer.fromJson<String>(json['curve']),
      function: serializer.fromJson<String>(json['function']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'currentSet': serializer.toJson<double>(currentSet),
      'TMS': serializer.toJson<double>(TMS),
      'delay': serializer.toJson<double>(delay),
      'relayOprTime_5x': serializer.toJson<double>(relayOprTime_5x),
      'pickupCurrent': serializer.toJson<double>(pickupCurrent),
      'relayOprTime_2x': serializer.toJson<double>(relayOprTime_2x),
      'stageNo': serializer.toJson<int>(stageNo),
      'curve': serializer.toJson<String>(curve),
      'function': serializer.toJson<String>(function),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  FPRearthfaultLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double currentSet,
          double TMS,
          double delay,
          double relayOprTime_5x,
          double pickupCurrent,
          double relayOprTime_2x,
          int stageNo,
          String curve,
          String function,
          String equipmentUsed,
          DateTime updateDate}) =>
      FPRearthfaultLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        currentSet: currentSet ?? this.currentSet,
        TMS: TMS ?? this.TMS,
        delay: delay ?? this.delay,
        relayOprTime_5x: relayOprTime_5x ?? this.relayOprTime_5x,
        pickupCurrent: pickupCurrent ?? this.pickupCurrent,
        relayOprTime_2x: relayOprTime_2x ?? this.relayOprTime_2x,
        stageNo: stageNo ?? this.stageNo,
        curve: curve ?? this.curve,
        function: function ?? this.function,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('FPRearthfaultLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('currentSet: $currentSet, ')
          ..write('TMS: $TMS, ')
          ..write('delay: $delay, ')
          ..write('relayOprTime_5x: $relayOprTime_5x, ')
          ..write('pickupCurrent: $pickupCurrent, ')
          ..write('relayOprTime_2x: $relayOprTime_2x, ')
          ..write('stageNo: $stageNo, ')
          ..write('curve: $curve, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      currentSet,
      TMS,
      delay,
      relayOprTime_5x,
      pickupCurrent,
      relayOprTime_2x,
      stageNo,
      curve,
      function,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FPRearthfaultLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.currentSet == this.currentSet &&
          other.TMS == this.TMS &&
          other.delay == this.delay &&
          other.relayOprTime_5x == this.relayOprTime_5x &&
          other.pickupCurrent == this.pickupCurrent &&
          other.relayOprTime_2x == this.relayOprTime_2x &&
          other.stageNo == this.stageNo &&
          other.curve == this.curve &&
          other.function == this.function &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class FPRearthfaultLocalDatasourceImplCompanion
    extends UpdateCompanion<FPRearthfaultLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> currentSet;
  final Value<double> TMS;
  final Value<double> delay;
  final Value<double> relayOprTime_5x;
  final Value<double> pickupCurrent;
  final Value<double> relayOprTime_2x;
  final Value<int> stageNo;
  final Value<String> curve;
  final Value<String> function;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const FPRearthfaultLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.currentSet = const Value.absent(),
    this.TMS = const Value.absent(),
    this.delay = const Value.absent(),
    this.relayOprTime_5x = const Value.absent(),
    this.pickupCurrent = const Value.absent(),
    this.relayOprTime_2x = const Value.absent(),
    this.stageNo = const Value.absent(),
    this.curve = const Value.absent(),
    this.function = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  FPRearthfaultLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double currentSet,
    @required double TMS,
    @required double delay,
    @required double relayOprTime_5x,
    @required double pickupCurrent,
    @required double relayOprTime_2x,
    @required int stageNo,
    @required String curve,
    @required String function,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        currentSet = Value(currentSet),
        TMS = Value(TMS),
        delay = Value(delay),
        relayOprTime_5x = Value(relayOprTime_5x),
        pickupCurrent = Value(pickupCurrent),
        relayOprTime_2x = Value(relayOprTime_2x),
        stageNo = Value(stageNo),
        curve = Value(curve),
        function = Value(function),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<FPRearthfaultLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> currentSet,
    Expression<double> TMS,
    Expression<double> delay,
    Expression<double> relayOprTime_5x,
    Expression<double> pickupCurrent,
    Expression<double> relayOprTime_2x,
    Expression<int> stageNo,
    Expression<String> curve,
    Expression<String> function,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (currentSet != null) 'current_set': currentSet,
      if (TMS != null) 'tms': TMS,
      if (delay != null) 'delay': delay,
      if (relayOprTime_5x != null) 'relay_opr_time_5x': relayOprTime_5x,
      if (pickupCurrent != null) 'pickup_current': pickupCurrent,
      if (relayOprTime_2x != null) 'relay_opr_time_2x': relayOprTime_2x,
      if (stageNo != null) 'stage_no': stageNo,
      if (curve != null) 'curve': curve,
      if (function != null) 'function': function,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  FPRearthfaultLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> currentSet,
      Value<double> TMS,
      Value<double> delay,
      Value<double> relayOprTime_5x,
      Value<double> pickupCurrent,
      Value<double> relayOprTime_2x,
      Value<int> stageNo,
      Value<String> curve,
      Value<String> function,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return FPRearthfaultLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      currentSet: currentSet ?? this.currentSet,
      TMS: TMS ?? this.TMS,
      delay: delay ?? this.delay,
      relayOprTime_5x: relayOprTime_5x ?? this.relayOprTime_5x,
      pickupCurrent: pickupCurrent ?? this.pickupCurrent,
      relayOprTime_2x: relayOprTime_2x ?? this.relayOprTime_2x,
      stageNo: stageNo ?? this.stageNo,
      curve: curve ?? this.curve,
      function: function ?? this.function,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (currentSet.present) {
      map['current_set'] = Variable<double>(currentSet.value);
    }
    if (TMS.present) {
      map['tms'] = Variable<double>(TMS.value);
    }
    if (delay.present) {
      map['delay'] = Variable<double>(delay.value);
    }
    if (relayOprTime_5x.present) {
      map['relay_opr_time_5x'] = Variable<double>(relayOprTime_5x.value);
    }
    if (pickupCurrent.present) {
      map['pickup_current'] = Variable<double>(pickupCurrent.value);
    }
    if (relayOprTime_2x.present) {
      map['relay_opr_time_2x'] = Variable<double>(relayOprTime_2x.value);
    }
    if (stageNo.present) {
      map['stage_no'] = Variable<int>(stageNo.value);
    }
    if (curve.present) {
      map['curve'] = Variable<String>(curve.value);
    }
    if (function.present) {
      map['function'] = Variable<String>(function.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FPRearthfaultLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('currentSet: $currentSet, ')
          ..write('TMS: $TMS, ')
          ..write('delay: $delay, ')
          ..write('relayOprTime_5x: $relayOprTime_5x, ')
          ..write('pickupCurrent: $pickupCurrent, ')
          ..write('relayOprTime_2x: $relayOprTime_2x, ')
          ..write('stageNo: $stageNo, ')
          ..write('curve: $curve, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $FPRearthfaultLocalDatasourceImplTable
    extends FPRearthfaultLocalDatasourceImpl
    with
        TableInfo<$FPRearthfaultLocalDatasourceImplTable,
            FPRearthfaultLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $FPRearthfaultLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _currentSetMeta = const VerificationMeta('currentSet');
  GeneratedColumn<double> _currentSet;
  @override
  GeneratedColumn<double> get currentSet =>
      _currentSet ??= GeneratedColumn<double>('current_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _TMSMeta = const VerificationMeta('TMS');
  GeneratedColumn<double> _TMS;
  @override
  GeneratedColumn<double> get TMS =>
      _TMS ??= GeneratedColumn<double>('tms', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _delayMeta = const VerificationMeta('delay');
  GeneratedColumn<double> _delay;
  @override
  GeneratedColumn<double> get delay =>
      _delay ??= GeneratedColumn<double>('delay', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _relayOprTime_5xMeta =
      const VerificationMeta('relayOprTime_5x');
  GeneratedColumn<double> _relayOprTime_5x;
  @override
  GeneratedColumn<double> get relayOprTime_5x => _relayOprTime_5x ??=
      GeneratedColumn<double>('relay_opr_time_5x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pickupCurrentMeta =
      const VerificationMeta('pickupCurrent');
  GeneratedColumn<double> _pickupCurrent;
  @override
  GeneratedColumn<double> get pickupCurrent => _pickupCurrent ??=
      GeneratedColumn<double>('pickup_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _relayOprTime_2xMeta =
      const VerificationMeta('relayOprTime_2x');
  GeneratedColumn<double> _relayOprTime_2x;
  @override
  GeneratedColumn<double> get relayOprTime_2x => _relayOprTime_2x ??=
      GeneratedColumn<double>('relay_opr_time_2x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _stageNoMeta = const VerificationMeta('stageNo');
  GeneratedColumn<int> _stageNo;
  @override
  GeneratedColumn<int> get stageNo =>
      _stageNo ??= GeneratedColumn<int>('stage_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _curveMeta = const VerificationMeta('curve');
  GeneratedColumn<String> _curve;
  @override
  GeneratedColumn<String> get curve => _curve ??= GeneratedColumn<String>(
      'curve', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _functionMeta = const VerificationMeta('function');
  GeneratedColumn<String> _function;
  @override
  GeneratedColumn<String> get function => _function ??= GeneratedColumn<String>(
      'function', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        currentSet,
        TMS,
        delay,
        relayOprTime_5x,
        pickupCurrent,
        relayOprTime_2x,
        stageNo,
        curve,
        function,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'f_p_rearthfault_local_datasource_impl';
  @override
  String get actualTableName => 'f_p_rearthfault_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<FPRearthfaultLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('current_set')) {
      context.handle(
          _currentSetMeta,
          currentSet.isAcceptableOrUnknown(
              data['current_set'], _currentSetMeta));
    } else if (isInserting) {
      context.missing(_currentSetMeta);
    }
    if (data.containsKey('tms')) {
      context.handle(
          _TMSMeta, TMS.isAcceptableOrUnknown(data['tms'], _TMSMeta));
    } else if (isInserting) {
      context.missing(_TMSMeta);
    }
    if (data.containsKey('delay')) {
      context.handle(
          _delayMeta, delay.isAcceptableOrUnknown(data['delay'], _delayMeta));
    } else if (isInserting) {
      context.missing(_delayMeta);
    }
    if (data.containsKey('relay_opr_time_5x')) {
      context.handle(
          _relayOprTime_5xMeta,
          relayOprTime_5x.isAcceptableOrUnknown(
              data['relay_opr_time_5x'], _relayOprTime_5xMeta));
    } else if (isInserting) {
      context.missing(_relayOprTime_5xMeta);
    }
    if (data.containsKey('pickup_current')) {
      context.handle(
          _pickupCurrentMeta,
          pickupCurrent.isAcceptableOrUnknown(
              data['pickup_current'], _pickupCurrentMeta));
    } else if (isInserting) {
      context.missing(_pickupCurrentMeta);
    }
    if (data.containsKey('relay_opr_time_2x')) {
      context.handle(
          _relayOprTime_2xMeta,
          relayOprTime_2x.isAcceptableOrUnknown(
              data['relay_opr_time_2x'], _relayOprTime_2xMeta));
    } else if (isInserting) {
      context.missing(_relayOprTime_2xMeta);
    }
    if (data.containsKey('stage_no')) {
      context.handle(_stageNoMeta,
          stageNo.isAcceptableOrUnknown(data['stage_no'], _stageNoMeta));
    } else if (isInserting) {
      context.missing(_stageNoMeta);
    }
    if (data.containsKey('curve')) {
      context.handle(
          _curveMeta, curve.isAcceptableOrUnknown(data['curve'], _curveMeta));
    } else if (isInserting) {
      context.missing(_curveMeta);
    }
    if (data.containsKey('function')) {
      context.handle(_functionMeta,
          function.isAcceptableOrUnknown(data['function'], _functionMeta));
    } else if (isInserting) {
      context.missing(_functionMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FPRearthfaultLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return FPRearthfaultLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FPRearthfaultLocalDatasourceImplTable createAlias(String alias) {
    return $FPRearthfaultLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class FPRovervoltageLocalData extends DataClass
    implements Insertable<FPRovervoltageLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double voltageSet;
  final double delay;
  final double rn_secVoltageSet;
  final double rn_appliedSecVoltage;
  final double rn_relayOprTime;
  final double yn_secVoltageSet;
  final double yn_appliedSecVoltage;
  final double yn_relayOprTime;
  final double bn_secVoltageSet;
  final double bn_appliedSecVoltage;
  final double bn_relayOprTime;
  final int stageNo;
  final String function;
  final String equipmentUsed;
  final DateTime updateDate;
  FPRovervoltageLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.voltageSet,
      @required this.delay,
      @required this.rn_secVoltageSet,
      @required this.rn_appliedSecVoltage,
      @required this.rn_relayOprTime,
      @required this.yn_secVoltageSet,
      @required this.yn_appliedSecVoltage,
      @required this.yn_relayOprTime,
      @required this.bn_secVoltageSet,
      @required this.bn_appliedSecVoltage,
      @required this.bn_relayOprTime,
      @required this.stageNo,
      @required this.function,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory FPRovervoltageLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return FPRovervoltageLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      voltageSet: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}voltage_set']),
      delay: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}delay']),
      rn_secVoltageSet: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}rn_sec_voltage_set']),
      rn_appliedSecVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}rn_applied_sec_voltage']),
      rn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rn_relay_opr_time']),
      yn_secVoltageSet: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}yn_sec_voltage_set']),
      yn_appliedSecVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}yn_applied_sec_voltage']),
      yn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yn_relay_opr_time']),
      bn_secVoltageSet: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}bn_sec_voltage_set']),
      bn_appliedSecVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}bn_applied_sec_voltage']),
      bn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bn_relay_opr_time']),
      stageNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}stage_no']),
      function: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}function']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || voltageSet != null) {
      map['voltage_set'] = Variable<double>(voltageSet);
    }
    if (!nullToAbsent || delay != null) {
      map['delay'] = Variable<double>(delay);
    }
    if (!nullToAbsent || rn_secVoltageSet != null) {
      map['rn_sec_voltage_set'] = Variable<double>(rn_secVoltageSet);
    }
    if (!nullToAbsent || rn_appliedSecVoltage != null) {
      map['rn_applied_sec_voltage'] = Variable<double>(rn_appliedSecVoltage);
    }
    if (!nullToAbsent || rn_relayOprTime != null) {
      map['rn_relay_opr_time'] = Variable<double>(rn_relayOprTime);
    }
    if (!nullToAbsent || yn_secVoltageSet != null) {
      map['yn_sec_voltage_set'] = Variable<double>(yn_secVoltageSet);
    }
    if (!nullToAbsent || yn_appliedSecVoltage != null) {
      map['yn_applied_sec_voltage'] = Variable<double>(yn_appliedSecVoltage);
    }
    if (!nullToAbsent || yn_relayOprTime != null) {
      map['yn_relay_opr_time'] = Variable<double>(yn_relayOprTime);
    }
    if (!nullToAbsent || bn_secVoltageSet != null) {
      map['bn_sec_voltage_set'] = Variable<double>(bn_secVoltageSet);
    }
    if (!nullToAbsent || bn_appliedSecVoltage != null) {
      map['bn_applied_sec_voltage'] = Variable<double>(bn_appliedSecVoltage);
    }
    if (!nullToAbsent || bn_relayOprTime != null) {
      map['bn_relay_opr_time'] = Variable<double>(bn_relayOprTime);
    }
    if (!nullToAbsent || stageNo != null) {
      map['stage_no'] = Variable<int>(stageNo);
    }
    if (!nullToAbsent || function != null) {
      map['function'] = Variable<String>(function);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  FPRovervoltageLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return FPRovervoltageLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      voltageSet: voltageSet == null && nullToAbsent
          ? const Value.absent()
          : Value(voltageSet),
      delay:
          delay == null && nullToAbsent ? const Value.absent() : Value(delay),
      rn_secVoltageSet: rn_secVoltageSet == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_secVoltageSet),
      rn_appliedSecVoltage: rn_appliedSecVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_appliedSecVoltage),
      rn_relayOprTime: rn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_relayOprTime),
      yn_secVoltageSet: yn_secVoltageSet == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_secVoltageSet),
      yn_appliedSecVoltage: yn_appliedSecVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_appliedSecVoltage),
      yn_relayOprTime: yn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_relayOprTime),
      bn_secVoltageSet: bn_secVoltageSet == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_secVoltageSet),
      bn_appliedSecVoltage: bn_appliedSecVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_appliedSecVoltage),
      bn_relayOprTime: bn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_relayOprTime),
      stageNo: stageNo == null && nullToAbsent
          ? const Value.absent()
          : Value(stageNo),
      function: function == null && nullToAbsent
          ? const Value.absent()
          : Value(function),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory FPRovervoltageLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FPRovervoltageLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      voltageSet: serializer.fromJson<double>(json['voltageSet']),
      delay: serializer.fromJson<double>(json['delay']),
      rn_secVoltageSet: serializer.fromJson<double>(json['rn_secVoltageSet']),
      rn_appliedSecVoltage:
          serializer.fromJson<double>(json['rn_appliedSecVoltage']),
      rn_relayOprTime: serializer.fromJson<double>(json['rn_relayOprTime']),
      yn_secVoltageSet: serializer.fromJson<double>(json['yn_secVoltageSet']),
      yn_appliedSecVoltage:
          serializer.fromJson<double>(json['yn_appliedSecVoltage']),
      yn_relayOprTime: serializer.fromJson<double>(json['yn_relayOprTime']),
      bn_secVoltageSet: serializer.fromJson<double>(json['bn_secVoltageSet']),
      bn_appliedSecVoltage:
          serializer.fromJson<double>(json['bn_appliedSecVoltage']),
      bn_relayOprTime: serializer.fromJson<double>(json['bn_relayOprTime']),
      stageNo: serializer.fromJson<int>(json['stageNo']),
      function: serializer.fromJson<String>(json['function']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'voltageSet': serializer.toJson<double>(voltageSet),
      'delay': serializer.toJson<double>(delay),
      'rn_secVoltageSet': serializer.toJson<double>(rn_secVoltageSet),
      'rn_appliedSecVoltage': serializer.toJson<double>(rn_appliedSecVoltage),
      'rn_relayOprTime': serializer.toJson<double>(rn_relayOprTime),
      'yn_secVoltageSet': serializer.toJson<double>(yn_secVoltageSet),
      'yn_appliedSecVoltage': serializer.toJson<double>(yn_appliedSecVoltage),
      'yn_relayOprTime': serializer.toJson<double>(yn_relayOprTime),
      'bn_secVoltageSet': serializer.toJson<double>(bn_secVoltageSet),
      'bn_appliedSecVoltage': serializer.toJson<double>(bn_appliedSecVoltage),
      'bn_relayOprTime': serializer.toJson<double>(bn_relayOprTime),
      'stageNo': serializer.toJson<int>(stageNo),
      'function': serializer.toJson<String>(function),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  FPRovervoltageLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double voltageSet,
          double delay,
          double rn_secVoltageSet,
          double rn_appliedSecVoltage,
          double rn_relayOprTime,
          double yn_secVoltageSet,
          double yn_appliedSecVoltage,
          double yn_relayOprTime,
          double bn_secVoltageSet,
          double bn_appliedSecVoltage,
          double bn_relayOprTime,
          int stageNo,
          String function,
          String equipmentUsed,
          DateTime updateDate}) =>
      FPRovervoltageLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        voltageSet: voltageSet ?? this.voltageSet,
        delay: delay ?? this.delay,
        rn_secVoltageSet: rn_secVoltageSet ?? this.rn_secVoltageSet,
        rn_appliedSecVoltage: rn_appliedSecVoltage ?? this.rn_appliedSecVoltage,
        rn_relayOprTime: rn_relayOprTime ?? this.rn_relayOprTime,
        yn_secVoltageSet: yn_secVoltageSet ?? this.yn_secVoltageSet,
        yn_appliedSecVoltage: yn_appliedSecVoltage ?? this.yn_appliedSecVoltage,
        yn_relayOprTime: yn_relayOprTime ?? this.yn_relayOprTime,
        bn_secVoltageSet: bn_secVoltageSet ?? this.bn_secVoltageSet,
        bn_appliedSecVoltage: bn_appliedSecVoltage ?? this.bn_appliedSecVoltage,
        bn_relayOprTime: bn_relayOprTime ?? this.bn_relayOprTime,
        stageNo: stageNo ?? this.stageNo,
        function: function ?? this.function,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('FPRovervoltageLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('voltageSet: $voltageSet, ')
          ..write('delay: $delay, ')
          ..write('rn_secVoltageSet: $rn_secVoltageSet, ')
          ..write('rn_appliedSecVoltage: $rn_appliedSecVoltage, ')
          ..write('rn_relayOprTime: $rn_relayOprTime, ')
          ..write('yn_secVoltageSet: $yn_secVoltageSet, ')
          ..write('yn_appliedSecVoltage: $yn_appliedSecVoltage, ')
          ..write('yn_relayOprTime: $yn_relayOprTime, ')
          ..write('bn_secVoltageSet: $bn_secVoltageSet, ')
          ..write('bn_appliedSecVoltage: $bn_appliedSecVoltage, ')
          ..write('bn_relayOprTime: $bn_relayOprTime, ')
          ..write('stageNo: $stageNo, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      voltageSet,
      delay,
      rn_secVoltageSet,
      rn_appliedSecVoltage,
      rn_relayOprTime,
      yn_secVoltageSet,
      yn_appliedSecVoltage,
      yn_relayOprTime,
      bn_secVoltageSet,
      bn_appliedSecVoltage,
      bn_relayOprTime,
      stageNo,
      function,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FPRovervoltageLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.voltageSet == this.voltageSet &&
          other.delay == this.delay &&
          other.rn_secVoltageSet == this.rn_secVoltageSet &&
          other.rn_appliedSecVoltage == this.rn_appliedSecVoltage &&
          other.rn_relayOprTime == this.rn_relayOprTime &&
          other.yn_secVoltageSet == this.yn_secVoltageSet &&
          other.yn_appliedSecVoltage == this.yn_appliedSecVoltage &&
          other.yn_relayOprTime == this.yn_relayOprTime &&
          other.bn_secVoltageSet == this.bn_secVoltageSet &&
          other.bn_appliedSecVoltage == this.bn_appliedSecVoltage &&
          other.bn_relayOprTime == this.bn_relayOprTime &&
          other.stageNo == this.stageNo &&
          other.function == this.function &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class FPRovervoltageLocalDatasourceImplCompanion
    extends UpdateCompanion<FPRovervoltageLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> voltageSet;
  final Value<double> delay;
  final Value<double> rn_secVoltageSet;
  final Value<double> rn_appliedSecVoltage;
  final Value<double> rn_relayOprTime;
  final Value<double> yn_secVoltageSet;
  final Value<double> yn_appliedSecVoltage;
  final Value<double> yn_relayOprTime;
  final Value<double> bn_secVoltageSet;
  final Value<double> bn_appliedSecVoltage;
  final Value<double> bn_relayOprTime;
  final Value<int> stageNo;
  final Value<String> function;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const FPRovervoltageLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.voltageSet = const Value.absent(),
    this.delay = const Value.absent(),
    this.rn_secVoltageSet = const Value.absent(),
    this.rn_appliedSecVoltage = const Value.absent(),
    this.rn_relayOprTime = const Value.absent(),
    this.yn_secVoltageSet = const Value.absent(),
    this.yn_appliedSecVoltage = const Value.absent(),
    this.yn_relayOprTime = const Value.absent(),
    this.bn_secVoltageSet = const Value.absent(),
    this.bn_appliedSecVoltage = const Value.absent(),
    this.bn_relayOprTime = const Value.absent(),
    this.stageNo = const Value.absent(),
    this.function = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  FPRovervoltageLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double voltageSet,
    @required double delay,
    @required double rn_secVoltageSet,
    @required double rn_appliedSecVoltage,
    @required double rn_relayOprTime,
    @required double yn_secVoltageSet,
    @required double yn_appliedSecVoltage,
    @required double yn_relayOprTime,
    @required double bn_secVoltageSet,
    @required double bn_appliedSecVoltage,
    @required double bn_relayOprTime,
    @required int stageNo,
    @required String function,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        voltageSet = Value(voltageSet),
        delay = Value(delay),
        rn_secVoltageSet = Value(rn_secVoltageSet),
        rn_appliedSecVoltage = Value(rn_appliedSecVoltage),
        rn_relayOprTime = Value(rn_relayOprTime),
        yn_secVoltageSet = Value(yn_secVoltageSet),
        yn_appliedSecVoltage = Value(yn_appliedSecVoltage),
        yn_relayOprTime = Value(yn_relayOprTime),
        bn_secVoltageSet = Value(bn_secVoltageSet),
        bn_appliedSecVoltage = Value(bn_appliedSecVoltage),
        bn_relayOprTime = Value(bn_relayOprTime),
        stageNo = Value(stageNo),
        function = Value(function),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<FPRovervoltageLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> voltageSet,
    Expression<double> delay,
    Expression<double> rn_secVoltageSet,
    Expression<double> rn_appliedSecVoltage,
    Expression<double> rn_relayOprTime,
    Expression<double> yn_secVoltageSet,
    Expression<double> yn_appliedSecVoltage,
    Expression<double> yn_relayOprTime,
    Expression<double> bn_secVoltageSet,
    Expression<double> bn_appliedSecVoltage,
    Expression<double> bn_relayOprTime,
    Expression<int> stageNo,
    Expression<String> function,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (voltageSet != null) 'voltage_set': voltageSet,
      if (delay != null) 'delay': delay,
      if (rn_secVoltageSet != null) 'rn_sec_voltage_set': rn_secVoltageSet,
      if (rn_appliedSecVoltage != null)
        'rn_applied_sec_voltage': rn_appliedSecVoltage,
      if (rn_relayOprTime != null) 'rn_relay_opr_time': rn_relayOprTime,
      if (yn_secVoltageSet != null) 'yn_sec_voltage_set': yn_secVoltageSet,
      if (yn_appliedSecVoltage != null)
        'yn_applied_sec_voltage': yn_appliedSecVoltage,
      if (yn_relayOprTime != null) 'yn_relay_opr_time': yn_relayOprTime,
      if (bn_secVoltageSet != null) 'bn_sec_voltage_set': bn_secVoltageSet,
      if (bn_appliedSecVoltage != null)
        'bn_applied_sec_voltage': bn_appliedSecVoltage,
      if (bn_relayOprTime != null) 'bn_relay_opr_time': bn_relayOprTime,
      if (stageNo != null) 'stage_no': stageNo,
      if (function != null) 'function': function,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  FPRovervoltageLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> voltageSet,
      Value<double> delay,
      Value<double> rn_secVoltageSet,
      Value<double> rn_appliedSecVoltage,
      Value<double> rn_relayOprTime,
      Value<double> yn_secVoltageSet,
      Value<double> yn_appliedSecVoltage,
      Value<double> yn_relayOprTime,
      Value<double> bn_secVoltageSet,
      Value<double> bn_appliedSecVoltage,
      Value<double> bn_relayOprTime,
      Value<int> stageNo,
      Value<String> function,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return FPRovervoltageLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      voltageSet: voltageSet ?? this.voltageSet,
      delay: delay ?? this.delay,
      rn_secVoltageSet: rn_secVoltageSet ?? this.rn_secVoltageSet,
      rn_appliedSecVoltage: rn_appliedSecVoltage ?? this.rn_appliedSecVoltage,
      rn_relayOprTime: rn_relayOprTime ?? this.rn_relayOprTime,
      yn_secVoltageSet: yn_secVoltageSet ?? this.yn_secVoltageSet,
      yn_appliedSecVoltage: yn_appliedSecVoltage ?? this.yn_appliedSecVoltage,
      yn_relayOprTime: yn_relayOprTime ?? this.yn_relayOprTime,
      bn_secVoltageSet: bn_secVoltageSet ?? this.bn_secVoltageSet,
      bn_appliedSecVoltage: bn_appliedSecVoltage ?? this.bn_appliedSecVoltage,
      bn_relayOprTime: bn_relayOprTime ?? this.bn_relayOprTime,
      stageNo: stageNo ?? this.stageNo,
      function: function ?? this.function,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (voltageSet.present) {
      map['voltage_set'] = Variable<double>(voltageSet.value);
    }
    if (delay.present) {
      map['delay'] = Variable<double>(delay.value);
    }
    if (rn_secVoltageSet.present) {
      map['rn_sec_voltage_set'] = Variable<double>(rn_secVoltageSet.value);
    }
    if (rn_appliedSecVoltage.present) {
      map['rn_applied_sec_voltage'] =
          Variable<double>(rn_appliedSecVoltage.value);
    }
    if (rn_relayOprTime.present) {
      map['rn_relay_opr_time'] = Variable<double>(rn_relayOprTime.value);
    }
    if (yn_secVoltageSet.present) {
      map['yn_sec_voltage_set'] = Variable<double>(yn_secVoltageSet.value);
    }
    if (yn_appliedSecVoltage.present) {
      map['yn_applied_sec_voltage'] =
          Variable<double>(yn_appliedSecVoltage.value);
    }
    if (yn_relayOprTime.present) {
      map['yn_relay_opr_time'] = Variable<double>(yn_relayOprTime.value);
    }
    if (bn_secVoltageSet.present) {
      map['bn_sec_voltage_set'] = Variable<double>(bn_secVoltageSet.value);
    }
    if (bn_appliedSecVoltage.present) {
      map['bn_applied_sec_voltage'] =
          Variable<double>(bn_appliedSecVoltage.value);
    }
    if (bn_relayOprTime.present) {
      map['bn_relay_opr_time'] = Variable<double>(bn_relayOprTime.value);
    }
    if (stageNo.present) {
      map['stage_no'] = Variable<int>(stageNo.value);
    }
    if (function.present) {
      map['function'] = Variable<String>(function.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FPRovervoltageLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('voltageSet: $voltageSet, ')
          ..write('delay: $delay, ')
          ..write('rn_secVoltageSet: $rn_secVoltageSet, ')
          ..write('rn_appliedSecVoltage: $rn_appliedSecVoltage, ')
          ..write('rn_relayOprTime: $rn_relayOprTime, ')
          ..write('yn_secVoltageSet: $yn_secVoltageSet, ')
          ..write('yn_appliedSecVoltage: $yn_appliedSecVoltage, ')
          ..write('yn_relayOprTime: $yn_relayOprTime, ')
          ..write('bn_secVoltageSet: $bn_secVoltageSet, ')
          ..write('bn_appliedSecVoltage: $bn_appliedSecVoltage, ')
          ..write('bn_relayOprTime: $bn_relayOprTime, ')
          ..write('stageNo: $stageNo, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $FPRovervoltageLocalDatasourceImplTable
    extends FPRovervoltageLocalDatasourceImpl
    with
        TableInfo<$FPRovervoltageLocalDatasourceImplTable,
            FPRovervoltageLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $FPRovervoltageLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _voltageSetMeta = const VerificationMeta('voltageSet');
  GeneratedColumn<double> _voltageSet;
  @override
  GeneratedColumn<double> get voltageSet =>
      _voltageSet ??= GeneratedColumn<double>('voltage_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _delayMeta = const VerificationMeta('delay');
  GeneratedColumn<double> _delay;
  @override
  GeneratedColumn<double> get delay =>
      _delay ??= GeneratedColumn<double>('delay', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_secVoltageSetMeta =
      const VerificationMeta('rn_secVoltageSet');
  GeneratedColumn<double> _rn_secVoltageSet;
  @override
  GeneratedColumn<double> get rn_secVoltageSet => _rn_secVoltageSet ??=
      GeneratedColumn<double>('rn_sec_voltage_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_appliedSecVoltageMeta =
      const VerificationMeta('rn_appliedSecVoltage');
  GeneratedColumn<double> _rn_appliedSecVoltage;
  @override
  GeneratedColumn<double> get rn_appliedSecVoltage => _rn_appliedSecVoltage ??=
      GeneratedColumn<double>('rn_applied_sec_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_relayOprTimeMeta =
      const VerificationMeta('rn_relayOprTime');
  GeneratedColumn<double> _rn_relayOprTime;
  @override
  GeneratedColumn<double> get rn_relayOprTime => _rn_relayOprTime ??=
      GeneratedColumn<double>('rn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_secVoltageSetMeta =
      const VerificationMeta('yn_secVoltageSet');
  GeneratedColumn<double> _yn_secVoltageSet;
  @override
  GeneratedColumn<double> get yn_secVoltageSet => _yn_secVoltageSet ??=
      GeneratedColumn<double>('yn_sec_voltage_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_appliedSecVoltageMeta =
      const VerificationMeta('yn_appliedSecVoltage');
  GeneratedColumn<double> _yn_appliedSecVoltage;
  @override
  GeneratedColumn<double> get yn_appliedSecVoltage => _yn_appliedSecVoltage ??=
      GeneratedColumn<double>('yn_applied_sec_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_relayOprTimeMeta =
      const VerificationMeta('yn_relayOprTime');
  GeneratedColumn<double> _yn_relayOprTime;
  @override
  GeneratedColumn<double> get yn_relayOprTime => _yn_relayOprTime ??=
      GeneratedColumn<double>('yn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_secVoltageSetMeta =
      const VerificationMeta('bn_secVoltageSet');
  GeneratedColumn<double> _bn_secVoltageSet;
  @override
  GeneratedColumn<double> get bn_secVoltageSet => _bn_secVoltageSet ??=
      GeneratedColumn<double>('bn_sec_voltage_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_appliedSecVoltageMeta =
      const VerificationMeta('bn_appliedSecVoltage');
  GeneratedColumn<double> _bn_appliedSecVoltage;
  @override
  GeneratedColumn<double> get bn_appliedSecVoltage => _bn_appliedSecVoltage ??=
      GeneratedColumn<double>('bn_applied_sec_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_relayOprTimeMeta =
      const VerificationMeta('bn_relayOprTime');
  GeneratedColumn<double> _bn_relayOprTime;
  @override
  GeneratedColumn<double> get bn_relayOprTime => _bn_relayOprTime ??=
      GeneratedColumn<double>('bn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _stageNoMeta = const VerificationMeta('stageNo');
  GeneratedColumn<int> _stageNo;
  @override
  GeneratedColumn<int> get stageNo =>
      _stageNo ??= GeneratedColumn<int>('stage_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _functionMeta = const VerificationMeta('function');
  GeneratedColumn<String> _function;
  @override
  GeneratedColumn<String> get function => _function ??= GeneratedColumn<String>(
      'function', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        voltageSet,
        delay,
        rn_secVoltageSet,
        rn_appliedSecVoltage,
        rn_relayOprTime,
        yn_secVoltageSet,
        yn_appliedSecVoltage,
        yn_relayOprTime,
        bn_secVoltageSet,
        bn_appliedSecVoltage,
        bn_relayOprTime,
        stageNo,
        function,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'f_p_rovervoltage_local_datasource_impl';
  @override
  String get actualTableName => 'f_p_rovervoltage_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<FPRovervoltageLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('voltage_set')) {
      context.handle(
          _voltageSetMeta,
          voltageSet.isAcceptableOrUnknown(
              data['voltage_set'], _voltageSetMeta));
    } else if (isInserting) {
      context.missing(_voltageSetMeta);
    }
    if (data.containsKey('delay')) {
      context.handle(
          _delayMeta, delay.isAcceptableOrUnknown(data['delay'], _delayMeta));
    } else if (isInserting) {
      context.missing(_delayMeta);
    }
    if (data.containsKey('rn_sec_voltage_set')) {
      context.handle(
          _rn_secVoltageSetMeta,
          rn_secVoltageSet.isAcceptableOrUnknown(
              data['rn_sec_voltage_set'], _rn_secVoltageSetMeta));
    } else if (isInserting) {
      context.missing(_rn_secVoltageSetMeta);
    }
    if (data.containsKey('rn_applied_sec_voltage')) {
      context.handle(
          _rn_appliedSecVoltageMeta,
          rn_appliedSecVoltage.isAcceptableOrUnknown(
              data['rn_applied_sec_voltage'], _rn_appliedSecVoltageMeta));
    } else if (isInserting) {
      context.missing(_rn_appliedSecVoltageMeta);
    }
    if (data.containsKey('rn_relay_opr_time')) {
      context.handle(
          _rn_relayOprTimeMeta,
          rn_relayOprTime.isAcceptableOrUnknown(
              data['rn_relay_opr_time'], _rn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_rn_relayOprTimeMeta);
    }
    if (data.containsKey('yn_sec_voltage_set')) {
      context.handle(
          _yn_secVoltageSetMeta,
          yn_secVoltageSet.isAcceptableOrUnknown(
              data['yn_sec_voltage_set'], _yn_secVoltageSetMeta));
    } else if (isInserting) {
      context.missing(_yn_secVoltageSetMeta);
    }
    if (data.containsKey('yn_applied_sec_voltage')) {
      context.handle(
          _yn_appliedSecVoltageMeta,
          yn_appliedSecVoltage.isAcceptableOrUnknown(
              data['yn_applied_sec_voltage'], _yn_appliedSecVoltageMeta));
    } else if (isInserting) {
      context.missing(_yn_appliedSecVoltageMeta);
    }
    if (data.containsKey('yn_relay_opr_time')) {
      context.handle(
          _yn_relayOprTimeMeta,
          yn_relayOprTime.isAcceptableOrUnknown(
              data['yn_relay_opr_time'], _yn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_yn_relayOprTimeMeta);
    }
    if (data.containsKey('bn_sec_voltage_set')) {
      context.handle(
          _bn_secVoltageSetMeta,
          bn_secVoltageSet.isAcceptableOrUnknown(
              data['bn_sec_voltage_set'], _bn_secVoltageSetMeta));
    } else if (isInserting) {
      context.missing(_bn_secVoltageSetMeta);
    }
    if (data.containsKey('bn_applied_sec_voltage')) {
      context.handle(
          _bn_appliedSecVoltageMeta,
          bn_appliedSecVoltage.isAcceptableOrUnknown(
              data['bn_applied_sec_voltage'], _bn_appliedSecVoltageMeta));
    } else if (isInserting) {
      context.missing(_bn_appliedSecVoltageMeta);
    }
    if (data.containsKey('bn_relay_opr_time')) {
      context.handle(
          _bn_relayOprTimeMeta,
          bn_relayOprTime.isAcceptableOrUnknown(
              data['bn_relay_opr_time'], _bn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_bn_relayOprTimeMeta);
    }
    if (data.containsKey('stage_no')) {
      context.handle(_stageNoMeta,
          stageNo.isAcceptableOrUnknown(data['stage_no'], _stageNoMeta));
    } else if (isInserting) {
      context.missing(_stageNoMeta);
    }
    if (data.containsKey('function')) {
      context.handle(_functionMeta,
          function.isAcceptableOrUnknown(data['function'], _functionMeta));
    } else if (isInserting) {
      context.missing(_functionMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FPRovervoltageLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return FPRovervoltageLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FPRovervoltageLocalDatasourceImplTable createAlias(String alias) {
    return $FPRovervoltageLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class FPRundervoltageLocalData extends DataClass
    implements Insertable<FPRundervoltageLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double voltageSet;
  final double delay;
  final double rn_secVoltageSet;
  final double rn_appliedSecVoltage;
  final double rn_relayOprTime;
  final double yn_secVoltageSet;
  final double yn_appliedSecVoltage;
  final double yn_relayOprTime;
  final double bn_secVoltageSet;
  final double bn_appliedSecVoltage;
  final double bn_relayOprTime;
  final int stageNo;
  final String function;
  final String equipmentUsed;
  final DateTime updateDate;
  FPRundervoltageLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.voltageSet,
      @required this.delay,
      @required this.rn_secVoltageSet,
      @required this.rn_appliedSecVoltage,
      @required this.rn_relayOprTime,
      @required this.yn_secVoltageSet,
      @required this.yn_appliedSecVoltage,
      @required this.yn_relayOprTime,
      @required this.bn_secVoltageSet,
      @required this.bn_appliedSecVoltage,
      @required this.bn_relayOprTime,
      @required this.stageNo,
      @required this.function,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory FPRundervoltageLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return FPRundervoltageLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      voltageSet: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}voltage_set']),
      delay: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}delay']),
      rn_secVoltageSet: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}rn_sec_voltage_set']),
      rn_appliedSecVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}rn_applied_sec_voltage']),
      rn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rn_relay_opr_time']),
      yn_secVoltageSet: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}yn_sec_voltage_set']),
      yn_appliedSecVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}yn_applied_sec_voltage']),
      yn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yn_relay_opr_time']),
      bn_secVoltageSet: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}bn_sec_voltage_set']),
      bn_appliedSecVoltage: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}bn_applied_sec_voltage']),
      bn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bn_relay_opr_time']),
      stageNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}stage_no']),
      function: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}function']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || voltageSet != null) {
      map['voltage_set'] = Variable<double>(voltageSet);
    }
    if (!nullToAbsent || delay != null) {
      map['delay'] = Variable<double>(delay);
    }
    if (!nullToAbsent || rn_secVoltageSet != null) {
      map['rn_sec_voltage_set'] = Variable<double>(rn_secVoltageSet);
    }
    if (!nullToAbsent || rn_appliedSecVoltage != null) {
      map['rn_applied_sec_voltage'] = Variable<double>(rn_appliedSecVoltage);
    }
    if (!nullToAbsent || rn_relayOprTime != null) {
      map['rn_relay_opr_time'] = Variable<double>(rn_relayOprTime);
    }
    if (!nullToAbsent || yn_secVoltageSet != null) {
      map['yn_sec_voltage_set'] = Variable<double>(yn_secVoltageSet);
    }
    if (!nullToAbsent || yn_appliedSecVoltage != null) {
      map['yn_applied_sec_voltage'] = Variable<double>(yn_appliedSecVoltage);
    }
    if (!nullToAbsent || yn_relayOprTime != null) {
      map['yn_relay_opr_time'] = Variable<double>(yn_relayOprTime);
    }
    if (!nullToAbsent || bn_secVoltageSet != null) {
      map['bn_sec_voltage_set'] = Variable<double>(bn_secVoltageSet);
    }
    if (!nullToAbsent || bn_appliedSecVoltage != null) {
      map['bn_applied_sec_voltage'] = Variable<double>(bn_appliedSecVoltage);
    }
    if (!nullToAbsent || bn_relayOprTime != null) {
      map['bn_relay_opr_time'] = Variable<double>(bn_relayOprTime);
    }
    if (!nullToAbsent || stageNo != null) {
      map['stage_no'] = Variable<int>(stageNo);
    }
    if (!nullToAbsent || function != null) {
      map['function'] = Variable<String>(function);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  FPRundervoltageLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return FPRundervoltageLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      voltageSet: voltageSet == null && nullToAbsent
          ? const Value.absent()
          : Value(voltageSet),
      delay:
          delay == null && nullToAbsent ? const Value.absent() : Value(delay),
      rn_secVoltageSet: rn_secVoltageSet == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_secVoltageSet),
      rn_appliedSecVoltage: rn_appliedSecVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_appliedSecVoltage),
      rn_relayOprTime: rn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_relayOprTime),
      yn_secVoltageSet: yn_secVoltageSet == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_secVoltageSet),
      yn_appliedSecVoltage: yn_appliedSecVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_appliedSecVoltage),
      yn_relayOprTime: yn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_relayOprTime),
      bn_secVoltageSet: bn_secVoltageSet == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_secVoltageSet),
      bn_appliedSecVoltage: bn_appliedSecVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_appliedSecVoltage),
      bn_relayOprTime: bn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_relayOprTime),
      stageNo: stageNo == null && nullToAbsent
          ? const Value.absent()
          : Value(stageNo),
      function: function == null && nullToAbsent
          ? const Value.absent()
          : Value(function),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory FPRundervoltageLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FPRundervoltageLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      voltageSet: serializer.fromJson<double>(json['voltageSet']),
      delay: serializer.fromJson<double>(json['delay']),
      rn_secVoltageSet: serializer.fromJson<double>(json['rn_secVoltageSet']),
      rn_appliedSecVoltage:
          serializer.fromJson<double>(json['rn_appliedSecVoltage']),
      rn_relayOprTime: serializer.fromJson<double>(json['rn_relayOprTime']),
      yn_secVoltageSet: serializer.fromJson<double>(json['yn_secVoltageSet']),
      yn_appliedSecVoltage:
          serializer.fromJson<double>(json['yn_appliedSecVoltage']),
      yn_relayOprTime: serializer.fromJson<double>(json['yn_relayOprTime']),
      bn_secVoltageSet: serializer.fromJson<double>(json['bn_secVoltageSet']),
      bn_appliedSecVoltage:
          serializer.fromJson<double>(json['bn_appliedSecVoltage']),
      bn_relayOprTime: serializer.fromJson<double>(json['bn_relayOprTime']),
      stageNo: serializer.fromJson<int>(json['stageNo']),
      function: serializer.fromJson<String>(json['function']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'voltageSet': serializer.toJson<double>(voltageSet),
      'delay': serializer.toJson<double>(delay),
      'rn_secVoltageSet': serializer.toJson<double>(rn_secVoltageSet),
      'rn_appliedSecVoltage': serializer.toJson<double>(rn_appliedSecVoltage),
      'rn_relayOprTime': serializer.toJson<double>(rn_relayOprTime),
      'yn_secVoltageSet': serializer.toJson<double>(yn_secVoltageSet),
      'yn_appliedSecVoltage': serializer.toJson<double>(yn_appliedSecVoltage),
      'yn_relayOprTime': serializer.toJson<double>(yn_relayOprTime),
      'bn_secVoltageSet': serializer.toJson<double>(bn_secVoltageSet),
      'bn_appliedSecVoltage': serializer.toJson<double>(bn_appliedSecVoltage),
      'bn_relayOprTime': serializer.toJson<double>(bn_relayOprTime),
      'stageNo': serializer.toJson<int>(stageNo),
      'function': serializer.toJson<String>(function),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  FPRundervoltageLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double voltageSet,
          double delay,
          double rn_secVoltageSet,
          double rn_appliedSecVoltage,
          double rn_relayOprTime,
          double yn_secVoltageSet,
          double yn_appliedSecVoltage,
          double yn_relayOprTime,
          double bn_secVoltageSet,
          double bn_appliedSecVoltage,
          double bn_relayOprTime,
          int stageNo,
          String function,
          String equipmentUsed,
          DateTime updateDate}) =>
      FPRundervoltageLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        voltageSet: voltageSet ?? this.voltageSet,
        delay: delay ?? this.delay,
        rn_secVoltageSet: rn_secVoltageSet ?? this.rn_secVoltageSet,
        rn_appliedSecVoltage: rn_appliedSecVoltage ?? this.rn_appliedSecVoltage,
        rn_relayOprTime: rn_relayOprTime ?? this.rn_relayOprTime,
        yn_secVoltageSet: yn_secVoltageSet ?? this.yn_secVoltageSet,
        yn_appliedSecVoltage: yn_appliedSecVoltage ?? this.yn_appliedSecVoltage,
        yn_relayOprTime: yn_relayOprTime ?? this.yn_relayOprTime,
        bn_secVoltageSet: bn_secVoltageSet ?? this.bn_secVoltageSet,
        bn_appliedSecVoltage: bn_appliedSecVoltage ?? this.bn_appliedSecVoltage,
        bn_relayOprTime: bn_relayOprTime ?? this.bn_relayOprTime,
        stageNo: stageNo ?? this.stageNo,
        function: function ?? this.function,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('FPRundervoltageLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('voltageSet: $voltageSet, ')
          ..write('delay: $delay, ')
          ..write('rn_secVoltageSet: $rn_secVoltageSet, ')
          ..write('rn_appliedSecVoltage: $rn_appliedSecVoltage, ')
          ..write('rn_relayOprTime: $rn_relayOprTime, ')
          ..write('yn_secVoltageSet: $yn_secVoltageSet, ')
          ..write('yn_appliedSecVoltage: $yn_appliedSecVoltage, ')
          ..write('yn_relayOprTime: $yn_relayOprTime, ')
          ..write('bn_secVoltageSet: $bn_secVoltageSet, ')
          ..write('bn_appliedSecVoltage: $bn_appliedSecVoltage, ')
          ..write('bn_relayOprTime: $bn_relayOprTime, ')
          ..write('stageNo: $stageNo, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      voltageSet,
      delay,
      rn_secVoltageSet,
      rn_appliedSecVoltage,
      rn_relayOprTime,
      yn_secVoltageSet,
      yn_appliedSecVoltage,
      yn_relayOprTime,
      bn_secVoltageSet,
      bn_appliedSecVoltage,
      bn_relayOprTime,
      stageNo,
      function,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FPRundervoltageLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.voltageSet == this.voltageSet &&
          other.delay == this.delay &&
          other.rn_secVoltageSet == this.rn_secVoltageSet &&
          other.rn_appliedSecVoltage == this.rn_appliedSecVoltage &&
          other.rn_relayOprTime == this.rn_relayOprTime &&
          other.yn_secVoltageSet == this.yn_secVoltageSet &&
          other.yn_appliedSecVoltage == this.yn_appliedSecVoltage &&
          other.yn_relayOprTime == this.yn_relayOprTime &&
          other.bn_secVoltageSet == this.bn_secVoltageSet &&
          other.bn_appliedSecVoltage == this.bn_appliedSecVoltage &&
          other.bn_relayOprTime == this.bn_relayOprTime &&
          other.stageNo == this.stageNo &&
          other.function == this.function &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class FPRundervoltageLocalDatasourceImplCompanion
    extends UpdateCompanion<FPRundervoltageLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> voltageSet;
  final Value<double> delay;
  final Value<double> rn_secVoltageSet;
  final Value<double> rn_appliedSecVoltage;
  final Value<double> rn_relayOprTime;
  final Value<double> yn_secVoltageSet;
  final Value<double> yn_appliedSecVoltage;
  final Value<double> yn_relayOprTime;
  final Value<double> bn_secVoltageSet;
  final Value<double> bn_appliedSecVoltage;
  final Value<double> bn_relayOprTime;
  final Value<int> stageNo;
  final Value<String> function;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const FPRundervoltageLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.voltageSet = const Value.absent(),
    this.delay = const Value.absent(),
    this.rn_secVoltageSet = const Value.absent(),
    this.rn_appliedSecVoltage = const Value.absent(),
    this.rn_relayOprTime = const Value.absent(),
    this.yn_secVoltageSet = const Value.absent(),
    this.yn_appliedSecVoltage = const Value.absent(),
    this.yn_relayOprTime = const Value.absent(),
    this.bn_secVoltageSet = const Value.absent(),
    this.bn_appliedSecVoltage = const Value.absent(),
    this.bn_relayOprTime = const Value.absent(),
    this.stageNo = const Value.absent(),
    this.function = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  FPRundervoltageLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double voltageSet,
    @required double delay,
    @required double rn_secVoltageSet,
    @required double rn_appliedSecVoltage,
    @required double rn_relayOprTime,
    @required double yn_secVoltageSet,
    @required double yn_appliedSecVoltage,
    @required double yn_relayOprTime,
    @required double bn_secVoltageSet,
    @required double bn_appliedSecVoltage,
    @required double bn_relayOprTime,
    @required int stageNo,
    @required String function,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        voltageSet = Value(voltageSet),
        delay = Value(delay),
        rn_secVoltageSet = Value(rn_secVoltageSet),
        rn_appliedSecVoltage = Value(rn_appliedSecVoltage),
        rn_relayOprTime = Value(rn_relayOprTime),
        yn_secVoltageSet = Value(yn_secVoltageSet),
        yn_appliedSecVoltage = Value(yn_appliedSecVoltage),
        yn_relayOprTime = Value(yn_relayOprTime),
        bn_secVoltageSet = Value(bn_secVoltageSet),
        bn_appliedSecVoltage = Value(bn_appliedSecVoltage),
        bn_relayOprTime = Value(bn_relayOprTime),
        stageNo = Value(stageNo),
        function = Value(function),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<FPRundervoltageLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> voltageSet,
    Expression<double> delay,
    Expression<double> rn_secVoltageSet,
    Expression<double> rn_appliedSecVoltage,
    Expression<double> rn_relayOprTime,
    Expression<double> yn_secVoltageSet,
    Expression<double> yn_appliedSecVoltage,
    Expression<double> yn_relayOprTime,
    Expression<double> bn_secVoltageSet,
    Expression<double> bn_appliedSecVoltage,
    Expression<double> bn_relayOprTime,
    Expression<int> stageNo,
    Expression<String> function,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (voltageSet != null) 'voltage_set': voltageSet,
      if (delay != null) 'delay': delay,
      if (rn_secVoltageSet != null) 'rn_sec_voltage_set': rn_secVoltageSet,
      if (rn_appliedSecVoltage != null)
        'rn_applied_sec_voltage': rn_appliedSecVoltage,
      if (rn_relayOprTime != null) 'rn_relay_opr_time': rn_relayOprTime,
      if (yn_secVoltageSet != null) 'yn_sec_voltage_set': yn_secVoltageSet,
      if (yn_appliedSecVoltage != null)
        'yn_applied_sec_voltage': yn_appliedSecVoltage,
      if (yn_relayOprTime != null) 'yn_relay_opr_time': yn_relayOprTime,
      if (bn_secVoltageSet != null) 'bn_sec_voltage_set': bn_secVoltageSet,
      if (bn_appliedSecVoltage != null)
        'bn_applied_sec_voltage': bn_appliedSecVoltage,
      if (bn_relayOprTime != null) 'bn_relay_opr_time': bn_relayOprTime,
      if (stageNo != null) 'stage_no': stageNo,
      if (function != null) 'function': function,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  FPRundervoltageLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> voltageSet,
      Value<double> delay,
      Value<double> rn_secVoltageSet,
      Value<double> rn_appliedSecVoltage,
      Value<double> rn_relayOprTime,
      Value<double> yn_secVoltageSet,
      Value<double> yn_appliedSecVoltage,
      Value<double> yn_relayOprTime,
      Value<double> bn_secVoltageSet,
      Value<double> bn_appliedSecVoltage,
      Value<double> bn_relayOprTime,
      Value<int> stageNo,
      Value<String> function,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return FPRundervoltageLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      voltageSet: voltageSet ?? this.voltageSet,
      delay: delay ?? this.delay,
      rn_secVoltageSet: rn_secVoltageSet ?? this.rn_secVoltageSet,
      rn_appliedSecVoltage: rn_appliedSecVoltage ?? this.rn_appliedSecVoltage,
      rn_relayOprTime: rn_relayOprTime ?? this.rn_relayOprTime,
      yn_secVoltageSet: yn_secVoltageSet ?? this.yn_secVoltageSet,
      yn_appliedSecVoltage: yn_appliedSecVoltage ?? this.yn_appliedSecVoltage,
      yn_relayOprTime: yn_relayOprTime ?? this.yn_relayOprTime,
      bn_secVoltageSet: bn_secVoltageSet ?? this.bn_secVoltageSet,
      bn_appliedSecVoltage: bn_appliedSecVoltage ?? this.bn_appliedSecVoltage,
      bn_relayOprTime: bn_relayOprTime ?? this.bn_relayOprTime,
      stageNo: stageNo ?? this.stageNo,
      function: function ?? this.function,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (voltageSet.present) {
      map['voltage_set'] = Variable<double>(voltageSet.value);
    }
    if (delay.present) {
      map['delay'] = Variable<double>(delay.value);
    }
    if (rn_secVoltageSet.present) {
      map['rn_sec_voltage_set'] = Variable<double>(rn_secVoltageSet.value);
    }
    if (rn_appliedSecVoltage.present) {
      map['rn_applied_sec_voltage'] =
          Variable<double>(rn_appliedSecVoltage.value);
    }
    if (rn_relayOprTime.present) {
      map['rn_relay_opr_time'] = Variable<double>(rn_relayOprTime.value);
    }
    if (yn_secVoltageSet.present) {
      map['yn_sec_voltage_set'] = Variable<double>(yn_secVoltageSet.value);
    }
    if (yn_appliedSecVoltage.present) {
      map['yn_applied_sec_voltage'] =
          Variable<double>(yn_appliedSecVoltage.value);
    }
    if (yn_relayOprTime.present) {
      map['yn_relay_opr_time'] = Variable<double>(yn_relayOprTime.value);
    }
    if (bn_secVoltageSet.present) {
      map['bn_sec_voltage_set'] = Variable<double>(bn_secVoltageSet.value);
    }
    if (bn_appliedSecVoltage.present) {
      map['bn_applied_sec_voltage'] =
          Variable<double>(bn_appliedSecVoltage.value);
    }
    if (bn_relayOprTime.present) {
      map['bn_relay_opr_time'] = Variable<double>(bn_relayOprTime.value);
    }
    if (stageNo.present) {
      map['stage_no'] = Variable<int>(stageNo.value);
    }
    if (function.present) {
      map['function'] = Variable<String>(function.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FPRundervoltageLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('voltageSet: $voltageSet, ')
          ..write('delay: $delay, ')
          ..write('rn_secVoltageSet: $rn_secVoltageSet, ')
          ..write('rn_appliedSecVoltage: $rn_appliedSecVoltage, ')
          ..write('rn_relayOprTime: $rn_relayOprTime, ')
          ..write('yn_secVoltageSet: $yn_secVoltageSet, ')
          ..write('yn_appliedSecVoltage: $yn_appliedSecVoltage, ')
          ..write('yn_relayOprTime: $yn_relayOprTime, ')
          ..write('bn_secVoltageSet: $bn_secVoltageSet, ')
          ..write('bn_appliedSecVoltage: $bn_appliedSecVoltage, ')
          ..write('bn_relayOprTime: $bn_relayOprTime, ')
          ..write('stageNo: $stageNo, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $FPRundervoltageLocalDatasourceImplTable
    extends FPRundervoltageLocalDatasourceImpl
    with
        TableInfo<$FPRundervoltageLocalDatasourceImplTable,
            FPRundervoltageLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $FPRundervoltageLocalDatasourceImplTable(this.attachedDatabase,
      [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _voltageSetMeta = const VerificationMeta('voltageSet');
  GeneratedColumn<double> _voltageSet;
  @override
  GeneratedColumn<double> get voltageSet =>
      _voltageSet ??= GeneratedColumn<double>('voltage_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _delayMeta = const VerificationMeta('delay');
  GeneratedColumn<double> _delay;
  @override
  GeneratedColumn<double> get delay =>
      _delay ??= GeneratedColumn<double>('delay', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_secVoltageSetMeta =
      const VerificationMeta('rn_secVoltageSet');
  GeneratedColumn<double> _rn_secVoltageSet;
  @override
  GeneratedColumn<double> get rn_secVoltageSet => _rn_secVoltageSet ??=
      GeneratedColumn<double>('rn_sec_voltage_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_appliedSecVoltageMeta =
      const VerificationMeta('rn_appliedSecVoltage');
  GeneratedColumn<double> _rn_appliedSecVoltage;
  @override
  GeneratedColumn<double> get rn_appliedSecVoltage => _rn_appliedSecVoltage ??=
      GeneratedColumn<double>('rn_applied_sec_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_relayOprTimeMeta =
      const VerificationMeta('rn_relayOprTime');
  GeneratedColumn<double> _rn_relayOprTime;
  @override
  GeneratedColumn<double> get rn_relayOprTime => _rn_relayOprTime ??=
      GeneratedColumn<double>('rn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_secVoltageSetMeta =
      const VerificationMeta('yn_secVoltageSet');
  GeneratedColumn<double> _yn_secVoltageSet;
  @override
  GeneratedColumn<double> get yn_secVoltageSet => _yn_secVoltageSet ??=
      GeneratedColumn<double>('yn_sec_voltage_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_appliedSecVoltageMeta =
      const VerificationMeta('yn_appliedSecVoltage');
  GeneratedColumn<double> _yn_appliedSecVoltage;
  @override
  GeneratedColumn<double> get yn_appliedSecVoltage => _yn_appliedSecVoltage ??=
      GeneratedColumn<double>('yn_applied_sec_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_relayOprTimeMeta =
      const VerificationMeta('yn_relayOprTime');
  GeneratedColumn<double> _yn_relayOprTime;
  @override
  GeneratedColumn<double> get yn_relayOprTime => _yn_relayOprTime ??=
      GeneratedColumn<double>('yn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_secVoltageSetMeta =
      const VerificationMeta('bn_secVoltageSet');
  GeneratedColumn<double> _bn_secVoltageSet;
  @override
  GeneratedColumn<double> get bn_secVoltageSet => _bn_secVoltageSet ??=
      GeneratedColumn<double>('bn_sec_voltage_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_appliedSecVoltageMeta =
      const VerificationMeta('bn_appliedSecVoltage');
  GeneratedColumn<double> _bn_appliedSecVoltage;
  @override
  GeneratedColumn<double> get bn_appliedSecVoltage => _bn_appliedSecVoltage ??=
      GeneratedColumn<double>('bn_applied_sec_voltage', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_relayOprTimeMeta =
      const VerificationMeta('bn_relayOprTime');
  GeneratedColumn<double> _bn_relayOprTime;
  @override
  GeneratedColumn<double> get bn_relayOprTime => _bn_relayOprTime ??=
      GeneratedColumn<double>('bn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _stageNoMeta = const VerificationMeta('stageNo');
  GeneratedColumn<int> _stageNo;
  @override
  GeneratedColumn<int> get stageNo =>
      _stageNo ??= GeneratedColumn<int>('stage_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _functionMeta = const VerificationMeta('function');
  GeneratedColumn<String> _function;
  @override
  GeneratedColumn<String> get function => _function ??= GeneratedColumn<String>(
      'function', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        voltageSet,
        delay,
        rn_secVoltageSet,
        rn_appliedSecVoltage,
        rn_relayOprTime,
        yn_secVoltageSet,
        yn_appliedSecVoltage,
        yn_relayOprTime,
        bn_secVoltageSet,
        bn_appliedSecVoltage,
        bn_relayOprTime,
        stageNo,
        function,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'f_p_rundervoltage_local_datasource_impl';
  @override
  String get actualTableName => 'f_p_rundervoltage_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<FPRundervoltageLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('voltage_set')) {
      context.handle(
          _voltageSetMeta,
          voltageSet.isAcceptableOrUnknown(
              data['voltage_set'], _voltageSetMeta));
    } else if (isInserting) {
      context.missing(_voltageSetMeta);
    }
    if (data.containsKey('delay')) {
      context.handle(
          _delayMeta, delay.isAcceptableOrUnknown(data['delay'], _delayMeta));
    } else if (isInserting) {
      context.missing(_delayMeta);
    }
    if (data.containsKey('rn_sec_voltage_set')) {
      context.handle(
          _rn_secVoltageSetMeta,
          rn_secVoltageSet.isAcceptableOrUnknown(
              data['rn_sec_voltage_set'], _rn_secVoltageSetMeta));
    } else if (isInserting) {
      context.missing(_rn_secVoltageSetMeta);
    }
    if (data.containsKey('rn_applied_sec_voltage')) {
      context.handle(
          _rn_appliedSecVoltageMeta,
          rn_appliedSecVoltage.isAcceptableOrUnknown(
              data['rn_applied_sec_voltage'], _rn_appliedSecVoltageMeta));
    } else if (isInserting) {
      context.missing(_rn_appliedSecVoltageMeta);
    }
    if (data.containsKey('rn_relay_opr_time')) {
      context.handle(
          _rn_relayOprTimeMeta,
          rn_relayOprTime.isAcceptableOrUnknown(
              data['rn_relay_opr_time'], _rn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_rn_relayOprTimeMeta);
    }
    if (data.containsKey('yn_sec_voltage_set')) {
      context.handle(
          _yn_secVoltageSetMeta,
          yn_secVoltageSet.isAcceptableOrUnknown(
              data['yn_sec_voltage_set'], _yn_secVoltageSetMeta));
    } else if (isInserting) {
      context.missing(_yn_secVoltageSetMeta);
    }
    if (data.containsKey('yn_applied_sec_voltage')) {
      context.handle(
          _yn_appliedSecVoltageMeta,
          yn_appliedSecVoltage.isAcceptableOrUnknown(
              data['yn_applied_sec_voltage'], _yn_appliedSecVoltageMeta));
    } else if (isInserting) {
      context.missing(_yn_appliedSecVoltageMeta);
    }
    if (data.containsKey('yn_relay_opr_time')) {
      context.handle(
          _yn_relayOprTimeMeta,
          yn_relayOprTime.isAcceptableOrUnknown(
              data['yn_relay_opr_time'], _yn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_yn_relayOprTimeMeta);
    }
    if (data.containsKey('bn_sec_voltage_set')) {
      context.handle(
          _bn_secVoltageSetMeta,
          bn_secVoltageSet.isAcceptableOrUnknown(
              data['bn_sec_voltage_set'], _bn_secVoltageSetMeta));
    } else if (isInserting) {
      context.missing(_bn_secVoltageSetMeta);
    }
    if (data.containsKey('bn_applied_sec_voltage')) {
      context.handle(
          _bn_appliedSecVoltageMeta,
          bn_appliedSecVoltage.isAcceptableOrUnknown(
              data['bn_applied_sec_voltage'], _bn_appliedSecVoltageMeta));
    } else if (isInserting) {
      context.missing(_bn_appliedSecVoltageMeta);
    }
    if (data.containsKey('bn_relay_opr_time')) {
      context.handle(
          _bn_relayOprTimeMeta,
          bn_relayOprTime.isAcceptableOrUnknown(
              data['bn_relay_opr_time'], _bn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_bn_relayOprTimeMeta);
    }
    if (data.containsKey('stage_no')) {
      context.handle(_stageNoMeta,
          stageNo.isAcceptableOrUnknown(data['stage_no'], _stageNoMeta));
    } else if (isInserting) {
      context.missing(_stageNoMeta);
    }
    if (data.containsKey('function')) {
      context.handle(_functionMeta,
          function.isAcceptableOrUnknown(data['function'], _functionMeta));
    } else if (isInserting) {
      context.missing(_functionMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FPRundervoltageLocalData map(Map<String, dynamic> data,
      {String tablePrefix}) {
    return FPRundervoltageLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FPRundervoltageLocalDatasourceImplTable createAlias(String alias) {
    return $FPRundervoltageLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class FPRoverfreqLocalData extends DataClass
    implements Insertable<FPRoverfreqLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double frequencySet;
  final double delay;
  final double rn_relayOprTime;
  final double yn_relayOprTime;
  final double bn_relayOprTime;
  final int stageNo;
  final String function;
  final String equipmentUsed;
  final DateTime updateDate;
  FPRoverfreqLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.frequencySet,
      @required this.delay,
      @required this.rn_relayOprTime,
      @required this.yn_relayOprTime,
      @required this.bn_relayOprTime,
      @required this.stageNo,
      @required this.function,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory FPRoverfreqLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return FPRoverfreqLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      frequencySet: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency_set']),
      delay: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}delay']),
      rn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rn_relay_opr_time']),
      yn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yn_relay_opr_time']),
      bn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bn_relay_opr_time']),
      stageNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}stage_no']),
      function: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}function']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || frequencySet != null) {
      map['frequency_set'] = Variable<double>(frequencySet);
    }
    if (!nullToAbsent || delay != null) {
      map['delay'] = Variable<double>(delay);
    }
    if (!nullToAbsent || rn_relayOprTime != null) {
      map['rn_relay_opr_time'] = Variable<double>(rn_relayOprTime);
    }
    if (!nullToAbsent || yn_relayOprTime != null) {
      map['yn_relay_opr_time'] = Variable<double>(yn_relayOprTime);
    }
    if (!nullToAbsent || bn_relayOprTime != null) {
      map['bn_relay_opr_time'] = Variable<double>(bn_relayOprTime);
    }
    if (!nullToAbsent || stageNo != null) {
      map['stage_no'] = Variable<int>(stageNo);
    }
    if (!nullToAbsent || function != null) {
      map['function'] = Variable<String>(function);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  FPRoverfreqLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return FPRoverfreqLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      frequencySet: frequencySet == null && nullToAbsent
          ? const Value.absent()
          : Value(frequencySet),
      delay:
          delay == null && nullToAbsent ? const Value.absent() : Value(delay),
      rn_relayOprTime: rn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_relayOprTime),
      yn_relayOprTime: yn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_relayOprTime),
      bn_relayOprTime: bn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_relayOprTime),
      stageNo: stageNo == null && nullToAbsent
          ? const Value.absent()
          : Value(stageNo),
      function: function == null && nullToAbsent
          ? const Value.absent()
          : Value(function),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory FPRoverfreqLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FPRoverfreqLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      frequencySet: serializer.fromJson<double>(json['frequencySet']),
      delay: serializer.fromJson<double>(json['delay']),
      rn_relayOprTime: serializer.fromJson<double>(json['rn_relayOprTime']),
      yn_relayOprTime: serializer.fromJson<double>(json['yn_relayOprTime']),
      bn_relayOprTime: serializer.fromJson<double>(json['bn_relayOprTime']),
      stageNo: serializer.fromJson<int>(json['stageNo']),
      function: serializer.fromJson<String>(json['function']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'frequencySet': serializer.toJson<double>(frequencySet),
      'delay': serializer.toJson<double>(delay),
      'rn_relayOprTime': serializer.toJson<double>(rn_relayOprTime),
      'yn_relayOprTime': serializer.toJson<double>(yn_relayOprTime),
      'bn_relayOprTime': serializer.toJson<double>(bn_relayOprTime),
      'stageNo': serializer.toJson<int>(stageNo),
      'function': serializer.toJson<String>(function),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  FPRoverfreqLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double frequencySet,
          double delay,
          double rn_relayOprTime,
          double yn_relayOprTime,
          double bn_relayOprTime,
          int stageNo,
          String function,
          String equipmentUsed,
          DateTime updateDate}) =>
      FPRoverfreqLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        frequencySet: frequencySet ?? this.frequencySet,
        delay: delay ?? this.delay,
        rn_relayOprTime: rn_relayOprTime ?? this.rn_relayOprTime,
        yn_relayOprTime: yn_relayOprTime ?? this.yn_relayOprTime,
        bn_relayOprTime: bn_relayOprTime ?? this.bn_relayOprTime,
        stageNo: stageNo ?? this.stageNo,
        function: function ?? this.function,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('FPRoverfreqLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('frequencySet: $frequencySet, ')
          ..write('delay: $delay, ')
          ..write('rn_relayOprTime: $rn_relayOprTime, ')
          ..write('yn_relayOprTime: $yn_relayOprTime, ')
          ..write('bn_relayOprTime: $bn_relayOprTime, ')
          ..write('stageNo: $stageNo, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      frequencySet,
      delay,
      rn_relayOprTime,
      yn_relayOprTime,
      bn_relayOprTime,
      stageNo,
      function,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FPRoverfreqLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.frequencySet == this.frequencySet &&
          other.delay == this.delay &&
          other.rn_relayOprTime == this.rn_relayOprTime &&
          other.yn_relayOprTime == this.yn_relayOprTime &&
          other.bn_relayOprTime == this.bn_relayOprTime &&
          other.stageNo == this.stageNo &&
          other.function == this.function &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class FPRoverfreqLocalDatasourceImplCompanion
    extends UpdateCompanion<FPRoverfreqLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> frequencySet;
  final Value<double> delay;
  final Value<double> rn_relayOprTime;
  final Value<double> yn_relayOprTime;
  final Value<double> bn_relayOprTime;
  final Value<int> stageNo;
  final Value<String> function;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const FPRoverfreqLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.frequencySet = const Value.absent(),
    this.delay = const Value.absent(),
    this.rn_relayOprTime = const Value.absent(),
    this.yn_relayOprTime = const Value.absent(),
    this.bn_relayOprTime = const Value.absent(),
    this.stageNo = const Value.absent(),
    this.function = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  FPRoverfreqLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double frequencySet,
    @required double delay,
    @required double rn_relayOprTime,
    @required double yn_relayOprTime,
    @required double bn_relayOprTime,
    @required int stageNo,
    @required String function,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        frequencySet = Value(frequencySet),
        delay = Value(delay),
        rn_relayOprTime = Value(rn_relayOprTime),
        yn_relayOprTime = Value(yn_relayOprTime),
        bn_relayOprTime = Value(bn_relayOprTime),
        stageNo = Value(stageNo),
        function = Value(function),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<FPRoverfreqLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> frequencySet,
    Expression<double> delay,
    Expression<double> rn_relayOprTime,
    Expression<double> yn_relayOprTime,
    Expression<double> bn_relayOprTime,
    Expression<int> stageNo,
    Expression<String> function,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (frequencySet != null) 'frequency_set': frequencySet,
      if (delay != null) 'delay': delay,
      if (rn_relayOprTime != null) 'rn_relay_opr_time': rn_relayOprTime,
      if (yn_relayOprTime != null) 'yn_relay_opr_time': yn_relayOprTime,
      if (bn_relayOprTime != null) 'bn_relay_opr_time': bn_relayOprTime,
      if (stageNo != null) 'stage_no': stageNo,
      if (function != null) 'function': function,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  FPRoverfreqLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> frequencySet,
      Value<double> delay,
      Value<double> rn_relayOprTime,
      Value<double> yn_relayOprTime,
      Value<double> bn_relayOprTime,
      Value<int> stageNo,
      Value<String> function,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return FPRoverfreqLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      frequencySet: frequencySet ?? this.frequencySet,
      delay: delay ?? this.delay,
      rn_relayOprTime: rn_relayOprTime ?? this.rn_relayOprTime,
      yn_relayOprTime: yn_relayOprTime ?? this.yn_relayOprTime,
      bn_relayOprTime: bn_relayOprTime ?? this.bn_relayOprTime,
      stageNo: stageNo ?? this.stageNo,
      function: function ?? this.function,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (frequencySet.present) {
      map['frequency_set'] = Variable<double>(frequencySet.value);
    }
    if (delay.present) {
      map['delay'] = Variable<double>(delay.value);
    }
    if (rn_relayOprTime.present) {
      map['rn_relay_opr_time'] = Variable<double>(rn_relayOprTime.value);
    }
    if (yn_relayOprTime.present) {
      map['yn_relay_opr_time'] = Variable<double>(yn_relayOprTime.value);
    }
    if (bn_relayOprTime.present) {
      map['bn_relay_opr_time'] = Variable<double>(bn_relayOprTime.value);
    }
    if (stageNo.present) {
      map['stage_no'] = Variable<int>(stageNo.value);
    }
    if (function.present) {
      map['function'] = Variable<String>(function.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FPRoverfreqLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('frequencySet: $frequencySet, ')
          ..write('delay: $delay, ')
          ..write('rn_relayOprTime: $rn_relayOprTime, ')
          ..write('yn_relayOprTime: $yn_relayOprTime, ')
          ..write('bn_relayOprTime: $bn_relayOprTime, ')
          ..write('stageNo: $stageNo, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $FPRoverfreqLocalDatasourceImplTable
    extends FPRoverfreqLocalDatasourceImpl
    with TableInfo<$FPRoverfreqLocalDatasourceImplTable, FPRoverfreqLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $FPRoverfreqLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _frequencySetMeta =
      const VerificationMeta('frequencySet');
  GeneratedColumn<double> _frequencySet;
  @override
  GeneratedColumn<double> get frequencySet => _frequencySet ??=
      GeneratedColumn<double>('frequency_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _delayMeta = const VerificationMeta('delay');
  GeneratedColumn<double> _delay;
  @override
  GeneratedColumn<double> get delay =>
      _delay ??= GeneratedColumn<double>('delay', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_relayOprTimeMeta =
      const VerificationMeta('rn_relayOprTime');
  GeneratedColumn<double> _rn_relayOprTime;
  @override
  GeneratedColumn<double> get rn_relayOprTime => _rn_relayOprTime ??=
      GeneratedColumn<double>('rn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_relayOprTimeMeta =
      const VerificationMeta('yn_relayOprTime');
  GeneratedColumn<double> _yn_relayOprTime;
  @override
  GeneratedColumn<double> get yn_relayOprTime => _yn_relayOprTime ??=
      GeneratedColumn<double>('yn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_relayOprTimeMeta =
      const VerificationMeta('bn_relayOprTime');
  GeneratedColumn<double> _bn_relayOprTime;
  @override
  GeneratedColumn<double> get bn_relayOprTime => _bn_relayOprTime ??=
      GeneratedColumn<double>('bn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _stageNoMeta = const VerificationMeta('stageNo');
  GeneratedColumn<int> _stageNo;
  @override
  GeneratedColumn<int> get stageNo =>
      _stageNo ??= GeneratedColumn<int>('stage_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _functionMeta = const VerificationMeta('function');
  GeneratedColumn<String> _function;
  @override
  GeneratedColumn<String> get function => _function ??= GeneratedColumn<String>(
      'function', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        frequencySet,
        delay,
        rn_relayOprTime,
        yn_relayOprTime,
        bn_relayOprTime,
        stageNo,
        function,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'f_p_roverfreq_local_datasource_impl';
  @override
  String get actualTableName => 'f_p_roverfreq_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<FPRoverfreqLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('frequency_set')) {
      context.handle(
          _frequencySetMeta,
          frequencySet.isAcceptableOrUnknown(
              data['frequency_set'], _frequencySetMeta));
    } else if (isInserting) {
      context.missing(_frequencySetMeta);
    }
    if (data.containsKey('delay')) {
      context.handle(
          _delayMeta, delay.isAcceptableOrUnknown(data['delay'], _delayMeta));
    } else if (isInserting) {
      context.missing(_delayMeta);
    }
    if (data.containsKey('rn_relay_opr_time')) {
      context.handle(
          _rn_relayOprTimeMeta,
          rn_relayOprTime.isAcceptableOrUnknown(
              data['rn_relay_opr_time'], _rn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_rn_relayOprTimeMeta);
    }
    if (data.containsKey('yn_relay_opr_time')) {
      context.handle(
          _yn_relayOprTimeMeta,
          yn_relayOprTime.isAcceptableOrUnknown(
              data['yn_relay_opr_time'], _yn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_yn_relayOprTimeMeta);
    }
    if (data.containsKey('bn_relay_opr_time')) {
      context.handle(
          _bn_relayOprTimeMeta,
          bn_relayOprTime.isAcceptableOrUnknown(
              data['bn_relay_opr_time'], _bn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_bn_relayOprTimeMeta);
    }
    if (data.containsKey('stage_no')) {
      context.handle(_stageNoMeta,
          stageNo.isAcceptableOrUnknown(data['stage_no'], _stageNoMeta));
    } else if (isInserting) {
      context.missing(_stageNoMeta);
    }
    if (data.containsKey('function')) {
      context.handle(_functionMeta,
          function.isAcceptableOrUnknown(data['function'], _functionMeta));
    } else if (isInserting) {
      context.missing(_functionMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FPRoverfreqLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return FPRoverfreqLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FPRoverfreqLocalDatasourceImplTable createAlias(String alias) {
    return $FPRoverfreqLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class FPRunderfreqLocalData extends DataClass
    implements Insertable<FPRunderfreqLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double frequencySet;
  final double delay;
  final double rn_relayOprTime;
  final double yn_relayOprTime;
  final double bn_relayOprTime;
  final int stageNo;
  final String function;
  final String equipmentUsed;
  final DateTime updateDate;
  FPRunderfreqLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.frequencySet,
      @required this.delay,
      @required this.rn_relayOprTime,
      @required this.yn_relayOprTime,
      @required this.bn_relayOprTime,
      @required this.stageNo,
      @required this.function,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory FPRunderfreqLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return FPRunderfreqLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      frequencySet: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}frequency_set']),
      delay: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}delay']),
      rn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rn_relay_opr_time']),
      yn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yn_relay_opr_time']),
      bn_relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}bn_relay_opr_time']),
      stageNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}stage_no']),
      function: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}function']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || frequencySet != null) {
      map['frequency_set'] = Variable<double>(frequencySet);
    }
    if (!nullToAbsent || delay != null) {
      map['delay'] = Variable<double>(delay);
    }
    if (!nullToAbsent || rn_relayOprTime != null) {
      map['rn_relay_opr_time'] = Variable<double>(rn_relayOprTime);
    }
    if (!nullToAbsent || yn_relayOprTime != null) {
      map['yn_relay_opr_time'] = Variable<double>(yn_relayOprTime);
    }
    if (!nullToAbsent || bn_relayOprTime != null) {
      map['bn_relay_opr_time'] = Variable<double>(bn_relayOprTime);
    }
    if (!nullToAbsent || stageNo != null) {
      map['stage_no'] = Variable<int>(stageNo);
    }
    if (!nullToAbsent || function != null) {
      map['function'] = Variable<String>(function);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  FPRunderfreqLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return FPRunderfreqLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      frequencySet: frequencySet == null && nullToAbsent
          ? const Value.absent()
          : Value(frequencySet),
      delay:
          delay == null && nullToAbsent ? const Value.absent() : Value(delay),
      rn_relayOprTime: rn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(rn_relayOprTime),
      yn_relayOprTime: yn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(yn_relayOprTime),
      bn_relayOprTime: bn_relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(bn_relayOprTime),
      stageNo: stageNo == null && nullToAbsent
          ? const Value.absent()
          : Value(stageNo),
      function: function == null && nullToAbsent
          ? const Value.absent()
          : Value(function),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory FPRunderfreqLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FPRunderfreqLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      frequencySet: serializer.fromJson<double>(json['frequencySet']),
      delay: serializer.fromJson<double>(json['delay']),
      rn_relayOprTime: serializer.fromJson<double>(json['rn_relayOprTime']),
      yn_relayOprTime: serializer.fromJson<double>(json['yn_relayOprTime']),
      bn_relayOprTime: serializer.fromJson<double>(json['bn_relayOprTime']),
      stageNo: serializer.fromJson<int>(json['stageNo']),
      function: serializer.fromJson<String>(json['function']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'frequencySet': serializer.toJson<double>(frequencySet),
      'delay': serializer.toJson<double>(delay),
      'rn_relayOprTime': serializer.toJson<double>(rn_relayOprTime),
      'yn_relayOprTime': serializer.toJson<double>(yn_relayOprTime),
      'bn_relayOprTime': serializer.toJson<double>(bn_relayOprTime),
      'stageNo': serializer.toJson<int>(stageNo),
      'function': serializer.toJson<String>(function),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  FPRunderfreqLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double frequencySet,
          double delay,
          double rn_relayOprTime,
          double yn_relayOprTime,
          double bn_relayOprTime,
          int stageNo,
          String function,
          String equipmentUsed,
          DateTime updateDate}) =>
      FPRunderfreqLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        frequencySet: frequencySet ?? this.frequencySet,
        delay: delay ?? this.delay,
        rn_relayOprTime: rn_relayOprTime ?? this.rn_relayOprTime,
        yn_relayOprTime: yn_relayOprTime ?? this.yn_relayOprTime,
        bn_relayOprTime: bn_relayOprTime ?? this.bn_relayOprTime,
        stageNo: stageNo ?? this.stageNo,
        function: function ?? this.function,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('FPRunderfreqLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('frequencySet: $frequencySet, ')
          ..write('delay: $delay, ')
          ..write('rn_relayOprTime: $rn_relayOprTime, ')
          ..write('yn_relayOprTime: $yn_relayOprTime, ')
          ..write('bn_relayOprTime: $bn_relayOprTime, ')
          ..write('stageNo: $stageNo, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      frequencySet,
      delay,
      rn_relayOprTime,
      yn_relayOprTime,
      bn_relayOprTime,
      stageNo,
      function,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FPRunderfreqLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.frequencySet == this.frequencySet &&
          other.delay == this.delay &&
          other.rn_relayOprTime == this.rn_relayOprTime &&
          other.yn_relayOprTime == this.yn_relayOprTime &&
          other.bn_relayOprTime == this.bn_relayOprTime &&
          other.stageNo == this.stageNo &&
          other.function == this.function &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class FPRunderfreqLocalDatasourceImplCompanion
    extends UpdateCompanion<FPRunderfreqLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> frequencySet;
  final Value<double> delay;
  final Value<double> rn_relayOprTime;
  final Value<double> yn_relayOprTime;
  final Value<double> bn_relayOprTime;
  final Value<int> stageNo;
  final Value<String> function;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const FPRunderfreqLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.frequencySet = const Value.absent(),
    this.delay = const Value.absent(),
    this.rn_relayOprTime = const Value.absent(),
    this.yn_relayOprTime = const Value.absent(),
    this.bn_relayOprTime = const Value.absent(),
    this.stageNo = const Value.absent(),
    this.function = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  FPRunderfreqLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double frequencySet,
    @required double delay,
    @required double rn_relayOprTime,
    @required double yn_relayOprTime,
    @required double bn_relayOprTime,
    @required int stageNo,
    @required String function,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        frequencySet = Value(frequencySet),
        delay = Value(delay),
        rn_relayOprTime = Value(rn_relayOprTime),
        yn_relayOprTime = Value(yn_relayOprTime),
        bn_relayOprTime = Value(bn_relayOprTime),
        stageNo = Value(stageNo),
        function = Value(function),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<FPRunderfreqLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> frequencySet,
    Expression<double> delay,
    Expression<double> rn_relayOprTime,
    Expression<double> yn_relayOprTime,
    Expression<double> bn_relayOprTime,
    Expression<int> stageNo,
    Expression<String> function,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (frequencySet != null) 'frequency_set': frequencySet,
      if (delay != null) 'delay': delay,
      if (rn_relayOprTime != null) 'rn_relay_opr_time': rn_relayOprTime,
      if (yn_relayOprTime != null) 'yn_relay_opr_time': yn_relayOprTime,
      if (bn_relayOprTime != null) 'bn_relay_opr_time': bn_relayOprTime,
      if (stageNo != null) 'stage_no': stageNo,
      if (function != null) 'function': function,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  FPRunderfreqLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> frequencySet,
      Value<double> delay,
      Value<double> rn_relayOprTime,
      Value<double> yn_relayOprTime,
      Value<double> bn_relayOprTime,
      Value<int> stageNo,
      Value<String> function,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return FPRunderfreqLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      frequencySet: frequencySet ?? this.frequencySet,
      delay: delay ?? this.delay,
      rn_relayOprTime: rn_relayOprTime ?? this.rn_relayOprTime,
      yn_relayOprTime: yn_relayOprTime ?? this.yn_relayOprTime,
      bn_relayOprTime: bn_relayOprTime ?? this.bn_relayOprTime,
      stageNo: stageNo ?? this.stageNo,
      function: function ?? this.function,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (frequencySet.present) {
      map['frequency_set'] = Variable<double>(frequencySet.value);
    }
    if (delay.present) {
      map['delay'] = Variable<double>(delay.value);
    }
    if (rn_relayOprTime.present) {
      map['rn_relay_opr_time'] = Variable<double>(rn_relayOprTime.value);
    }
    if (yn_relayOprTime.present) {
      map['yn_relay_opr_time'] = Variable<double>(yn_relayOprTime.value);
    }
    if (bn_relayOprTime.present) {
      map['bn_relay_opr_time'] = Variable<double>(bn_relayOprTime.value);
    }
    if (stageNo.present) {
      map['stage_no'] = Variable<int>(stageNo.value);
    }
    if (function.present) {
      map['function'] = Variable<String>(function.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FPRunderfreqLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('frequencySet: $frequencySet, ')
          ..write('delay: $delay, ')
          ..write('rn_relayOprTime: $rn_relayOprTime, ')
          ..write('yn_relayOprTime: $yn_relayOprTime, ')
          ..write('bn_relayOprTime: $bn_relayOprTime, ')
          ..write('stageNo: $stageNo, ')
          ..write('function: $function, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $FPRunderfreqLocalDatasourceImplTable
    extends FPRunderfreqLocalDatasourceImpl
    with
        TableInfo<$FPRunderfreqLocalDatasourceImplTable,
            FPRunderfreqLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $FPRunderfreqLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _frequencySetMeta =
      const VerificationMeta('frequencySet');
  GeneratedColumn<double> _frequencySet;
  @override
  GeneratedColumn<double> get frequencySet => _frequencySet ??=
      GeneratedColumn<double>('frequency_set', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _delayMeta = const VerificationMeta('delay');
  GeneratedColumn<double> _delay;
  @override
  GeneratedColumn<double> get delay =>
      _delay ??= GeneratedColumn<double>('delay', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _rn_relayOprTimeMeta =
      const VerificationMeta('rn_relayOprTime');
  GeneratedColumn<double> _rn_relayOprTime;
  @override
  GeneratedColumn<double> get rn_relayOprTime => _rn_relayOprTime ??=
      GeneratedColumn<double>('rn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _yn_relayOprTimeMeta =
      const VerificationMeta('yn_relayOprTime');
  GeneratedColumn<double> _yn_relayOprTime;
  @override
  GeneratedColumn<double> get yn_relayOprTime => _yn_relayOprTime ??=
      GeneratedColumn<double>('yn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _bn_relayOprTimeMeta =
      const VerificationMeta('bn_relayOprTime');
  GeneratedColumn<double> _bn_relayOprTime;
  @override
  GeneratedColumn<double> get bn_relayOprTime => _bn_relayOprTime ??=
      GeneratedColumn<double>('bn_relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _stageNoMeta = const VerificationMeta('stageNo');
  GeneratedColumn<int> _stageNo;
  @override
  GeneratedColumn<int> get stageNo =>
      _stageNo ??= GeneratedColumn<int>('stage_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _functionMeta = const VerificationMeta('function');
  GeneratedColumn<String> _function;
  @override
  GeneratedColumn<String> get function => _function ??= GeneratedColumn<String>(
      'function', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        frequencySet,
        delay,
        rn_relayOprTime,
        yn_relayOprTime,
        bn_relayOprTime,
        stageNo,
        function,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'f_p_runderfreq_local_datasource_impl';
  @override
  String get actualTableName => 'f_p_runderfreq_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(
      Insertable<FPRunderfreqLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('frequency_set')) {
      context.handle(
          _frequencySetMeta,
          frequencySet.isAcceptableOrUnknown(
              data['frequency_set'], _frequencySetMeta));
    } else if (isInserting) {
      context.missing(_frequencySetMeta);
    }
    if (data.containsKey('delay')) {
      context.handle(
          _delayMeta, delay.isAcceptableOrUnknown(data['delay'], _delayMeta));
    } else if (isInserting) {
      context.missing(_delayMeta);
    }
    if (data.containsKey('rn_relay_opr_time')) {
      context.handle(
          _rn_relayOprTimeMeta,
          rn_relayOprTime.isAcceptableOrUnknown(
              data['rn_relay_opr_time'], _rn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_rn_relayOprTimeMeta);
    }
    if (data.containsKey('yn_relay_opr_time')) {
      context.handle(
          _yn_relayOprTimeMeta,
          yn_relayOprTime.isAcceptableOrUnknown(
              data['yn_relay_opr_time'], _yn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_yn_relayOprTimeMeta);
    }
    if (data.containsKey('bn_relay_opr_time')) {
      context.handle(
          _bn_relayOprTimeMeta,
          bn_relayOprTime.isAcceptableOrUnknown(
              data['bn_relay_opr_time'], _bn_relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_bn_relayOprTimeMeta);
    }
    if (data.containsKey('stage_no')) {
      context.handle(_stageNoMeta,
          stageNo.isAcceptableOrUnknown(data['stage_no'], _stageNoMeta));
    } else if (isInserting) {
      context.missing(_stageNoMeta);
    }
    if (data.containsKey('function')) {
      context.handle(_functionMeta,
          function.isAcceptableOrUnknown(data['function'], _functionMeta));
    } else if (isInserting) {
      context.missing(_functionMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FPRunderfreqLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return FPRunderfreqLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FPRunderfreqLocalDatasourceImplTable createAlias(String alias) {
    return $FPRunderfreqLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ARLocalData extends DataClass implements Insertable<ARLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String panel;
  final String make;
  final String rtype;
  final String auxVoltage;
  final int noOfCoil;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  ARLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.panel,
      @required this.make,
      @required this.rtype,
      @required this.auxVoltage,
      @required this.noOfCoil,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory ARLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ARLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      rtype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rtype']),
      auxVoltage: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aux_voltage']),
      noOfCoil: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}no_of_coil']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || rtype != null) {
      map['rtype'] = Variable<String>(rtype);
    }
    if (!nullToAbsent || auxVoltage != null) {
      map['aux_voltage'] = Variable<String>(auxVoltage);
    }
    if (!nullToAbsent || noOfCoil != null) {
      map['no_of_coil'] = Variable<int>(noOfCoil);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  ARLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ARLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      rtype:
          rtype == null && nullToAbsent ? const Value.absent() : Value(rtype),
      auxVoltage: auxVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(auxVoltage),
      noOfCoil: noOfCoil == null && nullToAbsent
          ? const Value.absent()
          : Value(noOfCoil),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory ARLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ARLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      panel: serializer.fromJson<String>(json['panel']),
      make: serializer.fromJson<String>(json['make']),
      rtype: serializer.fromJson<String>(json['rtype']),
      auxVoltage: serializer.fromJson<String>(json['auxVoltage']),
      noOfCoil: serializer.fromJson<int>(json['noOfCoil']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'panel': serializer.toJson<String>(panel),
      'make': serializer.toJson<String>(make),
      'rtype': serializer.toJson<String>(rtype),
      'auxVoltage': serializer.toJson<String>(auxVoltage),
      'noOfCoil': serializer.toJson<int>(noOfCoil),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  ARLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String panel,
          String make,
          String rtype,
          String auxVoltage,
          int noOfCoil,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      ARLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        panel: panel ?? this.panel,
        make: make ?? this.make,
        rtype: rtype ?? this.rtype,
        auxVoltage: auxVoltage ?? this.auxVoltage,
        noOfCoil: noOfCoil ?? this.noOfCoil,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('ARLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('noOfCoil: $noOfCoil, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      etype,
      trNo,
      designation,
      location,
      panel,
      make,
      rtype,
      auxVoltage,
      noOfCoil,
      dateOfTesting,
      updateDate,
      testedBy,
      verifiedBy,
      WitnessedBy);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ARLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.panel == this.panel &&
          other.make == this.make &&
          other.rtype == this.rtype &&
          other.auxVoltage == this.auxVoltage &&
          other.noOfCoil == this.noOfCoil &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class ARLocalDatasourceImplCompanion extends UpdateCompanion<ARLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> panel;
  final Value<String> make;
  final Value<String> rtype;
  final Value<String> auxVoltage;
  final Value<int> noOfCoil;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const ARLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.panel = const Value.absent(),
    this.make = const Value.absent(),
    this.rtype = const Value.absent(),
    this.auxVoltage = const Value.absent(),
    this.noOfCoil = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  ARLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String panel,
    @required String make,
    @required String rtype,
    @required String auxVoltage,
    @required int noOfCoil,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        panel = Value(panel),
        make = Value(make),
        rtype = Value(rtype),
        auxVoltage = Value(auxVoltage),
        noOfCoil = Value(noOfCoil),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<ARLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> panel,
    Expression<String> make,
    Expression<String> rtype,
    Expression<String> auxVoltage,
    Expression<int> noOfCoil,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (panel != null) 'panel': panel,
      if (make != null) 'make': make,
      if (rtype != null) 'rtype': rtype,
      if (auxVoltage != null) 'aux_voltage': auxVoltage,
      if (noOfCoil != null) 'no_of_coil': noOfCoil,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  ARLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> panel,
      Value<String> make,
      Value<String> rtype,
      Value<String> auxVoltage,
      Value<int> noOfCoil,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return ARLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      panel: panel ?? this.panel,
      make: make ?? this.make,
      rtype: rtype ?? this.rtype,
      auxVoltage: auxVoltage ?? this.auxVoltage,
      noOfCoil: noOfCoil ?? this.noOfCoil,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (rtype.present) {
      map['rtype'] = Variable<String>(rtype.value);
    }
    if (auxVoltage.present) {
      map['aux_voltage'] = Variable<String>(auxVoltage.value);
    }
    if (noOfCoil.present) {
      map['no_of_coil'] = Variable<int>(noOfCoil.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ARLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('noOfCoil: $noOfCoil, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $ARLocalDatasourceImplTable extends ARLocalDatasourceImpl
    with TableInfo<$ARLocalDatasourceImplTable, ARLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ARLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rtypeMeta = const VerificationMeta('rtype');
  GeneratedColumn<String> _rtype;
  @override
  GeneratedColumn<String> get rtype => _rtype ??= GeneratedColumn<String>(
      'rtype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _auxVoltageMeta = const VerificationMeta('auxVoltage');
  GeneratedColumn<String> _auxVoltage;
  @override
  GeneratedColumn<String> get auxVoltage =>
      _auxVoltage ??= GeneratedColumn<String>('aux_voltage', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _noOfCoilMeta = const VerificationMeta('noOfCoil');
  GeneratedColumn<int> _noOfCoil;
  @override
  GeneratedColumn<int> get noOfCoil =>
      _noOfCoil ??= GeneratedColumn<int>('no_of_coil', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        panel,
        make,
        rtype,
        auxVoltage,
        noOfCoil,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'a_r_local_datasource_impl';
  @override
  String get actualTableName => 'a_r_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ARLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('rtype')) {
      context.handle(
          _rtypeMeta, rtype.isAcceptableOrUnknown(data['rtype'], _rtypeMeta));
    } else if (isInserting) {
      context.missing(_rtypeMeta);
    }
    if (data.containsKey('aux_voltage')) {
      context.handle(
          _auxVoltageMeta,
          auxVoltage.isAcceptableOrUnknown(
              data['aux_voltage'], _auxVoltageMeta));
    } else if (isInserting) {
      context.missing(_auxVoltageMeta);
    }
    if (data.containsKey('no_of_coil')) {
      context.handle(_noOfCoilMeta,
          noOfCoil.isAcceptableOrUnknown(data['no_of_coil'], _noOfCoilMeta));
    } else if (isInserting) {
      context.missing(_noOfCoilMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ARLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ARLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ARLocalDatasourceImplTable createAlias(String alias) {
    return $ARLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class ARpudoLocalData extends DataClass implements Insertable<ARpudoLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final int arRef;
  final String coilRef;
  final double coilResistenace;
  final int pickUp;
  final String dropOff;
  final String equipmentUsed;
  final DateTime updateDate;
  ARpudoLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.arRef,
      @required this.coilRef,
      @required this.coilResistenace,
      @required this.pickUp,
      @required this.dropOff,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory ARpudoLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return ARpudoLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      arRef: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ar_ref']),
      coilRef: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}coil_ref']),
      coilResistenace: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}coil_resistenace']),
      pickUp: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pick_up']),
      dropOff: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}drop_off']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || arRef != null) {
      map['ar_ref'] = Variable<int>(arRef);
    }
    if (!nullToAbsent || coilRef != null) {
      map['coil_ref'] = Variable<String>(coilRef);
    }
    if (!nullToAbsent || coilResistenace != null) {
      map['coil_resistenace'] = Variable<double>(coilResistenace);
    }
    if (!nullToAbsent || pickUp != null) {
      map['pick_up'] = Variable<int>(pickUp);
    }
    if (!nullToAbsent || dropOff != null) {
      map['drop_off'] = Variable<String>(dropOff);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  ARpudoLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return ARpudoLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      arRef:
          arRef == null && nullToAbsent ? const Value.absent() : Value(arRef),
      coilRef: coilRef == null && nullToAbsent
          ? const Value.absent()
          : Value(coilRef),
      coilResistenace: coilResistenace == null && nullToAbsent
          ? const Value.absent()
          : Value(coilResistenace),
      pickUp:
          pickUp == null && nullToAbsent ? const Value.absent() : Value(pickUp),
      dropOff: dropOff == null && nullToAbsent
          ? const Value.absent()
          : Value(dropOff),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory ARpudoLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ARpudoLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      arRef: serializer.fromJson<int>(json['arRef']),
      coilRef: serializer.fromJson<String>(json['coilRef']),
      coilResistenace: serializer.fromJson<double>(json['coilResistenace']),
      pickUp: serializer.fromJson<int>(json['pickUp']),
      dropOff: serializer.fromJson<String>(json['dropOff']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'arRef': serializer.toJson<int>(arRef),
      'coilRef': serializer.toJson<String>(coilRef),
      'coilResistenace': serializer.toJson<double>(coilResistenace),
      'pickUp': serializer.toJson<int>(pickUp),
      'dropOff': serializer.toJson<String>(dropOff),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  ARpudoLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          int arRef,
          String coilRef,
          double coilResistenace,
          int pickUp,
          String dropOff,
          String equipmentUsed,
          DateTime updateDate}) =>
      ARpudoLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        arRef: arRef ?? this.arRef,
        coilRef: coilRef ?? this.coilRef,
        coilResistenace: coilResistenace ?? this.coilResistenace,
        pickUp: pickUp ?? this.pickUp,
        dropOff: dropOff ?? this.dropOff,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('ARpudoLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('arRef: $arRef, ')
          ..write('coilRef: $coilRef, ')
          ..write('coilResistenace: $coilResistenace, ')
          ..write('pickUp: $pickUp, ')
          ..write('dropOff: $dropOff, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, arRef, coilRef,
      coilResistenace, pickUp, dropOff, equipmentUsed, updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ARpudoLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.arRef == this.arRef &&
          other.coilRef == this.coilRef &&
          other.coilResistenace == this.coilResistenace &&
          other.pickUp == this.pickUp &&
          other.dropOff == this.dropOff &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class ARpudoLocalDatasourceImplCompanion
    extends UpdateCompanion<ARpudoLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<int> arRef;
  final Value<String> coilRef;
  final Value<double> coilResistenace;
  final Value<int> pickUp;
  final Value<String> dropOff;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const ARpudoLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.arRef = const Value.absent(),
    this.coilRef = const Value.absent(),
    this.coilResistenace = const Value.absent(),
    this.pickUp = const Value.absent(),
    this.dropOff = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  ARpudoLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required int arRef,
    @required String coilRef,
    @required double coilResistenace,
    @required int pickUp,
    @required String dropOff,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        arRef = Value(arRef),
        coilRef = Value(coilRef),
        coilResistenace = Value(coilResistenace),
        pickUp = Value(pickUp),
        dropOff = Value(dropOff),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<ARpudoLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<int> arRef,
    Expression<String> coilRef,
    Expression<double> coilResistenace,
    Expression<int> pickUp,
    Expression<String> dropOff,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (arRef != null) 'ar_ref': arRef,
      if (coilRef != null) 'coil_ref': coilRef,
      if (coilResistenace != null) 'coil_resistenace': coilResistenace,
      if (pickUp != null) 'pick_up': pickUp,
      if (dropOff != null) 'drop_off': dropOff,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  ARpudoLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<int> arRef,
      Value<String> coilRef,
      Value<double> coilResistenace,
      Value<int> pickUp,
      Value<String> dropOff,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return ARpudoLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      arRef: arRef ?? this.arRef,
      coilRef: coilRef ?? this.coilRef,
      coilResistenace: coilResistenace ?? this.coilResistenace,
      pickUp: pickUp ?? this.pickUp,
      dropOff: dropOff ?? this.dropOff,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (arRef.present) {
      map['ar_ref'] = Variable<int>(arRef.value);
    }
    if (coilRef.present) {
      map['coil_ref'] = Variable<String>(coilRef.value);
    }
    if (coilResistenace.present) {
      map['coil_resistenace'] = Variable<double>(coilResistenace.value);
    }
    if (pickUp.present) {
      map['pick_up'] = Variable<int>(pickUp.value);
    }
    if (dropOff.present) {
      map['drop_off'] = Variable<String>(dropOff.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ARpudoLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('arRef: $arRef, ')
          ..write('coilRef: $coilRef, ')
          ..write('coilResistenace: $coilResistenace, ')
          ..write('pickUp: $pickUp, ')
          ..write('dropOff: $dropOff, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $ARpudoLocalDatasourceImplTable extends ARpudoLocalDatasourceImpl
    with TableInfo<$ARpudoLocalDatasourceImplTable, ARpudoLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $ARpudoLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _arRefMeta = const VerificationMeta('arRef');
  GeneratedColumn<int> _arRef;
  @override
  GeneratedColumn<int> get arRef =>
      _arRef ??= GeneratedColumn<int>('ar_ref', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _coilRefMeta = const VerificationMeta('coilRef');
  GeneratedColumn<String> _coilRef;
  @override
  GeneratedColumn<String> get coilRef => _coilRef ??= GeneratedColumn<String>(
      'coil_ref', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _coilResistenaceMeta =
      const VerificationMeta('coilResistenace');
  GeneratedColumn<double> _coilResistenace;
  @override
  GeneratedColumn<double> get coilResistenace => _coilResistenace ??=
      GeneratedColumn<double>('coil_resistenace', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pickUpMeta = const VerificationMeta('pickUp');
  GeneratedColumn<int> _pickUp;
  @override
  GeneratedColumn<int> get pickUp =>
      _pickUp ??= GeneratedColumn<int>('pick_up', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dropOffMeta = const VerificationMeta('dropOff');
  GeneratedColumn<String> _dropOff;
  @override
  GeneratedColumn<String> get dropOff => _dropOff ??= GeneratedColumn<String>(
      'drop_off', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        arRef,
        coilRef,
        coilResistenace,
        pickUp,
        dropOff,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'a_rpudo_local_datasource_impl';
  @override
  String get actualTableName => 'a_rpudo_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<ARpudoLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('ar_ref')) {
      context.handle(
          _arRefMeta, arRef.isAcceptableOrUnknown(data['ar_ref'], _arRefMeta));
    } else if (isInserting) {
      context.missing(_arRefMeta);
    }
    if (data.containsKey('coil_ref')) {
      context.handle(_coilRefMeta,
          coilRef.isAcceptableOrUnknown(data['coil_ref'], _coilRefMeta));
    } else if (isInserting) {
      context.missing(_coilRefMeta);
    }
    if (data.containsKey('coil_resistenace')) {
      context.handle(
          _coilResistenaceMeta,
          coilResistenace.isAcceptableOrUnknown(
              data['coil_resistenace'], _coilResistenaceMeta));
    } else if (isInserting) {
      context.missing(_coilResistenaceMeta);
    }
    if (data.containsKey('pick_up')) {
      context.handle(_pickUpMeta,
          pickUp.isAcceptableOrUnknown(data['pick_up'], _pickUpMeta));
    } else if (isInserting) {
      context.missing(_pickUpMeta);
    }
    if (data.containsKey('drop_off')) {
      context.handle(_dropOffMeta,
          dropOff.isAcceptableOrUnknown(data['drop_off'], _dropOffMeta));
    } else if (isInserting) {
      context.missing(_dropOffMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ARpudoLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return ARpudoLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ARpudoLocalDatasourceImplTable createAlias(String alias) {
    return $ARpudoLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class DgLocalData extends DataClass implements Insertable<DgLocalData> {
  final DateTime lastUpdated;
  final String TestedBy;
  final String VerifiedBy;
  final String WitnessedBy;
  final int databaseID;
  final int id;
  final String etype;
  final String design;
  final String location;
  final int rating;
  final int voltage;
  final double powerFactor;
  final int speed;
  final String model;
  final String make;
  final String serialNo;
  final int yom;
  final int trNo;
  final DateTime dateOfTesting;
  DgLocalData(
      {@required this.lastUpdated,
      @required this.TestedBy,
      @required this.VerifiedBy,
      @required this.WitnessedBy,
      @required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.design,
      @required this.location,
      @required this.rating,
      @required this.voltage,
      @required this.powerFactor,
      @required this.speed,
      @required this.model,
      @required this.make,
      @required this.serialNo,
      @required this.yom,
      @required this.trNo,
      @required this.dateOfTesting});
  factory DgLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return DgLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      TestedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      VerifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      design: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}design']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      rating: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rating']),
      voltage: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}voltage']),
      powerFactor: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}power_factor']),
      speed: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}speed']),
      model: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}model']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      yom: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}yom']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || TestedBy != null) {
      map['tested_by'] = Variable<String>(TestedBy);
    }
    if (!nullToAbsent || VerifiedBy != null) {
      map['verified_by'] = Variable<String>(VerifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || design != null) {
      map['design'] = Variable<String>(design);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || rating != null) {
      map['rating'] = Variable<int>(rating);
    }
    if (!nullToAbsent || voltage != null) {
      map['voltage'] = Variable<int>(voltage);
    }
    if (!nullToAbsent || powerFactor != null) {
      map['power_factor'] = Variable<double>(powerFactor);
    }
    if (!nullToAbsent || speed != null) {
      map['speed'] = Variable<int>(speed);
    }
    if (!nullToAbsent || model != null) {
      map['model'] = Variable<String>(model);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || yom != null) {
      map['yom'] = Variable<int>(yom);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    return map;
  }

  DgLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return DgLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      TestedBy: TestedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(TestedBy),
      VerifiedBy: VerifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(VerifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      design:
          design == null && nullToAbsent ? const Value.absent() : Value(design),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      rating:
          rating == null && nullToAbsent ? const Value.absent() : Value(rating),
      voltage: voltage == null && nullToAbsent
          ? const Value.absent()
          : Value(voltage),
      powerFactor: powerFactor == null && nullToAbsent
          ? const Value.absent()
          : Value(powerFactor),
      speed:
          speed == null && nullToAbsent ? const Value.absent() : Value(speed),
      model:
          model == null && nullToAbsent ? const Value.absent() : Value(model),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      yom: yom == null && nullToAbsent ? const Value.absent() : Value(yom),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
    );
  }

  factory DgLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DgLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      TestedBy: serializer.fromJson<String>(json['TestedBy']),
      VerifiedBy: serializer.fromJson<String>(json['VerifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      design: serializer.fromJson<String>(json['design']),
      location: serializer.fromJson<String>(json['location']),
      rating: serializer.fromJson<int>(json['rating']),
      voltage: serializer.fromJson<int>(json['voltage']),
      powerFactor: serializer.fromJson<double>(json['powerFactor']),
      speed: serializer.fromJson<int>(json['speed']),
      model: serializer.fromJson<String>(json['model']),
      make: serializer.fromJson<String>(json['make']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      yom: serializer.fromJson<int>(json['yom']),
      trNo: serializer.fromJson<int>(json['trNo']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'TestedBy': serializer.toJson<String>(TestedBy),
      'VerifiedBy': serializer.toJson<String>(VerifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'design': serializer.toJson<String>(design),
      'location': serializer.toJson<String>(location),
      'rating': serializer.toJson<int>(rating),
      'voltage': serializer.toJson<int>(voltage),
      'powerFactor': serializer.toJson<double>(powerFactor),
      'speed': serializer.toJson<int>(speed),
      'model': serializer.toJson<String>(model),
      'make': serializer.toJson<String>(make),
      'serialNo': serializer.toJson<String>(serialNo),
      'yom': serializer.toJson<int>(yom),
      'trNo': serializer.toJson<int>(trNo),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
    };
  }

  DgLocalData copyWith(
          {DateTime lastUpdated,
          String TestedBy,
          String VerifiedBy,
          String WitnessedBy,
          int databaseID,
          int id,
          String etype,
          String design,
          String location,
          int rating,
          int voltage,
          double powerFactor,
          int speed,
          String model,
          String make,
          String serialNo,
          int yom,
          int trNo,
          DateTime dateOfTesting}) =>
      DgLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        TestedBy: TestedBy ?? this.TestedBy,
        VerifiedBy: VerifiedBy ?? this.VerifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        design: design ?? this.design,
        location: location ?? this.location,
        rating: rating ?? this.rating,
        voltage: voltage ?? this.voltage,
        powerFactor: powerFactor ?? this.powerFactor,
        speed: speed ?? this.speed,
        model: model ?? this.model,
        make: make ?? this.make,
        serialNo: serialNo ?? this.serialNo,
        yom: yom ?? this.yom,
        trNo: trNo ?? this.trNo,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      );
  @override
  String toString() {
    return (StringBuffer('DgLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('design: $design, ')
          ..write('location: $location, ')
          ..write('rating: $rating, ')
          ..write('voltage: $voltage, ')
          ..write('powerFactor: $powerFactor, ')
          ..write('speed: $speed, ')
          ..write('model: $model, ')
          ..write('make: $make, ')
          ..write('serialNo: $serialNo, ')
          ..write('yom: $yom, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated,
      TestedBy,
      VerifiedBy,
      WitnessedBy,
      databaseID,
      id,
      etype,
      design,
      location,
      rating,
      voltage,
      powerFactor,
      speed,
      model,
      make,
      serialNo,
      yom,
      trNo,
      dateOfTesting);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DgLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.TestedBy == this.TestedBy &&
          other.VerifiedBy == this.VerifiedBy &&
          other.WitnessedBy == this.WitnessedBy &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.design == this.design &&
          other.location == this.location &&
          other.rating == this.rating &&
          other.voltage == this.voltage &&
          other.powerFactor == this.powerFactor &&
          other.speed == this.speed &&
          other.model == this.model &&
          other.make == this.make &&
          other.serialNo == this.serialNo &&
          other.yom == this.yom &&
          other.trNo == this.trNo &&
          other.dateOfTesting == this.dateOfTesting);
}

class DgLocalDatasourceImplCompanion extends UpdateCompanion<DgLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> TestedBy;
  final Value<String> VerifiedBy;
  final Value<String> WitnessedBy;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<String> design;
  final Value<String> location;
  final Value<int> rating;
  final Value<int> voltage;
  final Value<double> powerFactor;
  final Value<int> speed;
  final Value<String> model;
  final Value<String> make;
  final Value<String> serialNo;
  final Value<int> yom;
  final Value<int> trNo;
  final Value<DateTime> dateOfTesting;
  const DgLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.TestedBy = const Value.absent(),
    this.VerifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.design = const Value.absent(),
    this.location = const Value.absent(),
    this.rating = const Value.absent(),
    this.voltage = const Value.absent(),
    this.powerFactor = const Value.absent(),
    this.speed = const Value.absent(),
    this.model = const Value.absent(),
    this.make = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.yom = const Value.absent(),
    this.trNo = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
  });
  DgLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String TestedBy,
    @required String VerifiedBy,
    @required String WitnessedBy,
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required String design,
    @required String location,
    @required int rating,
    @required int voltage,
    @required double powerFactor,
    @required int speed,
    @required String model,
    @required String make,
    @required String serialNo,
    @required int yom,
    @required int trNo,
    this.dateOfTesting = const Value.absent(),
  })  : TestedBy = Value(TestedBy),
        VerifiedBy = Value(VerifiedBy),
        WitnessedBy = Value(WitnessedBy),
        databaseID = Value(databaseID),
        etype = Value(etype),
        design = Value(design),
        location = Value(location),
        rating = Value(rating),
        voltage = Value(voltage),
        powerFactor = Value(powerFactor),
        speed = Value(speed),
        model = Value(model),
        make = Value(make),
        serialNo = Value(serialNo),
        yom = Value(yom),
        trNo = Value(trNo);
  static Insertable<DgLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> TestedBy,
    Expression<String> VerifiedBy,
    Expression<String> WitnessedBy,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<String> design,
    Expression<String> location,
    Expression<int> rating,
    Expression<int> voltage,
    Expression<double> powerFactor,
    Expression<int> speed,
    Expression<String> model,
    Expression<String> make,
    Expression<String> serialNo,
    Expression<int> yom,
    Expression<int> trNo,
    Expression<DateTime> dateOfTesting,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (TestedBy != null) 'tested_by': TestedBy,
      if (VerifiedBy != null) 'verified_by': VerifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (design != null) 'design': design,
      if (location != null) 'location': location,
      if (rating != null) 'rating': rating,
      if (voltage != null) 'voltage': voltage,
      if (powerFactor != null) 'power_factor': powerFactor,
      if (speed != null) 'speed': speed,
      if (model != null) 'model': model,
      if (make != null) 'make': make,
      if (serialNo != null) 'serial_no': serialNo,
      if (yom != null) 'yom': yom,
      if (trNo != null) 'tr_no': trNo,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
    });
  }

  DgLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> TestedBy,
      Value<String> VerifiedBy,
      Value<String> WitnessedBy,
      Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<String> design,
      Value<String> location,
      Value<int> rating,
      Value<int> voltage,
      Value<double> powerFactor,
      Value<int> speed,
      Value<String> model,
      Value<String> make,
      Value<String> serialNo,
      Value<int> yom,
      Value<int> trNo,
      Value<DateTime> dateOfTesting}) {
    return DgLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      TestedBy: TestedBy ?? this.TestedBy,
      VerifiedBy: VerifiedBy ?? this.VerifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      design: design ?? this.design,
      location: location ?? this.location,
      rating: rating ?? this.rating,
      voltage: voltage ?? this.voltage,
      powerFactor: powerFactor ?? this.powerFactor,
      speed: speed ?? this.speed,
      model: model ?? this.model,
      make: make ?? this.make,
      serialNo: serialNo ?? this.serialNo,
      yom: yom ?? this.yom,
      trNo: trNo ?? this.trNo,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (TestedBy.present) {
      map['tested_by'] = Variable<String>(TestedBy.value);
    }
    if (VerifiedBy.present) {
      map['verified_by'] = Variable<String>(VerifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (design.present) {
      map['design'] = Variable<String>(design.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (rating.present) {
      map['rating'] = Variable<int>(rating.value);
    }
    if (voltage.present) {
      map['voltage'] = Variable<int>(voltage.value);
    }
    if (powerFactor.present) {
      map['power_factor'] = Variable<double>(powerFactor.value);
    }
    if (speed.present) {
      map['speed'] = Variable<int>(speed.value);
    }
    if (model.present) {
      map['model'] = Variable<String>(model.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (yom.present) {
      map['yom'] = Variable<int>(yom.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DgLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('TestedBy: $TestedBy, ')
          ..write('VerifiedBy: $VerifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('design: $design, ')
          ..write('location: $location, ')
          ..write('rating: $rating, ')
          ..write('voltage: $voltage, ')
          ..write('powerFactor: $powerFactor, ')
          ..write('speed: $speed, ')
          ..write('model: $model, ')
          ..write('make: $make, ')
          ..write('serialNo: $serialNo, ')
          ..write('yom: $yom, ')
          ..write('trNo: $trNo, ')
          ..write('dateOfTesting: $dateOfTesting')
          ..write(')'))
        .toString();
  }
}

class $DgLocalDatasourceImplTable extends DgLocalDatasourceImpl
    with TableInfo<$DgLocalDatasourceImplTable, DgLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $DgLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _TestedByMeta = const VerificationMeta('TestedBy');
  GeneratedColumn<String> _TestedBy;
  @override
  GeneratedColumn<String> get TestedBy => _TestedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _VerifiedByMeta = const VerificationMeta('VerifiedBy');
  GeneratedColumn<String> _VerifiedBy;
  @override
  GeneratedColumn<String> get VerifiedBy =>
      _VerifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _designMeta = const VerificationMeta('design');
  GeneratedColumn<String> _design;
  @override
  GeneratedColumn<String> get design => _design ??= GeneratedColumn<String>(
      'design', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _ratingMeta = const VerificationMeta('rating');
  GeneratedColumn<int> _rating;
  @override
  GeneratedColumn<int> get rating =>
      _rating ??= GeneratedColumn<int>('rating', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _voltageMeta = const VerificationMeta('voltage');
  GeneratedColumn<int> _voltage;
  @override
  GeneratedColumn<int> get voltage =>
      _voltage ??= GeneratedColumn<int>('voltage', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _powerFactorMeta =
      const VerificationMeta('powerFactor');
  GeneratedColumn<double> _powerFactor;
  @override
  GeneratedColumn<double> get powerFactor => _powerFactor ??=
      GeneratedColumn<double>('power_factor', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _speedMeta = const VerificationMeta('speed');
  GeneratedColumn<int> _speed;
  @override
  GeneratedColumn<int> get speed =>
      _speed ??= GeneratedColumn<int>('speed', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _modelMeta = const VerificationMeta('model');
  GeneratedColumn<String> _model;
  @override
  GeneratedColumn<String> get model => _model ??= GeneratedColumn<String>(
      'model', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _yomMeta = const VerificationMeta('yom');
  GeneratedColumn<int> _yom;
  @override
  GeneratedColumn<int> get yom =>
      _yom ??= GeneratedColumn<int>('yom', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        TestedBy,
        VerifiedBy,
        WitnessedBy,
        databaseID,
        id,
        etype,
        design,
        location,
        rating,
        voltage,
        powerFactor,
        speed,
        model,
        make,
        serialNo,
        yom,
        trNo,
        dateOfTesting
      ];
  @override
  String get aliasedName => _alias ?? 'dg_local_datasource_impl';
  @override
  String get actualTableName => 'dg_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<DgLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_TestedByMeta,
          TestedBy.isAcceptableOrUnknown(data['tested_by'], _TestedByMeta));
    } else if (isInserting) {
      context.missing(_TestedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _VerifiedByMeta,
          VerifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _VerifiedByMeta));
    } else if (isInserting) {
      context.missing(_VerifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('design')) {
      context.handle(_designMeta,
          design.isAcceptableOrUnknown(data['design'], _designMeta));
    } else if (isInserting) {
      context.missing(_designMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('rating')) {
      context.handle(_ratingMeta,
          rating.isAcceptableOrUnknown(data['rating'], _ratingMeta));
    } else if (isInserting) {
      context.missing(_ratingMeta);
    }
    if (data.containsKey('voltage')) {
      context.handle(_voltageMeta,
          voltage.isAcceptableOrUnknown(data['voltage'], _voltageMeta));
    } else if (isInserting) {
      context.missing(_voltageMeta);
    }
    if (data.containsKey('power_factor')) {
      context.handle(
          _powerFactorMeta,
          powerFactor.isAcceptableOrUnknown(
              data['power_factor'], _powerFactorMeta));
    } else if (isInserting) {
      context.missing(_powerFactorMeta);
    }
    if (data.containsKey('speed')) {
      context.handle(
          _speedMeta, speed.isAcceptableOrUnknown(data['speed'], _speedMeta));
    } else if (isInserting) {
      context.missing(_speedMeta);
    }
    if (data.containsKey('model')) {
      context.handle(
          _modelMeta, model.isAcceptableOrUnknown(data['model'], _modelMeta));
    } else if (isInserting) {
      context.missing(_modelMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('yom')) {
      context.handle(
          _yomMeta, yom.isAcceptableOrUnknown(data['yom'], _yomMeta));
    } else if (isInserting) {
      context.missing(_yomMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DgLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return DgLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $DgLocalDatasourceImplTable createAlias(String alias) {
    return $DgLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class DgIrLocalData extends DataClass implements Insertable<DgIrLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double re_mResistance;
  final double ye_mResistance;
  final double be_mResistance;
  DgIrLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.re_mResistance,
      @required this.ye_mResistance,
      @required this.be_mResistance});
  factory DgIrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return DgIrLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      re_mResistance: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}re_m_resistance']),
      ye_mResistance: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ye_m_resistance']),
      be_mResistance: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}be_m_resistance']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || re_mResistance != null) {
      map['re_m_resistance'] = Variable<double>(re_mResistance);
    }
    if (!nullToAbsent || ye_mResistance != null) {
      map['ye_m_resistance'] = Variable<double>(ye_mResistance);
    }
    if (!nullToAbsent || be_mResistance != null) {
      map['be_m_resistance'] = Variable<double>(be_mResistance);
    }
    return map;
  }

  DgIrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return DgIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      re_mResistance: re_mResistance == null && nullToAbsent
          ? const Value.absent()
          : Value(re_mResistance),
      ye_mResistance: ye_mResistance == null && nullToAbsent
          ? const Value.absent()
          : Value(ye_mResistance),
      be_mResistance: be_mResistance == null && nullToAbsent
          ? const Value.absent()
          : Value(be_mResistance),
    );
  }

  factory DgIrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DgIrLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      re_mResistance: serializer.fromJson<double>(json['re_mResistance']),
      ye_mResistance: serializer.fromJson<double>(json['ye_mResistance']),
      be_mResistance: serializer.fromJson<double>(json['be_mResistance']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      're_mResistance': serializer.toJson<double>(re_mResistance),
      'ye_mResistance': serializer.toJson<double>(ye_mResistance),
      'be_mResistance': serializer.toJson<double>(be_mResistance),
    };
  }

  DgIrLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double re_mResistance,
          double ye_mResistance,
          double be_mResistance}) =>
      DgIrLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        re_mResistance: re_mResistance ?? this.re_mResistance,
        ye_mResistance: ye_mResistance ?? this.ye_mResistance,
        be_mResistance: be_mResistance ?? this.be_mResistance,
      );
  @override
  String toString() {
    return (StringBuffer('DgIrLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('re_mResistance: $re_mResistance, ')
          ..write('ye_mResistance: $ye_mResistance, ')
          ..write('be_mResistance: $be_mResistance')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(lastUpdated, EquipmentType, databaseID, id,
      trNo, serialNo, re_mResistance, ye_mResistance, be_mResistance);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DgIrLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.re_mResistance == this.re_mResistance &&
          other.ye_mResistance == this.ye_mResistance &&
          other.be_mResistance == this.be_mResistance);
}

class DgIrLocalDatasourceImplCompanion extends UpdateCompanion<DgIrLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> re_mResistance;
  final Value<double> ye_mResistance;
  final Value<double> be_mResistance;
  const DgIrLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.re_mResistance = const Value.absent(),
    this.ye_mResistance = const Value.absent(),
    this.be_mResistance = const Value.absent(),
  });
  DgIrLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double re_mResistance,
    @required double ye_mResistance,
    @required double be_mResistance,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        re_mResistance = Value(re_mResistance),
        ye_mResistance = Value(ye_mResistance),
        be_mResistance = Value(be_mResistance);
  static Insertable<DgIrLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> re_mResistance,
    Expression<double> ye_mResistance,
    Expression<double> be_mResistance,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (re_mResistance != null) 're_m_resistance': re_mResistance,
      if (ye_mResistance != null) 'ye_m_resistance': ye_mResistance,
      if (be_mResistance != null) 'be_m_resistance': be_mResistance,
    });
  }

  DgIrLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> re_mResistance,
      Value<double> ye_mResistance,
      Value<double> be_mResistance}) {
    return DgIrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      re_mResistance: re_mResistance ?? this.re_mResistance,
      ye_mResistance: ye_mResistance ?? this.ye_mResistance,
      be_mResistance: be_mResistance ?? this.be_mResistance,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (re_mResistance.present) {
      map['re_m_resistance'] = Variable<double>(re_mResistance.value);
    }
    if (ye_mResistance.present) {
      map['ye_m_resistance'] = Variable<double>(ye_mResistance.value);
    }
    if (be_mResistance.present) {
      map['be_m_resistance'] = Variable<double>(be_mResistance.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DgIrLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('re_mResistance: $re_mResistance, ')
          ..write('ye_mResistance: $ye_mResistance, ')
          ..write('be_mResistance: $be_mResistance')
          ..write(')'))
        .toString();
  }
}

class $DgIrLocalDatasourceImplTable extends DgIrLocalDatasourceImpl
    with TableInfo<$DgIrLocalDatasourceImplTable, DgIrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $DgIrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _re_mResistanceMeta =
      const VerificationMeta('re_mResistance');
  GeneratedColumn<double> _re_mResistance;
  @override
  GeneratedColumn<double> get re_mResistance => _re_mResistance ??=
      GeneratedColumn<double>('re_m_resistance', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _ye_mResistanceMeta =
      const VerificationMeta('ye_mResistance');
  GeneratedColumn<double> _ye_mResistance;
  @override
  GeneratedColumn<double> get ye_mResistance => _ye_mResistance ??=
      GeneratedColumn<double>('ye_m_resistance', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _be_mResistanceMeta =
      const VerificationMeta('be_mResistance');
  GeneratedColumn<double> _be_mResistance;
  @override
  GeneratedColumn<double> get be_mResistance => _be_mResistance ??=
      GeneratedColumn<double>('be_m_resistance', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        lastUpdated,
        EquipmentType,
        databaseID,
        id,
        trNo,
        serialNo,
        re_mResistance,
        ye_mResistance,
        be_mResistance
      ];
  @override
  String get aliasedName => _alias ?? 'dg_ir_local_datasource_impl';
  @override
  String get actualTableName => 'dg_ir_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<DgIrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('re_m_resistance')) {
      context.handle(
          _re_mResistanceMeta,
          re_mResistance.isAcceptableOrUnknown(
              data['re_m_resistance'], _re_mResistanceMeta));
    } else if (isInserting) {
      context.missing(_re_mResistanceMeta);
    }
    if (data.containsKey('ye_m_resistance')) {
      context.handle(
          _ye_mResistanceMeta,
          ye_mResistance.isAcceptableOrUnknown(
              data['ye_m_resistance'], _ye_mResistanceMeta));
    } else if (isInserting) {
      context.missing(_ye_mResistanceMeta);
    }
    if (data.containsKey('be_m_resistance')) {
      context.handle(
          _be_mResistanceMeta,
          be_mResistance.isAcceptableOrUnknown(
              data['be_m_resistance'], _be_mResistanceMeta));
    } else if (isInserting) {
      context.missing(_be_mResistanceMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DgIrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return DgIrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $DgIrLocalDatasourceImplTable createAlias(String alias) {
    return $DgIrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class DgWrLocalData extends DataClass implements Insertable<DgWrLocalData> {
  final DateTime lastUpdated;
  final String EquipmentType;
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double uv;
  final double vw;
  final double wu;
  DgWrLocalData(
      {@required this.lastUpdated,
      @required this.EquipmentType,
      @required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.uv,
      @required this.vw,
      @required this.wu});
  factory DgWrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return DgWrLocalData(
      lastUpdated: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}last_updated']),
      EquipmentType: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_type']),
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      uv: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}uv']),
      vw: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}vw']),
      wu: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}wu']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || lastUpdated != null) {
      map['last_updated'] = Variable<DateTime>(lastUpdated);
    }
    if (!nullToAbsent || EquipmentType != null) {
      map['equipment_type'] = Variable<String>(EquipmentType);
    }
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || uv != null) {
      map['uv'] = Variable<double>(uv);
    }
    if (!nullToAbsent || vw != null) {
      map['vw'] = Variable<double>(vw);
    }
    if (!nullToAbsent || wu != null) {
      map['wu'] = Variable<double>(wu);
    }
    return map;
  }

  DgWrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return DgWrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(lastUpdated),
      EquipmentType: EquipmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(EquipmentType),
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      uv: uv == null && nullToAbsent ? const Value.absent() : Value(uv),
      vw: vw == null && nullToAbsent ? const Value.absent() : Value(vw),
      wu: wu == null && nullToAbsent ? const Value.absent() : Value(wu),
    );
  }

  factory DgWrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DgWrLocalData(
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      EquipmentType: serializer.fromJson<String>(json['EquipmentType']),
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      uv: serializer.fromJson<double>(json['uv']),
      vw: serializer.fromJson<double>(json['vw']),
      wu: serializer.fromJson<double>(json['wu']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'EquipmentType': serializer.toJson<String>(EquipmentType),
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'uv': serializer.toJson<double>(uv),
      'vw': serializer.toJson<double>(vw),
      'wu': serializer.toJson<double>(wu),
    };
  }

  DgWrLocalData copyWith(
          {DateTime lastUpdated,
          String EquipmentType,
          int databaseID,
          int id,
          int trNo,
          String serialNo,
          double uv,
          double vw,
          double wu}) =>
      DgWrLocalData(
        lastUpdated: lastUpdated ?? this.lastUpdated,
        EquipmentType: EquipmentType ?? this.EquipmentType,
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        uv: uv ?? this.uv,
        vw: vw ?? this.vw,
        wu: wu ?? this.wu,
      );
  @override
  String toString() {
    return (StringBuffer('DgWrLocalData(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('uv: $uv, ')
          ..write('vw: $vw, ')
          ..write('wu: $wu')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      lastUpdated, EquipmentType, databaseID, id, trNo, serialNo, uv, vw, wu);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DgWrLocalData &&
          other.lastUpdated == this.lastUpdated &&
          other.EquipmentType == this.EquipmentType &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.uv == this.uv &&
          other.vw == this.vw &&
          other.wu == this.wu);
}

class DgWrLocalDatasourceImplCompanion extends UpdateCompanion<DgWrLocalData> {
  final Value<DateTime> lastUpdated;
  final Value<String> EquipmentType;
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> uv;
  final Value<double> vw;
  final Value<double> wu;
  const DgWrLocalDatasourceImplCompanion({
    this.lastUpdated = const Value.absent(),
    this.EquipmentType = const Value.absent(),
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.uv = const Value.absent(),
    this.vw = const Value.absent(),
    this.wu = const Value.absent(),
  });
  DgWrLocalDatasourceImplCompanion.insert({
    this.lastUpdated = const Value.absent(),
    @required String EquipmentType,
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double uv,
    @required double vw,
    @required double wu,
  })  : EquipmentType = Value(EquipmentType),
        databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        uv = Value(uv),
        vw = Value(vw),
        wu = Value(wu);
  static Insertable<DgWrLocalData> custom({
    Expression<DateTime> lastUpdated,
    Expression<String> EquipmentType,
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> uv,
    Expression<double> vw,
    Expression<double> wu,
  }) {
    return RawValuesInsertable({
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (EquipmentType != null) 'equipment_type': EquipmentType,
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (uv != null) 'uv': uv,
      if (vw != null) 'vw': vw,
      if (wu != null) 'wu': wu,
    });
  }

  DgWrLocalDatasourceImplCompanion copyWith(
      {Value<DateTime> lastUpdated,
      Value<String> EquipmentType,
      Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> uv,
      Value<double> vw,
      Value<double> wu}) {
    return DgWrLocalDatasourceImplCompanion(
      lastUpdated: lastUpdated ?? this.lastUpdated,
      EquipmentType: EquipmentType ?? this.EquipmentType,
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      uv: uv ?? this.uv,
      vw: vw ?? this.vw,
      wu: wu ?? this.wu,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (EquipmentType.present) {
      map['equipment_type'] = Variable<String>(EquipmentType.value);
    }
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (uv.present) {
      map['uv'] = Variable<double>(uv.value);
    }
    if (vw.present) {
      map['vw'] = Variable<double>(vw.value);
    }
    if (wu.present) {
      map['wu'] = Variable<double>(wu.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DgWrLocalDatasourceImplCompanion(')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('EquipmentType: $EquipmentType, ')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('uv: $uv, ')
          ..write('vw: $vw, ')
          ..write('wu: $wu')
          ..write(')'))
        .toString();
  }
}

class $DgWrLocalDatasourceImplTable extends DgWrLocalDatasourceImpl
    with TableInfo<$DgWrLocalDatasourceImplTable, DgWrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $DgWrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _lastUpdatedMeta =
      const VerificationMeta('lastUpdated');
  GeneratedColumn<DateTime> _lastUpdated;
  @override
  GeneratedColumn<DateTime> get lastUpdated => _lastUpdated ??=
      GeneratedColumn<DateTime>('last_updated', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _EquipmentTypeMeta =
      const VerificationMeta('EquipmentType');
  GeneratedColumn<String> _EquipmentType;
  @override
  GeneratedColumn<String> get EquipmentType => _EquipmentType ??=
      GeneratedColumn<String>('equipment_type', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _uvMeta = const VerificationMeta('uv');
  GeneratedColumn<double> _uv;
  @override
  GeneratedColumn<double> get uv =>
      _uv ??= GeneratedColumn<double>('uv', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _vwMeta = const VerificationMeta('vw');
  GeneratedColumn<double> _vw;
  @override
  GeneratedColumn<double> get vw =>
      _vw ??= GeneratedColumn<double>('vw', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _wuMeta = const VerificationMeta('wu');
  GeneratedColumn<double> _wu;
  @override
  GeneratedColumn<double> get wu =>
      _wu ??= GeneratedColumn<double>('wu', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns =>
      [lastUpdated, EquipmentType, databaseID, id, trNo, serialNo, uv, vw, wu];
  @override
  String get aliasedName => _alias ?? 'dg_wr_local_datasource_impl';
  @override
  String get actualTableName => 'dg_wr_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<DgWrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('last_updated')) {
      context.handle(
          _lastUpdatedMeta,
          lastUpdated.isAcceptableOrUnknown(
              data['last_updated'], _lastUpdatedMeta));
    }
    if (data.containsKey('equipment_type')) {
      context.handle(
          _EquipmentTypeMeta,
          EquipmentType.isAcceptableOrUnknown(
              data['equipment_type'], _EquipmentTypeMeta));
    } else if (isInserting) {
      context.missing(_EquipmentTypeMeta);
    }
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('uv')) {
      context.handle(_uvMeta, uv.isAcceptableOrUnknown(data['uv'], _uvMeta));
    } else if (isInserting) {
      context.missing(_uvMeta);
    }
    if (data.containsKey('vw')) {
      context.handle(_vwMeta, vw.isAcceptableOrUnknown(data['vw'], _vwMeta));
    } else if (isInserting) {
      context.missing(_vwMeta);
    }
    if (data.containsKey('wu')) {
      context.handle(_wuMeta, wu.isAcceptableOrUnknown(data['wu'], _wuMeta));
    } else if (isInserting) {
      context.missing(_wuMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DgWrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return DgWrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $DgWrLocalDatasourceImplTable createAlias(String alias) {
    return $DgWrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class TrLocalData extends DataClass implements Insertable<TrLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String serialNo;
  final String panel;
  final String make;
  final String rtype;
  final String auxVoltage;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  TrLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.serialNo,
      @required this.panel,
      @required this.make,
      @required this.rtype,
      @required this.auxVoltage,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory TrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return TrLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      rtype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rtype']),
      auxVoltage: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aux_voltage']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || rtype != null) {
      map['rtype'] = Variable<String>(rtype);
    }
    if (!nullToAbsent || auxVoltage != null) {
      map['aux_voltage'] = Variable<String>(auxVoltage);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  TrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return TrLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      rtype:
          rtype == null && nullToAbsent ? const Value.absent() : Value(rtype),
      auxVoltage: auxVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(auxVoltage),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory TrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TrLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      panel: serializer.fromJson<String>(json['panel']),
      make: serializer.fromJson<String>(json['make']),
      rtype: serializer.fromJson<String>(json['rtype']),
      auxVoltage: serializer.fromJson<String>(json['auxVoltage']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'serialNo': serializer.toJson<String>(serialNo),
      'panel': serializer.toJson<String>(panel),
      'make': serializer.toJson<String>(make),
      'rtype': serializer.toJson<String>(rtype),
      'auxVoltage': serializer.toJson<String>(auxVoltage),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  TrLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String serialNo,
          String panel,
          String make,
          String rtype,
          String auxVoltage,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      TrLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        serialNo: serialNo ?? this.serialNo,
        panel: panel ?? this.panel,
        make: make ?? this.make,
        rtype: rtype ?? this.rtype,
        auxVoltage: auxVoltage ?? this.auxVoltage,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('TrLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      etype,
      trNo,
      designation,
      location,
      serialNo,
      panel,
      make,
      rtype,
      auxVoltage,
      dateOfTesting,
      updateDate,
      testedBy,
      verifiedBy,
      WitnessedBy);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TrLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.serialNo == this.serialNo &&
          other.panel == this.panel &&
          other.make == this.make &&
          other.rtype == this.rtype &&
          other.auxVoltage == this.auxVoltage &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class TrLocalDatasourceImplCompanion extends UpdateCompanion<TrLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> serialNo;
  final Value<String> panel;
  final Value<String> make;
  final Value<String> rtype;
  final Value<String> auxVoltage;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const TrLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.panel = const Value.absent(),
    this.make = const Value.absent(),
    this.rtype = const Value.absent(),
    this.auxVoltage = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  TrLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String serialNo,
    @required String panel,
    @required String make,
    @required String rtype,
    @required String auxVoltage,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        serialNo = Value(serialNo),
        panel = Value(panel),
        make = Value(make),
        rtype = Value(rtype),
        auxVoltage = Value(auxVoltage),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<TrLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> serialNo,
    Expression<String> panel,
    Expression<String> make,
    Expression<String> rtype,
    Expression<String> auxVoltage,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (serialNo != null) 'serial_no': serialNo,
      if (panel != null) 'panel': panel,
      if (make != null) 'make': make,
      if (rtype != null) 'rtype': rtype,
      if (auxVoltage != null) 'aux_voltage': auxVoltage,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  TrLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> serialNo,
      Value<String> panel,
      Value<String> make,
      Value<String> rtype,
      Value<String> auxVoltage,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return TrLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      serialNo: serialNo ?? this.serialNo,
      panel: panel ?? this.panel,
      make: make ?? this.make,
      rtype: rtype ?? this.rtype,
      auxVoltage: auxVoltage ?? this.auxVoltage,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (rtype.present) {
      map['rtype'] = Variable<String>(rtype.value);
    }
    if (auxVoltage.present) {
      map['aux_voltage'] = Variable<String>(auxVoltage.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TrLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $TrLocalDatasourceImplTable extends TrLocalDatasourceImpl
    with TableInfo<$TrLocalDatasourceImplTable, TrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $TrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rtypeMeta = const VerificationMeta('rtype');
  GeneratedColumn<String> _rtype;
  @override
  GeneratedColumn<String> get rtype => _rtype ??= GeneratedColumn<String>(
      'rtype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _auxVoltageMeta = const VerificationMeta('auxVoltage');
  GeneratedColumn<String> _auxVoltage;
  @override
  GeneratedColumn<String> get auxVoltage =>
      _auxVoltage ??= GeneratedColumn<String>('aux_voltage', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        panel,
        make,
        rtype,
        auxVoltage,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'tr_local_datasource_impl';
  @override
  String get actualTableName => 'tr_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<TrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('rtype')) {
      context.handle(
          _rtypeMeta, rtype.isAcceptableOrUnknown(data['rtype'], _rtypeMeta));
    } else if (isInserting) {
      context.missing(_rtypeMeta);
    }
    if (data.containsKey('aux_voltage')) {
      context.handle(
          _auxVoltageMeta,
          auxVoltage.isAcceptableOrUnknown(
              data['aux_voltage'], _auxVoltageMeta));
    } else if (isInserting) {
      context.missing(_auxVoltageMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return TrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TrLocalDatasourceImplTable createAlias(String alias) {
    return $TrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class TrPacLocalData extends DataClass implements Insertable<TrPacLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double time;
  final double coilResistenace;
  final double relayOprTime;
  final String equipmentUsed;
  final DateTime updateDate;
  TrPacLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.time,
      @required this.coilResistenace,
      @required this.relayOprTime,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory TrPacLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return TrPacLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      time: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}time']),
      coilResistenace: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}coil_resistenace']),
      relayOprTime: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}relay_opr_time']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || time != null) {
      map['time'] = Variable<double>(time);
    }
    if (!nullToAbsent || coilResistenace != null) {
      map['coil_resistenace'] = Variable<double>(coilResistenace);
    }
    if (!nullToAbsent || relayOprTime != null) {
      map['relay_opr_time'] = Variable<double>(relayOprTime);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  TrPacLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return TrPacLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      time: time == null && nullToAbsent ? const Value.absent() : Value(time),
      coilResistenace: coilResistenace == null && nullToAbsent
          ? const Value.absent()
          : Value(coilResistenace),
      relayOprTime: relayOprTime == null && nullToAbsent
          ? const Value.absent()
          : Value(relayOprTime),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory TrPacLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TrPacLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      time: serializer.fromJson<double>(json['time']),
      coilResistenace: serializer.fromJson<double>(json['coilResistenace']),
      relayOprTime: serializer.fromJson<double>(json['relayOprTime']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'time': serializer.toJson<double>(time),
      'coilResistenace': serializer.toJson<double>(coilResistenace),
      'relayOprTime': serializer.toJson<double>(relayOprTime),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  TrPacLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double time,
          double coilResistenace,
          double relayOprTime,
          String equipmentUsed,
          DateTime updateDate}) =>
      TrPacLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        time: time ?? this.time,
        coilResistenace: coilResistenace ?? this.coilResistenace,
        relayOprTime: relayOprTime ?? this.relayOprTime,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('TrPacLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('time: $time, ')
          ..write('coilResistenace: $coilResistenace, ')
          ..write('relayOprTime: $relayOprTime, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(databaseID, id, trNo, serialNo, time,
      coilResistenace, relayOprTime, equipmentUsed, updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TrPacLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.time == this.time &&
          other.coilResistenace == this.coilResistenace &&
          other.relayOprTime == this.relayOprTime &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class TrPacLocalDatasourceImplCompanion
    extends UpdateCompanion<TrPacLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> time;
  final Value<double> coilResistenace;
  final Value<double> relayOprTime;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const TrPacLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.time = const Value.absent(),
    this.coilResistenace = const Value.absent(),
    this.relayOprTime = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  TrPacLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double time,
    @required double coilResistenace,
    @required double relayOprTime,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        time = Value(time),
        coilResistenace = Value(coilResistenace),
        relayOprTime = Value(relayOprTime),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<TrPacLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> time,
    Expression<double> coilResistenace,
    Expression<double> relayOprTime,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (time != null) 'time': time,
      if (coilResistenace != null) 'coil_resistenace': coilResistenace,
      if (relayOprTime != null) 'relay_opr_time': relayOprTime,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  TrPacLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> time,
      Value<double> coilResistenace,
      Value<double> relayOprTime,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return TrPacLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      time: time ?? this.time,
      coilResistenace: coilResistenace ?? this.coilResistenace,
      relayOprTime: relayOprTime ?? this.relayOprTime,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (time.present) {
      map['time'] = Variable<double>(time.value);
    }
    if (coilResistenace.present) {
      map['coil_resistenace'] = Variable<double>(coilResistenace.value);
    }
    if (relayOprTime.present) {
      map['relay_opr_time'] = Variable<double>(relayOprTime.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TrPacLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('time: $time, ')
          ..write('coilResistenace: $coilResistenace, ')
          ..write('relayOprTime: $relayOprTime, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $TrPacLocalDatasourceImplTable extends TrPacLocalDatasourceImpl
    with TableInfo<$TrPacLocalDatasourceImplTable, TrPacLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $TrPacLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _timeMeta = const VerificationMeta('time');
  GeneratedColumn<double> _time;
  @override
  GeneratedColumn<double> get time =>
      _time ??= GeneratedColumn<double>('time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _coilResistenaceMeta =
      const VerificationMeta('coilResistenace');
  GeneratedColumn<double> _coilResistenace;
  @override
  GeneratedColumn<double> get coilResistenace => _coilResistenace ??=
      GeneratedColumn<double>('coil_resistenace', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _relayOprTimeMeta =
      const VerificationMeta('relayOprTime');
  GeneratedColumn<double> _relayOprTime;
  @override
  GeneratedColumn<double> get relayOprTime => _relayOprTime ??=
      GeneratedColumn<double>('relay_opr_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        time,
        coilResistenace,
        relayOprTime,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'tr_pac_local_datasource_impl';
  @override
  String get actualTableName => 'tr_pac_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<TrPacLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('time')) {
      context.handle(
          _timeMeta, time.isAcceptableOrUnknown(data['time'], _timeMeta));
    } else if (isInserting) {
      context.missing(_timeMeta);
    }
    if (data.containsKey('coil_resistenace')) {
      context.handle(
          _coilResistenaceMeta,
          coilResistenace.isAcceptableOrUnknown(
              data['coil_resistenace'], _coilResistenaceMeta));
    } else if (isInserting) {
      context.missing(_coilResistenaceMeta);
    }
    if (data.containsKey('relay_opr_time')) {
      context.handle(
          _relayOprTimeMeta,
          relayOprTime.isAcceptableOrUnknown(
              data['relay_opr_time'], _relayOprTimeMeta));
    } else if (isInserting) {
      context.missing(_relayOprTimeMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TrPacLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return TrPacLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TrPacLocalDatasourceImplTable createAlias(String alias) {
    return $TrPacLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class VrLocalData extends DataClass implements Insertable<VrLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String serialNo;
  final String panel;
  final String make;
  final String rtype;
  final String auxVoltage;
  final String ptRatio;
  final String Vn;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  VrLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.serialNo,
      @required this.panel,
      @required this.make,
      @required this.rtype,
      @required this.auxVoltage,
      @required this.ptRatio,
      @required this.Vn,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory VrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return VrLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      rtype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rtype']),
      auxVoltage: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aux_voltage']),
      ptRatio: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pt_ratio']),
      Vn: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}vn']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || rtype != null) {
      map['rtype'] = Variable<String>(rtype);
    }
    if (!nullToAbsent || auxVoltage != null) {
      map['aux_voltage'] = Variable<String>(auxVoltage);
    }
    if (!nullToAbsent || ptRatio != null) {
      map['pt_ratio'] = Variable<String>(ptRatio);
    }
    if (!nullToAbsent || Vn != null) {
      map['vn'] = Variable<String>(Vn);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  VrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return VrLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      rtype:
          rtype == null && nullToAbsent ? const Value.absent() : Value(rtype),
      auxVoltage: auxVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(auxVoltage),
      ptRatio: ptRatio == null && nullToAbsent
          ? const Value.absent()
          : Value(ptRatio),
      Vn: Vn == null && nullToAbsent ? const Value.absent() : Value(Vn),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory VrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return VrLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      panel: serializer.fromJson<String>(json['panel']),
      make: serializer.fromJson<String>(json['make']),
      rtype: serializer.fromJson<String>(json['rtype']),
      auxVoltage: serializer.fromJson<String>(json['auxVoltage']),
      ptRatio: serializer.fromJson<String>(json['ptRatio']),
      Vn: serializer.fromJson<String>(json['Vn']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'serialNo': serializer.toJson<String>(serialNo),
      'panel': serializer.toJson<String>(panel),
      'make': serializer.toJson<String>(make),
      'rtype': serializer.toJson<String>(rtype),
      'auxVoltage': serializer.toJson<String>(auxVoltage),
      'ptRatio': serializer.toJson<String>(ptRatio),
      'Vn': serializer.toJson<String>(Vn),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  VrLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String serialNo,
          String panel,
          String make,
          String rtype,
          String auxVoltage,
          String ptRatio,
          String Vn,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      VrLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        serialNo: serialNo ?? this.serialNo,
        panel: panel ?? this.panel,
        make: make ?? this.make,
        rtype: rtype ?? this.rtype,
        auxVoltage: auxVoltage ?? this.auxVoltage,
        ptRatio: ptRatio ?? this.ptRatio,
        Vn: Vn ?? this.Vn,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('VrLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('ptRatio: $ptRatio, ')
          ..write('Vn: $Vn, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      etype,
      trNo,
      designation,
      location,
      serialNo,
      panel,
      make,
      rtype,
      auxVoltage,
      ptRatio,
      Vn,
      dateOfTesting,
      updateDate,
      testedBy,
      verifiedBy,
      WitnessedBy);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is VrLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.serialNo == this.serialNo &&
          other.panel == this.panel &&
          other.make == this.make &&
          other.rtype == this.rtype &&
          other.auxVoltage == this.auxVoltage &&
          other.ptRatio == this.ptRatio &&
          other.Vn == this.Vn &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class VrLocalDatasourceImplCompanion extends UpdateCompanion<VrLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> serialNo;
  final Value<String> panel;
  final Value<String> make;
  final Value<String> rtype;
  final Value<String> auxVoltage;
  final Value<String> ptRatio;
  final Value<String> Vn;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const VrLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.panel = const Value.absent(),
    this.make = const Value.absent(),
    this.rtype = const Value.absent(),
    this.auxVoltage = const Value.absent(),
    this.ptRatio = const Value.absent(),
    this.Vn = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  VrLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String serialNo,
    @required String panel,
    @required String make,
    @required String rtype,
    @required String auxVoltage,
    @required String ptRatio,
    @required String Vn,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        serialNo = Value(serialNo),
        panel = Value(panel),
        make = Value(make),
        rtype = Value(rtype),
        auxVoltage = Value(auxVoltage),
        ptRatio = Value(ptRatio),
        Vn = Value(Vn),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<VrLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> serialNo,
    Expression<String> panel,
    Expression<String> make,
    Expression<String> rtype,
    Expression<String> auxVoltage,
    Expression<String> ptRatio,
    Expression<String> Vn,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (serialNo != null) 'serial_no': serialNo,
      if (panel != null) 'panel': panel,
      if (make != null) 'make': make,
      if (rtype != null) 'rtype': rtype,
      if (auxVoltage != null) 'aux_voltage': auxVoltage,
      if (ptRatio != null) 'pt_ratio': ptRatio,
      if (Vn != null) 'vn': Vn,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  VrLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> serialNo,
      Value<String> panel,
      Value<String> make,
      Value<String> rtype,
      Value<String> auxVoltage,
      Value<String> ptRatio,
      Value<String> Vn,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return VrLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      serialNo: serialNo ?? this.serialNo,
      panel: panel ?? this.panel,
      make: make ?? this.make,
      rtype: rtype ?? this.rtype,
      auxVoltage: auxVoltage ?? this.auxVoltage,
      ptRatio: ptRatio ?? this.ptRatio,
      Vn: Vn ?? this.Vn,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (rtype.present) {
      map['rtype'] = Variable<String>(rtype.value);
    }
    if (auxVoltage.present) {
      map['aux_voltage'] = Variable<String>(auxVoltage.value);
    }
    if (ptRatio.present) {
      map['pt_ratio'] = Variable<String>(ptRatio.value);
    }
    if (Vn.present) {
      map['vn'] = Variable<String>(Vn.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('VrLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('ptRatio: $ptRatio, ')
          ..write('Vn: $Vn, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $VrLocalDatasourceImplTable extends VrLocalDatasourceImpl
    with TableInfo<$VrLocalDatasourceImplTable, VrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $VrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rtypeMeta = const VerificationMeta('rtype');
  GeneratedColumn<String> _rtype;
  @override
  GeneratedColumn<String> get rtype => _rtype ??= GeneratedColumn<String>(
      'rtype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _auxVoltageMeta = const VerificationMeta('auxVoltage');
  GeneratedColumn<String> _auxVoltage;
  @override
  GeneratedColumn<String> get auxVoltage =>
      _auxVoltage ??= GeneratedColumn<String>('aux_voltage', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _ptRatioMeta = const VerificationMeta('ptRatio');
  GeneratedColumn<String> _ptRatio;
  @override
  GeneratedColumn<String> get ptRatio => _ptRatio ??= GeneratedColumn<String>(
      'pt_ratio', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _VnMeta = const VerificationMeta('Vn');
  GeneratedColumn<String> _Vn;
  @override
  GeneratedColumn<String> get Vn => _Vn ??= GeneratedColumn<String>(
      'vn', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        panel,
        make,
        rtype,
        auxVoltage,
        ptRatio,
        Vn,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'vr_local_datasource_impl';
  @override
  String get actualTableName => 'vr_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<VrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('rtype')) {
      context.handle(
          _rtypeMeta, rtype.isAcceptableOrUnknown(data['rtype'], _rtypeMeta));
    } else if (isInserting) {
      context.missing(_rtypeMeta);
    }
    if (data.containsKey('aux_voltage')) {
      context.handle(
          _auxVoltageMeta,
          auxVoltage.isAcceptableOrUnknown(
              data['aux_voltage'], _auxVoltageMeta));
    } else if (isInserting) {
      context.missing(_auxVoltageMeta);
    }
    if (data.containsKey('pt_ratio')) {
      context.handle(_ptRatioMeta,
          ptRatio.isAcceptableOrUnknown(data['pt_ratio'], _ptRatioMeta));
    } else if (isInserting) {
      context.missing(_ptRatioMeta);
    }
    if (data.containsKey('vn')) {
      context.handle(_VnMeta, Vn.isAcceptableOrUnknown(data['vn'], _VnMeta));
    } else if (isInserting) {
      context.missing(_VnMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  VrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return VrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $VrLocalDatasourceImplTable createAlias(String alias) {
    return $VrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class VrPacLocalData extends DataClass implements Insertable<VrPacLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double plugSetting;
  final double TMS;
  final double plugSettingMul1;
  final double plugSettingMul2;
  final double coilResistanace;
  final double relayOprTime_1x;
  final double relayOprTime_3x;
  final String equipmentUsed;
  final DateTime updateDate;
  VrPacLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.plugSetting,
      @required this.TMS,
      @required this.plugSettingMul1,
      @required this.plugSettingMul2,
      @required this.coilResistanace,
      @required this.relayOprTime_1x,
      @required this.relayOprTime_3x,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory VrPacLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return VrPacLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      plugSetting: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}plug_setting']),
      TMS: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tms']),
      plugSettingMul1: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}plug_setting_mul1']),
      plugSettingMul2: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}plug_setting_mul2']),
      coilResistanace: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}coil_resistanace']),
      relayOprTime_1x: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}relay_opr_time_1x']),
      relayOprTime_3x: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}relay_opr_time_3x']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || plugSetting != null) {
      map['plug_setting'] = Variable<double>(plugSetting);
    }
    if (!nullToAbsent || TMS != null) {
      map['tms'] = Variable<double>(TMS);
    }
    if (!nullToAbsent || plugSettingMul1 != null) {
      map['plug_setting_mul1'] = Variable<double>(plugSettingMul1);
    }
    if (!nullToAbsent || plugSettingMul2 != null) {
      map['plug_setting_mul2'] = Variable<double>(plugSettingMul2);
    }
    if (!nullToAbsent || coilResistanace != null) {
      map['coil_resistanace'] = Variable<double>(coilResistanace);
    }
    if (!nullToAbsent || relayOprTime_1x != null) {
      map['relay_opr_time_1x'] = Variable<double>(relayOprTime_1x);
    }
    if (!nullToAbsent || relayOprTime_3x != null) {
      map['relay_opr_time_3x'] = Variable<double>(relayOprTime_3x);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  VrPacLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return VrPacLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      plugSetting: plugSetting == null && nullToAbsent
          ? const Value.absent()
          : Value(plugSetting),
      TMS: TMS == null && nullToAbsent ? const Value.absent() : Value(TMS),
      plugSettingMul1: plugSettingMul1 == null && nullToAbsent
          ? const Value.absent()
          : Value(plugSettingMul1),
      plugSettingMul2: plugSettingMul2 == null && nullToAbsent
          ? const Value.absent()
          : Value(plugSettingMul2),
      coilResistanace: coilResistanace == null && nullToAbsent
          ? const Value.absent()
          : Value(coilResistanace),
      relayOprTime_1x: relayOprTime_1x == null && nullToAbsent
          ? const Value.absent()
          : Value(relayOprTime_1x),
      relayOprTime_3x: relayOprTime_3x == null && nullToAbsent
          ? const Value.absent()
          : Value(relayOprTime_3x),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory VrPacLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return VrPacLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      plugSetting: serializer.fromJson<double>(json['plugSetting']),
      TMS: serializer.fromJson<double>(json['TMS']),
      plugSettingMul1: serializer.fromJson<double>(json['plugSettingMul1']),
      plugSettingMul2: serializer.fromJson<double>(json['plugSettingMul2']),
      coilResistanace: serializer.fromJson<double>(json['coilResistanace']),
      relayOprTime_1x: serializer.fromJson<double>(json['relayOprTime_1x']),
      relayOprTime_3x: serializer.fromJson<double>(json['relayOprTime_3x']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'plugSetting': serializer.toJson<double>(plugSetting),
      'TMS': serializer.toJson<double>(TMS),
      'plugSettingMul1': serializer.toJson<double>(plugSettingMul1),
      'plugSettingMul2': serializer.toJson<double>(plugSettingMul2),
      'coilResistanace': serializer.toJson<double>(coilResistanace),
      'relayOprTime_1x': serializer.toJson<double>(relayOprTime_1x),
      'relayOprTime_3x': serializer.toJson<double>(relayOprTime_3x),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  VrPacLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double plugSetting,
          double TMS,
          double plugSettingMul1,
          double plugSettingMul2,
          double coilResistanace,
          double relayOprTime_1x,
          double relayOprTime_3x,
          String equipmentUsed,
          DateTime updateDate}) =>
      VrPacLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        plugSetting: plugSetting ?? this.plugSetting,
        TMS: TMS ?? this.TMS,
        plugSettingMul1: plugSettingMul1 ?? this.plugSettingMul1,
        plugSettingMul2: plugSettingMul2 ?? this.plugSettingMul2,
        coilResistanace: coilResistanace ?? this.coilResistanace,
        relayOprTime_1x: relayOprTime_1x ?? this.relayOprTime_1x,
        relayOprTime_3x: relayOprTime_3x ?? this.relayOprTime_3x,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('VrPacLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('plugSetting: $plugSetting, ')
          ..write('TMS: $TMS, ')
          ..write('plugSettingMul1: $plugSettingMul1, ')
          ..write('plugSettingMul2: $plugSettingMul2, ')
          ..write('coilResistanace: $coilResistanace, ')
          ..write('relayOprTime_1x: $relayOprTime_1x, ')
          ..write('relayOprTime_3x: $relayOprTime_3x, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      plugSetting,
      TMS,
      plugSettingMul1,
      plugSettingMul2,
      coilResistanace,
      relayOprTime_1x,
      relayOprTime_3x,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is VrPacLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.plugSetting == this.plugSetting &&
          other.TMS == this.TMS &&
          other.plugSettingMul1 == this.plugSettingMul1 &&
          other.plugSettingMul2 == this.plugSettingMul2 &&
          other.coilResistanace == this.coilResistanace &&
          other.relayOprTime_1x == this.relayOprTime_1x &&
          other.relayOprTime_3x == this.relayOprTime_3x &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class VrPacLocalDatasourceImplCompanion
    extends UpdateCompanion<VrPacLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> plugSetting;
  final Value<double> TMS;
  final Value<double> plugSettingMul1;
  final Value<double> plugSettingMul2;
  final Value<double> coilResistanace;
  final Value<double> relayOprTime_1x;
  final Value<double> relayOprTime_3x;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const VrPacLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.plugSetting = const Value.absent(),
    this.TMS = const Value.absent(),
    this.plugSettingMul1 = const Value.absent(),
    this.plugSettingMul2 = const Value.absent(),
    this.coilResistanace = const Value.absent(),
    this.relayOprTime_1x = const Value.absent(),
    this.relayOprTime_3x = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  VrPacLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double plugSetting,
    @required double TMS,
    @required double plugSettingMul1,
    @required double plugSettingMul2,
    @required double coilResistanace,
    @required double relayOprTime_1x,
    @required double relayOprTime_3x,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        plugSetting = Value(plugSetting),
        TMS = Value(TMS),
        plugSettingMul1 = Value(plugSettingMul1),
        plugSettingMul2 = Value(plugSettingMul2),
        coilResistanace = Value(coilResistanace),
        relayOprTime_1x = Value(relayOprTime_1x),
        relayOprTime_3x = Value(relayOprTime_3x),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<VrPacLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> plugSetting,
    Expression<double> TMS,
    Expression<double> plugSettingMul1,
    Expression<double> plugSettingMul2,
    Expression<double> coilResistanace,
    Expression<double> relayOprTime_1x,
    Expression<double> relayOprTime_3x,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (plugSetting != null) 'plug_setting': plugSetting,
      if (TMS != null) 'tms': TMS,
      if (plugSettingMul1 != null) 'plug_setting_mul1': plugSettingMul1,
      if (plugSettingMul2 != null) 'plug_setting_mul2': plugSettingMul2,
      if (coilResistanace != null) 'coil_resistanace': coilResistanace,
      if (relayOprTime_1x != null) 'relay_opr_time_1x': relayOprTime_1x,
      if (relayOprTime_3x != null) 'relay_opr_time_3x': relayOprTime_3x,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  VrPacLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> plugSetting,
      Value<double> TMS,
      Value<double> plugSettingMul1,
      Value<double> plugSettingMul2,
      Value<double> coilResistanace,
      Value<double> relayOprTime_1x,
      Value<double> relayOprTime_3x,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return VrPacLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      plugSetting: plugSetting ?? this.plugSetting,
      TMS: TMS ?? this.TMS,
      plugSettingMul1: plugSettingMul1 ?? this.plugSettingMul1,
      plugSettingMul2: plugSettingMul2 ?? this.plugSettingMul2,
      coilResistanace: coilResistanace ?? this.coilResistanace,
      relayOprTime_1x: relayOprTime_1x ?? this.relayOprTime_1x,
      relayOprTime_3x: relayOprTime_3x ?? this.relayOprTime_3x,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (plugSetting.present) {
      map['plug_setting'] = Variable<double>(plugSetting.value);
    }
    if (TMS.present) {
      map['tms'] = Variable<double>(TMS.value);
    }
    if (plugSettingMul1.present) {
      map['plug_setting_mul1'] = Variable<double>(plugSettingMul1.value);
    }
    if (plugSettingMul2.present) {
      map['plug_setting_mul2'] = Variable<double>(plugSettingMul2.value);
    }
    if (coilResistanace.present) {
      map['coil_resistanace'] = Variable<double>(coilResistanace.value);
    }
    if (relayOprTime_1x.present) {
      map['relay_opr_time_1x'] = Variable<double>(relayOprTime_1x.value);
    }
    if (relayOprTime_3x.present) {
      map['relay_opr_time_3x'] = Variable<double>(relayOprTime_3x.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('VrPacLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('plugSetting: $plugSetting, ')
          ..write('TMS: $TMS, ')
          ..write('plugSettingMul1: $plugSettingMul1, ')
          ..write('plugSettingMul2: $plugSettingMul2, ')
          ..write('coilResistanace: $coilResistanace, ')
          ..write('relayOprTime_1x: $relayOprTime_1x, ')
          ..write('relayOprTime_3x: $relayOprTime_3x, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $VrPacLocalDatasourceImplTable extends VrPacLocalDatasourceImpl
    with TableInfo<$VrPacLocalDatasourceImplTable, VrPacLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $VrPacLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _plugSettingMeta =
      const VerificationMeta('plugSetting');
  GeneratedColumn<double> _plugSetting;
  @override
  GeneratedColumn<double> get plugSetting => _plugSetting ??=
      GeneratedColumn<double>('plug_setting', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _TMSMeta = const VerificationMeta('TMS');
  GeneratedColumn<double> _TMS;
  @override
  GeneratedColumn<double> get TMS =>
      _TMS ??= GeneratedColumn<double>('tms', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _plugSettingMul1Meta =
      const VerificationMeta('plugSettingMul1');
  GeneratedColumn<double> _plugSettingMul1;
  @override
  GeneratedColumn<double> get plugSettingMul1 => _plugSettingMul1 ??=
      GeneratedColumn<double>('plug_setting_mul1', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _plugSettingMul2Meta =
      const VerificationMeta('plugSettingMul2');
  GeneratedColumn<double> _plugSettingMul2;
  @override
  GeneratedColumn<double> get plugSettingMul2 => _plugSettingMul2 ??=
      GeneratedColumn<double>('plug_setting_mul2', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _coilResistanaceMeta =
      const VerificationMeta('coilResistanace');
  GeneratedColumn<double> _coilResistanace;
  @override
  GeneratedColumn<double> get coilResistanace => _coilResistanace ??=
      GeneratedColumn<double>('coil_resistanace', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _relayOprTime_1xMeta =
      const VerificationMeta('relayOprTime_1x');
  GeneratedColumn<double> _relayOprTime_1x;
  @override
  GeneratedColumn<double> get relayOprTime_1x => _relayOprTime_1x ??=
      GeneratedColumn<double>('relay_opr_time_1x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _relayOprTime_3xMeta =
      const VerificationMeta('relayOprTime_3x');
  GeneratedColumn<double> _relayOprTime_3x;
  @override
  GeneratedColumn<double> get relayOprTime_3x => _relayOprTime_3x ??=
      GeneratedColumn<double>('relay_opr_time_3x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        plugSetting,
        TMS,
        plugSettingMul1,
        plugSettingMul2,
        coilResistanace,
        relayOprTime_1x,
        relayOprTime_3x,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'vr_pac_local_datasource_impl';
  @override
  String get actualTableName => 'vr_pac_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<VrPacLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('plug_setting')) {
      context.handle(
          _plugSettingMeta,
          plugSetting.isAcceptableOrUnknown(
              data['plug_setting'], _plugSettingMeta));
    } else if (isInserting) {
      context.missing(_plugSettingMeta);
    }
    if (data.containsKey('tms')) {
      context.handle(
          _TMSMeta, TMS.isAcceptableOrUnknown(data['tms'], _TMSMeta));
    } else if (isInserting) {
      context.missing(_TMSMeta);
    }
    if (data.containsKey('plug_setting_mul1')) {
      context.handle(
          _plugSettingMul1Meta,
          plugSettingMul1.isAcceptableOrUnknown(
              data['plug_setting_mul1'], _plugSettingMul1Meta));
    } else if (isInserting) {
      context.missing(_plugSettingMul1Meta);
    }
    if (data.containsKey('plug_setting_mul2')) {
      context.handle(
          _plugSettingMul2Meta,
          plugSettingMul2.isAcceptableOrUnknown(
              data['plug_setting_mul2'], _plugSettingMul2Meta));
    } else if (isInserting) {
      context.missing(_plugSettingMul2Meta);
    }
    if (data.containsKey('coil_resistanace')) {
      context.handle(
          _coilResistanaceMeta,
          coilResistanace.isAcceptableOrUnknown(
              data['coil_resistanace'], _coilResistanaceMeta));
    } else if (isInserting) {
      context.missing(_coilResistanaceMeta);
    }
    if (data.containsKey('relay_opr_time_1x')) {
      context.handle(
          _relayOprTime_1xMeta,
          relayOprTime_1x.isAcceptableOrUnknown(
              data['relay_opr_time_1x'], _relayOprTime_1xMeta));
    } else if (isInserting) {
      context.missing(_relayOprTime_1xMeta);
    }
    if (data.containsKey('relay_opr_time_3x')) {
      context.handle(
          _relayOprTime_3xMeta,
          relayOprTime_3x.isAcceptableOrUnknown(
              data['relay_opr_time_3x'], _relayOprTime_3xMeta));
    } else if (isInserting) {
      context.missing(_relayOprTime_3xMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  VrPacLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return VrPacLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $VrPacLocalDatasourceImplTable createAlias(String alias) {
    return $VrPacLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EfElrLocalData extends DataClass implements Insertable<EfElrLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String serialNo;
  final String panel;
  final String make;
  final String rtype;
  final String auxVoltage;
  final String ctRatio;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  EfElrLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.serialNo,
      @required this.panel,
      @required this.make,
      @required this.rtype,
      @required this.auxVoltage,
      @required this.ctRatio,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory EfElrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EfElrLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      rtype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rtype']),
      auxVoltage: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aux_voltage']),
      ctRatio: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ct_ratio']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || rtype != null) {
      map['rtype'] = Variable<String>(rtype);
    }
    if (!nullToAbsent || auxVoltage != null) {
      map['aux_voltage'] = Variable<String>(auxVoltage);
    }
    if (!nullToAbsent || ctRatio != null) {
      map['ct_ratio'] = Variable<String>(ctRatio);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  EfElrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EfElrLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      rtype:
          rtype == null && nullToAbsent ? const Value.absent() : Value(rtype),
      auxVoltage: auxVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(auxVoltage),
      ctRatio: ctRatio == null && nullToAbsent
          ? const Value.absent()
          : Value(ctRatio),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory EfElrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EfElrLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      panel: serializer.fromJson<String>(json['panel']),
      make: serializer.fromJson<String>(json['make']),
      rtype: serializer.fromJson<String>(json['rtype']),
      auxVoltage: serializer.fromJson<String>(json['auxVoltage']),
      ctRatio: serializer.fromJson<String>(json['ctRatio']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'serialNo': serializer.toJson<String>(serialNo),
      'panel': serializer.toJson<String>(panel),
      'make': serializer.toJson<String>(make),
      'rtype': serializer.toJson<String>(rtype),
      'auxVoltage': serializer.toJson<String>(auxVoltage),
      'ctRatio': serializer.toJson<String>(ctRatio),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  EfElrLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String serialNo,
          String panel,
          String make,
          String rtype,
          String auxVoltage,
          String ctRatio,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      EfElrLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        serialNo: serialNo ?? this.serialNo,
        panel: panel ?? this.panel,
        make: make ?? this.make,
        rtype: rtype ?? this.rtype,
        auxVoltage: auxVoltage ?? this.auxVoltage,
        ctRatio: ctRatio ?? this.ctRatio,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('EfElrLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('ctRatio: $ctRatio, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      etype,
      trNo,
      designation,
      location,
      serialNo,
      panel,
      make,
      rtype,
      auxVoltage,
      ctRatio,
      dateOfTesting,
      updateDate,
      testedBy,
      verifiedBy,
      WitnessedBy);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EfElrLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.serialNo == this.serialNo &&
          other.panel == this.panel &&
          other.make == this.make &&
          other.rtype == this.rtype &&
          other.auxVoltage == this.auxVoltage &&
          other.ctRatio == this.ctRatio &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class EfElrLocalDatasourceImplCompanion
    extends UpdateCompanion<EfElrLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> serialNo;
  final Value<String> panel;
  final Value<String> make;
  final Value<String> rtype;
  final Value<String> auxVoltage;
  final Value<String> ctRatio;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const EfElrLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.panel = const Value.absent(),
    this.make = const Value.absent(),
    this.rtype = const Value.absent(),
    this.auxVoltage = const Value.absent(),
    this.ctRatio = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  EfElrLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String serialNo,
    @required String panel,
    @required String make,
    @required String rtype,
    @required String auxVoltage,
    @required String ctRatio,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        serialNo = Value(serialNo),
        panel = Value(panel),
        make = Value(make),
        rtype = Value(rtype),
        auxVoltage = Value(auxVoltage),
        ctRatio = Value(ctRatio),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<EfElrLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> serialNo,
    Expression<String> panel,
    Expression<String> make,
    Expression<String> rtype,
    Expression<String> auxVoltage,
    Expression<String> ctRatio,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (serialNo != null) 'serial_no': serialNo,
      if (panel != null) 'panel': panel,
      if (make != null) 'make': make,
      if (rtype != null) 'rtype': rtype,
      if (auxVoltage != null) 'aux_voltage': auxVoltage,
      if (ctRatio != null) 'ct_ratio': ctRatio,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  EfElrLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> serialNo,
      Value<String> panel,
      Value<String> make,
      Value<String> rtype,
      Value<String> auxVoltage,
      Value<String> ctRatio,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return EfElrLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      serialNo: serialNo ?? this.serialNo,
      panel: panel ?? this.panel,
      make: make ?? this.make,
      rtype: rtype ?? this.rtype,
      auxVoltage: auxVoltage ?? this.auxVoltage,
      ctRatio: ctRatio ?? this.ctRatio,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (rtype.present) {
      map['rtype'] = Variable<String>(rtype.value);
    }
    if (auxVoltage.present) {
      map['aux_voltage'] = Variable<String>(auxVoltage.value);
    }
    if (ctRatio.present) {
      map['ct_ratio'] = Variable<String>(ctRatio.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EfElrLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo: $serialNo, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('ctRatio: $ctRatio, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $EfElrLocalDatasourceImplTable extends EfElrLocalDatasourceImpl
    with TableInfo<$EfElrLocalDatasourceImplTable, EfElrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EfElrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rtypeMeta = const VerificationMeta('rtype');
  GeneratedColumn<String> _rtype;
  @override
  GeneratedColumn<String> get rtype => _rtype ??= GeneratedColumn<String>(
      'rtype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _auxVoltageMeta = const VerificationMeta('auxVoltage');
  GeneratedColumn<String> _auxVoltage;
  @override
  GeneratedColumn<String> get auxVoltage =>
      _auxVoltage ??= GeneratedColumn<String>('aux_voltage', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _ctRatioMeta = const VerificationMeta('ctRatio');
  GeneratedColumn<String> _ctRatio;
  @override
  GeneratedColumn<String> get ctRatio => _ctRatio ??= GeneratedColumn<String>(
      'ct_ratio', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        panel,
        make,
        rtype,
        auxVoltage,
        ctRatio,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'ef_elr_local_datasource_impl';
  @override
  String get actualTableName => 'ef_elr_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<EfElrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('rtype')) {
      context.handle(
          _rtypeMeta, rtype.isAcceptableOrUnknown(data['rtype'], _rtypeMeta));
    } else if (isInserting) {
      context.missing(_rtypeMeta);
    }
    if (data.containsKey('aux_voltage')) {
      context.handle(
          _auxVoltageMeta,
          auxVoltage.isAcceptableOrUnknown(
              data['aux_voltage'], _auxVoltageMeta));
    } else if (isInserting) {
      context.missing(_auxVoltageMeta);
    }
    if (data.containsKey('ct_ratio')) {
      context.handle(_ctRatioMeta,
          ctRatio.isAcceptableOrUnknown(data['ct_ratio'], _ctRatioMeta));
    } else if (isInserting) {
      context.missing(_ctRatioMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EfElrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EfElrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EfElrLocalDatasourceImplTable createAlias(String alias) {
    return $EfElrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class EfElrPacLocalData extends DataClass
    implements Insertable<EfElrPacLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double plugSetting;
  final double TMS;
  final double plugSetting_Hi;
  final double time;
  final double plugSettingMul_2x;
  final double plugSettingMul_5x;
  final double coilResistanace;
  final double pickupCurrent;
  final double relayOprTime_2x;
  final double relayOprTime_5x;
  final double relayOprTime_Hi;
  final String equipmentUsed;
  final DateTime updateDate;
  EfElrPacLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.plugSetting,
      @required this.TMS,
      @required this.plugSetting_Hi,
      @required this.time,
      @required this.plugSettingMul_2x,
      @required this.plugSettingMul_5x,
      @required this.coilResistanace,
      @required this.pickupCurrent,
      @required this.relayOprTime_2x,
      @required this.relayOprTime_5x,
      @required this.relayOprTime_Hi,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory EfElrPacLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return EfElrPacLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      plugSetting: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}plug_setting']),
      TMS: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tms']),
      plugSetting_Hi: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}plug_setting_hi']),
      time: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}time']),
      plugSettingMul_2x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}plug_setting_mul_2x']),
      plugSettingMul_5x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}plug_setting_mul_5x']),
      coilResistanace: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}coil_resistanace']),
      pickupCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}pickup_current']),
      relayOprTime_2x: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}relay_opr_time_2x']),
      relayOprTime_5x: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}relay_opr_time_5x']),
      relayOprTime_Hi: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}relay_opr_time_hi']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || plugSetting != null) {
      map['plug_setting'] = Variable<double>(plugSetting);
    }
    if (!nullToAbsent || TMS != null) {
      map['tms'] = Variable<double>(TMS);
    }
    if (!nullToAbsent || plugSetting_Hi != null) {
      map['plug_setting_hi'] = Variable<double>(plugSetting_Hi);
    }
    if (!nullToAbsent || time != null) {
      map['time'] = Variable<double>(time);
    }
    if (!nullToAbsent || plugSettingMul_2x != null) {
      map['plug_setting_mul_2x'] = Variable<double>(plugSettingMul_2x);
    }
    if (!nullToAbsent || plugSettingMul_5x != null) {
      map['plug_setting_mul_5x'] = Variable<double>(plugSettingMul_5x);
    }
    if (!nullToAbsent || coilResistanace != null) {
      map['coil_resistanace'] = Variable<double>(coilResistanace);
    }
    if (!nullToAbsent || pickupCurrent != null) {
      map['pickup_current'] = Variable<double>(pickupCurrent);
    }
    if (!nullToAbsent || relayOprTime_2x != null) {
      map['relay_opr_time_2x'] = Variable<double>(relayOprTime_2x);
    }
    if (!nullToAbsent || relayOprTime_5x != null) {
      map['relay_opr_time_5x'] = Variable<double>(relayOprTime_5x);
    }
    if (!nullToAbsent || relayOprTime_Hi != null) {
      map['relay_opr_time_hi'] = Variable<double>(relayOprTime_Hi);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  EfElrPacLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return EfElrPacLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      plugSetting: plugSetting == null && nullToAbsent
          ? const Value.absent()
          : Value(plugSetting),
      TMS: TMS == null && nullToAbsent ? const Value.absent() : Value(TMS),
      plugSetting_Hi: plugSetting_Hi == null && nullToAbsent
          ? const Value.absent()
          : Value(plugSetting_Hi),
      time: time == null && nullToAbsent ? const Value.absent() : Value(time),
      plugSettingMul_2x: plugSettingMul_2x == null && nullToAbsent
          ? const Value.absent()
          : Value(plugSettingMul_2x),
      plugSettingMul_5x: plugSettingMul_5x == null && nullToAbsent
          ? const Value.absent()
          : Value(plugSettingMul_5x),
      coilResistanace: coilResistanace == null && nullToAbsent
          ? const Value.absent()
          : Value(coilResistanace),
      pickupCurrent: pickupCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(pickupCurrent),
      relayOprTime_2x: relayOprTime_2x == null && nullToAbsent
          ? const Value.absent()
          : Value(relayOprTime_2x),
      relayOprTime_5x: relayOprTime_5x == null && nullToAbsent
          ? const Value.absent()
          : Value(relayOprTime_5x),
      relayOprTime_Hi: relayOprTime_Hi == null && nullToAbsent
          ? const Value.absent()
          : Value(relayOprTime_Hi),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory EfElrPacLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EfElrPacLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      plugSetting: serializer.fromJson<double>(json['plugSetting']),
      TMS: serializer.fromJson<double>(json['TMS']),
      plugSetting_Hi: serializer.fromJson<double>(json['plugSetting_Hi']),
      time: serializer.fromJson<double>(json['time']),
      plugSettingMul_2x: serializer.fromJson<double>(json['plugSettingMul_2x']),
      plugSettingMul_5x: serializer.fromJson<double>(json['plugSettingMul_5x']),
      coilResistanace: serializer.fromJson<double>(json['coilResistanace']),
      pickupCurrent: serializer.fromJson<double>(json['pickupCurrent']),
      relayOprTime_2x: serializer.fromJson<double>(json['relayOprTime_2x']),
      relayOprTime_5x: serializer.fromJson<double>(json['relayOprTime_5x']),
      relayOprTime_Hi: serializer.fromJson<double>(json['relayOprTime_Hi']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'plugSetting': serializer.toJson<double>(plugSetting),
      'TMS': serializer.toJson<double>(TMS),
      'plugSetting_Hi': serializer.toJson<double>(plugSetting_Hi),
      'time': serializer.toJson<double>(time),
      'plugSettingMul_2x': serializer.toJson<double>(plugSettingMul_2x),
      'plugSettingMul_5x': serializer.toJson<double>(plugSettingMul_5x),
      'coilResistanace': serializer.toJson<double>(coilResistanace),
      'pickupCurrent': serializer.toJson<double>(pickupCurrent),
      'relayOprTime_2x': serializer.toJson<double>(relayOprTime_2x),
      'relayOprTime_5x': serializer.toJson<double>(relayOprTime_5x),
      'relayOprTime_Hi': serializer.toJson<double>(relayOprTime_Hi),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  EfElrPacLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double plugSetting,
          double TMS,
          double plugSetting_Hi,
          double time,
          double plugSettingMul_2x,
          double plugSettingMul_5x,
          double coilResistanace,
          double pickupCurrent,
          double relayOprTime_2x,
          double relayOprTime_5x,
          double relayOprTime_Hi,
          String equipmentUsed,
          DateTime updateDate}) =>
      EfElrPacLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        plugSetting: plugSetting ?? this.plugSetting,
        TMS: TMS ?? this.TMS,
        plugSetting_Hi: plugSetting_Hi ?? this.plugSetting_Hi,
        time: time ?? this.time,
        plugSettingMul_2x: plugSettingMul_2x ?? this.plugSettingMul_2x,
        plugSettingMul_5x: plugSettingMul_5x ?? this.plugSettingMul_5x,
        coilResistanace: coilResistanace ?? this.coilResistanace,
        pickupCurrent: pickupCurrent ?? this.pickupCurrent,
        relayOprTime_2x: relayOprTime_2x ?? this.relayOprTime_2x,
        relayOprTime_5x: relayOprTime_5x ?? this.relayOprTime_5x,
        relayOprTime_Hi: relayOprTime_Hi ?? this.relayOprTime_Hi,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('EfElrPacLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('plugSetting: $plugSetting, ')
          ..write('TMS: $TMS, ')
          ..write('plugSetting_Hi: $plugSetting_Hi, ')
          ..write('time: $time, ')
          ..write('plugSettingMul_2x: $plugSettingMul_2x, ')
          ..write('plugSettingMul_5x: $plugSettingMul_5x, ')
          ..write('coilResistanace: $coilResistanace, ')
          ..write('pickupCurrent: $pickupCurrent, ')
          ..write('relayOprTime_2x: $relayOprTime_2x, ')
          ..write('relayOprTime_5x: $relayOprTime_5x, ')
          ..write('relayOprTime_Hi: $relayOprTime_Hi, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      trNo,
      serialNo,
      plugSetting,
      TMS,
      plugSetting_Hi,
      time,
      plugSettingMul_2x,
      plugSettingMul_5x,
      coilResistanace,
      pickupCurrent,
      relayOprTime_2x,
      relayOprTime_5x,
      relayOprTime_Hi,
      equipmentUsed,
      updateDate);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EfElrPacLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.plugSetting == this.plugSetting &&
          other.TMS == this.TMS &&
          other.plugSetting_Hi == this.plugSetting_Hi &&
          other.time == this.time &&
          other.plugSettingMul_2x == this.plugSettingMul_2x &&
          other.plugSettingMul_5x == this.plugSettingMul_5x &&
          other.coilResistanace == this.coilResistanace &&
          other.pickupCurrent == this.pickupCurrent &&
          other.relayOprTime_2x == this.relayOprTime_2x &&
          other.relayOprTime_5x == this.relayOprTime_5x &&
          other.relayOprTime_Hi == this.relayOprTime_Hi &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class EfElrPacLocalDatasourceImplCompanion
    extends UpdateCompanion<EfElrPacLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> plugSetting;
  final Value<double> TMS;
  final Value<double> plugSetting_Hi;
  final Value<double> time;
  final Value<double> plugSettingMul_2x;
  final Value<double> plugSettingMul_5x;
  final Value<double> coilResistanace;
  final Value<double> pickupCurrent;
  final Value<double> relayOprTime_2x;
  final Value<double> relayOprTime_5x;
  final Value<double> relayOprTime_Hi;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const EfElrPacLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.plugSetting = const Value.absent(),
    this.TMS = const Value.absent(),
    this.plugSetting_Hi = const Value.absent(),
    this.time = const Value.absent(),
    this.plugSettingMul_2x = const Value.absent(),
    this.plugSettingMul_5x = const Value.absent(),
    this.coilResistanace = const Value.absent(),
    this.pickupCurrent = const Value.absent(),
    this.relayOprTime_2x = const Value.absent(),
    this.relayOprTime_5x = const Value.absent(),
    this.relayOprTime_Hi = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  EfElrPacLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double plugSetting,
    @required double TMS,
    @required double plugSetting_Hi,
    @required double time,
    @required double plugSettingMul_2x,
    @required double plugSettingMul_5x,
    @required double coilResistanace,
    @required double pickupCurrent,
    @required double relayOprTime_2x,
    @required double relayOprTime_5x,
    @required double relayOprTime_Hi,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        plugSetting = Value(plugSetting),
        TMS = Value(TMS),
        plugSetting_Hi = Value(plugSetting_Hi),
        time = Value(time),
        plugSettingMul_2x = Value(plugSettingMul_2x),
        plugSettingMul_5x = Value(plugSettingMul_5x),
        coilResistanace = Value(coilResistanace),
        pickupCurrent = Value(pickupCurrent),
        relayOprTime_2x = Value(relayOprTime_2x),
        relayOprTime_5x = Value(relayOprTime_5x),
        relayOprTime_Hi = Value(relayOprTime_Hi),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<EfElrPacLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> plugSetting,
    Expression<double> TMS,
    Expression<double> plugSetting_Hi,
    Expression<double> time,
    Expression<double> plugSettingMul_2x,
    Expression<double> plugSettingMul_5x,
    Expression<double> coilResistanace,
    Expression<double> pickupCurrent,
    Expression<double> relayOprTime_2x,
    Expression<double> relayOprTime_5x,
    Expression<double> relayOprTime_Hi,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (plugSetting != null) 'plug_setting': plugSetting,
      if (TMS != null) 'tms': TMS,
      if (plugSetting_Hi != null) 'plug_setting_hi': plugSetting_Hi,
      if (time != null) 'time': time,
      if (plugSettingMul_2x != null) 'plug_setting_mul_2x': plugSettingMul_2x,
      if (plugSettingMul_5x != null) 'plug_setting_mul_5x': plugSettingMul_5x,
      if (coilResistanace != null) 'coil_resistanace': coilResistanace,
      if (pickupCurrent != null) 'pickup_current': pickupCurrent,
      if (relayOprTime_2x != null) 'relay_opr_time_2x': relayOprTime_2x,
      if (relayOprTime_5x != null) 'relay_opr_time_5x': relayOprTime_5x,
      if (relayOprTime_Hi != null) 'relay_opr_time_hi': relayOprTime_Hi,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  EfElrPacLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> plugSetting,
      Value<double> TMS,
      Value<double> plugSetting_Hi,
      Value<double> time,
      Value<double> plugSettingMul_2x,
      Value<double> plugSettingMul_5x,
      Value<double> coilResistanace,
      Value<double> pickupCurrent,
      Value<double> relayOprTime_2x,
      Value<double> relayOprTime_5x,
      Value<double> relayOprTime_Hi,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return EfElrPacLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      plugSetting: plugSetting ?? this.plugSetting,
      TMS: TMS ?? this.TMS,
      plugSetting_Hi: plugSetting_Hi ?? this.plugSetting_Hi,
      time: time ?? this.time,
      plugSettingMul_2x: plugSettingMul_2x ?? this.plugSettingMul_2x,
      plugSettingMul_5x: plugSettingMul_5x ?? this.plugSettingMul_5x,
      coilResistanace: coilResistanace ?? this.coilResistanace,
      pickupCurrent: pickupCurrent ?? this.pickupCurrent,
      relayOprTime_2x: relayOprTime_2x ?? this.relayOprTime_2x,
      relayOprTime_5x: relayOprTime_5x ?? this.relayOprTime_5x,
      relayOprTime_Hi: relayOprTime_Hi ?? this.relayOprTime_Hi,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (plugSetting.present) {
      map['plug_setting'] = Variable<double>(plugSetting.value);
    }
    if (TMS.present) {
      map['tms'] = Variable<double>(TMS.value);
    }
    if (plugSetting_Hi.present) {
      map['plug_setting_hi'] = Variable<double>(plugSetting_Hi.value);
    }
    if (time.present) {
      map['time'] = Variable<double>(time.value);
    }
    if (plugSettingMul_2x.present) {
      map['plug_setting_mul_2x'] = Variable<double>(plugSettingMul_2x.value);
    }
    if (plugSettingMul_5x.present) {
      map['plug_setting_mul_5x'] = Variable<double>(plugSettingMul_5x.value);
    }
    if (coilResistanace.present) {
      map['coil_resistanace'] = Variable<double>(coilResistanace.value);
    }
    if (pickupCurrent.present) {
      map['pickup_current'] = Variable<double>(pickupCurrent.value);
    }
    if (relayOprTime_2x.present) {
      map['relay_opr_time_2x'] = Variable<double>(relayOprTime_2x.value);
    }
    if (relayOprTime_5x.present) {
      map['relay_opr_time_5x'] = Variable<double>(relayOprTime_5x.value);
    }
    if (relayOprTime_Hi.present) {
      map['relay_opr_time_hi'] = Variable<double>(relayOprTime_Hi.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EfElrPacLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('plugSetting: $plugSetting, ')
          ..write('TMS: $TMS, ')
          ..write('plugSetting_Hi: $plugSetting_Hi, ')
          ..write('time: $time, ')
          ..write('plugSettingMul_2x: $plugSettingMul_2x, ')
          ..write('plugSettingMul_5x: $plugSettingMul_5x, ')
          ..write('coilResistanace: $coilResistanace, ')
          ..write('pickupCurrent: $pickupCurrent, ')
          ..write('relayOprTime_2x: $relayOprTime_2x, ')
          ..write('relayOprTime_5x: $relayOprTime_5x, ')
          ..write('relayOprTime_Hi: $relayOprTime_Hi, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $EfElrPacLocalDatasourceImplTable extends EfElrPacLocalDatasourceImpl
    with TableInfo<$EfElrPacLocalDatasourceImplTable, EfElrPacLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $EfElrPacLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _plugSettingMeta =
      const VerificationMeta('plugSetting');
  GeneratedColumn<double> _plugSetting;
  @override
  GeneratedColumn<double> get plugSetting => _plugSetting ??=
      GeneratedColumn<double>('plug_setting', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _TMSMeta = const VerificationMeta('TMS');
  GeneratedColumn<double> _TMS;
  @override
  GeneratedColumn<double> get TMS =>
      _TMS ??= GeneratedColumn<double>('tms', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _plugSetting_HiMeta =
      const VerificationMeta('plugSetting_Hi');
  GeneratedColumn<double> _plugSetting_Hi;
  @override
  GeneratedColumn<double> get plugSetting_Hi => _plugSetting_Hi ??=
      GeneratedColumn<double>('plug_setting_hi', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _timeMeta = const VerificationMeta('time');
  GeneratedColumn<double> _time;
  @override
  GeneratedColumn<double> get time =>
      _time ??= GeneratedColumn<double>('time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _plugSettingMul_2xMeta =
      const VerificationMeta('plugSettingMul_2x');
  GeneratedColumn<double> _plugSettingMul_2x;
  @override
  GeneratedColumn<double> get plugSettingMul_2x => _plugSettingMul_2x ??=
      GeneratedColumn<double>('plug_setting_mul_2x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _plugSettingMul_5xMeta =
      const VerificationMeta('plugSettingMul_5x');
  GeneratedColumn<double> _plugSettingMul_5x;
  @override
  GeneratedColumn<double> get plugSettingMul_5x => _plugSettingMul_5x ??=
      GeneratedColumn<double>('plug_setting_mul_5x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _coilResistanaceMeta =
      const VerificationMeta('coilResistanace');
  GeneratedColumn<double> _coilResistanace;
  @override
  GeneratedColumn<double> get coilResistanace => _coilResistanace ??=
      GeneratedColumn<double>('coil_resistanace', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _pickupCurrentMeta =
      const VerificationMeta('pickupCurrent');
  GeneratedColumn<double> _pickupCurrent;
  @override
  GeneratedColumn<double> get pickupCurrent => _pickupCurrent ??=
      GeneratedColumn<double>('pickup_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _relayOprTime_2xMeta =
      const VerificationMeta('relayOprTime_2x');
  GeneratedColumn<double> _relayOprTime_2x;
  @override
  GeneratedColumn<double> get relayOprTime_2x => _relayOprTime_2x ??=
      GeneratedColumn<double>('relay_opr_time_2x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _relayOprTime_5xMeta =
      const VerificationMeta('relayOprTime_5x');
  GeneratedColumn<double> _relayOprTime_5x;
  @override
  GeneratedColumn<double> get relayOprTime_5x => _relayOprTime_5x ??=
      GeneratedColumn<double>('relay_opr_time_5x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _relayOprTime_HiMeta =
      const VerificationMeta('relayOprTime_Hi');
  GeneratedColumn<double> _relayOprTime_Hi;
  @override
  GeneratedColumn<double> get relayOprTime_Hi => _relayOprTime_Hi ??=
      GeneratedColumn<double>('relay_opr_time_hi', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        plugSetting,
        TMS,
        plugSetting_Hi,
        time,
        plugSettingMul_2x,
        plugSettingMul_5x,
        coilResistanace,
        pickupCurrent,
        relayOprTime_2x,
        relayOprTime_5x,
        relayOprTime_Hi,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'ef_elr_pac_local_datasource_impl';
  @override
  String get actualTableName => 'ef_elr_pac_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<EfElrPacLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('plug_setting')) {
      context.handle(
          _plugSettingMeta,
          plugSetting.isAcceptableOrUnknown(
              data['plug_setting'], _plugSettingMeta));
    } else if (isInserting) {
      context.missing(_plugSettingMeta);
    }
    if (data.containsKey('tms')) {
      context.handle(
          _TMSMeta, TMS.isAcceptableOrUnknown(data['tms'], _TMSMeta));
    } else if (isInserting) {
      context.missing(_TMSMeta);
    }
    if (data.containsKey('plug_setting_hi')) {
      context.handle(
          _plugSetting_HiMeta,
          plugSetting_Hi.isAcceptableOrUnknown(
              data['plug_setting_hi'], _plugSetting_HiMeta));
    } else if (isInserting) {
      context.missing(_plugSetting_HiMeta);
    }
    if (data.containsKey('time')) {
      context.handle(
          _timeMeta, time.isAcceptableOrUnknown(data['time'], _timeMeta));
    } else if (isInserting) {
      context.missing(_timeMeta);
    }
    if (data.containsKey('plug_setting_mul_2x')) {
      context.handle(
          _plugSettingMul_2xMeta,
          plugSettingMul_2x.isAcceptableOrUnknown(
              data['plug_setting_mul_2x'], _plugSettingMul_2xMeta));
    } else if (isInserting) {
      context.missing(_plugSettingMul_2xMeta);
    }
    if (data.containsKey('plug_setting_mul_5x')) {
      context.handle(
          _plugSettingMul_5xMeta,
          plugSettingMul_5x.isAcceptableOrUnknown(
              data['plug_setting_mul_5x'], _plugSettingMul_5xMeta));
    } else if (isInserting) {
      context.missing(_plugSettingMul_5xMeta);
    }
    if (data.containsKey('coil_resistanace')) {
      context.handle(
          _coilResistanaceMeta,
          coilResistanace.isAcceptableOrUnknown(
              data['coil_resistanace'], _coilResistanaceMeta));
    } else if (isInserting) {
      context.missing(_coilResistanaceMeta);
    }
    if (data.containsKey('pickup_current')) {
      context.handle(
          _pickupCurrentMeta,
          pickupCurrent.isAcceptableOrUnknown(
              data['pickup_current'], _pickupCurrentMeta));
    } else if (isInserting) {
      context.missing(_pickupCurrentMeta);
    }
    if (data.containsKey('relay_opr_time_2x')) {
      context.handle(
          _relayOprTime_2xMeta,
          relayOprTime_2x.isAcceptableOrUnknown(
              data['relay_opr_time_2x'], _relayOprTime_2xMeta));
    } else if (isInserting) {
      context.missing(_relayOprTime_2xMeta);
    }
    if (data.containsKey('relay_opr_time_5x')) {
      context.handle(
          _relayOprTime_5xMeta,
          relayOprTime_5x.isAcceptableOrUnknown(
              data['relay_opr_time_5x'], _relayOprTime_5xMeta));
    } else if (isInserting) {
      context.missing(_relayOprTime_5xMeta);
    }
    if (data.containsKey('relay_opr_time_hi')) {
      context.handle(
          _relayOprTime_HiMeta,
          relayOprTime_Hi.isAcceptableOrUnknown(
              data['relay_opr_time_hi'], _relayOprTime_HiMeta));
    } else if (isInserting) {
      context.missing(_relayOprTime_HiMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EfElrPacLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return EfElrPacLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EfElrPacLocalDatasourceImplTable createAlias(String alias) {
    return $EfElrPacLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class OcEfrLocalData extends DataClass implements Insertable<OcEfrLocalData> {
  final int databaseID;
  final int id;
  final String etype;
  final int trNo;
  final String designation;
  final String location;
  final String serialNo_Rph;
  final String serialNo_Yph;
  final String serialNo_Bph;
  final String panel;
  final String make;
  final String rtype;
  final String auxVoltage;
  final String ctRatio;
  final DateTime dateOfTesting;
  final DateTime updateDate;
  final String testedBy;
  final String verifiedBy;
  final String WitnessedBy;
  OcEfrLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.etype,
      @required this.trNo,
      @required this.designation,
      @required this.location,
      @required this.serialNo_Rph,
      @required this.serialNo_Yph,
      @required this.serialNo_Bph,
      @required this.panel,
      @required this.make,
      @required this.rtype,
      @required this.auxVoltage,
      @required this.ctRatio,
      @required this.dateOfTesting,
      @required this.updateDate,
      @required this.testedBy,
      @required this.verifiedBy,
      @required this.WitnessedBy});
  factory OcEfrLocalData.fromData(Map<String, dynamic> data, {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return OcEfrLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      etype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}etype']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      designation: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}designation']),
      location: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}location']),
      serialNo_Rph: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no_rph']),
      serialNo_Yph: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no_yph']),
      serialNo_Bph: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no_bph']),
      panel: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}panel']),
      make: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}make']),
      rtype: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}rtype']),
      auxVoltage: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}aux_voltage']),
      ctRatio: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}ct_ratio']),
      dateOfTesting: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}date_of_testing']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
      testedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tested_by']),
      verifiedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}verified_by']),
      WitnessedBy: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}witnessed_by']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || etype != null) {
      map['etype'] = Variable<String>(etype);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || designation != null) {
      map['designation'] = Variable<String>(designation);
    }
    if (!nullToAbsent || location != null) {
      map['location'] = Variable<String>(location);
    }
    if (!nullToAbsent || serialNo_Rph != null) {
      map['serial_no_rph'] = Variable<String>(serialNo_Rph);
    }
    if (!nullToAbsent || serialNo_Yph != null) {
      map['serial_no_yph'] = Variable<String>(serialNo_Yph);
    }
    if (!nullToAbsent || serialNo_Bph != null) {
      map['serial_no_bph'] = Variable<String>(serialNo_Bph);
    }
    if (!nullToAbsent || panel != null) {
      map['panel'] = Variable<String>(panel);
    }
    if (!nullToAbsent || make != null) {
      map['make'] = Variable<String>(make);
    }
    if (!nullToAbsent || rtype != null) {
      map['rtype'] = Variable<String>(rtype);
    }
    if (!nullToAbsent || auxVoltage != null) {
      map['aux_voltage'] = Variable<String>(auxVoltage);
    }
    if (!nullToAbsent || ctRatio != null) {
      map['ct_ratio'] = Variable<String>(ctRatio);
    }
    if (!nullToAbsent || dateOfTesting != null) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    if (!nullToAbsent || testedBy != null) {
      map['tested_by'] = Variable<String>(testedBy);
    }
    if (!nullToAbsent || verifiedBy != null) {
      map['verified_by'] = Variable<String>(verifiedBy);
    }
    if (!nullToAbsent || WitnessedBy != null) {
      map['witnessed_by'] = Variable<String>(WitnessedBy);
    }
    return map;
  }

  OcEfrLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return OcEfrLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      etype:
          etype == null && nullToAbsent ? const Value.absent() : Value(etype),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      designation: designation == null && nullToAbsent
          ? const Value.absent()
          : Value(designation),
      location: location == null && nullToAbsent
          ? const Value.absent()
          : Value(location),
      serialNo_Rph: serialNo_Rph == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo_Rph),
      serialNo_Yph: serialNo_Yph == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo_Yph),
      serialNo_Bph: serialNo_Bph == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo_Bph),
      panel:
          panel == null && nullToAbsent ? const Value.absent() : Value(panel),
      make: make == null && nullToAbsent ? const Value.absent() : Value(make),
      rtype:
          rtype == null && nullToAbsent ? const Value.absent() : Value(rtype),
      auxVoltage: auxVoltage == null && nullToAbsent
          ? const Value.absent()
          : Value(auxVoltage),
      ctRatio: ctRatio == null && nullToAbsent
          ? const Value.absent()
          : Value(ctRatio),
      dateOfTesting: dateOfTesting == null && nullToAbsent
          ? const Value.absent()
          : Value(dateOfTesting),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
      testedBy: testedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(testedBy),
      verifiedBy: verifiedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(verifiedBy),
      WitnessedBy: WitnessedBy == null && nullToAbsent
          ? const Value.absent()
          : Value(WitnessedBy),
    );
  }

  factory OcEfrLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return OcEfrLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      etype: serializer.fromJson<String>(json['etype']),
      trNo: serializer.fromJson<int>(json['trNo']),
      designation: serializer.fromJson<String>(json['designation']),
      location: serializer.fromJson<String>(json['location']),
      serialNo_Rph: serializer.fromJson<String>(json['serialNo_Rph']),
      serialNo_Yph: serializer.fromJson<String>(json['serialNo_Yph']),
      serialNo_Bph: serializer.fromJson<String>(json['serialNo_Bph']),
      panel: serializer.fromJson<String>(json['panel']),
      make: serializer.fromJson<String>(json['make']),
      rtype: serializer.fromJson<String>(json['rtype']),
      auxVoltage: serializer.fromJson<String>(json['auxVoltage']),
      ctRatio: serializer.fromJson<String>(json['ctRatio']),
      dateOfTesting: serializer.fromJson<DateTime>(json['dateOfTesting']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
      testedBy: serializer.fromJson<String>(json['testedBy']),
      verifiedBy: serializer.fromJson<String>(json['verifiedBy']),
      WitnessedBy: serializer.fromJson<String>(json['WitnessedBy']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'etype': serializer.toJson<String>(etype),
      'trNo': serializer.toJson<int>(trNo),
      'designation': serializer.toJson<String>(designation),
      'location': serializer.toJson<String>(location),
      'serialNo_Rph': serializer.toJson<String>(serialNo_Rph),
      'serialNo_Yph': serializer.toJson<String>(serialNo_Yph),
      'serialNo_Bph': serializer.toJson<String>(serialNo_Bph),
      'panel': serializer.toJson<String>(panel),
      'make': serializer.toJson<String>(make),
      'rtype': serializer.toJson<String>(rtype),
      'auxVoltage': serializer.toJson<String>(auxVoltage),
      'ctRatio': serializer.toJson<String>(ctRatio),
      'dateOfTesting': serializer.toJson<DateTime>(dateOfTesting),
      'updateDate': serializer.toJson<DateTime>(updateDate),
      'testedBy': serializer.toJson<String>(testedBy),
      'verifiedBy': serializer.toJson<String>(verifiedBy),
      'WitnessedBy': serializer.toJson<String>(WitnessedBy),
    };
  }

  OcEfrLocalData copyWith(
          {int databaseID,
          int id,
          String etype,
          int trNo,
          String designation,
          String location,
          String serialNo_Rph,
          String serialNo_Yph,
          String serialNo_Bph,
          String panel,
          String make,
          String rtype,
          String auxVoltage,
          String ctRatio,
          DateTime dateOfTesting,
          DateTime updateDate,
          String testedBy,
          String verifiedBy,
          String WitnessedBy}) =>
      OcEfrLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        etype: etype ?? this.etype,
        trNo: trNo ?? this.trNo,
        designation: designation ?? this.designation,
        location: location ?? this.location,
        serialNo_Rph: serialNo_Rph ?? this.serialNo_Rph,
        serialNo_Yph: serialNo_Yph ?? this.serialNo_Yph,
        serialNo_Bph: serialNo_Bph ?? this.serialNo_Bph,
        panel: panel ?? this.panel,
        make: make ?? this.make,
        rtype: rtype ?? this.rtype,
        auxVoltage: auxVoltage ?? this.auxVoltage,
        ctRatio: ctRatio ?? this.ctRatio,
        dateOfTesting: dateOfTesting ?? this.dateOfTesting,
        updateDate: updateDate ?? this.updateDate,
        testedBy: testedBy ?? this.testedBy,
        verifiedBy: verifiedBy ?? this.verifiedBy,
        WitnessedBy: WitnessedBy ?? this.WitnessedBy,
      );
  @override
  String toString() {
    return (StringBuffer('OcEfrLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo_Rph: $serialNo_Rph, ')
          ..write('serialNo_Yph: $serialNo_Yph, ')
          ..write('serialNo_Bph: $serialNo_Bph, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('ctRatio: $ctRatio, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      databaseID,
      id,
      etype,
      trNo,
      designation,
      location,
      serialNo_Rph,
      serialNo_Yph,
      serialNo_Bph,
      panel,
      make,
      rtype,
      auxVoltage,
      ctRatio,
      dateOfTesting,
      updateDate,
      testedBy,
      verifiedBy,
      WitnessedBy);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is OcEfrLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.etype == this.etype &&
          other.trNo == this.trNo &&
          other.designation == this.designation &&
          other.location == this.location &&
          other.serialNo_Rph == this.serialNo_Rph &&
          other.serialNo_Yph == this.serialNo_Yph &&
          other.serialNo_Bph == this.serialNo_Bph &&
          other.panel == this.panel &&
          other.make == this.make &&
          other.rtype == this.rtype &&
          other.auxVoltage == this.auxVoltage &&
          other.ctRatio == this.ctRatio &&
          other.dateOfTesting == this.dateOfTesting &&
          other.updateDate == this.updateDate &&
          other.testedBy == this.testedBy &&
          other.verifiedBy == this.verifiedBy &&
          other.WitnessedBy == this.WitnessedBy);
}

class OcEfrLocalDatasourceImplCompanion
    extends UpdateCompanion<OcEfrLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<String> etype;
  final Value<int> trNo;
  final Value<String> designation;
  final Value<String> location;
  final Value<String> serialNo_Rph;
  final Value<String> serialNo_Yph;
  final Value<String> serialNo_Bph;
  final Value<String> panel;
  final Value<String> make;
  final Value<String> rtype;
  final Value<String> auxVoltage;
  final Value<String> ctRatio;
  final Value<DateTime> dateOfTesting;
  final Value<DateTime> updateDate;
  final Value<String> testedBy;
  final Value<String> verifiedBy;
  final Value<String> WitnessedBy;
  const OcEfrLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.etype = const Value.absent(),
    this.trNo = const Value.absent(),
    this.designation = const Value.absent(),
    this.location = const Value.absent(),
    this.serialNo_Rph = const Value.absent(),
    this.serialNo_Yph = const Value.absent(),
    this.serialNo_Bph = const Value.absent(),
    this.panel = const Value.absent(),
    this.make = const Value.absent(),
    this.rtype = const Value.absent(),
    this.auxVoltage = const Value.absent(),
    this.ctRatio = const Value.absent(),
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    this.testedBy = const Value.absent(),
    this.verifiedBy = const Value.absent(),
    this.WitnessedBy = const Value.absent(),
  });
  OcEfrLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required String etype,
    @required int trNo,
    @required String designation,
    @required String location,
    @required String serialNo_Rph,
    @required String serialNo_Yph,
    @required String serialNo_Bph,
    @required String panel,
    @required String make,
    @required String rtype,
    @required String auxVoltage,
    @required String ctRatio,
    this.dateOfTesting = const Value.absent(),
    this.updateDate = const Value.absent(),
    @required String testedBy,
    @required String verifiedBy,
    @required String WitnessedBy,
  })  : databaseID = Value(databaseID),
        etype = Value(etype),
        trNo = Value(trNo),
        designation = Value(designation),
        location = Value(location),
        serialNo_Rph = Value(serialNo_Rph),
        serialNo_Yph = Value(serialNo_Yph),
        serialNo_Bph = Value(serialNo_Bph),
        panel = Value(panel),
        make = Value(make),
        rtype = Value(rtype),
        auxVoltage = Value(auxVoltage),
        ctRatio = Value(ctRatio),
        testedBy = Value(testedBy),
        verifiedBy = Value(verifiedBy),
        WitnessedBy = Value(WitnessedBy);
  static Insertable<OcEfrLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<String> etype,
    Expression<int> trNo,
    Expression<String> designation,
    Expression<String> location,
    Expression<String> serialNo_Rph,
    Expression<String> serialNo_Yph,
    Expression<String> serialNo_Bph,
    Expression<String> panel,
    Expression<String> make,
    Expression<String> rtype,
    Expression<String> auxVoltage,
    Expression<String> ctRatio,
    Expression<DateTime> dateOfTesting,
    Expression<DateTime> updateDate,
    Expression<String> testedBy,
    Expression<String> verifiedBy,
    Expression<String> WitnessedBy,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (etype != null) 'etype': etype,
      if (trNo != null) 'tr_no': trNo,
      if (designation != null) 'designation': designation,
      if (location != null) 'location': location,
      if (serialNo_Rph != null) 'serial_no_rph': serialNo_Rph,
      if (serialNo_Yph != null) 'serial_no_yph': serialNo_Yph,
      if (serialNo_Bph != null) 'serial_no_bph': serialNo_Bph,
      if (panel != null) 'panel': panel,
      if (make != null) 'make': make,
      if (rtype != null) 'rtype': rtype,
      if (auxVoltage != null) 'aux_voltage': auxVoltage,
      if (ctRatio != null) 'ct_ratio': ctRatio,
      if (dateOfTesting != null) 'date_of_testing': dateOfTesting,
      if (updateDate != null) 'update_date': updateDate,
      if (testedBy != null) 'tested_by': testedBy,
      if (verifiedBy != null) 'verified_by': verifiedBy,
      if (WitnessedBy != null) 'witnessed_by': WitnessedBy,
    });
  }

  OcEfrLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<String> etype,
      Value<int> trNo,
      Value<String> designation,
      Value<String> location,
      Value<String> serialNo_Rph,
      Value<String> serialNo_Yph,
      Value<String> serialNo_Bph,
      Value<String> panel,
      Value<String> make,
      Value<String> rtype,
      Value<String> auxVoltage,
      Value<String> ctRatio,
      Value<DateTime> dateOfTesting,
      Value<DateTime> updateDate,
      Value<String> testedBy,
      Value<String> verifiedBy,
      Value<String> WitnessedBy}) {
    return OcEfrLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      etype: etype ?? this.etype,
      trNo: trNo ?? this.trNo,
      designation: designation ?? this.designation,
      location: location ?? this.location,
      serialNo_Rph: serialNo_Rph ?? this.serialNo_Rph,
      serialNo_Yph: serialNo_Yph ?? this.serialNo_Yph,
      serialNo_Bph: serialNo_Bph ?? this.serialNo_Bph,
      panel: panel ?? this.panel,
      make: make ?? this.make,
      rtype: rtype ?? this.rtype,
      auxVoltage: auxVoltage ?? this.auxVoltage,
      ctRatio: ctRatio ?? this.ctRatio,
      dateOfTesting: dateOfTesting ?? this.dateOfTesting,
      updateDate: updateDate ?? this.updateDate,
      testedBy: testedBy ?? this.testedBy,
      verifiedBy: verifiedBy ?? this.verifiedBy,
      WitnessedBy: WitnessedBy ?? this.WitnessedBy,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (etype.present) {
      map['etype'] = Variable<String>(etype.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (designation.present) {
      map['designation'] = Variable<String>(designation.value);
    }
    if (location.present) {
      map['location'] = Variable<String>(location.value);
    }
    if (serialNo_Rph.present) {
      map['serial_no_rph'] = Variable<String>(serialNo_Rph.value);
    }
    if (serialNo_Yph.present) {
      map['serial_no_yph'] = Variable<String>(serialNo_Yph.value);
    }
    if (serialNo_Bph.present) {
      map['serial_no_bph'] = Variable<String>(serialNo_Bph.value);
    }
    if (panel.present) {
      map['panel'] = Variable<String>(panel.value);
    }
    if (make.present) {
      map['make'] = Variable<String>(make.value);
    }
    if (rtype.present) {
      map['rtype'] = Variable<String>(rtype.value);
    }
    if (auxVoltage.present) {
      map['aux_voltage'] = Variable<String>(auxVoltage.value);
    }
    if (ctRatio.present) {
      map['ct_ratio'] = Variable<String>(ctRatio.value);
    }
    if (dateOfTesting.present) {
      map['date_of_testing'] = Variable<DateTime>(dateOfTesting.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    if (testedBy.present) {
      map['tested_by'] = Variable<String>(testedBy.value);
    }
    if (verifiedBy.present) {
      map['verified_by'] = Variable<String>(verifiedBy.value);
    }
    if (WitnessedBy.present) {
      map['witnessed_by'] = Variable<String>(WitnessedBy.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('OcEfrLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('etype: $etype, ')
          ..write('trNo: $trNo, ')
          ..write('designation: $designation, ')
          ..write('location: $location, ')
          ..write('serialNo_Rph: $serialNo_Rph, ')
          ..write('serialNo_Yph: $serialNo_Yph, ')
          ..write('serialNo_Bph: $serialNo_Bph, ')
          ..write('panel: $panel, ')
          ..write('make: $make, ')
          ..write('rtype: $rtype, ')
          ..write('auxVoltage: $auxVoltage, ')
          ..write('ctRatio: $ctRatio, ')
          ..write('dateOfTesting: $dateOfTesting, ')
          ..write('updateDate: $updateDate, ')
          ..write('testedBy: $testedBy, ')
          ..write('verifiedBy: $verifiedBy, ')
          ..write('WitnessedBy: $WitnessedBy')
          ..write(')'))
        .toString();
  }
}

class $OcEfrLocalDatasourceImplTable extends OcEfrLocalDatasourceImpl
    with TableInfo<$OcEfrLocalDatasourceImplTable, OcEfrLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $OcEfrLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _etypeMeta = const VerificationMeta('etype');
  GeneratedColumn<String> _etype;
  @override
  GeneratedColumn<String> get etype => _etype ??= GeneratedColumn<String>(
      'etype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _designationMeta =
      const VerificationMeta('designation');
  GeneratedColumn<String> _designation;
  @override
  GeneratedColumn<String> get designation => _designation ??=
      GeneratedColumn<String>('designation', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _locationMeta = const VerificationMeta('location');
  GeneratedColumn<String> _location;
  @override
  GeneratedColumn<String> get location => _location ??= GeneratedColumn<String>(
      'location', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _serialNo_RphMeta =
      const VerificationMeta('serialNo_Rph');
  GeneratedColumn<String> _serialNo_Rph;
  @override
  GeneratedColumn<String> get serialNo_Rph => _serialNo_Rph ??=
      GeneratedColumn<String>('serial_no_rph', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _serialNo_YphMeta =
      const VerificationMeta('serialNo_Yph');
  GeneratedColumn<String> _serialNo_Yph;
  @override
  GeneratedColumn<String> get serialNo_Yph => _serialNo_Yph ??=
      GeneratedColumn<String>('serial_no_yph', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _serialNo_BphMeta =
      const VerificationMeta('serialNo_Bph');
  GeneratedColumn<String> _serialNo_Bph;
  @override
  GeneratedColumn<String> get serialNo_Bph => _serialNo_Bph ??=
      GeneratedColumn<String>('serial_no_bph', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _panelMeta = const VerificationMeta('panel');
  GeneratedColumn<String> _panel;
  @override
  GeneratedColumn<String> get panel => _panel ??= GeneratedColumn<String>(
      'panel', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _makeMeta = const VerificationMeta('make');
  GeneratedColumn<String> _make;
  @override
  GeneratedColumn<String> get make => _make ??= GeneratedColumn<String>(
      'make', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _rtypeMeta = const VerificationMeta('rtype');
  GeneratedColumn<String> _rtype;
  @override
  GeneratedColumn<String> get rtype => _rtype ??= GeneratedColumn<String>(
      'rtype', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _auxVoltageMeta = const VerificationMeta('auxVoltage');
  GeneratedColumn<String> _auxVoltage;
  @override
  GeneratedColumn<String> get auxVoltage =>
      _auxVoltage ??= GeneratedColumn<String>('aux_voltage', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _ctRatioMeta = const VerificationMeta('ctRatio');
  GeneratedColumn<String> _ctRatio;
  @override
  GeneratedColumn<String> get ctRatio => _ctRatio ??= GeneratedColumn<String>(
      'ct_ratio', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _dateOfTestingMeta =
      const VerificationMeta('dateOfTesting');
  GeneratedColumn<DateTime> _dateOfTesting;
  @override
  GeneratedColumn<DateTime> get dateOfTesting => _dateOfTesting ??=
      GeneratedColumn<DateTime>('date_of_testing', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  final VerificationMeta _testedByMeta = const VerificationMeta('testedBy');
  GeneratedColumn<String> _testedBy;
  @override
  GeneratedColumn<String> get testedBy => _testedBy ??= GeneratedColumn<String>(
      'tested_by', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _verifiedByMeta = const VerificationMeta('verifiedBy');
  GeneratedColumn<String> _verifiedBy;
  @override
  GeneratedColumn<String> get verifiedBy =>
      _verifiedBy ??= GeneratedColumn<String>('verified_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _WitnessedByMeta =
      const VerificationMeta('WitnessedBy');
  GeneratedColumn<String> _WitnessedBy;
  @override
  GeneratedColumn<String> get WitnessedBy => _WitnessedBy ??=
      GeneratedColumn<String>('witnessed_by', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        etype,
        trNo,
        designation,
        location,
        serialNo_Rph,
        serialNo_Yph,
        serialNo_Bph,
        panel,
        make,
        rtype,
        auxVoltage,
        ctRatio,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy
      ];
  @override
  String get aliasedName => _alias ?? 'oc_efr_local_datasource_impl';
  @override
  String get actualTableName => 'oc_efr_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<OcEfrLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('etype')) {
      context.handle(
          _etypeMeta, etype.isAcceptableOrUnknown(data['etype'], _etypeMeta));
    } else if (isInserting) {
      context.missing(_etypeMeta);
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('designation')) {
      context.handle(
          _designationMeta,
          designation.isAcceptableOrUnknown(
              data['designation'], _designationMeta));
    } else if (isInserting) {
      context.missing(_designationMeta);
    }
    if (data.containsKey('location')) {
      context.handle(_locationMeta,
          location.isAcceptableOrUnknown(data['location'], _locationMeta));
    } else if (isInserting) {
      context.missing(_locationMeta);
    }
    if (data.containsKey('serial_no_rph')) {
      context.handle(
          _serialNo_RphMeta,
          serialNo_Rph.isAcceptableOrUnknown(
              data['serial_no_rph'], _serialNo_RphMeta));
    } else if (isInserting) {
      context.missing(_serialNo_RphMeta);
    }
    if (data.containsKey('serial_no_yph')) {
      context.handle(
          _serialNo_YphMeta,
          serialNo_Yph.isAcceptableOrUnknown(
              data['serial_no_yph'], _serialNo_YphMeta));
    } else if (isInserting) {
      context.missing(_serialNo_YphMeta);
    }
    if (data.containsKey('serial_no_bph')) {
      context.handle(
          _serialNo_BphMeta,
          serialNo_Bph.isAcceptableOrUnknown(
              data['serial_no_bph'], _serialNo_BphMeta));
    } else if (isInserting) {
      context.missing(_serialNo_BphMeta);
    }
    if (data.containsKey('panel')) {
      context.handle(
          _panelMeta, panel.isAcceptableOrUnknown(data['panel'], _panelMeta));
    } else if (isInserting) {
      context.missing(_panelMeta);
    }
    if (data.containsKey('make')) {
      context.handle(
          _makeMeta, make.isAcceptableOrUnknown(data['make'], _makeMeta));
    } else if (isInserting) {
      context.missing(_makeMeta);
    }
    if (data.containsKey('rtype')) {
      context.handle(
          _rtypeMeta, rtype.isAcceptableOrUnknown(data['rtype'], _rtypeMeta));
    } else if (isInserting) {
      context.missing(_rtypeMeta);
    }
    if (data.containsKey('aux_voltage')) {
      context.handle(
          _auxVoltageMeta,
          auxVoltage.isAcceptableOrUnknown(
              data['aux_voltage'], _auxVoltageMeta));
    } else if (isInserting) {
      context.missing(_auxVoltageMeta);
    }
    if (data.containsKey('ct_ratio')) {
      context.handle(_ctRatioMeta,
          ctRatio.isAcceptableOrUnknown(data['ct_ratio'], _ctRatioMeta));
    } else if (isInserting) {
      context.missing(_ctRatioMeta);
    }
    if (data.containsKey('date_of_testing')) {
      context.handle(
          _dateOfTestingMeta,
          dateOfTesting.isAcceptableOrUnknown(
              data['date_of_testing'], _dateOfTestingMeta));
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    if (data.containsKey('tested_by')) {
      context.handle(_testedByMeta,
          testedBy.isAcceptableOrUnknown(data['tested_by'], _testedByMeta));
    } else if (isInserting) {
      context.missing(_testedByMeta);
    }
    if (data.containsKey('verified_by')) {
      context.handle(
          _verifiedByMeta,
          verifiedBy.isAcceptableOrUnknown(
              data['verified_by'], _verifiedByMeta));
    } else if (isInserting) {
      context.missing(_verifiedByMeta);
    }
    if (data.containsKey('witnessed_by')) {
      context.handle(
          _WitnessedByMeta,
          WitnessedBy.isAcceptableOrUnknown(
              data['witnessed_by'], _WitnessedByMeta));
    } else if (isInserting) {
      context.missing(_WitnessedByMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  OcEfrLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return OcEfrLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $OcEfrLocalDatasourceImplTable createAlias(String alias) {
    return $OcEfrLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

class OcEfrPacLocalData extends DataClass
    implements Insertable<OcEfrPacLocalData> {
  final int databaseID;
  final int id;
  final int trNo;
  final String serialNo;
  final double r_plugSetting;
  final double r_TMS;
  final double r_plugSetting_Hi;
  final double r_time;
  final double y_plugSetting;
  final double y_TMS;
  final double y_plugSetting_Hi;
  final double y_time;
  final double b_plugSetting;
  final double b_TMS;
  final double b_plugSetting_Hi;
  final double b_time;
  final double plugSettingMul_2x;
  final double plugSettingMul_5x;
  final double r_coilResistanace;
  final double y_coilResistanace;
  final double b_coilResistanace;
  final double r_pickupCurrent;
  final double y_pickupCurrent;
  final double b_pickupCurrent;
  final double r_relayOprTime_2x;
  final double r_relayOprTime_5x;
  final double r_relayOprTime_Hi;
  final double y_relayOprTime_2x;
  final double y_relayOprTime_5x;
  final double y_relayOprTime_Hi;
  final double b_relayOprTime_2x;
  final double b_relayOprTime_5x;
  final double b_relayOprTime_Hi;
  final String equipmentUsed;
  final DateTime updateDate;
  OcEfrPacLocalData(
      {@required this.databaseID,
      @required this.id,
      @required this.trNo,
      @required this.serialNo,
      @required this.r_plugSetting,
      @required this.r_TMS,
      @required this.r_plugSetting_Hi,
      @required this.r_time,
      @required this.y_plugSetting,
      @required this.y_TMS,
      @required this.y_plugSetting_Hi,
      @required this.y_time,
      @required this.b_plugSetting,
      @required this.b_TMS,
      @required this.b_plugSetting_Hi,
      @required this.b_time,
      @required this.plugSettingMul_2x,
      @required this.plugSettingMul_5x,
      @required this.r_coilResistanace,
      @required this.y_coilResistanace,
      @required this.b_coilResistanace,
      @required this.r_pickupCurrent,
      @required this.y_pickupCurrent,
      @required this.b_pickupCurrent,
      @required this.r_relayOprTime_2x,
      @required this.r_relayOprTime_5x,
      @required this.r_relayOprTime_Hi,
      @required this.y_relayOprTime_2x,
      @required this.y_relayOprTime_5x,
      @required this.y_relayOprTime_Hi,
      @required this.b_relayOprTime_2x,
      @required this.b_relayOprTime_5x,
      @required this.b_relayOprTime_Hi,
      @required this.equipmentUsed,
      @required this.updateDate});
  factory OcEfrPacLocalData.fromData(Map<String, dynamic> data,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    return OcEfrPacLocalData(
      databaseID: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}database_i_d']),
      id: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}id']),
      trNo: const IntType()
          .mapFromDatabaseResponse(data['${effectivePrefix}tr_no']),
      serialNo: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}serial_no']),
      r_plugSetting: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_plug_setting']),
      r_TMS: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_t_m_s']),
      r_plugSetting_Hi: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_plug_setting_hi']),
      r_time: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_time']),
      y_plugSetting: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_plug_setting']),
      y_TMS: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_t_m_s']),
      y_plugSetting_Hi: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_plug_setting_hi']),
      y_time: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_time']),
      b_plugSetting: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_plug_setting']),
      b_TMS: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_t_m_s']),
      b_plugSetting_Hi: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_plug_setting_hi']),
      b_time: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_time']),
      plugSettingMul_2x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}plug_setting_mul_2x']),
      plugSettingMul_5x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}plug_setting_mul_5x']),
      r_coilResistanace: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}r_coil_resistanace']),
      y_coilResistanace: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}y_coil_resistanace']),
      b_coilResistanace: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}b_coil_resistanace']),
      r_pickupCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}r_pickup_current']),
      y_pickupCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}y_pickup_current']),
      b_pickupCurrent: const RealType()
          .mapFromDatabaseResponse(data['${effectivePrefix}b_pickup_current']),
      r_relayOprTime_2x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}r_relay_opr_time_2x']),
      r_relayOprTime_5x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}r_relay_opr_time_5x']),
      r_relayOprTime_Hi: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}r_relay_opr_time_hi']),
      y_relayOprTime_2x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}y_relay_opr_time_2x']),
      y_relayOprTime_5x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}y_relay_opr_time_5x']),
      y_relayOprTime_Hi: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}y_relay_opr_time_hi']),
      b_relayOprTime_2x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}b_relay_opr_time_2x']),
      b_relayOprTime_5x: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}b_relay_opr_time_5x']),
      b_relayOprTime_Hi: const RealType().mapFromDatabaseResponse(
          data['${effectivePrefix}b_relay_opr_time_hi']),
      equipmentUsed: const StringType()
          .mapFromDatabaseResponse(data['${effectivePrefix}equipment_used']),
      updateDate: const DateTimeType()
          .mapFromDatabaseResponse(data['${effectivePrefix}update_date']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || databaseID != null) {
      map['database_i_d'] = Variable<int>(databaseID);
    }
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || trNo != null) {
      map['tr_no'] = Variable<int>(trNo);
    }
    if (!nullToAbsent || serialNo != null) {
      map['serial_no'] = Variable<String>(serialNo);
    }
    if (!nullToAbsent || r_plugSetting != null) {
      map['r_plug_setting'] = Variable<double>(r_plugSetting);
    }
    if (!nullToAbsent || r_TMS != null) {
      map['r_t_m_s'] = Variable<double>(r_TMS);
    }
    if (!nullToAbsent || r_plugSetting_Hi != null) {
      map['r_plug_setting_hi'] = Variable<double>(r_plugSetting_Hi);
    }
    if (!nullToAbsent || r_time != null) {
      map['r_time'] = Variable<double>(r_time);
    }
    if (!nullToAbsent || y_plugSetting != null) {
      map['y_plug_setting'] = Variable<double>(y_plugSetting);
    }
    if (!nullToAbsent || y_TMS != null) {
      map['y_t_m_s'] = Variable<double>(y_TMS);
    }
    if (!nullToAbsent || y_plugSetting_Hi != null) {
      map['y_plug_setting_hi'] = Variable<double>(y_plugSetting_Hi);
    }
    if (!nullToAbsent || y_time != null) {
      map['y_time'] = Variable<double>(y_time);
    }
    if (!nullToAbsent || b_plugSetting != null) {
      map['b_plug_setting'] = Variable<double>(b_plugSetting);
    }
    if (!nullToAbsent || b_TMS != null) {
      map['b_t_m_s'] = Variable<double>(b_TMS);
    }
    if (!nullToAbsent || b_plugSetting_Hi != null) {
      map['b_plug_setting_hi'] = Variable<double>(b_plugSetting_Hi);
    }
    if (!nullToAbsent || b_time != null) {
      map['b_time'] = Variable<double>(b_time);
    }
    if (!nullToAbsent || plugSettingMul_2x != null) {
      map['plug_setting_mul_2x'] = Variable<double>(plugSettingMul_2x);
    }
    if (!nullToAbsent || plugSettingMul_5x != null) {
      map['plug_setting_mul_5x'] = Variable<double>(plugSettingMul_5x);
    }
    if (!nullToAbsent || r_coilResistanace != null) {
      map['r_coil_resistanace'] = Variable<double>(r_coilResistanace);
    }
    if (!nullToAbsent || y_coilResistanace != null) {
      map['y_coil_resistanace'] = Variable<double>(y_coilResistanace);
    }
    if (!nullToAbsent || b_coilResistanace != null) {
      map['b_coil_resistanace'] = Variable<double>(b_coilResistanace);
    }
    if (!nullToAbsent || r_pickupCurrent != null) {
      map['r_pickup_current'] = Variable<double>(r_pickupCurrent);
    }
    if (!nullToAbsent || y_pickupCurrent != null) {
      map['y_pickup_current'] = Variable<double>(y_pickupCurrent);
    }
    if (!nullToAbsent || b_pickupCurrent != null) {
      map['b_pickup_current'] = Variable<double>(b_pickupCurrent);
    }
    if (!nullToAbsent || r_relayOprTime_2x != null) {
      map['r_relay_opr_time_2x'] = Variable<double>(r_relayOprTime_2x);
    }
    if (!nullToAbsent || r_relayOprTime_5x != null) {
      map['r_relay_opr_time_5x'] = Variable<double>(r_relayOprTime_5x);
    }
    if (!nullToAbsent || r_relayOprTime_Hi != null) {
      map['r_relay_opr_time_hi'] = Variable<double>(r_relayOprTime_Hi);
    }
    if (!nullToAbsent || y_relayOprTime_2x != null) {
      map['y_relay_opr_time_2x'] = Variable<double>(y_relayOprTime_2x);
    }
    if (!nullToAbsent || y_relayOprTime_5x != null) {
      map['y_relay_opr_time_5x'] = Variable<double>(y_relayOprTime_5x);
    }
    if (!nullToAbsent || y_relayOprTime_Hi != null) {
      map['y_relay_opr_time_hi'] = Variable<double>(y_relayOprTime_Hi);
    }
    if (!nullToAbsent || b_relayOprTime_2x != null) {
      map['b_relay_opr_time_2x'] = Variable<double>(b_relayOprTime_2x);
    }
    if (!nullToAbsent || b_relayOprTime_5x != null) {
      map['b_relay_opr_time_5x'] = Variable<double>(b_relayOprTime_5x);
    }
    if (!nullToAbsent || b_relayOprTime_Hi != null) {
      map['b_relay_opr_time_hi'] = Variable<double>(b_relayOprTime_Hi);
    }
    if (!nullToAbsent || equipmentUsed != null) {
      map['equipment_used'] = Variable<String>(equipmentUsed);
    }
    if (!nullToAbsent || updateDate != null) {
      map['update_date'] = Variable<DateTime>(updateDate);
    }
    return map;
  }

  OcEfrPacLocalDatasourceImplCompanion toCompanion(bool nullToAbsent) {
    return OcEfrPacLocalDatasourceImplCompanion(
      databaseID: databaseID == null && nullToAbsent
          ? const Value.absent()
          : Value(databaseID),
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      trNo: trNo == null && nullToAbsent ? const Value.absent() : Value(trNo),
      serialNo: serialNo == null && nullToAbsent
          ? const Value.absent()
          : Value(serialNo),
      r_plugSetting: r_plugSetting == null && nullToAbsent
          ? const Value.absent()
          : Value(r_plugSetting),
      r_TMS:
          r_TMS == null && nullToAbsent ? const Value.absent() : Value(r_TMS),
      r_plugSetting_Hi: r_plugSetting_Hi == null && nullToAbsent
          ? const Value.absent()
          : Value(r_plugSetting_Hi),
      r_time:
          r_time == null && nullToAbsent ? const Value.absent() : Value(r_time),
      y_plugSetting: y_plugSetting == null && nullToAbsent
          ? const Value.absent()
          : Value(y_plugSetting),
      y_TMS:
          y_TMS == null && nullToAbsent ? const Value.absent() : Value(y_TMS),
      y_plugSetting_Hi: y_plugSetting_Hi == null && nullToAbsent
          ? const Value.absent()
          : Value(y_plugSetting_Hi),
      y_time:
          y_time == null && nullToAbsent ? const Value.absent() : Value(y_time),
      b_plugSetting: b_plugSetting == null && nullToAbsent
          ? const Value.absent()
          : Value(b_plugSetting),
      b_TMS:
          b_TMS == null && nullToAbsent ? const Value.absent() : Value(b_TMS),
      b_plugSetting_Hi: b_plugSetting_Hi == null && nullToAbsent
          ? const Value.absent()
          : Value(b_plugSetting_Hi),
      b_time:
          b_time == null && nullToAbsent ? const Value.absent() : Value(b_time),
      plugSettingMul_2x: plugSettingMul_2x == null && nullToAbsent
          ? const Value.absent()
          : Value(plugSettingMul_2x),
      plugSettingMul_5x: plugSettingMul_5x == null && nullToAbsent
          ? const Value.absent()
          : Value(plugSettingMul_5x),
      r_coilResistanace: r_coilResistanace == null && nullToAbsent
          ? const Value.absent()
          : Value(r_coilResistanace),
      y_coilResistanace: y_coilResistanace == null && nullToAbsent
          ? const Value.absent()
          : Value(y_coilResistanace),
      b_coilResistanace: b_coilResistanace == null && nullToAbsent
          ? const Value.absent()
          : Value(b_coilResistanace),
      r_pickupCurrent: r_pickupCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(r_pickupCurrent),
      y_pickupCurrent: y_pickupCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(y_pickupCurrent),
      b_pickupCurrent: b_pickupCurrent == null && nullToAbsent
          ? const Value.absent()
          : Value(b_pickupCurrent),
      r_relayOprTime_2x: r_relayOprTime_2x == null && nullToAbsent
          ? const Value.absent()
          : Value(r_relayOprTime_2x),
      r_relayOprTime_5x: r_relayOprTime_5x == null && nullToAbsent
          ? const Value.absent()
          : Value(r_relayOprTime_5x),
      r_relayOprTime_Hi: r_relayOprTime_Hi == null && nullToAbsent
          ? const Value.absent()
          : Value(r_relayOprTime_Hi),
      y_relayOprTime_2x: y_relayOprTime_2x == null && nullToAbsent
          ? const Value.absent()
          : Value(y_relayOprTime_2x),
      y_relayOprTime_5x: y_relayOprTime_5x == null && nullToAbsent
          ? const Value.absent()
          : Value(y_relayOprTime_5x),
      y_relayOprTime_Hi: y_relayOprTime_Hi == null && nullToAbsent
          ? const Value.absent()
          : Value(y_relayOprTime_Hi),
      b_relayOprTime_2x: b_relayOprTime_2x == null && nullToAbsent
          ? const Value.absent()
          : Value(b_relayOprTime_2x),
      b_relayOprTime_5x: b_relayOprTime_5x == null && nullToAbsent
          ? const Value.absent()
          : Value(b_relayOprTime_5x),
      b_relayOprTime_Hi: b_relayOprTime_Hi == null && nullToAbsent
          ? const Value.absent()
          : Value(b_relayOprTime_Hi),
      equipmentUsed: equipmentUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(equipmentUsed),
      updateDate: updateDate == null && nullToAbsent
          ? const Value.absent()
          : Value(updateDate),
    );
  }

  factory OcEfrPacLocalData.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return OcEfrPacLocalData(
      databaseID: serializer.fromJson<int>(json['databaseID']),
      id: serializer.fromJson<int>(json['id']),
      trNo: serializer.fromJson<int>(json['trNo']),
      serialNo: serializer.fromJson<String>(json['serialNo']),
      r_plugSetting: serializer.fromJson<double>(json['r_plugSetting']),
      r_TMS: serializer.fromJson<double>(json['r_TMS']),
      r_plugSetting_Hi: serializer.fromJson<double>(json['r_plugSetting_Hi']),
      r_time: serializer.fromJson<double>(json['r_time']),
      y_plugSetting: serializer.fromJson<double>(json['y_plugSetting']),
      y_TMS: serializer.fromJson<double>(json['y_TMS']),
      y_plugSetting_Hi: serializer.fromJson<double>(json['y_plugSetting_Hi']),
      y_time: serializer.fromJson<double>(json['y_time']),
      b_plugSetting: serializer.fromJson<double>(json['b_plugSetting']),
      b_TMS: serializer.fromJson<double>(json['b_TMS']),
      b_plugSetting_Hi: serializer.fromJson<double>(json['b_plugSetting_Hi']),
      b_time: serializer.fromJson<double>(json['b_time']),
      plugSettingMul_2x: serializer.fromJson<double>(json['plugSettingMul_2x']),
      plugSettingMul_5x: serializer.fromJson<double>(json['plugSettingMul_5x']),
      r_coilResistanace: serializer.fromJson<double>(json['r_coilResistanace']),
      y_coilResistanace: serializer.fromJson<double>(json['y_coilResistanace']),
      b_coilResistanace: serializer.fromJson<double>(json['b_coilResistanace']),
      r_pickupCurrent: serializer.fromJson<double>(json['r_pickupCurrent']),
      y_pickupCurrent: serializer.fromJson<double>(json['y_pickupCurrent']),
      b_pickupCurrent: serializer.fromJson<double>(json['b_pickupCurrent']),
      r_relayOprTime_2x: serializer.fromJson<double>(json['r_relayOprTime_2x']),
      r_relayOprTime_5x: serializer.fromJson<double>(json['r_relayOprTime_5x']),
      r_relayOprTime_Hi: serializer.fromJson<double>(json['r_relayOprTime_Hi']),
      y_relayOprTime_2x: serializer.fromJson<double>(json['y_relayOprTime_2x']),
      y_relayOprTime_5x: serializer.fromJson<double>(json['y_relayOprTime_5x']),
      y_relayOprTime_Hi: serializer.fromJson<double>(json['y_relayOprTime_Hi']),
      b_relayOprTime_2x: serializer.fromJson<double>(json['b_relayOprTime_2x']),
      b_relayOprTime_5x: serializer.fromJson<double>(json['b_relayOprTime_5x']),
      b_relayOprTime_Hi: serializer.fromJson<double>(json['b_relayOprTime_Hi']),
      equipmentUsed: serializer.fromJson<String>(json['equipmentUsed']),
      updateDate: serializer.fromJson<DateTime>(json['updateDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'databaseID': serializer.toJson<int>(databaseID),
      'id': serializer.toJson<int>(id),
      'trNo': serializer.toJson<int>(trNo),
      'serialNo': serializer.toJson<String>(serialNo),
      'r_plugSetting': serializer.toJson<double>(r_plugSetting),
      'r_TMS': serializer.toJson<double>(r_TMS),
      'r_plugSetting_Hi': serializer.toJson<double>(r_plugSetting_Hi),
      'r_time': serializer.toJson<double>(r_time),
      'y_plugSetting': serializer.toJson<double>(y_plugSetting),
      'y_TMS': serializer.toJson<double>(y_TMS),
      'y_plugSetting_Hi': serializer.toJson<double>(y_plugSetting_Hi),
      'y_time': serializer.toJson<double>(y_time),
      'b_plugSetting': serializer.toJson<double>(b_plugSetting),
      'b_TMS': serializer.toJson<double>(b_TMS),
      'b_plugSetting_Hi': serializer.toJson<double>(b_plugSetting_Hi),
      'b_time': serializer.toJson<double>(b_time),
      'plugSettingMul_2x': serializer.toJson<double>(plugSettingMul_2x),
      'plugSettingMul_5x': serializer.toJson<double>(plugSettingMul_5x),
      'r_coilResistanace': serializer.toJson<double>(r_coilResistanace),
      'y_coilResistanace': serializer.toJson<double>(y_coilResistanace),
      'b_coilResistanace': serializer.toJson<double>(b_coilResistanace),
      'r_pickupCurrent': serializer.toJson<double>(r_pickupCurrent),
      'y_pickupCurrent': serializer.toJson<double>(y_pickupCurrent),
      'b_pickupCurrent': serializer.toJson<double>(b_pickupCurrent),
      'r_relayOprTime_2x': serializer.toJson<double>(r_relayOprTime_2x),
      'r_relayOprTime_5x': serializer.toJson<double>(r_relayOprTime_5x),
      'r_relayOprTime_Hi': serializer.toJson<double>(r_relayOprTime_Hi),
      'y_relayOprTime_2x': serializer.toJson<double>(y_relayOprTime_2x),
      'y_relayOprTime_5x': serializer.toJson<double>(y_relayOprTime_5x),
      'y_relayOprTime_Hi': serializer.toJson<double>(y_relayOprTime_Hi),
      'b_relayOprTime_2x': serializer.toJson<double>(b_relayOprTime_2x),
      'b_relayOprTime_5x': serializer.toJson<double>(b_relayOprTime_5x),
      'b_relayOprTime_Hi': serializer.toJson<double>(b_relayOprTime_Hi),
      'equipmentUsed': serializer.toJson<String>(equipmentUsed),
      'updateDate': serializer.toJson<DateTime>(updateDate),
    };
  }

  OcEfrPacLocalData copyWith(
          {int databaseID,
          int id,
          int trNo,
          String serialNo,
          double r_plugSetting,
          double r_TMS,
          double r_plugSetting_Hi,
          double r_time,
          double y_plugSetting,
          double y_TMS,
          double y_plugSetting_Hi,
          double y_time,
          double b_plugSetting,
          double b_TMS,
          double b_plugSetting_Hi,
          double b_time,
          double plugSettingMul_2x,
          double plugSettingMul_5x,
          double r_coilResistanace,
          double y_coilResistanace,
          double b_coilResistanace,
          double r_pickupCurrent,
          double y_pickupCurrent,
          double b_pickupCurrent,
          double r_relayOprTime_2x,
          double r_relayOprTime_5x,
          double r_relayOprTime_Hi,
          double y_relayOprTime_2x,
          double y_relayOprTime_5x,
          double y_relayOprTime_Hi,
          double b_relayOprTime_2x,
          double b_relayOprTime_5x,
          double b_relayOprTime_Hi,
          String equipmentUsed,
          DateTime updateDate}) =>
      OcEfrPacLocalData(
        databaseID: databaseID ?? this.databaseID,
        id: id ?? this.id,
        trNo: trNo ?? this.trNo,
        serialNo: serialNo ?? this.serialNo,
        r_plugSetting: r_plugSetting ?? this.r_plugSetting,
        r_TMS: r_TMS ?? this.r_TMS,
        r_plugSetting_Hi: r_plugSetting_Hi ?? this.r_plugSetting_Hi,
        r_time: r_time ?? this.r_time,
        y_plugSetting: y_plugSetting ?? this.y_plugSetting,
        y_TMS: y_TMS ?? this.y_TMS,
        y_plugSetting_Hi: y_plugSetting_Hi ?? this.y_plugSetting_Hi,
        y_time: y_time ?? this.y_time,
        b_plugSetting: b_plugSetting ?? this.b_plugSetting,
        b_TMS: b_TMS ?? this.b_TMS,
        b_plugSetting_Hi: b_plugSetting_Hi ?? this.b_plugSetting_Hi,
        b_time: b_time ?? this.b_time,
        plugSettingMul_2x: plugSettingMul_2x ?? this.plugSettingMul_2x,
        plugSettingMul_5x: plugSettingMul_5x ?? this.plugSettingMul_5x,
        r_coilResistanace: r_coilResistanace ?? this.r_coilResistanace,
        y_coilResistanace: y_coilResistanace ?? this.y_coilResistanace,
        b_coilResistanace: b_coilResistanace ?? this.b_coilResistanace,
        r_pickupCurrent: r_pickupCurrent ?? this.r_pickupCurrent,
        y_pickupCurrent: y_pickupCurrent ?? this.y_pickupCurrent,
        b_pickupCurrent: b_pickupCurrent ?? this.b_pickupCurrent,
        r_relayOprTime_2x: r_relayOprTime_2x ?? this.r_relayOprTime_2x,
        r_relayOprTime_5x: r_relayOprTime_5x ?? this.r_relayOprTime_5x,
        r_relayOprTime_Hi: r_relayOprTime_Hi ?? this.r_relayOprTime_Hi,
        y_relayOprTime_2x: y_relayOprTime_2x ?? this.y_relayOprTime_2x,
        y_relayOprTime_5x: y_relayOprTime_5x ?? this.y_relayOprTime_5x,
        y_relayOprTime_Hi: y_relayOprTime_Hi ?? this.y_relayOprTime_Hi,
        b_relayOprTime_2x: b_relayOprTime_2x ?? this.b_relayOprTime_2x,
        b_relayOprTime_5x: b_relayOprTime_5x ?? this.b_relayOprTime_5x,
        b_relayOprTime_Hi: b_relayOprTime_Hi ?? this.b_relayOprTime_Hi,
        equipmentUsed: equipmentUsed ?? this.equipmentUsed,
        updateDate: updateDate ?? this.updateDate,
      );
  @override
  String toString() {
    return (StringBuffer('OcEfrPacLocalData(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('r_plugSetting: $r_plugSetting, ')
          ..write('r_TMS: $r_TMS, ')
          ..write('r_plugSetting_Hi: $r_plugSetting_Hi, ')
          ..write('r_time: $r_time, ')
          ..write('y_plugSetting: $y_plugSetting, ')
          ..write('y_TMS: $y_TMS, ')
          ..write('y_plugSetting_Hi: $y_plugSetting_Hi, ')
          ..write('y_time: $y_time, ')
          ..write('b_plugSetting: $b_plugSetting, ')
          ..write('b_TMS: $b_TMS, ')
          ..write('b_plugSetting_Hi: $b_plugSetting_Hi, ')
          ..write('b_time: $b_time, ')
          ..write('plugSettingMul_2x: $plugSettingMul_2x, ')
          ..write('plugSettingMul_5x: $plugSettingMul_5x, ')
          ..write('r_coilResistanace: $r_coilResistanace, ')
          ..write('y_coilResistanace: $y_coilResistanace, ')
          ..write('b_coilResistanace: $b_coilResistanace, ')
          ..write('r_pickupCurrent: $r_pickupCurrent, ')
          ..write('y_pickupCurrent: $y_pickupCurrent, ')
          ..write('b_pickupCurrent: $b_pickupCurrent, ')
          ..write('r_relayOprTime_2x: $r_relayOprTime_2x, ')
          ..write('r_relayOprTime_5x: $r_relayOprTime_5x, ')
          ..write('r_relayOprTime_Hi: $r_relayOprTime_Hi, ')
          ..write('y_relayOprTime_2x: $y_relayOprTime_2x, ')
          ..write('y_relayOprTime_5x: $y_relayOprTime_5x, ')
          ..write('y_relayOprTime_Hi: $y_relayOprTime_Hi, ')
          ..write('b_relayOprTime_2x: $b_relayOprTime_2x, ')
          ..write('b_relayOprTime_5x: $b_relayOprTime_5x, ')
          ..write('b_relayOprTime_Hi: $b_relayOprTime_Hi, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        databaseID,
        id,
        trNo,
        serialNo,
        r_plugSetting,
        r_TMS,
        r_plugSetting_Hi,
        r_time,
        y_plugSetting,
        y_TMS,
        y_plugSetting_Hi,
        y_time,
        b_plugSetting,
        b_TMS,
        b_plugSetting_Hi,
        b_time,
        plugSettingMul_2x,
        plugSettingMul_5x,
        r_coilResistanace,
        y_coilResistanace,
        b_coilResistanace,
        r_pickupCurrent,
        y_pickupCurrent,
        b_pickupCurrent,
        r_relayOprTime_2x,
        r_relayOprTime_5x,
        r_relayOprTime_Hi,
        y_relayOprTime_2x,
        y_relayOprTime_5x,
        y_relayOprTime_Hi,
        b_relayOprTime_2x,
        b_relayOprTime_5x,
        b_relayOprTime_Hi,
        equipmentUsed,
        updateDate
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is OcEfrPacLocalData &&
          other.databaseID == this.databaseID &&
          other.id == this.id &&
          other.trNo == this.trNo &&
          other.serialNo == this.serialNo &&
          other.r_plugSetting == this.r_plugSetting &&
          other.r_TMS == this.r_TMS &&
          other.r_plugSetting_Hi == this.r_plugSetting_Hi &&
          other.r_time == this.r_time &&
          other.y_plugSetting == this.y_plugSetting &&
          other.y_TMS == this.y_TMS &&
          other.y_plugSetting_Hi == this.y_plugSetting_Hi &&
          other.y_time == this.y_time &&
          other.b_plugSetting == this.b_plugSetting &&
          other.b_TMS == this.b_TMS &&
          other.b_plugSetting_Hi == this.b_plugSetting_Hi &&
          other.b_time == this.b_time &&
          other.plugSettingMul_2x == this.plugSettingMul_2x &&
          other.plugSettingMul_5x == this.plugSettingMul_5x &&
          other.r_coilResistanace == this.r_coilResistanace &&
          other.y_coilResistanace == this.y_coilResistanace &&
          other.b_coilResistanace == this.b_coilResistanace &&
          other.r_pickupCurrent == this.r_pickupCurrent &&
          other.y_pickupCurrent == this.y_pickupCurrent &&
          other.b_pickupCurrent == this.b_pickupCurrent &&
          other.r_relayOprTime_2x == this.r_relayOprTime_2x &&
          other.r_relayOprTime_5x == this.r_relayOprTime_5x &&
          other.r_relayOprTime_Hi == this.r_relayOprTime_Hi &&
          other.y_relayOprTime_2x == this.y_relayOprTime_2x &&
          other.y_relayOprTime_5x == this.y_relayOprTime_5x &&
          other.y_relayOprTime_Hi == this.y_relayOprTime_Hi &&
          other.b_relayOprTime_2x == this.b_relayOprTime_2x &&
          other.b_relayOprTime_5x == this.b_relayOprTime_5x &&
          other.b_relayOprTime_Hi == this.b_relayOprTime_Hi &&
          other.equipmentUsed == this.equipmentUsed &&
          other.updateDate == this.updateDate);
}

class OcEfrPacLocalDatasourceImplCompanion
    extends UpdateCompanion<OcEfrPacLocalData> {
  final Value<int> databaseID;
  final Value<int> id;
  final Value<int> trNo;
  final Value<String> serialNo;
  final Value<double> r_plugSetting;
  final Value<double> r_TMS;
  final Value<double> r_plugSetting_Hi;
  final Value<double> r_time;
  final Value<double> y_plugSetting;
  final Value<double> y_TMS;
  final Value<double> y_plugSetting_Hi;
  final Value<double> y_time;
  final Value<double> b_plugSetting;
  final Value<double> b_TMS;
  final Value<double> b_plugSetting_Hi;
  final Value<double> b_time;
  final Value<double> plugSettingMul_2x;
  final Value<double> plugSettingMul_5x;
  final Value<double> r_coilResistanace;
  final Value<double> y_coilResistanace;
  final Value<double> b_coilResistanace;
  final Value<double> r_pickupCurrent;
  final Value<double> y_pickupCurrent;
  final Value<double> b_pickupCurrent;
  final Value<double> r_relayOprTime_2x;
  final Value<double> r_relayOprTime_5x;
  final Value<double> r_relayOprTime_Hi;
  final Value<double> y_relayOprTime_2x;
  final Value<double> y_relayOprTime_5x;
  final Value<double> y_relayOprTime_Hi;
  final Value<double> b_relayOprTime_2x;
  final Value<double> b_relayOprTime_5x;
  final Value<double> b_relayOprTime_Hi;
  final Value<String> equipmentUsed;
  final Value<DateTime> updateDate;
  const OcEfrPacLocalDatasourceImplCompanion({
    this.databaseID = const Value.absent(),
    this.id = const Value.absent(),
    this.trNo = const Value.absent(),
    this.serialNo = const Value.absent(),
    this.r_plugSetting = const Value.absent(),
    this.r_TMS = const Value.absent(),
    this.r_plugSetting_Hi = const Value.absent(),
    this.r_time = const Value.absent(),
    this.y_plugSetting = const Value.absent(),
    this.y_TMS = const Value.absent(),
    this.y_plugSetting_Hi = const Value.absent(),
    this.y_time = const Value.absent(),
    this.b_plugSetting = const Value.absent(),
    this.b_TMS = const Value.absent(),
    this.b_plugSetting_Hi = const Value.absent(),
    this.b_time = const Value.absent(),
    this.plugSettingMul_2x = const Value.absent(),
    this.plugSettingMul_5x = const Value.absent(),
    this.r_coilResistanace = const Value.absent(),
    this.y_coilResistanace = const Value.absent(),
    this.b_coilResistanace = const Value.absent(),
    this.r_pickupCurrent = const Value.absent(),
    this.y_pickupCurrent = const Value.absent(),
    this.b_pickupCurrent = const Value.absent(),
    this.r_relayOprTime_2x = const Value.absent(),
    this.r_relayOprTime_5x = const Value.absent(),
    this.r_relayOprTime_Hi = const Value.absent(),
    this.y_relayOprTime_2x = const Value.absent(),
    this.y_relayOprTime_5x = const Value.absent(),
    this.y_relayOprTime_Hi = const Value.absent(),
    this.b_relayOprTime_2x = const Value.absent(),
    this.b_relayOprTime_5x = const Value.absent(),
    this.b_relayOprTime_Hi = const Value.absent(),
    this.equipmentUsed = const Value.absent(),
    this.updateDate = const Value.absent(),
  });
  OcEfrPacLocalDatasourceImplCompanion.insert({
    @required int databaseID,
    this.id = const Value.absent(),
    @required int trNo,
    @required String serialNo,
    @required double r_plugSetting,
    @required double r_TMS,
    @required double r_plugSetting_Hi,
    @required double r_time,
    @required double y_plugSetting,
    @required double y_TMS,
    @required double y_plugSetting_Hi,
    @required double y_time,
    @required double b_plugSetting,
    @required double b_TMS,
    @required double b_plugSetting_Hi,
    @required double b_time,
    @required double plugSettingMul_2x,
    @required double plugSettingMul_5x,
    @required double r_coilResistanace,
    @required double y_coilResistanace,
    @required double b_coilResistanace,
    @required double r_pickupCurrent,
    @required double y_pickupCurrent,
    @required double b_pickupCurrent,
    @required double r_relayOprTime_2x,
    @required double r_relayOprTime_5x,
    @required double r_relayOprTime_Hi,
    @required double y_relayOprTime_2x,
    @required double y_relayOprTime_5x,
    @required double y_relayOprTime_Hi,
    @required double b_relayOprTime_2x,
    @required double b_relayOprTime_5x,
    @required double b_relayOprTime_Hi,
    @required String equipmentUsed,
    this.updateDate = const Value.absent(),
  })  : databaseID = Value(databaseID),
        trNo = Value(trNo),
        serialNo = Value(serialNo),
        r_plugSetting = Value(r_plugSetting),
        r_TMS = Value(r_TMS),
        r_plugSetting_Hi = Value(r_plugSetting_Hi),
        r_time = Value(r_time),
        y_plugSetting = Value(y_plugSetting),
        y_TMS = Value(y_TMS),
        y_plugSetting_Hi = Value(y_plugSetting_Hi),
        y_time = Value(y_time),
        b_plugSetting = Value(b_plugSetting),
        b_TMS = Value(b_TMS),
        b_plugSetting_Hi = Value(b_plugSetting_Hi),
        b_time = Value(b_time),
        plugSettingMul_2x = Value(plugSettingMul_2x),
        plugSettingMul_5x = Value(plugSettingMul_5x),
        r_coilResistanace = Value(r_coilResistanace),
        y_coilResistanace = Value(y_coilResistanace),
        b_coilResistanace = Value(b_coilResistanace),
        r_pickupCurrent = Value(r_pickupCurrent),
        y_pickupCurrent = Value(y_pickupCurrent),
        b_pickupCurrent = Value(b_pickupCurrent),
        r_relayOprTime_2x = Value(r_relayOprTime_2x),
        r_relayOprTime_5x = Value(r_relayOprTime_5x),
        r_relayOprTime_Hi = Value(r_relayOprTime_Hi),
        y_relayOprTime_2x = Value(y_relayOprTime_2x),
        y_relayOprTime_5x = Value(y_relayOprTime_5x),
        y_relayOprTime_Hi = Value(y_relayOprTime_Hi),
        b_relayOprTime_2x = Value(b_relayOprTime_2x),
        b_relayOprTime_5x = Value(b_relayOprTime_5x),
        b_relayOprTime_Hi = Value(b_relayOprTime_Hi),
        equipmentUsed = Value(equipmentUsed);
  static Insertable<OcEfrPacLocalData> custom({
    Expression<int> databaseID,
    Expression<int> id,
    Expression<int> trNo,
    Expression<String> serialNo,
    Expression<double> r_plugSetting,
    Expression<double> r_TMS,
    Expression<double> r_plugSetting_Hi,
    Expression<double> r_time,
    Expression<double> y_plugSetting,
    Expression<double> y_TMS,
    Expression<double> y_plugSetting_Hi,
    Expression<double> y_time,
    Expression<double> b_plugSetting,
    Expression<double> b_TMS,
    Expression<double> b_plugSetting_Hi,
    Expression<double> b_time,
    Expression<double> plugSettingMul_2x,
    Expression<double> plugSettingMul_5x,
    Expression<double> r_coilResistanace,
    Expression<double> y_coilResistanace,
    Expression<double> b_coilResistanace,
    Expression<double> r_pickupCurrent,
    Expression<double> y_pickupCurrent,
    Expression<double> b_pickupCurrent,
    Expression<double> r_relayOprTime_2x,
    Expression<double> r_relayOprTime_5x,
    Expression<double> r_relayOprTime_Hi,
    Expression<double> y_relayOprTime_2x,
    Expression<double> y_relayOprTime_5x,
    Expression<double> y_relayOprTime_Hi,
    Expression<double> b_relayOprTime_2x,
    Expression<double> b_relayOprTime_5x,
    Expression<double> b_relayOprTime_Hi,
    Expression<String> equipmentUsed,
    Expression<DateTime> updateDate,
  }) {
    return RawValuesInsertable({
      if (databaseID != null) 'database_i_d': databaseID,
      if (id != null) 'id': id,
      if (trNo != null) 'tr_no': trNo,
      if (serialNo != null) 'serial_no': serialNo,
      if (r_plugSetting != null) 'r_plug_setting': r_plugSetting,
      if (r_TMS != null) 'r_t_m_s': r_TMS,
      if (r_plugSetting_Hi != null) 'r_plug_setting_hi': r_plugSetting_Hi,
      if (r_time != null) 'r_time': r_time,
      if (y_plugSetting != null) 'y_plug_setting': y_plugSetting,
      if (y_TMS != null) 'y_t_m_s': y_TMS,
      if (y_plugSetting_Hi != null) 'y_plug_setting_hi': y_plugSetting_Hi,
      if (y_time != null) 'y_time': y_time,
      if (b_plugSetting != null) 'b_plug_setting': b_plugSetting,
      if (b_TMS != null) 'b_t_m_s': b_TMS,
      if (b_plugSetting_Hi != null) 'b_plug_setting_hi': b_plugSetting_Hi,
      if (b_time != null) 'b_time': b_time,
      if (plugSettingMul_2x != null) 'plug_setting_mul_2x': plugSettingMul_2x,
      if (plugSettingMul_5x != null) 'plug_setting_mul_5x': plugSettingMul_5x,
      if (r_coilResistanace != null) 'r_coil_resistanace': r_coilResistanace,
      if (y_coilResistanace != null) 'y_coil_resistanace': y_coilResistanace,
      if (b_coilResistanace != null) 'b_coil_resistanace': b_coilResistanace,
      if (r_pickupCurrent != null) 'r_pickup_current': r_pickupCurrent,
      if (y_pickupCurrent != null) 'y_pickup_current': y_pickupCurrent,
      if (b_pickupCurrent != null) 'b_pickup_current': b_pickupCurrent,
      if (r_relayOprTime_2x != null) 'r_relay_opr_time_2x': r_relayOprTime_2x,
      if (r_relayOprTime_5x != null) 'r_relay_opr_time_5x': r_relayOprTime_5x,
      if (r_relayOprTime_Hi != null) 'r_relay_opr_time_hi': r_relayOprTime_Hi,
      if (y_relayOprTime_2x != null) 'y_relay_opr_time_2x': y_relayOprTime_2x,
      if (y_relayOprTime_5x != null) 'y_relay_opr_time_5x': y_relayOprTime_5x,
      if (y_relayOprTime_Hi != null) 'y_relay_opr_time_hi': y_relayOprTime_Hi,
      if (b_relayOprTime_2x != null) 'b_relay_opr_time_2x': b_relayOprTime_2x,
      if (b_relayOprTime_5x != null) 'b_relay_opr_time_5x': b_relayOprTime_5x,
      if (b_relayOprTime_Hi != null) 'b_relay_opr_time_hi': b_relayOprTime_Hi,
      if (equipmentUsed != null) 'equipment_used': equipmentUsed,
      if (updateDate != null) 'update_date': updateDate,
    });
  }

  OcEfrPacLocalDatasourceImplCompanion copyWith(
      {Value<int> databaseID,
      Value<int> id,
      Value<int> trNo,
      Value<String> serialNo,
      Value<double> r_plugSetting,
      Value<double> r_TMS,
      Value<double> r_plugSetting_Hi,
      Value<double> r_time,
      Value<double> y_plugSetting,
      Value<double> y_TMS,
      Value<double> y_plugSetting_Hi,
      Value<double> y_time,
      Value<double> b_plugSetting,
      Value<double> b_TMS,
      Value<double> b_plugSetting_Hi,
      Value<double> b_time,
      Value<double> plugSettingMul_2x,
      Value<double> plugSettingMul_5x,
      Value<double> r_coilResistanace,
      Value<double> y_coilResistanace,
      Value<double> b_coilResistanace,
      Value<double> r_pickupCurrent,
      Value<double> y_pickupCurrent,
      Value<double> b_pickupCurrent,
      Value<double> r_relayOprTime_2x,
      Value<double> r_relayOprTime_5x,
      Value<double> r_relayOprTime_Hi,
      Value<double> y_relayOprTime_2x,
      Value<double> y_relayOprTime_5x,
      Value<double> y_relayOprTime_Hi,
      Value<double> b_relayOprTime_2x,
      Value<double> b_relayOprTime_5x,
      Value<double> b_relayOprTime_Hi,
      Value<String> equipmentUsed,
      Value<DateTime> updateDate}) {
    return OcEfrPacLocalDatasourceImplCompanion(
      databaseID: databaseID ?? this.databaseID,
      id: id ?? this.id,
      trNo: trNo ?? this.trNo,
      serialNo: serialNo ?? this.serialNo,
      r_plugSetting: r_plugSetting ?? this.r_plugSetting,
      r_TMS: r_TMS ?? this.r_TMS,
      r_plugSetting_Hi: r_plugSetting_Hi ?? this.r_plugSetting_Hi,
      r_time: r_time ?? this.r_time,
      y_plugSetting: y_plugSetting ?? this.y_plugSetting,
      y_TMS: y_TMS ?? this.y_TMS,
      y_plugSetting_Hi: y_plugSetting_Hi ?? this.y_plugSetting_Hi,
      y_time: y_time ?? this.y_time,
      b_plugSetting: b_plugSetting ?? this.b_plugSetting,
      b_TMS: b_TMS ?? this.b_TMS,
      b_plugSetting_Hi: b_plugSetting_Hi ?? this.b_plugSetting_Hi,
      b_time: b_time ?? this.b_time,
      plugSettingMul_2x: plugSettingMul_2x ?? this.plugSettingMul_2x,
      plugSettingMul_5x: plugSettingMul_5x ?? this.plugSettingMul_5x,
      r_coilResistanace: r_coilResistanace ?? this.r_coilResistanace,
      y_coilResistanace: y_coilResistanace ?? this.y_coilResistanace,
      b_coilResistanace: b_coilResistanace ?? this.b_coilResistanace,
      r_pickupCurrent: r_pickupCurrent ?? this.r_pickupCurrent,
      y_pickupCurrent: y_pickupCurrent ?? this.y_pickupCurrent,
      b_pickupCurrent: b_pickupCurrent ?? this.b_pickupCurrent,
      r_relayOprTime_2x: r_relayOprTime_2x ?? this.r_relayOprTime_2x,
      r_relayOprTime_5x: r_relayOprTime_5x ?? this.r_relayOprTime_5x,
      r_relayOprTime_Hi: r_relayOprTime_Hi ?? this.r_relayOprTime_Hi,
      y_relayOprTime_2x: y_relayOprTime_2x ?? this.y_relayOprTime_2x,
      y_relayOprTime_5x: y_relayOprTime_5x ?? this.y_relayOprTime_5x,
      y_relayOprTime_Hi: y_relayOprTime_Hi ?? this.y_relayOprTime_Hi,
      b_relayOprTime_2x: b_relayOprTime_2x ?? this.b_relayOprTime_2x,
      b_relayOprTime_5x: b_relayOprTime_5x ?? this.b_relayOprTime_5x,
      b_relayOprTime_Hi: b_relayOprTime_Hi ?? this.b_relayOprTime_Hi,
      equipmentUsed: equipmentUsed ?? this.equipmentUsed,
      updateDate: updateDate ?? this.updateDate,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (databaseID.present) {
      map['database_i_d'] = Variable<int>(databaseID.value);
    }
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (trNo.present) {
      map['tr_no'] = Variable<int>(trNo.value);
    }
    if (serialNo.present) {
      map['serial_no'] = Variable<String>(serialNo.value);
    }
    if (r_plugSetting.present) {
      map['r_plug_setting'] = Variable<double>(r_plugSetting.value);
    }
    if (r_TMS.present) {
      map['r_t_m_s'] = Variable<double>(r_TMS.value);
    }
    if (r_plugSetting_Hi.present) {
      map['r_plug_setting_hi'] = Variable<double>(r_plugSetting_Hi.value);
    }
    if (r_time.present) {
      map['r_time'] = Variable<double>(r_time.value);
    }
    if (y_plugSetting.present) {
      map['y_plug_setting'] = Variable<double>(y_plugSetting.value);
    }
    if (y_TMS.present) {
      map['y_t_m_s'] = Variable<double>(y_TMS.value);
    }
    if (y_plugSetting_Hi.present) {
      map['y_plug_setting_hi'] = Variable<double>(y_plugSetting_Hi.value);
    }
    if (y_time.present) {
      map['y_time'] = Variable<double>(y_time.value);
    }
    if (b_plugSetting.present) {
      map['b_plug_setting'] = Variable<double>(b_plugSetting.value);
    }
    if (b_TMS.present) {
      map['b_t_m_s'] = Variable<double>(b_TMS.value);
    }
    if (b_plugSetting_Hi.present) {
      map['b_plug_setting_hi'] = Variable<double>(b_plugSetting_Hi.value);
    }
    if (b_time.present) {
      map['b_time'] = Variable<double>(b_time.value);
    }
    if (plugSettingMul_2x.present) {
      map['plug_setting_mul_2x'] = Variable<double>(plugSettingMul_2x.value);
    }
    if (plugSettingMul_5x.present) {
      map['plug_setting_mul_5x'] = Variable<double>(plugSettingMul_5x.value);
    }
    if (r_coilResistanace.present) {
      map['r_coil_resistanace'] = Variable<double>(r_coilResistanace.value);
    }
    if (y_coilResistanace.present) {
      map['y_coil_resistanace'] = Variable<double>(y_coilResistanace.value);
    }
    if (b_coilResistanace.present) {
      map['b_coil_resistanace'] = Variable<double>(b_coilResistanace.value);
    }
    if (r_pickupCurrent.present) {
      map['r_pickup_current'] = Variable<double>(r_pickupCurrent.value);
    }
    if (y_pickupCurrent.present) {
      map['y_pickup_current'] = Variable<double>(y_pickupCurrent.value);
    }
    if (b_pickupCurrent.present) {
      map['b_pickup_current'] = Variable<double>(b_pickupCurrent.value);
    }
    if (r_relayOprTime_2x.present) {
      map['r_relay_opr_time_2x'] = Variable<double>(r_relayOprTime_2x.value);
    }
    if (r_relayOprTime_5x.present) {
      map['r_relay_opr_time_5x'] = Variable<double>(r_relayOprTime_5x.value);
    }
    if (r_relayOprTime_Hi.present) {
      map['r_relay_opr_time_hi'] = Variable<double>(r_relayOprTime_Hi.value);
    }
    if (y_relayOprTime_2x.present) {
      map['y_relay_opr_time_2x'] = Variable<double>(y_relayOprTime_2x.value);
    }
    if (y_relayOprTime_5x.present) {
      map['y_relay_opr_time_5x'] = Variable<double>(y_relayOprTime_5x.value);
    }
    if (y_relayOprTime_Hi.present) {
      map['y_relay_opr_time_hi'] = Variable<double>(y_relayOprTime_Hi.value);
    }
    if (b_relayOprTime_2x.present) {
      map['b_relay_opr_time_2x'] = Variable<double>(b_relayOprTime_2x.value);
    }
    if (b_relayOprTime_5x.present) {
      map['b_relay_opr_time_5x'] = Variable<double>(b_relayOprTime_5x.value);
    }
    if (b_relayOprTime_Hi.present) {
      map['b_relay_opr_time_hi'] = Variable<double>(b_relayOprTime_Hi.value);
    }
    if (equipmentUsed.present) {
      map['equipment_used'] = Variable<String>(equipmentUsed.value);
    }
    if (updateDate.present) {
      map['update_date'] = Variable<DateTime>(updateDate.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('OcEfrPacLocalDatasourceImplCompanion(')
          ..write('databaseID: $databaseID, ')
          ..write('id: $id, ')
          ..write('trNo: $trNo, ')
          ..write('serialNo: $serialNo, ')
          ..write('r_plugSetting: $r_plugSetting, ')
          ..write('r_TMS: $r_TMS, ')
          ..write('r_plugSetting_Hi: $r_plugSetting_Hi, ')
          ..write('r_time: $r_time, ')
          ..write('y_plugSetting: $y_plugSetting, ')
          ..write('y_TMS: $y_TMS, ')
          ..write('y_plugSetting_Hi: $y_plugSetting_Hi, ')
          ..write('y_time: $y_time, ')
          ..write('b_plugSetting: $b_plugSetting, ')
          ..write('b_TMS: $b_TMS, ')
          ..write('b_plugSetting_Hi: $b_plugSetting_Hi, ')
          ..write('b_time: $b_time, ')
          ..write('plugSettingMul_2x: $plugSettingMul_2x, ')
          ..write('plugSettingMul_5x: $plugSettingMul_5x, ')
          ..write('r_coilResistanace: $r_coilResistanace, ')
          ..write('y_coilResistanace: $y_coilResistanace, ')
          ..write('b_coilResistanace: $b_coilResistanace, ')
          ..write('r_pickupCurrent: $r_pickupCurrent, ')
          ..write('y_pickupCurrent: $y_pickupCurrent, ')
          ..write('b_pickupCurrent: $b_pickupCurrent, ')
          ..write('r_relayOprTime_2x: $r_relayOprTime_2x, ')
          ..write('r_relayOprTime_5x: $r_relayOprTime_5x, ')
          ..write('r_relayOprTime_Hi: $r_relayOprTime_Hi, ')
          ..write('y_relayOprTime_2x: $y_relayOprTime_2x, ')
          ..write('y_relayOprTime_5x: $y_relayOprTime_5x, ')
          ..write('y_relayOprTime_Hi: $y_relayOprTime_Hi, ')
          ..write('b_relayOprTime_2x: $b_relayOprTime_2x, ')
          ..write('b_relayOprTime_5x: $b_relayOprTime_5x, ')
          ..write('b_relayOprTime_Hi: $b_relayOprTime_Hi, ')
          ..write('equipmentUsed: $equipmentUsed, ')
          ..write('updateDate: $updateDate')
          ..write(')'))
        .toString();
  }
}

class $OcEfrPacLocalDatasourceImplTable extends OcEfrPacLocalDatasourceImpl
    with TableInfo<$OcEfrPacLocalDatasourceImplTable, OcEfrPacLocalData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String _alias;
  $OcEfrPacLocalDatasourceImplTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _databaseIDMeta = const VerificationMeta('databaseID');
  GeneratedColumn<int> _databaseID;
  @override
  GeneratedColumn<int> get databaseID =>
      _databaseID ??= GeneratedColumn<int>('database_i_d', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedColumn<int> _id;
  @override
  GeneratedColumn<int> get id =>
      _id ??= GeneratedColumn<int>('id', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
  final VerificationMeta _trNoMeta = const VerificationMeta('trNo');
  GeneratedColumn<int> _trNo;
  @override
  GeneratedColumn<int> get trNo =>
      _trNo ??= GeneratedColumn<int>('tr_no', aliasedName, false,
          type: const IntType(), requiredDuringInsert: true);
  final VerificationMeta _serialNoMeta = const VerificationMeta('serialNo');
  GeneratedColumn<String> _serialNo;
  @override
  GeneratedColumn<String> get serialNo => _serialNo ??= GeneratedColumn<String>(
      'serial_no', aliasedName, false,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 1, maxTextLength: 50),
      type: const StringType(),
      requiredDuringInsert: true);
  final VerificationMeta _r_plugSettingMeta =
      const VerificationMeta('r_plugSetting');
  GeneratedColumn<double> _r_plugSetting;
  @override
  GeneratedColumn<double> get r_plugSetting => _r_plugSetting ??=
      GeneratedColumn<double>('r_plug_setting', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_TMSMeta = const VerificationMeta('r_TMS');
  GeneratedColumn<double> _r_TMS;
  @override
  GeneratedColumn<double> get r_TMS =>
      _r_TMS ??= GeneratedColumn<double>('r_t_m_s', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_plugSetting_HiMeta =
      const VerificationMeta('r_plugSetting_Hi');
  GeneratedColumn<double> _r_plugSetting_Hi;
  @override
  GeneratedColumn<double> get r_plugSetting_Hi => _r_plugSetting_Hi ??=
      GeneratedColumn<double>('r_plug_setting_hi', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_timeMeta = const VerificationMeta('r_time');
  GeneratedColumn<double> _r_time;
  @override
  GeneratedColumn<double> get r_time =>
      _r_time ??= GeneratedColumn<double>('r_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_plugSettingMeta =
      const VerificationMeta('y_plugSetting');
  GeneratedColumn<double> _y_plugSetting;
  @override
  GeneratedColumn<double> get y_plugSetting => _y_plugSetting ??=
      GeneratedColumn<double>('y_plug_setting', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_TMSMeta = const VerificationMeta('y_TMS');
  GeneratedColumn<double> _y_TMS;
  @override
  GeneratedColumn<double> get y_TMS =>
      _y_TMS ??= GeneratedColumn<double>('y_t_m_s', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_plugSetting_HiMeta =
      const VerificationMeta('y_plugSetting_Hi');
  GeneratedColumn<double> _y_plugSetting_Hi;
  @override
  GeneratedColumn<double> get y_plugSetting_Hi => _y_plugSetting_Hi ??=
      GeneratedColumn<double>('y_plug_setting_hi', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_timeMeta = const VerificationMeta('y_time');
  GeneratedColumn<double> _y_time;
  @override
  GeneratedColumn<double> get y_time =>
      _y_time ??= GeneratedColumn<double>('y_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_plugSettingMeta =
      const VerificationMeta('b_plugSetting');
  GeneratedColumn<double> _b_plugSetting;
  @override
  GeneratedColumn<double> get b_plugSetting => _b_plugSetting ??=
      GeneratedColumn<double>('b_plug_setting', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_TMSMeta = const VerificationMeta('b_TMS');
  GeneratedColumn<double> _b_TMS;
  @override
  GeneratedColumn<double> get b_TMS =>
      _b_TMS ??= GeneratedColumn<double>('b_t_m_s', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_plugSetting_HiMeta =
      const VerificationMeta('b_plugSetting_Hi');
  GeneratedColumn<double> _b_plugSetting_Hi;
  @override
  GeneratedColumn<double> get b_plugSetting_Hi => _b_plugSetting_Hi ??=
      GeneratedColumn<double>('b_plug_setting_hi', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_timeMeta = const VerificationMeta('b_time');
  GeneratedColumn<double> _b_time;
  @override
  GeneratedColumn<double> get b_time =>
      _b_time ??= GeneratedColumn<double>('b_time', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _plugSettingMul_2xMeta =
      const VerificationMeta('plugSettingMul_2x');
  GeneratedColumn<double> _plugSettingMul_2x;
  @override
  GeneratedColumn<double> get plugSettingMul_2x => _plugSettingMul_2x ??=
      GeneratedColumn<double>('plug_setting_mul_2x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _plugSettingMul_5xMeta =
      const VerificationMeta('plugSettingMul_5x');
  GeneratedColumn<double> _plugSettingMul_5x;
  @override
  GeneratedColumn<double> get plugSettingMul_5x => _plugSettingMul_5x ??=
      GeneratedColumn<double>('plug_setting_mul_5x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_coilResistanaceMeta =
      const VerificationMeta('r_coilResistanace');
  GeneratedColumn<double> _r_coilResistanace;
  @override
  GeneratedColumn<double> get r_coilResistanace => _r_coilResistanace ??=
      GeneratedColumn<double>('r_coil_resistanace', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_coilResistanaceMeta =
      const VerificationMeta('y_coilResistanace');
  GeneratedColumn<double> _y_coilResistanace;
  @override
  GeneratedColumn<double> get y_coilResistanace => _y_coilResistanace ??=
      GeneratedColumn<double>('y_coil_resistanace', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_coilResistanaceMeta =
      const VerificationMeta('b_coilResistanace');
  GeneratedColumn<double> _b_coilResistanace;
  @override
  GeneratedColumn<double> get b_coilResistanace => _b_coilResistanace ??=
      GeneratedColumn<double>('b_coil_resistanace', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_pickupCurrentMeta =
      const VerificationMeta('r_pickupCurrent');
  GeneratedColumn<double> _r_pickupCurrent;
  @override
  GeneratedColumn<double> get r_pickupCurrent => _r_pickupCurrent ??=
      GeneratedColumn<double>('r_pickup_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_pickupCurrentMeta =
      const VerificationMeta('y_pickupCurrent');
  GeneratedColumn<double> _y_pickupCurrent;
  @override
  GeneratedColumn<double> get y_pickupCurrent => _y_pickupCurrent ??=
      GeneratedColumn<double>('y_pickup_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_pickupCurrentMeta =
      const VerificationMeta('b_pickupCurrent');
  GeneratedColumn<double> _b_pickupCurrent;
  @override
  GeneratedColumn<double> get b_pickupCurrent => _b_pickupCurrent ??=
      GeneratedColumn<double>('b_pickup_current', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_relayOprTime_2xMeta =
      const VerificationMeta('r_relayOprTime_2x');
  GeneratedColumn<double> _r_relayOprTime_2x;
  @override
  GeneratedColumn<double> get r_relayOprTime_2x => _r_relayOprTime_2x ??=
      GeneratedColumn<double>('r_relay_opr_time_2x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_relayOprTime_5xMeta =
      const VerificationMeta('r_relayOprTime_5x');
  GeneratedColumn<double> _r_relayOprTime_5x;
  @override
  GeneratedColumn<double> get r_relayOprTime_5x => _r_relayOprTime_5x ??=
      GeneratedColumn<double>('r_relay_opr_time_5x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _r_relayOprTime_HiMeta =
      const VerificationMeta('r_relayOprTime_Hi');
  GeneratedColumn<double> _r_relayOprTime_Hi;
  @override
  GeneratedColumn<double> get r_relayOprTime_Hi => _r_relayOprTime_Hi ??=
      GeneratedColumn<double>('r_relay_opr_time_hi', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_relayOprTime_2xMeta =
      const VerificationMeta('y_relayOprTime_2x');
  GeneratedColumn<double> _y_relayOprTime_2x;
  @override
  GeneratedColumn<double> get y_relayOprTime_2x => _y_relayOprTime_2x ??=
      GeneratedColumn<double>('y_relay_opr_time_2x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_relayOprTime_5xMeta =
      const VerificationMeta('y_relayOprTime_5x');
  GeneratedColumn<double> _y_relayOprTime_5x;
  @override
  GeneratedColumn<double> get y_relayOprTime_5x => _y_relayOprTime_5x ??=
      GeneratedColumn<double>('y_relay_opr_time_5x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _y_relayOprTime_HiMeta =
      const VerificationMeta('y_relayOprTime_Hi');
  GeneratedColumn<double> _y_relayOprTime_Hi;
  @override
  GeneratedColumn<double> get y_relayOprTime_Hi => _y_relayOprTime_Hi ??=
      GeneratedColumn<double>('y_relay_opr_time_hi', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_relayOprTime_2xMeta =
      const VerificationMeta('b_relayOprTime_2x');
  GeneratedColumn<double> _b_relayOprTime_2x;
  @override
  GeneratedColumn<double> get b_relayOprTime_2x => _b_relayOprTime_2x ??=
      GeneratedColumn<double>('b_relay_opr_time_2x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_relayOprTime_5xMeta =
      const VerificationMeta('b_relayOprTime_5x');
  GeneratedColumn<double> _b_relayOprTime_5x;
  @override
  GeneratedColumn<double> get b_relayOprTime_5x => _b_relayOprTime_5x ??=
      GeneratedColumn<double>('b_relay_opr_time_5x', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _b_relayOprTime_HiMeta =
      const VerificationMeta('b_relayOprTime_Hi');
  GeneratedColumn<double> _b_relayOprTime_Hi;
  @override
  GeneratedColumn<double> get b_relayOprTime_Hi => _b_relayOprTime_Hi ??=
      GeneratedColumn<double>('b_relay_opr_time_hi', aliasedName, false,
          type: const RealType(), requiredDuringInsert: true);
  final VerificationMeta _equipmentUsedMeta =
      const VerificationMeta('equipmentUsed');
  GeneratedColumn<String> _equipmentUsed;
  @override
  GeneratedColumn<String> get equipmentUsed => _equipmentUsed ??=
      GeneratedColumn<String>('equipment_used', aliasedName, false,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 1, maxTextLength: 50),
          type: const StringType(),
          requiredDuringInsert: true);
  final VerificationMeta _updateDateMeta = const VerificationMeta('updateDate');
  GeneratedColumn<DateTime> _updateDate;
  @override
  GeneratedColumn<DateTime> get updateDate => _updateDate ??=
      GeneratedColumn<DateTime>('update_date', aliasedName, false,
          type: const IntType(),
          requiredDuringInsert: false,
          defaultValue: Constant(DateTime.now()));
  @override
  List<GeneratedColumn> get $columns => [
        databaseID,
        id,
        trNo,
        serialNo,
        r_plugSetting,
        r_TMS,
        r_plugSetting_Hi,
        r_time,
        y_plugSetting,
        y_TMS,
        y_plugSetting_Hi,
        y_time,
        b_plugSetting,
        b_TMS,
        b_plugSetting_Hi,
        b_time,
        plugSettingMul_2x,
        plugSettingMul_5x,
        r_coilResistanace,
        y_coilResistanace,
        b_coilResistanace,
        r_pickupCurrent,
        y_pickupCurrent,
        b_pickupCurrent,
        r_relayOprTime_2x,
        r_relayOprTime_5x,
        r_relayOprTime_Hi,
        y_relayOprTime_2x,
        y_relayOprTime_5x,
        y_relayOprTime_Hi,
        b_relayOprTime_2x,
        b_relayOprTime_5x,
        b_relayOprTime_Hi,
        equipmentUsed,
        updateDate
      ];
  @override
  String get aliasedName => _alias ?? 'oc_efr_pac_local_datasource_impl';
  @override
  String get actualTableName => 'oc_efr_pac_local_datasource_impl';
  @override
  VerificationContext validateIntegrity(Insertable<OcEfrPacLocalData> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('database_i_d')) {
      context.handle(
          _databaseIDMeta,
          databaseID.isAcceptableOrUnknown(
              data['database_i_d'], _databaseIDMeta));
    } else if (isInserting) {
      context.missing(_databaseIDMeta);
    }
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id'], _idMeta));
    }
    if (data.containsKey('tr_no')) {
      context.handle(
          _trNoMeta, trNo.isAcceptableOrUnknown(data['tr_no'], _trNoMeta));
    } else if (isInserting) {
      context.missing(_trNoMeta);
    }
    if (data.containsKey('serial_no')) {
      context.handle(_serialNoMeta,
          serialNo.isAcceptableOrUnknown(data['serial_no'], _serialNoMeta));
    } else if (isInserting) {
      context.missing(_serialNoMeta);
    }
    if (data.containsKey('r_plug_setting')) {
      context.handle(
          _r_plugSettingMeta,
          r_plugSetting.isAcceptableOrUnknown(
              data['r_plug_setting'], _r_plugSettingMeta));
    } else if (isInserting) {
      context.missing(_r_plugSettingMeta);
    }
    if (data.containsKey('r_t_m_s')) {
      context.handle(
          _r_TMSMeta, r_TMS.isAcceptableOrUnknown(data['r_t_m_s'], _r_TMSMeta));
    } else if (isInserting) {
      context.missing(_r_TMSMeta);
    }
    if (data.containsKey('r_plug_setting_hi')) {
      context.handle(
          _r_plugSetting_HiMeta,
          r_plugSetting_Hi.isAcceptableOrUnknown(
              data['r_plug_setting_hi'], _r_plugSetting_HiMeta));
    } else if (isInserting) {
      context.missing(_r_plugSetting_HiMeta);
    }
    if (data.containsKey('r_time')) {
      context.handle(_r_timeMeta,
          r_time.isAcceptableOrUnknown(data['r_time'], _r_timeMeta));
    } else if (isInserting) {
      context.missing(_r_timeMeta);
    }
    if (data.containsKey('y_plug_setting')) {
      context.handle(
          _y_plugSettingMeta,
          y_plugSetting.isAcceptableOrUnknown(
              data['y_plug_setting'], _y_plugSettingMeta));
    } else if (isInserting) {
      context.missing(_y_plugSettingMeta);
    }
    if (data.containsKey('y_t_m_s')) {
      context.handle(
          _y_TMSMeta, y_TMS.isAcceptableOrUnknown(data['y_t_m_s'], _y_TMSMeta));
    } else if (isInserting) {
      context.missing(_y_TMSMeta);
    }
    if (data.containsKey('y_plug_setting_hi')) {
      context.handle(
          _y_plugSetting_HiMeta,
          y_plugSetting_Hi.isAcceptableOrUnknown(
              data['y_plug_setting_hi'], _y_plugSetting_HiMeta));
    } else if (isInserting) {
      context.missing(_y_plugSetting_HiMeta);
    }
    if (data.containsKey('y_time')) {
      context.handle(_y_timeMeta,
          y_time.isAcceptableOrUnknown(data['y_time'], _y_timeMeta));
    } else if (isInserting) {
      context.missing(_y_timeMeta);
    }
    if (data.containsKey('b_plug_setting')) {
      context.handle(
          _b_plugSettingMeta,
          b_plugSetting.isAcceptableOrUnknown(
              data['b_plug_setting'], _b_plugSettingMeta));
    } else if (isInserting) {
      context.missing(_b_plugSettingMeta);
    }
    if (data.containsKey('b_t_m_s')) {
      context.handle(
          _b_TMSMeta, b_TMS.isAcceptableOrUnknown(data['b_t_m_s'], _b_TMSMeta));
    } else if (isInserting) {
      context.missing(_b_TMSMeta);
    }
    if (data.containsKey('b_plug_setting_hi')) {
      context.handle(
          _b_plugSetting_HiMeta,
          b_plugSetting_Hi.isAcceptableOrUnknown(
              data['b_plug_setting_hi'], _b_plugSetting_HiMeta));
    } else if (isInserting) {
      context.missing(_b_plugSetting_HiMeta);
    }
    if (data.containsKey('b_time')) {
      context.handle(_b_timeMeta,
          b_time.isAcceptableOrUnknown(data['b_time'], _b_timeMeta));
    } else if (isInserting) {
      context.missing(_b_timeMeta);
    }
    if (data.containsKey('plug_setting_mul_2x')) {
      context.handle(
          _plugSettingMul_2xMeta,
          plugSettingMul_2x.isAcceptableOrUnknown(
              data['plug_setting_mul_2x'], _plugSettingMul_2xMeta));
    } else if (isInserting) {
      context.missing(_plugSettingMul_2xMeta);
    }
    if (data.containsKey('plug_setting_mul_5x')) {
      context.handle(
          _plugSettingMul_5xMeta,
          plugSettingMul_5x.isAcceptableOrUnknown(
              data['plug_setting_mul_5x'], _plugSettingMul_5xMeta));
    } else if (isInserting) {
      context.missing(_plugSettingMul_5xMeta);
    }
    if (data.containsKey('r_coil_resistanace')) {
      context.handle(
          _r_coilResistanaceMeta,
          r_coilResistanace.isAcceptableOrUnknown(
              data['r_coil_resistanace'], _r_coilResistanaceMeta));
    } else if (isInserting) {
      context.missing(_r_coilResistanaceMeta);
    }
    if (data.containsKey('y_coil_resistanace')) {
      context.handle(
          _y_coilResistanaceMeta,
          y_coilResistanace.isAcceptableOrUnknown(
              data['y_coil_resistanace'], _y_coilResistanaceMeta));
    } else if (isInserting) {
      context.missing(_y_coilResistanaceMeta);
    }
    if (data.containsKey('b_coil_resistanace')) {
      context.handle(
          _b_coilResistanaceMeta,
          b_coilResistanace.isAcceptableOrUnknown(
              data['b_coil_resistanace'], _b_coilResistanaceMeta));
    } else if (isInserting) {
      context.missing(_b_coilResistanaceMeta);
    }
    if (data.containsKey('r_pickup_current')) {
      context.handle(
          _r_pickupCurrentMeta,
          r_pickupCurrent.isAcceptableOrUnknown(
              data['r_pickup_current'], _r_pickupCurrentMeta));
    } else if (isInserting) {
      context.missing(_r_pickupCurrentMeta);
    }
    if (data.containsKey('y_pickup_current')) {
      context.handle(
          _y_pickupCurrentMeta,
          y_pickupCurrent.isAcceptableOrUnknown(
              data['y_pickup_current'], _y_pickupCurrentMeta));
    } else if (isInserting) {
      context.missing(_y_pickupCurrentMeta);
    }
    if (data.containsKey('b_pickup_current')) {
      context.handle(
          _b_pickupCurrentMeta,
          b_pickupCurrent.isAcceptableOrUnknown(
              data['b_pickup_current'], _b_pickupCurrentMeta));
    } else if (isInserting) {
      context.missing(_b_pickupCurrentMeta);
    }
    if (data.containsKey('r_relay_opr_time_2x')) {
      context.handle(
          _r_relayOprTime_2xMeta,
          r_relayOprTime_2x.isAcceptableOrUnknown(
              data['r_relay_opr_time_2x'], _r_relayOprTime_2xMeta));
    } else if (isInserting) {
      context.missing(_r_relayOprTime_2xMeta);
    }
    if (data.containsKey('r_relay_opr_time_5x')) {
      context.handle(
          _r_relayOprTime_5xMeta,
          r_relayOprTime_5x.isAcceptableOrUnknown(
              data['r_relay_opr_time_5x'], _r_relayOprTime_5xMeta));
    } else if (isInserting) {
      context.missing(_r_relayOprTime_5xMeta);
    }
    if (data.containsKey('r_relay_opr_time_hi')) {
      context.handle(
          _r_relayOprTime_HiMeta,
          r_relayOprTime_Hi.isAcceptableOrUnknown(
              data['r_relay_opr_time_hi'], _r_relayOprTime_HiMeta));
    } else if (isInserting) {
      context.missing(_r_relayOprTime_HiMeta);
    }
    if (data.containsKey('y_relay_opr_time_2x')) {
      context.handle(
          _y_relayOprTime_2xMeta,
          y_relayOprTime_2x.isAcceptableOrUnknown(
              data['y_relay_opr_time_2x'], _y_relayOprTime_2xMeta));
    } else if (isInserting) {
      context.missing(_y_relayOprTime_2xMeta);
    }
    if (data.containsKey('y_relay_opr_time_5x')) {
      context.handle(
          _y_relayOprTime_5xMeta,
          y_relayOprTime_5x.isAcceptableOrUnknown(
              data['y_relay_opr_time_5x'], _y_relayOprTime_5xMeta));
    } else if (isInserting) {
      context.missing(_y_relayOprTime_5xMeta);
    }
    if (data.containsKey('y_relay_opr_time_hi')) {
      context.handle(
          _y_relayOprTime_HiMeta,
          y_relayOprTime_Hi.isAcceptableOrUnknown(
              data['y_relay_opr_time_hi'], _y_relayOprTime_HiMeta));
    } else if (isInserting) {
      context.missing(_y_relayOprTime_HiMeta);
    }
    if (data.containsKey('b_relay_opr_time_2x')) {
      context.handle(
          _b_relayOprTime_2xMeta,
          b_relayOprTime_2x.isAcceptableOrUnknown(
              data['b_relay_opr_time_2x'], _b_relayOprTime_2xMeta));
    } else if (isInserting) {
      context.missing(_b_relayOprTime_2xMeta);
    }
    if (data.containsKey('b_relay_opr_time_5x')) {
      context.handle(
          _b_relayOprTime_5xMeta,
          b_relayOprTime_5x.isAcceptableOrUnknown(
              data['b_relay_opr_time_5x'], _b_relayOprTime_5xMeta));
    } else if (isInserting) {
      context.missing(_b_relayOprTime_5xMeta);
    }
    if (data.containsKey('b_relay_opr_time_hi')) {
      context.handle(
          _b_relayOprTime_HiMeta,
          b_relayOprTime_Hi.isAcceptableOrUnknown(
              data['b_relay_opr_time_hi'], _b_relayOprTime_HiMeta));
    } else if (isInserting) {
      context.missing(_b_relayOprTime_HiMeta);
    }
    if (data.containsKey('equipment_used')) {
      context.handle(
          _equipmentUsedMeta,
          equipmentUsed.isAcceptableOrUnknown(
              data['equipment_used'], _equipmentUsedMeta));
    } else if (isInserting) {
      context.missing(_equipmentUsedMeta);
    }
    if (data.containsKey('update_date')) {
      context.handle(
          _updateDateMeta,
          updateDate.isAcceptableOrUnknown(
              data['update_date'], _updateDateMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  OcEfrPacLocalData map(Map<String, dynamic> data, {String tablePrefix}) {
    return OcEfrPacLocalData.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $OcEfrPacLocalDatasourceImplTable createAlias(String alias) {
    return $OcEfrPacLocalDatasourceImplTable(attachedDatabase, alias);
  }
}

abstract class _$AppDatabase extends GeneratedDatabase {
  _$AppDatabase(QueryExecutor e) : super(SqlTypeSystem.defaultInstance, e);
  $TestReportLocalDatasourceImplTable _testReportLocalDatasourceImpl;
  $TestReportLocalDatasourceImplTable get testReportLocalDatasourceImpl =>
      _testReportLocalDatasourceImpl ??=
          $TestReportLocalDatasourceImplTable(this);
  $AcbLocalDatasourceImplTable _acbLocalDatasourceImpl;
  $AcbLocalDatasourceImplTable get acbLocalDatasourceImpl =>
      _acbLocalDatasourceImpl ??= $AcbLocalDatasourceImplTable(this);
  $AcbIrLocalDatasourceImplTable _acbIrLocalDatasourceImpl;
  $AcbIrLocalDatasourceImplTable get acbIrLocalDatasourceImpl =>
      _acbIrLocalDatasourceImpl ??= $AcbIrLocalDatasourceImplTable(this);
  $AcbCrmLocalDatasourceImplTable _acbCrmLocalDatasourceImpl;
  $AcbCrmLocalDatasourceImplTable get acbCrmLocalDatasourceImpl =>
      _acbCrmLocalDatasourceImpl ??= $AcbCrmLocalDatasourceImplTable(this);
  $AcbCRLocalDatasourceImplTable _acbCRLocalDatasourceImpl;
  $AcbCRLocalDatasourceImplTable get acbCRLocalDatasourceImpl =>
      _acbCRLocalDatasourceImpl ??= $AcbCRLocalDatasourceImplTable(this);
  $VcbTimingLocalDatasourceImplTable _vcbTimingLocalDatasourceImpl;
  $VcbTimingLocalDatasourceImplTable get vcbTimingLocalDatasourceImpl =>
      _vcbTimingLocalDatasourceImpl ??=
          $VcbTimingLocalDatasourceImplTable(this);
  $UserLocalDatasourceImplTable _userLocalDatasourceImpl;
  $UserLocalDatasourceImplTable get userLocalDatasourceImpl =>
      _userLocalDatasourceImpl ??= $UserLocalDatasourceImplTable(this);
  $InventorytocalDatasourceImplTable _inventorytocalDatasourceImpl;
  $InventorytocalDatasourceImplTable get inventorytocalDatasourceImpl =>
      _inventorytocalDatasourceImpl ??=
          $InventorytocalDatasourceImplTable(this);
  $EnergyMeterLocalDatasourceImplTable _energyMeterLocalDatasourceImpl;
  $EnergyMeterLocalDatasourceImplTable get energyMeterLocalDatasourceImpl =>
      _energyMeterLocalDatasourceImpl ??=
          $EnergyMeterLocalDatasourceImplTable(this);
  $EnergyMeterViLocalDatasourceImplTable _energyMeterViLocalDatasourceImpl;
  $EnergyMeterViLocalDatasourceImplTable get energyMeterViLocalDatasourceImpl =>
      _energyMeterViLocalDatasourceImpl ??=
          $EnergyMeterViLocalDatasourceImplTable(this);
  $EnergyMeterCiLocalDatasourceImplTable _energyMeterCiLocalDatasourceImpl;
  $EnergyMeterCiLocalDatasourceImplTable get energyMeterCiLocalDatasourceImpl =>
      _energyMeterCiLocalDatasourceImpl ??=
          $EnergyMeterCiLocalDatasourceImplTable(this);
  $EnergyMeterFiLocalDatasourceImplTable _energyMeterFiLocalDatasourceImpl;
  $EnergyMeterFiLocalDatasourceImplTable get energyMeterFiLocalDatasourceImpl =>
      _energyMeterFiLocalDatasourceImpl ??=
          $EnergyMeterFiLocalDatasourceImplTable(this);
  $EnergyMeterPfiLocalDatasourceImplTable _energyMeterPfiLocalDatasourceImpl;
  $EnergyMeterPfiLocalDatasourceImplTable
      get energyMeterPfiLocalDatasourceImpl =>
          _energyMeterPfiLocalDatasourceImpl ??=
              $EnergyMeterPfiLocalDatasourceImplTable(this);
  $EnergyMeterApLocalDatasourceImplTable _energyMeterApLocalDatasourceImpl;
  $EnergyMeterApLocalDatasourceImplTable get energyMeterApLocalDatasourceImpl =>
      _energyMeterApLocalDatasourceImpl ??=
          $EnergyMeterApLocalDatasourceImplTable(this);
  $EnergyMeterRpLocalDatasourceImplTable _energyMeterRpLocalDatasourceImpl;
  $EnergyMeterRpLocalDatasourceImplTable get energyMeterRpLocalDatasourceImpl =>
      _energyMeterRpLocalDatasourceImpl ??=
          $EnergyMeterRpLocalDatasourceImplTable(this);
  $EnergyMeterAprpLocalDatasourceImplTable _energyMeterAprpLocalDatasourceImpl;
  $EnergyMeterAprpLocalDatasourceImplTable
      get energyMeterAprpLocalDatasourceImpl =>
          _energyMeterAprpLocalDatasourceImpl ??=
              $EnergyMeterAprpLocalDatasourceImplTable(this);
  $CTLocalDatasourceImplTable _cTLocalDatasourceImpl;
  $CTLocalDatasourceImplTable get cTLocalDatasourceImpl =>
      _cTLocalDatasourceImpl ??= $CTLocalDatasourceImplTable(this);
  $CT_core_LocalDatasourceImplTable _cTCoreLocalDatasourceImpl;
  $CT_core_LocalDatasourceImplTable get cTCoreLocalDatasourceImpl =>
      _cTCoreLocalDatasourceImpl ??= $CT_core_LocalDatasourceImplTable(this);
  $CTcoreIRLocalDatasourceImplTable _cTcoreIRLocalDatasourceImpl;
  $CTcoreIRLocalDatasourceImplTable get cTcoreIRLocalDatasourceImpl =>
      _cTcoreIRLocalDatasourceImpl ??= $CTcoreIRLocalDatasourceImplTable(this);
  $CTcoreWRLocalDatasourceImplTable _cTcoreWRLocalDatasourceImpl;
  $CTcoreWRLocalDatasourceImplTable get cTcoreWRLocalDatasourceImpl =>
      _cTcoreWRLocalDatasourceImpl ??= $CTcoreWRLocalDatasourceImplTable(this);
  $CTcorePLocalDatasourceImplTable _cTcorePLocalDatasourceImpl;
  $CTcorePLocalDatasourceImplTable get cTcorePLocalDatasourceImpl =>
      _cTcorePLocalDatasourceImpl ??= $CTcorePLocalDatasourceImplTable(this);
  $CTcoreRLocalDatasourceImplTable _cTcoreRLocalDatasourceImpl;
  $CTcoreRLocalDatasourceImplTable get cTcoreRLocalDatasourceImpl =>
      _cTcoreRLocalDatasourceImpl ??= $CTcoreRLocalDatasourceImplTable(this);
  $CTcoreKVPLocalDatasourceImplTable _cTcoreKVPLocalDatasourceImpl;
  $CTcoreKVPLocalDatasourceImplTable get cTcoreKVPLocalDatasourceImpl =>
      _cTcoreKVPLocalDatasourceImpl ??=
          $CTcoreKVPLocalDatasourceImplTable(this);
  $CT_tap_LocalDatasourceImplTable _cTTapLocalDatasourceImpl;
  $CT_tap_LocalDatasourceImplTable get cTTapLocalDatasourceImpl =>
      _cTTapLocalDatasourceImpl ??= $CT_tap_LocalDatasourceImplTable(this);
  $PTLocalDatasourceImplTable _pTLocalDatasourceImpl;
  $PTLocalDatasourceImplTable get pTLocalDatasourceImpl =>
      _pTLocalDatasourceImpl ??= $PTLocalDatasourceImplTable(this);
  $PT_core_LocalDatasourceImplTable _pTCoreLocalDatasourceImpl;
  $PT_core_LocalDatasourceImplTable get pTCoreLocalDatasourceImpl =>
      _pTCoreLocalDatasourceImpl ??= $PT_core_LocalDatasourceImplTable(this);
  $PTcoreIRLocalDatasourceImplTable _pTcoreIRLocalDatasourceImpl;
  $PTcoreIRLocalDatasourceImplTable get pTcoreIRLocalDatasourceImpl =>
      _pTcoreIRLocalDatasourceImpl ??= $PTcoreIRLocalDatasourceImplTable(this);
  $PTcoreWRLocalDatasourceImplTable _pTcoreWRLocalDatasourceImpl;
  $PTcoreWRLocalDatasourceImplTable get pTcoreWRLocalDatasourceImpl =>
      _pTcoreWRLocalDatasourceImpl ??= $PTcoreWRLocalDatasourceImplTable(this);
  $PTcoreRLocalDatasourceImplTable _pTcoreRLocalDatasourceImpl;
  $PTcoreRLocalDatasourceImplTable get pTcoreRLocalDatasourceImpl =>
      _pTcoreRLocalDatasourceImpl ??= $PTcoreRLocalDatasourceImplTable(this);
  $ATLocalDatasourceImplTable _aTLocalDatasourceImpl;
  $ATLocalDatasourceImplTable get aTLocalDatasourceImpl =>
      _aTLocalDatasourceImpl ??= $ATLocalDatasourceImplTable(this);
  $ATcoreIRLocalDatasourceImplTable _aTcoreIRLocalDatasourceImpl;
  $ATcoreIRLocalDatasourceImplTable get aTcoreIRLocalDatasourceImpl =>
      _aTcoreIRLocalDatasourceImpl ??= $ATcoreIRLocalDatasourceImplTable(this);
  $ATwrHv_LocalDatasourceImplTable _aTwrHvLocalDatasourceImpl;
  $ATwrHv_LocalDatasourceImplTable get aTwrHvLocalDatasourceImpl =>
      _aTwrHvLocalDatasourceImpl ??= $ATwrHv_LocalDatasourceImplTable(this);
  $ATwrLv_LocalDatasourceImplTable _aTwrLvLocalDatasourceImpl;
  $ATwrLv_LocalDatasourceImplTable get aTwrLvLocalDatasourceImpl =>
      _aTwrLvLocalDatasourceImpl ??= $ATwrLv_LocalDatasourceImplTable(this);
  $AT_R_LocalDatasourceImplTable _aTRLocalDatasourceImpl;
  $AT_R_LocalDatasourceImplTable get aTRLocalDatasourceImpl =>
      _aTRLocalDatasourceImpl ??= $AT_R_LocalDatasourceImplTable(this);
  $AT_mc_LocalDatasourceImplTable _aTMcLocalDatasourceImpl;
  $AT_mc_LocalDatasourceImplTable get aTMcLocalDatasourceImpl =>
      _aTMcLocalDatasourceImpl ??= $AT_mc_LocalDatasourceImplTable(this);
  $AT_mb_LocalDatasourceImplTable _aTMbLocalDatasourceImpl;
  $AT_mb_LocalDatasourceImplTable get aTMbLocalDatasourceImpl =>
      _aTMbLocalDatasourceImpl ??= $AT_mb_LocalDatasourceImplTable(this);
  $PowtLocalDatasourceImplTable _powtLocalDatasourceImpl;
  $PowtLocalDatasourceImplTable get powtLocalDatasourceImpl =>
      _powtLocalDatasourceImpl ??= $PowtLocalDatasourceImplTable(this);
  $PowtcoreIRLocalDatasourceImplTable _powtcoreIRLocalDatasourceImpl;
  $PowtcoreIRLocalDatasourceImplTable get powtcoreIRLocalDatasourceImpl =>
      _powtcoreIRLocalDatasourceImpl ??=
          $PowtcoreIRLocalDatasourceImplTable(this);
  $PowttscLocalDatasourceImplTable _powttscLocalDatasourceImpl;
  $PowttscLocalDatasourceImplTable get powttscLocalDatasourceImpl =>
      _powttscLocalDatasourceImpl ??= $PowttscLocalDatasourceImplTable(this);
  $PowtwrHvLocalDatasourceImplTable _powtwrHvLocalDatasourceImpl;
  $PowtwrHvLocalDatasourceImplTable get powtwrHvLocalDatasourceImpl =>
      _powtwrHvLocalDatasourceImpl ??= $PowtwrHvLocalDatasourceImplTable(this);
  $PowtwrLvLocalDatasourceImplTable _powtwrLvLocalDatasourceImpl;
  $PowtwrLvLocalDatasourceImplTable get powtwrLvLocalDatasourceImpl =>
      _powtwrLvLocalDatasourceImpl ??= $PowtwrLvLocalDatasourceImplTable(this);
  $Powt_R_LocalDatasourceImplTable _powtRLocalDatasourceImpl;
  $Powt_R_LocalDatasourceImplTable get powtRLocalDatasourceImpl =>
      _powtRLocalDatasourceImpl ??= $Powt_R_LocalDatasourceImplTable(this);
  $Powt_mc_LocalDatasourceImplTable _powtMcLocalDatasourceImpl;
  $Powt_mc_LocalDatasourceImplTable get powtMcLocalDatasourceImpl =>
      _powtMcLocalDatasourceImpl ??= $Powt_mc_LocalDatasourceImplTable(this);
  $Powt_mb_LocalDatasourceImplTable _powtMbLocalDatasourceImpl;
  $Powt_mb_LocalDatasourceImplTable get powtMbLocalDatasourceImpl =>
      _powtMbLocalDatasourceImpl ??= $Powt_mb_LocalDatasourceImplTable(this);
  $PowtscLocalDatasourceImplTable _powtscLocalDatasourceImpl;
  $PowtscLocalDatasourceImplTable get powtscLocalDatasourceImpl =>
      _powtscLocalDatasourceImpl ??= $PowtscLocalDatasourceImplTable(this);
  $PowtbNamePlateLocalDatasourceImplTable _powtbNamePlateLocalDatasourceImpl;
  $PowtbNamePlateLocalDatasourceImplTable
      get powtbNamePlateLocalDatasourceImpl =>
          _powtbNamePlateLocalDatasourceImpl ??=
              $PowtbNamePlateLocalDatasourceImplTable(this);
  $PowttdLocalDatasourceImplTable _powttdLocalDatasourceImpl;
  $PowttdLocalDatasourceImplTable get powttdLocalDatasourceImpl =>
      _powttdLocalDatasourceImpl ??= $PowttdLocalDatasourceImplTable(this);
  $IsoLocalDatasourceImplTable _isoLocalDatasourceImpl;
  $IsoLocalDatasourceImplTable get isoLocalDatasourceImpl =>
      _isoLocalDatasourceImpl ??= $IsoLocalDatasourceImplTable(this);
  $IsoIrLocalDatasourceImplTable _isoIrLocalDatasourceImpl;
  $IsoIrLocalDatasourceImplTable get isoIrLocalDatasourceImpl =>
      _isoIrLocalDatasourceImpl ??= $IsoIrLocalDatasourceImplTable(this);
  $IsoCrLocalDatasourceImplTable _isoCrLocalDatasourceImpl;
  $IsoCrLocalDatasourceImplTable get isoCrLocalDatasourceImpl =>
      _isoCrLocalDatasourceImpl ??= $IsoCrLocalDatasourceImplTable(this);
  $LaLocalDatasourceImplTable _laLocalDatasourceImpl;
  $LaLocalDatasourceImplTable get laLocalDatasourceImpl =>
      _laLocalDatasourceImpl ??= $LaLocalDatasourceImplTable(this);
  $LaIrLocalDatasourceImplTable _laIrLocalDatasourceImpl;
  $LaIrLocalDatasourceImplTable get laIrLocalDatasourceImpl =>
      _laIrLocalDatasourceImpl ??= $LaIrLocalDatasourceImplTable(this);
  $ScLocalDatasourceImplTable _scLocalDatasourceImpl;
  $ScLocalDatasourceImplTable get scLocalDatasourceImpl =>
      _scLocalDatasourceImpl ??= $ScLocalDatasourceImplTable(this);
  $ScCLocalDatasourceImplTable _scCLocalDatasourceImpl;
  $ScCLocalDatasourceImplTable get scCLocalDatasourceImpl =>
      _scCLocalDatasourceImpl ??= $ScCLocalDatasourceImplTable(this);
  $PcLocalDatasourceImplTable _pcLocalDatasourceImpl;
  $PcLocalDatasourceImplTable get pcLocalDatasourceImpl =>
      _pcLocalDatasourceImpl ??= $PcLocalDatasourceImplTable(this);
  $PcIrLocalDatasourceImplTable _pcIrLocalDatasourceImpl;
  $PcIrLocalDatasourceImplTable get pcIrLocalDatasourceImpl =>
      _pcIrLocalDatasourceImpl ??= $PcIrLocalDatasourceImplTable(this);
  $PcHvLocalDatasourceImplTable _pcHvLocalDatasourceImpl;
  $PcHvLocalDatasourceImplTable get pcHvLocalDatasourceImpl =>
      _pcHvLocalDatasourceImpl ??= $PcHvLocalDatasourceImplTable(this);
  $EELocalDatasourceImplTable _eELocalDatasourceImpl;
  $EELocalDatasourceImplTable get eELocalDatasourceImpl =>
      _eELocalDatasourceImpl ??= $EELocalDatasourceImplTable(this);
  $EE_Loc_LocalDatasourceImplTable _eELocLocalDatasourceImpl;
  $EE_Loc_LocalDatasourceImplTable get eELocLocalDatasourceImpl =>
      _eELocLocalDatasourceImpl ??= $EE_Loc_LocalDatasourceImplTable(this);
  $EETestLocalDatasourceImplTable _eETestLocalDatasourceImpl;
  $EETestLocalDatasourceImplTable get eETestLocalDatasourceImpl =>
      _eETestLocalDatasourceImpl ??= $EETestLocalDatasourceImplTable(this);
  $EERTestLocalDatasourceImplTable _eERTestLocalDatasourceImpl;
  $EERTestLocalDatasourceImplTable get eERTestLocalDatasourceImpl =>
      _eERTestLocalDatasourceImpl ??= $EERTestLocalDatasourceImplTable(this);
  $BbLocalDatasourceImplTable _bbLocalDatasourceImpl;
  $BbLocalDatasourceImplTable get bbLocalDatasourceImpl =>
      _bbLocalDatasourceImpl ??= $BbLocalDatasourceImplTable(this);
  $BbIrLocalDatasourceImplTable _bbIrLocalDatasourceImpl;
  $BbIrLocalDatasourceImplTable get bbIrLocalDatasourceImpl =>
      _bbIrLocalDatasourceImpl ??= $BbIrLocalDatasourceImplTable(this);
  $BbHvLocalDatasourceImplTable _bbHvLocalDatasourceImpl;
  $BbHvLocalDatasourceImplTable get bbHvLocalDatasourceImpl =>
      _bbHvLocalDatasourceImpl ??= $BbHvLocalDatasourceImplTable(this);
  $BbCrLocalDatasourceImplTable _bbCrLocalDatasourceImpl;
  $BbCrLocalDatasourceImplTable get bbCrLocalDatasourceImpl =>
      _bbCrLocalDatasourceImpl ??= $BbCrLocalDatasourceImplTable(this);
  $Powt3WindingLocalDatasourceImplTable _powt3WindingLocalDatasourceImpl;
  $Powt3WindingLocalDatasourceImplTable get powt3WindingLocalDatasourceImpl =>
      _powt3WindingLocalDatasourceImpl ??=
          $Powt3WindingLocalDatasourceImplTable(this);
  $Powt3winIRLocalDatasourceImplTable _powt3winIRLocalDatasourceImpl;
  $Powt3winIRLocalDatasourceImplTable get powt3winIRLocalDatasourceImpl =>
      _powt3winIRLocalDatasourceImpl ??=
          $Powt3winIRLocalDatasourceImplTable(this);
  $Powt3wintscLocalDatasourceImplTable _powt3wintscLocalDatasourceImpl;
  $Powt3wintscLocalDatasourceImplTable get powt3wintscLocalDatasourceImpl =>
      _powt3wintscLocalDatasourceImpl ??=
          $Powt3wintscLocalDatasourceImplTable(this);
  $Powt3winwrHvLocalDatasourceImplTable _powt3winwrHvLocalDatasourceImpl;
  $Powt3winwrHvLocalDatasourceImplTable get powt3winwrHvLocalDatasourceImpl =>
      _powt3winwrHvLocalDatasourceImpl ??=
          $Powt3winwrHvLocalDatasourceImplTable(this);
  $Powt3winwrLvLocalDatasourceImplTable _powt3winwrLvLocalDatasourceImpl;
  $Powt3winwrLvLocalDatasourceImplTable get powt3winwrLvLocalDatasourceImpl =>
      _powt3winwrLvLocalDatasourceImpl ??=
          $Powt3winwrLvLocalDatasourceImplTable(this);
  $Powt3winwrIvTLocalDatasourceImplTable _powt3winwrIvTLocalDatasourceImpl;
  $Powt3winwrIvTLocalDatasourceImplTable get powt3winwrIvTLocalDatasourceImpl =>
      _powt3winwrIvTLocalDatasourceImpl ??=
          $Powt3winwrIvTLocalDatasourceImplTable(this);
  $Powt3win_R_LocalDatasourceImplTable _powt3winRLocalDatasourceImpl;
  $Powt3win_R_LocalDatasourceImplTable get powt3winRLocalDatasourceImpl =>
      _powt3winRLocalDatasourceImpl ??=
          $Powt3win_R_LocalDatasourceImplTable(this);
  $Powt3win_mcHv_LocalDatasourceImplTable _powt3winMcHvLocalDatasourceImpl;
  $Powt3win_mcHv_LocalDatasourceImplTable get powt3winMcHvLocalDatasourceImpl =>
      _powt3winMcHvLocalDatasourceImpl ??=
          $Powt3win_mcHv_LocalDatasourceImplTable(this);
  $Powt3win_mcLv_LocalDatasourceImplTable _powt3winMcLvLocalDatasourceImpl;
  $Powt3win_mcLv_LocalDatasourceImplTable get powt3winMcLvLocalDatasourceImpl =>
      _powt3winMcLvLocalDatasourceImpl ??=
          $Powt3win_mcLv_LocalDatasourceImplTable(this);
  $Powt3winmcIvTLocalDatasourceImplTable _powt3winmcIvTLocalDatasourceImpl;
  $Powt3winmcIvTLocalDatasourceImplTable get powt3winmcIvTLocalDatasourceImpl =>
      _powt3winmcIvTLocalDatasourceImpl ??=
          $Powt3winmcIvTLocalDatasourceImplTable(this);
  $Powt3win_mb_LocalDatasourceImplTable _powt3winMbLocalDatasourceImpl;
  $Powt3win_mb_LocalDatasourceImplTable get powt3winMbLocalDatasourceImpl =>
      _powt3winMbLocalDatasourceImpl ??=
          $Powt3win_mb_LocalDatasourceImplTable(this);
  $Powt3winschvlvLocalDatasourceImplTable _powt3winschvlvLocalDatasourceImpl;
  $Powt3winschvlvLocalDatasourceImplTable
      get powt3winschvlvLocalDatasourceImpl =>
          _powt3winschvlvLocalDatasourceImpl ??=
              $Powt3winschvlvLocalDatasourceImplTable(this);
  $Powt3winschvivtLocalDatasourceImplTable _powt3winschvivtLocalDatasourceImpl;
  $Powt3winschvivtLocalDatasourceImplTable
      get powt3winschvivtLocalDatasourceImpl =>
          _powt3winschvivtLocalDatasourceImpl ??=
              $Powt3winschvivtLocalDatasourceImplTable(this);
  $ItLocalDatasourceImplTable _itLocalDatasourceImpl;
  $ItLocalDatasourceImplTable get itLocalDatasourceImpl =>
      _itLocalDatasourceImpl ??= $ItLocalDatasourceImplTable(this);
  $ItIrLocalDatasourceImplTable _itIrLocalDatasourceImpl;
  $ItIrLocalDatasourceImplTable get itIrLocalDatasourceImpl =>
      _itIrLocalDatasourceImpl ??= $ItIrLocalDatasourceImplTable(this);
  $ItWrLocalDatasourceImplTable _itWrLocalDatasourceImpl;
  $ItWrLocalDatasourceImplTable get itWrLocalDatasourceImpl =>
      _itWrLocalDatasourceImpl ??= $ItWrLocalDatasourceImplTable(this);
  $ItRLocalDatasourceImplTable _itRLocalDatasourceImpl;
  $ItRLocalDatasourceImplTable get itRLocalDatasourceImpl =>
      _itRLocalDatasourceImpl ??= $ItRLocalDatasourceImplTable(this);
  $ItMcLocalDatasourceImplTable _itMcLocalDatasourceImpl;
  $ItMcLocalDatasourceImplTable get itMcLocalDatasourceImpl =>
      _itMcLocalDatasourceImpl ??= $ItMcLocalDatasourceImplTable(this);
  $ItMbLocalDatasourceImplTable _itMbLocalDatasourceImpl;
  $ItMbLocalDatasourceImplTable get itMbLocalDatasourceImpl =>
      _itMbLocalDatasourceImpl ??= $ItMbLocalDatasourceImplTable(this);
  $ItVgLocalDatasourceImplTable _itVgLocalDatasourceImpl;
  $ItVgLocalDatasourceImplTable get itVgLocalDatasourceImpl =>
      _itVgLocalDatasourceImpl ??= $ItVgLocalDatasourceImplTable(this);
  $FPrelayLocalDatasourceImplTable _fPrelayLocalDatasourceImpl;
  $FPrelayLocalDatasourceImplTable get fPrelayLocalDatasourceImpl =>
      _fPrelayLocalDatasourceImpl ??= $FPrelayLocalDatasourceImplTable(this);
  $FPRcurrentMgmtLocalDatasourceImplTable _fPRcurrentMgmtLocalDatasourceImpl;
  $FPRcurrentMgmtLocalDatasourceImplTable
      get fPRcurrentMgmtLocalDatasourceImpl =>
          _fPRcurrentMgmtLocalDatasourceImpl ??=
              $FPRcurrentMgmtLocalDatasourceImplTable(this);
  $FPRvoltageMgmtLocalDatasourceImplTable _fPRvoltageMgmtLocalDatasourceImpl;
  $FPRvoltageMgmtLocalDatasourceImplTable
      get fPRvoltageMgmtLocalDatasourceImpl =>
          _fPRvoltageMgmtLocalDatasourceImpl ??=
              $FPRvoltageMgmtLocalDatasourceImplTable(this);
  $FPRovercurrentLocalDatasourceImplTable _fPRovercurrentLocalDatasourceImpl;
  $FPRovercurrentLocalDatasourceImplTable
      get fPRovercurrentLocalDatasourceImpl =>
          _fPRovercurrentLocalDatasourceImpl ??=
              $FPRovercurrentLocalDatasourceImplTable(this);
  $FPRearthfaultLocalDatasourceImplTable _fPRearthfaultLocalDatasourceImpl;
  $FPRearthfaultLocalDatasourceImplTable get fPRearthfaultLocalDatasourceImpl =>
      _fPRearthfaultLocalDatasourceImpl ??=
          $FPRearthfaultLocalDatasourceImplTable(this);
  $FPRovervoltageLocalDatasourceImplTable _fPRovervoltageLocalDatasourceImpl;
  $FPRovervoltageLocalDatasourceImplTable
      get fPRovervoltageLocalDatasourceImpl =>
          _fPRovervoltageLocalDatasourceImpl ??=
              $FPRovervoltageLocalDatasourceImplTable(this);
  $FPRundervoltageLocalDatasourceImplTable _fPRundervoltageLocalDatasourceImpl;
  $FPRundervoltageLocalDatasourceImplTable
      get fPRundervoltageLocalDatasourceImpl =>
          _fPRundervoltageLocalDatasourceImpl ??=
              $FPRundervoltageLocalDatasourceImplTable(this);
  $FPRoverfreqLocalDatasourceImplTable _fPRoverfreqLocalDatasourceImpl;
  $FPRoverfreqLocalDatasourceImplTable get fPRoverfreqLocalDatasourceImpl =>
      _fPRoverfreqLocalDatasourceImpl ??=
          $FPRoverfreqLocalDatasourceImplTable(this);
  $FPRunderfreqLocalDatasourceImplTable _fPRunderfreqLocalDatasourceImpl;
  $FPRunderfreqLocalDatasourceImplTable get fPRunderfreqLocalDatasourceImpl =>
      _fPRunderfreqLocalDatasourceImpl ??=
          $FPRunderfreqLocalDatasourceImplTable(this);
  $ARLocalDatasourceImplTable _aRLocalDatasourceImpl;
  $ARLocalDatasourceImplTable get aRLocalDatasourceImpl =>
      _aRLocalDatasourceImpl ??= $ARLocalDatasourceImplTable(this);
  $ARpudoLocalDatasourceImplTable _aRpudoLocalDatasourceImpl;
  $ARpudoLocalDatasourceImplTable get aRpudoLocalDatasourceImpl =>
      _aRpudoLocalDatasourceImpl ??= $ARpudoLocalDatasourceImplTable(this);
  $DgLocalDatasourceImplTable _dgLocalDatasourceImpl;
  $DgLocalDatasourceImplTable get dgLocalDatasourceImpl =>
      _dgLocalDatasourceImpl ??= $DgLocalDatasourceImplTable(this);
  $DgIrLocalDatasourceImplTable _dgIrLocalDatasourceImpl;
  $DgIrLocalDatasourceImplTable get dgIrLocalDatasourceImpl =>
      _dgIrLocalDatasourceImpl ??= $DgIrLocalDatasourceImplTable(this);
  $DgWrLocalDatasourceImplTable _dgWrLocalDatasourceImpl;
  $DgWrLocalDatasourceImplTable get dgWrLocalDatasourceImpl =>
      _dgWrLocalDatasourceImpl ??= $DgWrLocalDatasourceImplTable(this);
  $TrLocalDatasourceImplTable _trLocalDatasourceImpl;
  $TrLocalDatasourceImplTable get trLocalDatasourceImpl =>
      _trLocalDatasourceImpl ??= $TrLocalDatasourceImplTable(this);
  $TrPacLocalDatasourceImplTable _trPacLocalDatasourceImpl;
  $TrPacLocalDatasourceImplTable get trPacLocalDatasourceImpl =>
      _trPacLocalDatasourceImpl ??= $TrPacLocalDatasourceImplTable(this);
  $VrLocalDatasourceImplTable _vrLocalDatasourceImpl;
  $VrLocalDatasourceImplTable get vrLocalDatasourceImpl =>
      _vrLocalDatasourceImpl ??= $VrLocalDatasourceImplTable(this);
  $VrPacLocalDatasourceImplTable _vrPacLocalDatasourceImpl;
  $VrPacLocalDatasourceImplTable get vrPacLocalDatasourceImpl =>
      _vrPacLocalDatasourceImpl ??= $VrPacLocalDatasourceImplTable(this);
  $EfElrLocalDatasourceImplTable _efElrLocalDatasourceImpl;
  $EfElrLocalDatasourceImplTable get efElrLocalDatasourceImpl =>
      _efElrLocalDatasourceImpl ??= $EfElrLocalDatasourceImplTable(this);
  $EfElrPacLocalDatasourceImplTable _efElrPacLocalDatasourceImpl;
  $EfElrPacLocalDatasourceImplTable get efElrPacLocalDatasourceImpl =>
      _efElrPacLocalDatasourceImpl ??= $EfElrPacLocalDatasourceImplTable(this);
  $OcEfrLocalDatasourceImplTable _ocEfrLocalDatasourceImpl;
  $OcEfrLocalDatasourceImplTable get ocEfrLocalDatasourceImpl =>
      _ocEfrLocalDatasourceImpl ??= $OcEfrLocalDatasourceImplTable(this);
  $OcEfrPacLocalDatasourceImplTable _ocEfrPacLocalDatasourceImpl;
  $OcEfrPacLocalDatasourceImplTable get ocEfrPacLocalDatasourceImpl =>
      _ocEfrPacLocalDatasourceImpl ??= $OcEfrPacLocalDatasourceImplTable(this);
  @override
  Iterable<TableInfo> get allTables => allSchemaEntities.whereType<TableInfo>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
        testReportLocalDatasourceImpl,
        acbLocalDatasourceImpl,
        acbIrLocalDatasourceImpl,
        acbCrmLocalDatasourceImpl,
        acbCRLocalDatasourceImpl,
        vcbTimingLocalDatasourceImpl,
        userLocalDatasourceImpl,
        inventorytocalDatasourceImpl,
        energyMeterLocalDatasourceImpl,
        energyMeterViLocalDatasourceImpl,
        energyMeterCiLocalDatasourceImpl,
        energyMeterFiLocalDatasourceImpl,
        energyMeterPfiLocalDatasourceImpl,
        energyMeterApLocalDatasourceImpl,
        energyMeterRpLocalDatasourceImpl,
        energyMeterAprpLocalDatasourceImpl,
        cTLocalDatasourceImpl,
        cTCoreLocalDatasourceImpl,
        cTcoreIRLocalDatasourceImpl,
        cTcoreWRLocalDatasourceImpl,
        cTcorePLocalDatasourceImpl,
        cTcoreRLocalDatasourceImpl,
        cTcoreKVPLocalDatasourceImpl,
        cTTapLocalDatasourceImpl,
        pTLocalDatasourceImpl,
        pTCoreLocalDatasourceImpl,
        pTcoreIRLocalDatasourceImpl,
        pTcoreWRLocalDatasourceImpl,
        pTcoreRLocalDatasourceImpl,
        aTLocalDatasourceImpl,
        aTcoreIRLocalDatasourceImpl,
        aTwrHvLocalDatasourceImpl,
        aTwrLvLocalDatasourceImpl,
        aTRLocalDatasourceImpl,
        aTMcLocalDatasourceImpl,
        aTMbLocalDatasourceImpl,
        powtLocalDatasourceImpl,
        powtcoreIRLocalDatasourceImpl,
        powttscLocalDatasourceImpl,
        powtwrHvLocalDatasourceImpl,
        powtwrLvLocalDatasourceImpl,
        powtRLocalDatasourceImpl,
        powtMcLocalDatasourceImpl,
        powtMbLocalDatasourceImpl,
        powtscLocalDatasourceImpl,
        powtbNamePlateLocalDatasourceImpl,
        powttdLocalDatasourceImpl,
        isoLocalDatasourceImpl,
        isoIrLocalDatasourceImpl,
        isoCrLocalDatasourceImpl,
        laLocalDatasourceImpl,
        laIrLocalDatasourceImpl,
        scLocalDatasourceImpl,
        scCLocalDatasourceImpl,
        pcLocalDatasourceImpl,
        pcIrLocalDatasourceImpl,
        pcHvLocalDatasourceImpl,
        eELocalDatasourceImpl,
        eELocLocalDatasourceImpl,
        eETestLocalDatasourceImpl,
        eERTestLocalDatasourceImpl,
        bbLocalDatasourceImpl,
        bbIrLocalDatasourceImpl,
        bbHvLocalDatasourceImpl,
        bbCrLocalDatasourceImpl,
        powt3WindingLocalDatasourceImpl,
        powt3winIRLocalDatasourceImpl,
        powt3wintscLocalDatasourceImpl,
        powt3winwrHvLocalDatasourceImpl,
        powt3winwrLvLocalDatasourceImpl,
        powt3winwrIvTLocalDatasourceImpl,
        powt3winRLocalDatasourceImpl,
        powt3winMcHvLocalDatasourceImpl,
        powt3winMcLvLocalDatasourceImpl,
        powt3winmcIvTLocalDatasourceImpl,
        powt3winMbLocalDatasourceImpl,
        powt3winschvlvLocalDatasourceImpl,
        powt3winschvivtLocalDatasourceImpl,
        itLocalDatasourceImpl,
        itIrLocalDatasourceImpl,
        itWrLocalDatasourceImpl,
        itRLocalDatasourceImpl,
        itMcLocalDatasourceImpl,
        itMbLocalDatasourceImpl,
        itVgLocalDatasourceImpl,
        fPrelayLocalDatasourceImpl,
        fPRcurrentMgmtLocalDatasourceImpl,
        fPRvoltageMgmtLocalDatasourceImpl,
        fPRovercurrentLocalDatasourceImpl,
        fPRearthfaultLocalDatasourceImpl,
        fPRovervoltageLocalDatasourceImpl,
        fPRundervoltageLocalDatasourceImpl,
        fPRoverfreqLocalDatasourceImpl,
        fPRunderfreqLocalDatasourceImpl,
        aRLocalDatasourceImpl,
        aRpudoLocalDatasourceImpl,
        dgLocalDatasourceImpl,
        dgIrLocalDatasourceImpl,
        dgWrLocalDatasourceImpl,
        trLocalDatasourceImpl,
        trPacLocalDatasourceImpl,
        vrLocalDatasourceImpl,
        vrPacLocalDatasourceImpl,
        efElrLocalDatasourceImpl,
        efElrPacLocalDatasourceImpl,
        ocEfrLocalDatasourceImpl,
        ocEfrPacLocalDatasourceImpl
      ];
}
