import '../../../../domain/entities/equipment/IT/it.dart';

class ItModel extends It {
  const ItModel({
    final int id,
    final int databaseID,
    final String etype,
    final int trNo,
    final String designation,
    final String location,
    final String serialNo,
    final String rating,
    final int ratedVoltage_HV,
    final int ratedVoltage_LV,
    final double ratedCurrent_HV,
    final double ratedCurrent_LV,
    final String vectorGroup,
    final double impedanceVoltage_HV_LV1,
    final double impedanceVoltage_HV_LV2,
    final double impedanceVoltage_HV_LV3,
    final double impedanceVoltage_HV_LV4,
    final double impedanceVoltage_LV_LV,
    final int frequency,
    final String typeOfCooling,
    final int noOfPhases,
    final String make,
    final int yom,
    final int noOfTaps,
    final int noOfNominalTaps,
    final int oilTemp,
    final int windingTemp,
    final int ambientTemp,
    final DateTime dateOfTesting,
    final DateTime updateDate,
    final String testedBy,
    final String verifiedBy,
    final String WitnessedBy,
  }) : super(
          id: id,
          databaseID: databaseID,
          etype: etype,
          trNo: trNo,
          designation: designation,
          location: location,
          serialNo: serialNo,
          rating: rating,
          ratedVoltage_HV: ratedVoltage_HV,
          ratedVoltage_LV: ratedVoltage_LV,
          ratedCurrent_HV: ratedCurrent_HV,
          ratedCurrent_LV: ratedCurrent_LV,
          vectorGroup: vectorGroup,
          impedanceVoltage_HV_LV1: impedanceVoltage_HV_LV1,
          impedanceVoltage_HV_LV2: impedanceVoltage_HV_LV2,
          impedanceVoltage_HV_LV3: impedanceVoltage_HV_LV3,
          impedanceVoltage_HV_LV4: impedanceVoltage_HV_LV4,
          impedanceVoltage_LV_LV: impedanceVoltage_LV_LV,
          frequency: frequency,
          typeOfCooling: typeOfCooling,
          noOfPhases: noOfPhases,
          make: make,
          yom: yom,
          noOfTaps: noOfTaps,
          noOfNominalTaps: noOfNominalTaps,
          oilTemp: oilTemp,
          windingTemp: windingTemp,
          ambientTemp: ambientTemp,
          dateOfTesting: dateOfTesting,
          updateDate: updateDate,
          testedBy: testedBy,
          verifiedBy: verifiedBy,
          WitnessedBy: WitnessedBy,
        );

  @override
  List<Object> get props => [
        id,
        databaseID,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        rating,
        ratedVoltage_HV,
        ratedVoltage_LV,
        ratedCurrent_HV,
        ratedCurrent_LV,
        vectorGroup,
        impedanceVoltage_HV_LV1,
        impedanceVoltage_HV_LV2,
        impedanceVoltage_HV_LV3,
        impedanceVoltage_HV_LV4,
        impedanceVoltage_LV_LV,
        frequency,
        typeOfCooling,
        noOfPhases,
        make,
        yom,
        noOfTaps,
        noOfNominalTaps,
        oilTemp,
        windingTemp,
        ambientTemp,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy,
      ];

  @override
  bool get stringify => true;

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'databaseID': databaseID,
      'etype': etype,
      'trNo': trNo,
      'designation': designation,
      'location': location,
      'serialNo': serialNo,
      'rating': rating,
      'ratedVoltage_HV': ratedVoltage_HV,
      'ratedVoltage_LV': ratedVoltage_LV,
      'ratedCurrent_HV': ratedCurrent_HV,
      'ratedCurrent_LV': ratedCurrent_LV,
      'vectorGroup': vectorGroup,
      'impedanceVoltage_HV_LV1': impedanceVoltage_HV_LV1,
      'impedanceVoltage_HV_LV2': impedanceVoltage_HV_LV2,
      'impedanceVoltage_HV_LV3': impedanceVoltage_HV_LV3,
      'impedanceVoltage_HV_LV4': impedanceVoltage_HV_LV4,
      'impedanceVoltage_LV_LV': impedanceVoltage_LV_LV,
      'frequency': frequency,
      'typeOfCooling': typeOfCooling,
      'noOfPhases': noOfPhases,
      'make': make,
      'yom': yom,
      'noOfTaps': noOfTaps,
      'onOfNominalTaps': noOfNominalTaps,
      'oilTemp': oilTemp,
      'windingTemp': windingTemp,
      'ambientTemp': ambientTemp,
      ' dateOfTesting': dateOfTesting,
      ' updateDate': updateDate,
      'testedBy': testedBy,
      'verifiedBy': verifiedBy,
      'WitnessedBy': WitnessedBy,
    };
  }

  factory ItModel.fromJson(Map<String, dynamic> json) {
    return ItModel(
      id: json['id'],
      databaseID: json['databaseID'],
      etype: json['etype'],
      trNo: json['trNo'],
      designation: json['designation'],
      location: json['location'],
      serialNo: json['serialNo'],
      rating: json['rating'],
      ratedVoltage_HV: json['ratedVoltage_HV'],
      ratedVoltage_LV: json['ratedVoltage_LV'],
      ratedCurrent_HV: json['ratedCurrent_HV'],
      ratedCurrent_LV: json['ratedCurrent_LV'],
      vectorGroup: json['vectorGroup'],
      impedanceVoltage_HV_LV1: json['impedanceVoltage_HV_LV1'],
      impedanceVoltage_HV_LV2: json['impedanceVoltage_HV_LV2'],
      impedanceVoltage_HV_LV3: json['impedanceVoltage_HV_LV3'],
      impedanceVoltage_HV_LV4: json['impedanceVoltage_HV_LV4'],
      impedanceVoltage_LV_LV: json['impedanceVoltage_LV_LV'],
      frequency: json['frequency'],
      typeOfCooling: json['typeOfCooling'],
      noOfPhases: json['noOfPhases'],
      make: json['make'],
      yom: json['yom'],
      noOfTaps: json['noOfTaps'],
      noOfNominalTaps: json['onOfNominalTaps'],
      oilTemp: json['oilTemp'],
      windingTemp: json['windingTemp'],
      ambientTemp: json['ambientTemp'],
      dateOfTesting: json[' dateOfTesting'],
      updateDate: json[' updateDate'],
      testedBy: json['testedBy'],
      verifiedBy: json['verifiedBy'],
      WitnessedBy: json['WitnessedBy'],
    );
  }
}
