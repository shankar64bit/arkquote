import '../../../../domain/entities/equipment/powt_3_winding/powt_3_winding.dart';

class Powt3WindingModel extends Powt3Winding {
  const Powt3WindingModel({
    final int id,
    final int databaseID,
    final String etype,
    final int trNo,
    final String designation,
    final String location,
    final String serialNo,
    final String rating,
    final int ratedVoltage_HV,
    final int ratedVoltage_LV,
    final int ratedVoltage_TS,
    final String ratedCurrent_TS,
    final String ratedCurrent_HV,
    final String ratedCurrent_LV,
    final String vectorGroup,
    final double impedanceVoltageLTap,
    final double impedanceVoltageRTap,
    final double impedanceVoltageHTap,
    final int frequency,
    final String typeOfCooling,
    final int noOfPhases,
    final String make,
    final int yom,
    final int noOfTaps,
    final int onOfNominalTaps,
    final int oilTemp,
    final int windingTemp,
    final int ambientTemp,
    final DateTime dateOfTesting,
    final DateTime updateDate,
    final String testedBy,
    final String verifiedBy,
    final String WitnessedBy,
  }) : super(
          id: id,
          databaseID: databaseID,
          etype: etype,
          trNo: trNo,
          designation: designation,
          location: location,
          serialNo: serialNo,
          rating: rating,
          ratedVoltage_HV: ratedVoltage_HV,
          ratedVoltage_LV: ratedVoltage_LV,
          ratedCurrent_HV: ratedCurrent_HV,
          ratedCurrent_LV: ratedCurrent_LV,
          vectorGroup: vectorGroup,
          impedanceVoltageLTap: impedanceVoltageLTap,
          impedanceVoltageRTap: impedanceVoltageRTap,
          impedanceVoltageHTap: impedanceVoltageHTap,
          frequency: frequency,
          typeOfCooling: typeOfCooling,
          noOfPhases: noOfPhases,
          make: make,
          yom: yom,
          noOfTaps: noOfTaps,
          onOfNominalTaps: onOfNominalTaps,
          oilTemp: oilTemp,
          windingTemp: windingTemp,
          ambientTemp: ambientTemp,
          dateOfTesting: dateOfTesting,
          updateDate: updateDate,
          testedBy: testedBy,
          verifiedBy: verifiedBy,
          WitnessedBy: WitnessedBy,
          ratedVoltage_TS: ratedVoltage_TS,
          ratedCurrent_TS: ratedCurrent_TS,
        );

  @override
  List<Object> get props => [
        id,
        databaseID,
        etype,
        trNo,
        designation,
        location,
        serialNo,
        rating,
        ratedVoltage_HV,
        ratedVoltage_LV,
        ratedCurrent_HV,
        ratedCurrent_LV,
        vectorGroup,
        impedanceVoltageLTap,
        impedanceVoltageRTap,
        impedanceVoltageHTap,
        frequency,
        typeOfCooling,
        noOfPhases,
        make,
        yom,
        noOfTaps,
        onOfNominalTaps,
        oilTemp,
        windingTemp,
        ambientTemp,
        dateOfTesting,
        updateDate,
        testedBy,
        verifiedBy,
        WitnessedBy,
        ratedVoltage_TS,
        ratedCurrent_TS,
      ];

  @override
  bool get stringify => true;

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'databaseID': databaseID,
      'etype': etype,
      'trNo': trNo,
      'designation': designation,
      'location': location,
      'serialNo': serialNo,
      'rating': rating,
      'ratedVoltage_HV': ratedVoltage_HV,
      'ratedVoltage_LV': ratedVoltage_LV,
      'ratedCurrent_HV': ratedCurrent_HV,
      'ratedCurrent_LV': ratedCurrent_LV,
      'vectorGroup': vectorGroup,
      'impedanceVoltageLTap': impedanceVoltageLTap,
      'impedanceVoltageRTap': impedanceVoltageRTap,
      'impedanceVoltageHTap': impedanceVoltageHTap,
      'frequency': frequency,
      'typeOfCooling': typeOfCooling,
      'noOfPhases': noOfPhases,
      'make': make,
      'yom': yom,
      'ratedVoltage_TS': ratedVoltage_TS,
      'ratedCurrent_TS': ratedCurrent_TS,
      'noOfTaps': noOfTaps,
      'onOfNominalTaps': onOfNominalTaps,
      'oilTemp': oilTemp,
      'windingTemp': windingTemp,
      'ambientTemp': ambientTemp,
      ' dateOfTesting': dateOfTesting,
      ' updateDate': updateDate,
      'testedBy': testedBy,
      'verifiedBy': verifiedBy,
      'WitnessedBy': WitnessedBy,
    };
  }

  factory Powt3WindingModel.fromJson(Map<String, dynamic> json) {
    return Powt3WindingModel(
      id: json['id'],
      databaseID: json['databaseID'],
      etype: json['etype'],
      trNo: json['trNo'],
      designation: json['designation'],
      location: json['location'],
      serialNo: json['serialNo'],
      rating: json['rating'],
      ratedVoltage_HV: json['ratedVoltage_HV'],
      ratedVoltage_LV: json['ratedVoltage_LV'],
      ratedCurrent_HV: json['ratedCurrent_HV'],
      ratedCurrent_LV: json['ratedCurrent_LV'],
      vectorGroup: json['vectorGroup'],
      impedanceVoltageLTap: json['impedanceVoltageLTap'],
      impedanceVoltageRTap: json['impedanceVoltageRTap'],
      impedanceVoltageHTap: json['impedanceVoltageHTap'],
      frequency: json['frequency'],
      typeOfCooling: json['typeOfCooling'],
      noOfPhases: json['noOfPhases'],
      make: json['make'],
      ratedVoltage_TS: json['ratedVoltage_TS'],
      ratedCurrent_TS: json['ratedCurrent_TS'],
      yom: json['yom'],
      noOfTaps: json['noOfTaps'],
      onOfNominalTaps: json['onOfNominalTaps'],
      oilTemp: json['oilTemp'],
      windingTemp: json['windingTemp'],
      ambientTemp: json['ambientTemp'],
      dateOfTesting: json[' dateOfTesting'],
      updateDate: json[' updateDate'],
      testedBy: json['testedBy'],
      verifiedBy: json['verifiedBy'],
      WitnessedBy: json['WitnessedBy'],
    );
  }
}
